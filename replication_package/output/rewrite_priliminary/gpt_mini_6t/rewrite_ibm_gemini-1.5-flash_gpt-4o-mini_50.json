[
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "import sys\n#from me.io import dup_file_stdin\n\n#@dup_file_stdin\ndef solve():\n    m=[]\n    for line in sys.stdin:\n        m.append(int(line))\n    m.sort(reverse=True)\n    for h in m[0:3]:\n        print(h)\nsolve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def main():\n    for a in range(1,10):\n        for b in range(1,10):\n            print(\"{}x{}={}\".format(a,b,a*b))\n    return None\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a} x {b} = {a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a} x {b} = {a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a} x {b} = {a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a} x {b} = {a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")",
        "writer": "machine",
        "rewrite": [
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} x {j} = {i * j}\")",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def generate_multiplication_table():\n    table = []\n    for i in range(1, 10):\n        row = []\n        for j in range(1, 10):\n            row.append(f\"{i}x{j}={i*j}\")\n        table.append(row)\n    return table"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_hills():\n  heights = []\n  for i in range(10):\n    height = int(input())\n    heights.append(height)\n  heights.sort(reverse=True)\n  print(heights[0])\n  print(heights[1])\n  print(heights[2])",
        "writer": "machine",
        "rewrite": [
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    for height in sorted(heights, reverse=True)[:3]:\n        print(height)",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(*heights[:3], sep='\\n')"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")",
        "writer": "machine",
        "rewrite": [
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def multiplication_table(n=9):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            print(f\"{i}x{j}={i*j}\")\n\nmultiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        print(\" \".join([f\"{i}x{j}={i*j}\" for j in range(1, 10)]))",
            "def multiplication_table():\n    results = []\n    for i in range(1, 10):\n        row = []\n        for j in range(1, 10):\n            row.append(f\"{i}x{j}={i*j}\")\n        results.append(row)\n    return results"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_hills():\n  heights = []\n  for i in range(10):\n    height = int(input())\n    heights.append(height)\n  heights.sort(reverse=True)\n  print(heights[0])\n  print(heights[1])\n  print(heights[2])",
        "writer": "machine",
        "rewrite": [
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(heights[:3])",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    for height in sorted(heights, reverse=True)[:3]:\n        print(height)",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    print(*heights[:3], sep=\"\\n\")",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    for height in sorted(heights, reverse=True)[:3]:\n        print(height)",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    for i in range(3):\n        print(heights[i])",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    heights.sort(reverse=True)\n    for i in range(3):\n        print(heights[i])"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = []\n\tfor i in range(10):\n\t\tmountains.append(int(input()))\n\t\n\tmountains = sorted(mountains, reverse = True)\n\n\tfor i in range(3):\n\t\tprint(mountains[i])\n\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = sorted(int(input()) for _ in range(10)), reverse=True)[:3]\n    print(*mountains)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = [int(input()) for _ in range(10)]\n\tmountains.sort(reverse=True)\n\tprint(*mountains[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "def digit_number(a, b):\n  return len(str(a + b))",
        "writer": "machine",
        "rewrite": [
            "def digit_number(a, b):\n    return len(str(a + b))",
            "def digit_number(a, b):\n    return len(str(a + b))",
            "def digit_number(a, b):\n    return len(str(a + b))",
            "def digit_number(a, b):\n    return len(str(a + b))",
            "def digit_number(a, b):\n    return len(str(a + b))",
            "def digit_number(a, b):\n    return len(str(a + b))"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def __main():\n    x = 1;\n    while x <= 9 :\n        y = 1;\n        while y <= 9 :\n             z = x * y;\n             print(str(x) + \"x\" + str(y)  + \"=\" + str(z) )\n             y = y + 1\n        x = x + 1\n        \n        \n__main()\n\n",
        "writer": "human",
        "rewrite": [
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x} x {y} = {z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x} x {y} = {z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n            \nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x} x {y} = {z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()"
        ]
    },
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef main():\n    \"\"\" ????????? \"\"\"\n    istr = sys.stdin.read()\n    wi = istr.splitlines()\n    for i in wi:\n        a = list(map(int,i.split()))\n        b = str(a[0] + a[1])\n        print(len(b))\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    data = sys.stdin.read().splitlines()\n    for line in data:\n        numbers = list(map(int, line.split()))\n        total = str(sum(numbers))\n        print(len(total))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_lines = sys.stdin.read().splitlines()\n    for line in input_lines:\n        numbers = list(map(int, line.split()))\n        result_length = len(str(numbers[0] + numbers[1]))\n        print(result_length)\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        total = sum(numbers)\n        print(len(str(total)))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        result = str(numbers[0] + numbers[1])\n        print(len(result))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read().splitlines()\n    for line in input_data:\n        numbers = list(map(int, line.split()))\n        result_sum = str(sum(numbers))\n        print(len(result_sum))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        total = str(sum(numbers))\n        print(len(total))\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n\n        c = a + b\n\n        if c == 0:\n            print(1)\n        else:\n            ans = 0\n\n            while c > 0:\n                ans += 1\n                c //= 10\n\n            print(ans)\n\nif __name__ == '__main__':\n    solve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(c)))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "def digit_number():\n  while True:\n    try:\n      a, b = map(int, input().split())\n      print(len(str(a + b)))\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def digit_number():\n    import sys\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))",
            "def count_digits_sum():\n    while True:\n        try:\n            a, b = map(int, input().split())\n            print(len(str(a + b)))\n        except EOFError:\n            break",
            "def digit_number():\n    import sys\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle(a, b, c):\n  \"\"\"Checks if a triangle with sides a, b, and c is a right triangle.\"\"\"\n  sides = sorted([a, b, c])\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n  \"\"\"Main function to read input and determine if triangles are right triangles.\"\"\"\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    if is_right_triangle(a, b, c):\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nif __name__ == \"__main__\":\n  main()",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2\n\ndef main():\n    n = int(input())\n    results = []\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        results.append(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    results = []\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        results.append(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    return sorted([a, b, c])[2]**2 == sorted([a, b, c])[:2][0]**2 + sorted([a, b, c])[:2][1]**2\n\ndef main():\n    for _ in range(int(input())):\n        print(\"YES\" if is_right_triangle(*map(int, input().split())) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    return sorted([a, b, c])[2]**2 == sorted([a, b, c])[0]**2 + sorted([a, b, c])[1]**2\n\ndef main():\n    for _ in range(int(input())):\n        print(\"YES\" if is_right_triangle(*map(int, input().split())) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    return sorted([a, b, c])[2]**2 == sum(side**2 for side in sorted([a, b, c])[:2])\n\ndef main():\n    for _ in range(int(input())):\n        print(\"YES\" if is_right_triangle(*map(int, input().split())) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2\n\ndef main():\n    n = int(input())\n    results = []\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        results.append(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle(a, b, c):\n  \"\"\"\n  Checks if three sides form a right triangle.\n\n  Args:\n    a: Length of the first side.\n    b: Length of the second side.\n    c: Length of the third side.\n\n  Returns:\n    True if the sides form a right triangle, False otherwise.\n  \"\"\"\n  sides = sorted([a, b, c])\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n  \"\"\"\n  Reads input and determines if each set of sides forms a right triangle.\n  \"\"\"\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    if is_right_triangle(a, b, c):\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nif __name__ == \"__main__\":\n  main()",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    results = [\"YES\" if is_right_triangle(*map(int, input().split())) else \"NO\" for _ in range(n)]\n    print(\"\\n\".join(results))\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def triangle(dataset):\n    a, b, c = dataset\n    if a*a + b*b == c*c:\n        return 1\n    return 0\n\nN = int(input())\nfor _ in range(N):\n    dataset = sorted(map(int, input().split()))\n    flag = triangle(dataset)\n    print([\"NO\", \"YES\"][flag])\n",
        "writer": "human",
        "rewrite": [
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print([\"NO\", \"YES\"][result])",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return int(x * x + y * y == z * z)\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x*x + y*y == z*z else 0\n\nN = int(input())\nfor _ in range(N):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print([\"NO\", \"YES\"][result])",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print([\"NO\", \"YES\"][result])",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print([\"NO\", \"YES\"][result])",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return int(x * x + y * y == z * z)\n\ntest_cases = int(input())\nfor _ in range(test_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "def solve_simultaneous_equations():\n  while True:\n    try:\n      a, b, c, d, e, f = map(float, input().split())\n      x = ((c * e) - (b * f)) / ((a * e) - (b * d))\n      y = ((a * f) - (c * d)) / ((a * e) - (b * d))\n      print(\"{:.3f} {:.3f}\".format(x, y))\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def solve_simultaneous_equations():\n    import sys\n    for line in sys.stdin:\n        try:\n            a, b, c, d, e, f = map(float, line.split())\n            x = ((c * e) - (b * f)) / ((a * e) - (b * d))\n            y = ((a * f) - (c * d)) / ((a * e) - (b * d))\n            print(\"{:.3f} {:.3f}\".format(x, y))\n        except (ValueError, ZeroDivisionError):\n            continue",
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = (a * e) - (b * d)\n            if denominator == 0:\n                print(\"No solution\")\n                continue\n            x = ((c * e) - (b * f)) / denominator\n            y = ((a * f) - (c * d)) / denominator\n            print(\"{:.3f} {:.3f}\".format(x, y))\n        except EOFError:\n            break",
            "def solve_simultaneous_equations():\n    import sys\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        x = ((c * e) - (b * f)) / ((a * e) - (b * d))\n        y = ((a * f) - (c * d)) / ((a * e) - (b * d))\n        print(\"{:.3f} {:.3f}\".format(x, y))",
            "def solve_simultaneous_equations():\n    import sys\n    for line in sys.stdin:\n        try:\n            a, b, c, d, e, f = map(float, line.split())\n            x = (c * e - b * f) / (a * e - b * d)\n            y = (a * f - c * d) / (a * e - b * d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"No unique solution\")",
            "def solve_simultaneous_equations():\n    import sys\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        x = ((c * e) - (b * f)) / ((a * e) - (b * d))\n        y = ((a * f) - (c * d)) / ((a * e) - (b * d))\n        print(\"{:.3f} {:.3f}\".format(x, y))",
            "def solve_simultaneous_equations():\n    import sys\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        x = ((c * e) - (b * f)) / ((a * e) - (b * d))\n        y = ((a * f) - (c * d)) / ((a * e) - (b * d))\n        print(\"{:.3f} {:.3f}\".format(x, y))"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd_lcm(a, b):\n  \"\"\"\n  Calculates the greatest common divisor (GCD) and the least common multiple (LCM) of two integers.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    A tuple containing the GCD and LCM of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  gcd = a\n  lcm = (a * b) // gcd\n  return gcd, lcm",
        "writer": "machine",
        "rewrite": [
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a - gcd)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (gcd if b == 0 else b)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a // gcd)) // (b if b != 0 else 1)\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a - gcd)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    while b:\n        a, b = b, a % b\n    gcd = a\n    lcm = (a * (b + (a % b))) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a - gcd)) // gcd\n    return gcd, lcm"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\ndef gcd(a, b):\n    for i in range(1, a+1):\n        if a % i == 0:\n            t = a // i\n            if b % t == 0:\n                return t\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom math import gcd\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    print(gcd(a, b), lcm(a, b))",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a * (b // gcdab))",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a * b // gcdab)",
            "import sys\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, lcm(a, b))"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "def solve_simultaneous_equation():\n  while True:\n    try:\n      a, b, c, d, e, f = map(float, input().split())\n      x = (c * e - b * f) / (a * e - b * d)\n      y = (a * f - c * d) / (a * e - b * d)\n      print(f\"{x:.3f} {y:.3f}\")\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def solve_simultaneous_equation():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = a * e - b * d\n            if denominator == 0:\n                print(\"No unique solution\")\n                continue\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break",
            "def solve_simultaneous_equation():\n    import sys\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        x = (c * e - b * f) / (a * e - b * d)\n        y = (a * f - c * d) / (a * e - b * d)\n        print(f\"{x:.3f} {y:.3f}\")",
            "def solve_simultaneous_equation():\n    import sys\n    for line in sys.stdin:\n        try:\n            a, b, c, d, e, f = map(float, line.split())\n            x = (c * e - b * f) / (a * e - b * d)\n            y = (a * f - c * d) / (a * e - b * d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ValueError:\n            continue",
            "def solve_simultaneous_equation():\n    import sys\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        x = (c * e - b * f) / (a * e - b * d)\n        y = (a * f - c * d) / (a * e - b * d)\n        print(f\"{x:.3f} {y:.3f}\")",
            "def solve_simultaneous_equation():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = a * e - b * d\n            if denominator == 0:\n                print(\"No unique solution\")\n                continue\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break",
            "def solve_simultaneous_equation():\n    import sys\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        x = (c * e - b * f) / (a * e - b * d)\n        y = (a * f - c * d) / (a * e - b * d)\n        print(f\"{x:.3f} {y:.3f}\")"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "# ????????\u00a3???????\u00a8????????\u00a7\u00a3???????????\u00b0??????\n# ax + by = c\n# dx + ey = f\nimport sys\n\ndef inverse(a, b, d, e):\n    deta = a * e - b * d\n    return (deta, e, -b, -d, a)\n\nwhile True:\n    data = sys.stdin.readline()\n    if data is None or data.strip() == '':\n        break\n    data = data.strip().split(' ')\n    a, b, c, d, e, f = [float(i) for i in data]\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0] + 0\n    y = (inv[3] * c + inv[4] * f) / inv[0] + 0\n\n    print('%.3f %.3f' % (x, y))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef calculate_solution(a, b, d, e, c, f):\n    determinant = a * e - b * d\n    x = (e * c - b * f) / determinant\n    y = (-d * c + a * f) / determinant\n    return x, y\n\nwhile True:\n    data = sys.stdin.readline()\n    if not data.strip():\n        break\n    a, b, c, d, e, f = map(float, data.strip().split())\n    x, y = calculate_solution(a, b, d, e, c, f)\n    print('%.3f %.3f' % (x, y))",
            "import sys\n\ndef inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line.strip():\n        break\n    a, b, c, d, e, f = map(float, line.strip().split())\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0]\n    y = (inv[3] * c + inv[4] * f) / inv[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\nwhile True:\n    data = sys.stdin.readline()\n    if not data.strip():\n        break\n    a, b, c, d, e, f = map(float, data.strip().split())\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0]\n    y = (inv[3] * c + inv[4] * f) / inv[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\ndef main():\n    for line in sys.stdin:\n        values = line.strip().split()\n        if not values:\n            break\n        a, b, c, d, e, f = map(float, values)\n\n        inv = calculate_inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if not line.strip():\n            break\n        a, b, c, d, e, f = map(float, line.strip().split())\n\n        inv = calculate_inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line.strip():\n        break\n    a, b, c, d, e, f = map(float, line.strip().split())\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0]\n    y = (inv[3] * c + inv[4] * f) / inv[0]\n\n    print(f'{x:.3f} {y:.3f}')"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import math\ndef saidai(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n\n    return saidai(x, y % x)\n\ndef saisyo(x, y):\n    spam = saidai(x, y)\n    return spam * (x / spam) * (y / spam)\n\n# a,b,c,d,e,f  = list(map(int,'1 2 3 4 5 6'.split()))\ntry:\n    while 1:\n\n        a,b,c,d,e,f  = list(map(int,input().split()))\n        s = saidai(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1*c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b*y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        s = gcd(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        s = gcd(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        gcd_value = gcd(a, d)\n        \n        k1 = d / gcd_value * -1\n        k2 = a / gcd_value\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    g = gcd(x, y)\n    return g * (x // g) * (y // g)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        s = gcd(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    g = gcd(x, y)\n    return g * (x // g) * (y // g)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        \n        k1 = d / g * -1\n        k2 = a / g\n        \n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        s = gcd(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd(a, b) :\n    if a % b == 0 :\n        return b\n    else :\n        return gcd(b, a % b)\n\nwhile True :\n    try :\n        a, b = map(int, input().split())\n    except EOFError :\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)\n",
        "writer": "human",
        "rewrite": [
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n\n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n\n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def rev(str):\n    revstr=''\n    for i in range(len(str)-1,-1,-1):\n        revstr=revstr + str[i]\n    return revstr\nstr=input(\"\")\nprint(rev(str))",
        "writer": "human",
        "rewrite": [
            "def reverse_string(s):\n    return s[::-1]\n\ns = input(\"\")\nprint(reverse_string(s))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\ns = input(\"\")\nprint(reverse_string(s))",
            "def reverse_string(s):\n    return s[::-1]\n\ninput_string = input(\"\")\nprint(reverse_string(input_string))",
            "def reverse_string(input_string):\n    return input_string[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "# coding:utf-8\n\ndef main():\n    N = int(input().rstrip())\n\n    for i in range(N):\n        ls = list(map(int, input().split(' ')))\n        ls.sort()\n\n        if(ls[0]**2 + ls[1]**2 == ls[2]**2):\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    N = int(input().strip())\n    \n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        \n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        sides = list(map(int, input().split()))\n        sides.sort()\n\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        sides = list(map(int, input().split()))\n        sides.sort()\n\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n        \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        sides = list(map(int, input().split()))\n        sides.sort()\n\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n    \n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        \n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == \"__main__\":\n    main()",
            "# coding:utf-8\n\ndef main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n            \nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd_lcm(a, b):\n  \"\"\"Computes the greatest common divisor (GCD) and the least common multiple (LCM) of two integers.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    A tuple containing the GCD and LCM of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  gcd = a\n  lcm = (a * b) // gcd\n  return gcd, lcm",
        "writer": "machine",
        "rewrite": [
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (gcd if b == 0 else b)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a - gcd)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a - gcd)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (gcd + b)) // gcd\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a // gcd)) // (b // gcd) if gcd else 0\n    return gcd, lcm",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        gcd, b = b, gcd % b\n    lcm = (a * (a - gcd)) // gcd\n    return gcd, lcm"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def main():\n    str = input()\n    str = str[::-1]\n    print(str)\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    text = input()\n    reversed_text = text[::-1]\n    print(reversed_text)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(str):\n  return str[::-1]",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    return ''.join(reversed(s))"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(str):\n  return str[::-1]",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(string):\n    return ''.join(reversed(string))",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(input_string):\n    return ''.join(reversed(input_string))",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(string):\n    return ''.join(reversed(string))",
            "def reverse_string(s):\n    return ''.join(reversed(s))"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt *= 1.05\n    debt = ((debt // 1000) + 1) * 1000\n  return debt",
        "writer": "machine",
        "rewrite": [
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = round(debt, -3)\n    return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = round(debt / 1000) * 1000\n    return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = round(debt / 1000) * 1000\n    return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = round(debt / 1000) * 1000\n    return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = -(-debt // 1000) * 1000\n    return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = round(debt / 1000) * 1000\n    return debt"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt = debt * 1.05\n    debt = (debt // 1000 + 1) * 1000\n  return debt",
        "writer": "machine",
        "rewrite": [
            "def calculate_debt(n):\n    initial_debt = 100000\n    for _ in range(n):\n        initial_debt *= 1.05\n        initial_debt = (initial_debt // 1000 + 1) * 1000\n    return initial_debt",
            "def calculate_debt(n):\n    initial_debt = 100000\n    for _ in range(n):\n        initial_debt *= 1.05\n        initial_debt = (initial_debt // 1000 + 1) * 1000\n    return initial_debt",
            "def calculate_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt *= 1.05\n        debt = round(debt, -3)\n    return debt",
            "def calculate_debt_after_years(years):\n    initial_debt = 100000\n    for year in range(years):\n        initial_debt *= 1.05\n        initial_debt = (initial_debt // 1000 + 1) * 1000\n    return initial_debt",
            "def calculate_debt(n):\n    initial_debt = 100000\n    for _ in range(n):\n        initial_debt *= 1.05\n        initial_debt = (initial_debt // 1000 + 1) * 1000\n    return initial_debt",
            "def calculate_debt(n):\n    principal_debt = 100000\n    for _ in range(n):\n        principal_debt *= 1.05\n        principal_debt = (principal_debt // 1000 + 1) * 1000\n    return principal_debt"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import sys\n\ndef compoundInterest(x, i, n):\n    if n == 0:\n        return x\n\n    ans = int(x * (1 + i))\n    hasu = ans % 1000\n    if hasu != 0:\n        ans -= hasu\n        ans += 1000\n    return compoundInterest(ans, i, n-1)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print (ans)",
        "writer": "human",
        "rewrite": [
            "def compound_interest(principal, rate, periods):\n    if periods == 0:\n        return principal\n\n    total = int(principal * (1 + rate))\n    remainder = total % 1000\n    if remainder != 0:\n        total -= remainder\n        total += 1000\n    return compound_interest(total, rate, periods - 1)\n\nif __name__ == \"__main__\":\n    periods = int(input())\n    result = compound_interest(100000, 0.05, periods)\n    print(result)",
            "def compound_interest(principal, rate, time):\n    if time == 0:\n        return principal\n\n    accrued_amount = int(principal * (1 + rate))\n    remainder = accrued_amount % 1000\n    if remainder != 0:\n        accrued_amount -= remainder\n        accrued_amount += 1000\n    return compound_interest(accrued_amount, rate, time - 1)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "def compound_interest(principal, rate, years):\n    if years == 0:\n        return principal\n\n    accrued_amount = int(principal * (1 + rate))\n    adjustment = accrued_amount % 1000\n    if adjustment != 0:\n        accrued_amount -= adjustment\n        accrued_amount += 1000\n    return compound_interest(accrued_amount, rate, years - 1)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    for _ in range(periods):\n        principal *= (1 + rate)\n        principal = int(principal / 1000) * 1000 + 1000 if principal % 1000 != 0 else int(principal)\n    return principal\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = compound_interest(100000, 0.05, n)\n    print(result)",
            "def compound_interest(principal, rate, years):\n    if years == 0:\n        return principal\n\n    accumulated = int(principal * (1 + rate))\n    remainder = accumulated % 1000\n    if remainder != 0:\n        accumulated -= remainder\n        accumulated += 1000\n    return compound_interest(accumulated, rate, years - 1)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "import sys\n\ndef compound_interest(principal, rate, periods):\n    if periods == 0:\n        return principal\n\n    amount = int(principal * (1 + rate))\n    remainder = amount % 1000\n    if remainder != 0:\n        amount -= remainder\n        amount += 1000\n    return compound_interest(amount, rate, periods - 1)\n\nif __name__ == \"__main__\":\n    periods = int(input())\n    result = compound_interest(100000, 0.05, periods)\n    print(result)"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def sum_of_4_integers(n):\n  count = 0\n  for a in range(10):\n    for b in range(10):\n      for c in range(10):\n        for d in range(10):\n          if a + b + c + d == n:\n            count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def sum_of_4_integers(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_quadruples_with_sum(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def sum_of_4_integers(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import math\ndef int_ceil(src, range):\n    return int(math.ceil(src/float(range)) * range)\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef int_ceil(value, step):\n    return int(math.ceil(value / float(step)) * step)\n\ndef main():\n    weeks = int(input())\n    total_debt = 100000\n    for _ in range(weeks):\n        increase = total_debt * 0.05\n        total_debt = int_ceil(total_debt + increase, 1000)\n    print(total_debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range_val):\n    return int(math.ceil(src / float(range_val)) * range_val)\n\ndef main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        increase = debt * 0.05\n        debt = int_ceil(debt + increase, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range_val):\n    return int(math.ceil(src / float(range_val)) * range_val)\n\ndef main():\n    weeks = int(input())\n    total_debt = 100000\n    for _ in range(weeks):\n        increase = total_debt * 0.05\n        total_debt = int_ceil(total_debt + increase, 1000)\n    print(total_debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        debt += int(debt * 0.05)\n        debt = int_ceil(debt, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(n):\n  \"\"\"Counts the number of prime numbers less than or equal to n.\"\"\"\n  count = 0\n  for num in range(2, n + 1):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    \"\"\"Returns the count of prime numbers less than or equal to n.\"\"\"\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(n):\n  \"\"\"Counts the number of prime numbers less than or equal to n.\"\"\"\n  count = 0\n  for num in range(2, n + 1):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))",
            "def count_primes(n):\n    return sum(all(num % i != 0 for i in range(2, int(num**0.5) + 1)) for num in range(2, n + 1))",
            "def count_primes(n):\n    return sum(1 for num in range(2, n + 1) if all(num % i != 0 for i in range(2, int(num**0.5) + 1)))"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def count_combinations(n):\n  count = 0\n  for a in range(10):\n    for b in range(10):\n      for c in range(10):\n        for d in range(10):\n          if a + b + c + d == n:\n            count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    N = [1 for _ in range(n)]\n    a = sum(N[:pos[0]])\n    b = sum(N[pos[0]:pos[1]])\n    c = sum(N[pos[1]:pos[2]])\n    d = sum(N[pos[2]:])\n    if a > 9 or b > 9 or c > 9 or d > 9:\n        return None\n    return (a,b,c,d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        probs = [get_nums(n, p) for p in comb(range(n+1), 3)]\n        probs = [p for p in probs if p != None]\n        print(len(probs))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    a = sum(1 for i in range(pos[0]))\n    b = sum(1 for i in range(pos[0], pos[1]))\n    c = sum(1 for i in range(pos[1], pos[2]))\n    d = sum(1 for i in range(pos[2], n))\n    if any(x > 9 for x in (a, b, c, d)):\n        return None\n    return (a, b, c, d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n.strip())\n        probs = [get_nums(n, p) for p in comb(range(n + 1), 3) if get_nums(n, p) is not None]\n        print(len(probs))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    sections = [sum(1 for _ in range(pos[i] - (pos[i-1] if i > 0 else 0))) for i in range(3)] + [n - pos[2]]\n    if any(x > 9 for x in sections):\n        return None\n    return tuple(sections)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_sums(n, indices):\n    counts = [1] * n\n    segments = [sum(counts[start:end]) for start, end in zip([0]+list(indices), list(indices)+[n])]\n    if any(segment > 9 for segment in segments):\n        return None\n    return tuple(segments)\n\ndef main():\n    for line in sys.stdin:\n        n = int(line.strip())\n        valid_sums = [get_sums(n, p) for p in comb(range(n + 1), 3) if get_sums(n, p) is not None]\n        print(len(valid_sums))\n\nif __name__ == '__main__':\n    main()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    a, b, c, d = sum(1 for _ in range(pos[0])), sum(1 for _ in range(pos[0], pos[1])), sum(1 for _ in range(pos[1], pos[2])), sum(1 for _ in range(pos[2], n))\n    if any(x > 9 for x in (a, b, c, d)):\n        return None\n    return (a, b, c, d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_counts = [p for p in valid_combinations if p is not None]\n        print(len(valid_counts))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    a, b, c, d = sum(1 for _ in range(pos[0])), sum(1 for _ in range(pos[0], pos[1])), sum(1 for _ in range(pos[1], pos[2])), sum(1 for _ in range(pos[2], n))\n    if a > 9 or b > 9 or c > 9 or d > 9:\n        return None\n    return (a, b, c, d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        probs = [p for p in (get_nums(n, p) for p in comb(range(n + 1), 3)) if p is not None]\n        print(len(probs))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    partitions = [sum(1 for _ in range(pos[i] - (pos[i-1] if i > 0 else 0))) for i in range(3)] + [sum(1 for _ in range(n - pos[2]))]\n    if any(x > 9 for x in partitions):\n        return None\n    return tuple(partitions)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_partitions = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_partitions = [p for p in valid_partitions if p is not None]\n        print(len(valid_partitions))\n\nif __name__ == '__main__':\n    run()"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\n\ndef ans(num):\n    ans = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a+b+c+d == num:\n                        ans += 1\n\n    return ans\n\n\ndef main():\n    a = []\n\n    for line in sys.stdin:\n        a.append(int(line))\n\n    for line in a:\n        print(ans(line))\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef count_combinations(target):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target:\n                        count += 1\n\n    return count\n\n\ndef main():\n    numbers = []\n\n    for line in sys.stdin:\n        numbers.append(int(line))\n\n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_digit_sums(num):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == num)\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    for number in numbers:\n        print(count_digit_sums(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target_sum:\n                        count += 1\n    return count\n\ndef main():\n    inputs = [int(line) for line in sys.stdin]\n    for value in inputs:\n        print(count_combinations(value))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(num):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == num)\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(num):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == num:\n                        count += 1\n\n    return count\n\ndef main():\n    inputs = [int(line) for line in sys.stdin]\n\n    for number in inputs:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n    \n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target_sum:\n                        count += 1\n\n    return count\n\n\ndef main():\n    numbers = []\n\n    for line in sys.stdin:\n        numbers.append(int(line.strip()))\n\n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji():\n  w = int(input())\n  n = int(input())\n  lines = []\n  for _ in range(n):\n    a, b = map(int, input().split(\",\"))\n    lines.append((a, b))\n  numbers = list(range(1, w + 1))\n  for a, b in lines:\n    numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n  for number in numbers:\n    print(number)",
        "writer": "machine",
        "rewrite": [
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(\",\"))) for _ in range(n)]\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    print(*numbers, sep='\\n')",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(\",\"))) for _ in range(n)]\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    print(*numbers, sep='\\n')",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(\",\"))) for _ in range(n)]\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    print(*numbers, sep=\"\\n\")",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(\",\"))) for _ in range(n)]\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    print(*numbers, sep='\\n')",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(\",\"))) for _ in range(n)]\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    print(*numbers, sep='\\n')",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(\",\"))) for _ in range(n)]\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    print(*numbers, sep=\"\\n\")"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "import sys\nimport math as mas\n\ndef sieve(n):\n\tp=[True for i in range(n+1)]\n\tp[0]=p[1]=False\n\tend=int(n**0.5)\n\tfor i in range(2,end+1):\n\t\tif p[i]:\n\t\t\tfor j in range(i*i,n+1,i):\n\t\t\t\tp[j]=False\n\treturn p\n\t\nsosu=sieve(1000010)\nfor i in sys.stdin:\n\tt=int(i)\n\tif t<2:print(0)\n\telif t==2:print(1)\n\telse:print(1+sum(sosu[t] for t in range(3,int(i)+1,2)))\n\n#\ta,b=map(int,i.split())\n#\tprint(gcd(a,b),lcm(a,b))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor i in sys.stdin:\n    t = int(i)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[j] for j in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    end = int(n ** 0.5)\n    for i in range(2, end + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[x] for x in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[i] for i in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n    return primes\n\ndef count_primes_up_to(t):\n    if t < 2:\n        return 0\n    elif t == 2:\n        return 1\n    else:\n        return 1 + sum(sieve(1000010)[t] for t in range(3, t + 1, 2))\n\nfor line in sys.stdin:\n    number = int(line)\n    print(count_primes_up_to(number))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line.strip())\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[i] for i in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor i in sys.stdin:\n    t = int(i)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[k] for k in range(3, t + 1, 2)))"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "w = int(input())\nn = int(input())\nlst = [i + 1 for i in range(w)]\ndef swap(t):\n  a,b = t\n  temp = lst[a-1]\n  lst[a-1] = lst[b-1]\n  lst[b-1] = temp\nfor i in range(n):\n  swap(tuple(map(int,input().split(\",\"))))\nfor i in range(w):\n  print(lst[i])\n",
        "writer": "human",
        "rewrite": [
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nfor item in lst:\n    print(item)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nfor item in lst:\n    print(item)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor i in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "MAX = 1000000\nSQRT = 1000     # sqrt(MAX)\n \nprime = [0] * MAX\n \ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n \nsieve()\ncnt = [0] * (MAX+1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1;\n    cnt[i] = cnt[i+1] = f\n     \nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break\n",
        "writer": "human",
        "rewrite": [
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = 1\nf = 1\n\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ntry:\n    while True:\n        print(cnt[int(input())])\nexcept EOFError:\n    pass",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i]:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ndef main():\n    try:\n        while True:\n            user_input = int(input())\n            print(cnt[user_input])\n    except EOFError:\n        pass\n\nmain()",
            "MAX = 1000000\nSQRT = 1000 \n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    for number in data:\n        print(cnt[int(number)])\n\nif __name__ == \"__main__\":\n    main()",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nimport sys\ninput = sys.stdin.read\ndata = input().strip().split()\nfor number in data:\n    try:\n        print(cnt[int(number)])\n    except (ValueError, IndexError):\n        break",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i]:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = 1\nf = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    for num in data:\n        print(cnt[int(num)])"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = [i for i in range(w+1)]\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n\n        xs[a], xs[b] = xs[b], xs[a]\n\n    for i in range(1, w+1):\n        print(xs[i])\n\nif __name__ == \"__main__\": main()",
        "writer": "human",
        "rewrite": [
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        xs[a], xs[b] = xs[b], xs[a]\n\n    print(\"\\n\".join(map(str, xs[1:])))\n    \nif __name__ == \"__main__\": \n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(swaps):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    num_swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(num_swaps):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(swaps):\n        x, y = map(int, input().split(\",\"))\n        positions[x], positions[y] = positions[y], positions[x]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    num_swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(num_swaps):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\": main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    swaps_count = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(swaps_count):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switching_railroad_cars():\n  cars = []\n  while True:\n    try:\n      car = int(input())\n      if car == 0:\n        if cars:\n          print(cars.pop(0))\n        else:\n          continue\n      else:\n        cars.append(car)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n            else:\n                cars.append(car)\n        except (EOFError, ValueError):\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n            else:\n                cars.append(car)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n            else:\n                cars.append(car)\n        except (EOFError, ValueError):\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n            else:\n                cars.append(car)\n        except (EOFError, ValueError):\n            break",
            "def switching_railroad_cars():\n    from collections import deque\n    cars = deque()\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.popleft())\n            else:\n                cars.append(car)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    from collections import deque\n    cars = deque()\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.popleft())\n            else:\n                cars.append(car)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "import sys\n\n\ndef main():\n    stack = []\n    for x in sys.stdin:\n        x = int(x)\n        if x:\n            stack.append(x)\n        else:\n            print(stack.pop())\n\n\nif __name__ == '__main__':\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for x in sys.stdin:\n        x = int(x.strip())\n        if x != 0:\n            stack.append(x)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switching_railroad_cars():\n  cars = []\n  while True:\n    try:\n      car = int(input())\n      if car == 0:\n        if cars:\n          print(cars.pop(0))\n        else:\n          break\n      else:\n        cars.append(car)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except ValueError:\n            continue\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    from collections import deque\n    cars = deque()\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.popleft())\n                else:\n                    break\n            else:\n                cars.append(car)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except (EOFError, ValueError):\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except EOFError:\n            break",
            "def switch_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except (EOFError, ValueError):\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except ValueError:\n            continue\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji(w, n, lines):\n  \"\"\"\n  Solves the Amidakuji puzzle.\n\n  Args:\n    w: The number of vertical lines.\n    n: The number of horizontal lines.\n    lines: A list of tuples representing the horizontal lines, where each tuple\n      contains two integers representing the vertical lines connected by the\n      horizontal line.\n\n  Returns:\n    A list of integers representing the final state of the Amidakuji, where each\n    integer represents the number at the bottom of the corresponding vertical\n    line.\n  \"\"\"\n  numbers = list(range(1, w + 1))\n  for a, b in lines:\n    numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n  return numbers",
        "writer": "machine",
        "rewrite": [
            "def amidakuji(w, n, lines):\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    return numbers",
            "def amidakuji(w, n, lines):\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    return numbers",
            "def amidakuji(w, n, lines):\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    return numbers",
            "def amidakuji(w, n, lines):\n    numbers = list(range(1, w + 1))\n    for start, end in lines:\n        numbers[start - 1], numbers[end - 1] = numbers[end - 1], numbers[start - 1]\n    return numbers",
            "def amidakuji(w, n, lines):\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    return numbers",
            "def amidakuji(w, n, lines):\n    numbers = list(range(1, w + 1))\n    for a, b in lines:\n        numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n    return numbers"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x,d):\n    return d*func(x)\n\narray = []\nfor i in sys.stdin:\n    array.append(int(i))\n\nfor i in range(len(array)):\n    d = array[i]\n    k = int(600/d)\n    result = 0\n    for j in range(k):\n        result += rec(j*d,d)\n\n    print(result)",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)",
            "import sys\n\ndef square(x):\n    return x ** 2\n\ndef weighted_square_sum(x, d):\n    return d * square(x)\n\ninput_values = [int(i) for i in sys.stdin]\n\nfor value in input_values:\n    d = value\n    k = 600 // d\n    total = sum(weighted_square_sum(j * d, d) for j in range(k))\n    print(total)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef square(x):\n    return x**2\n\ndef calculate_sum(x, d):\n    return d * square(x)\n\nnumbers = [int(line) for line in sys.stdin]\nfor number in numbers:\n    division_result = int(600 / number)\n    total_sum = sum(calculate_sum(j * number, number) for j in range(division_result))\n    print(total_sum)",
            "import sys\n\ndef func(x):\n    return x**2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\n\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)",
            "import sys\n\ndef func(x):\n    return x**2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "# coding: utf-8\n\nclass Stack(object):\n\tmaxnum = 100\n\tarray = []\n\tfor i in range(100):\n\t\tarray.append(0)\n\tindex = 0\n\tdef push(self, data):\n\t\tself.array[self.index] = data\n\t\tself.index += 1\n\tdef pop(self):\n\t\tprint(self.array[self.index-1])\n\t\tself.index -= 1\n\nroad = Stack()\nwhile True:\n\ttry:\n\t\tnum = int(raw_input())\n\t\tif num != 0:\n\t\t\troad.push(num)\n\t\telse:\n\t\t\troad.pop()\n\texcept EOFError:\n\t\tbreak\n",
        "writer": "human",
        "rewrite": [
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            print(self.array[self.index])\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            road.pop()\n    except EOFError:\n        break",
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped_value = road.pop()\n            if popped_value is not None:\n                print(popped_value)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < len(self.array):\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            value = road.pop()\n            if value is not None:\n                print(value)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self):\n        self.maxnum = 100\n        self.array = [0] * self.maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            print(self.array[self.index])\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            road.pop()\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped_value = road.pop()\n            if popped_value is not None:\n                print(popped_value)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self):\n        self.maxnum = 100\n        self.array = [0] * self.maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            print(self.array[self.index])\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            road.pop()\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(d):\n  \"\"\"\n  Computes the approximate area of the shape defined by the lines y = x^2, y = 0, and x = 600 using rectangles of width d.\n\n  Args:\n    d: The width of the rectangles.\n\n  Returns:\n    The approximate area of the shape.\n  \"\"\"\n  s = 0\n  for i in range(1, 600 // d):\n    s += d * (i * d)**2\n  return s\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
        "writer": "machine",
        "rewrite": [
            "def compute_area(rect_width):\n    area = sum(rect_width * (i * rect_width) ** 2 for i in range(1, 600 // rect_width))\n    return area\n\nwhile True:\n    try:\n        rect_width = int(input())\n        if rect_width <= 0 or 600 % rect_width != 0:\n            raise ValueError\n        print(compute_area(rect_width))\n    except ValueError:\n        break",
            "def compute_area(d):\n    area = sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n    return area\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    area = 0\n    for i in range(1, 600 // d):\n        area += d * (i * d) ** 2\n    return area\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    area = sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n    return area\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    area = 0\n    for i in range(1, 600 // d):\n        area += d * (i * d) ** 2\n    return area\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def calculate_area(rectangle_width):\n    total_area = 0\n    for index in range(1, 600 // rectangle_width):\n        total_area += rectangle_width * (index * rectangle_width) ** 2\n    return total_area\n\nwhile True:\n    try:\n        width = int(input())\n        if width <= 0 or 600 % width != 0:\n            raise ValueError\n        print(calculate_area(width))\n    except ValueError:\n        break"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    for i in range(int(input())):\n        a=int(input())+int(input())\n        if a>=10**80:\n            print(\"overflow\")\n        else:\n            print(a)\n            \n    \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\ndef main():\n    num_cases = int(input())\n    for _ in range(num_cases):\n        total = int(input()) + int(input())\n        print(\"overflow\" if total >= 10**80 else total)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        sum_result = int(input()) + int(input())\n        print(\"overflow\" if sum_result >= 10**80 else sum_result)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n        \nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n        \nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def sum_of_integers():\n  n = int(input())\n  for _ in range(n):\n    a = input()\n    b = input()\n    if len(a) > 80 or len(b) > 80:\n      print(\"overflow\")\n    else:\n      sum = str(int(a) + int(b))\n      if len(sum) > 80:\n        print(\"overflow\")\n      else:\n        print(sum)",
        "writer": "machine",
        "rewrite": [
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80:\n            print(\"overflow\")\n        else:\n            result = int(a) + int(b)\n            if len(str(result)) > 80:\n                print(\"overflow\")\n            else:\n                print(result)",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            print(\"overflow\")\n        else:\n            print(int(a) + int(b))",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80:\n            print(\"overflow\")\n        else:\n            result = int(a) + int(b)\n            if result > 10**80 - 1:\n                print(\"overflow\")\n            else:\n                print(result)",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if max(len(a), len(b)) > 80:\n            print(\"overflow\")\n        else:\n            total = str(int(a) + int(b))\n            if len(total) > 80:\n                print(\"overflow\")\n            else:\n                print(total)",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80:\n            print(\"overflow\")\n        else:\n            result = int(a) + int(b)\n            result_str = str(result)\n            if len(result_str) > 80:\n                print(\"overflow\")\n            else:\n                print(result_str)",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80:\n            print(\"overflow\")\n        else:\n            total = int(a) + int(b)\n            if total > 10**80 - 1:\n                print(\"overflow\")\n            else:\n                print(total)"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def digits(n):\n    if n < 10: return 1\n    c = 0\n    while n > 0:\n        c += 1\n        n = n // 10\n\n    return c\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if (digits(u) > 80 or digits(v) > 80 or digits(s) > 80):\n        print(\"overflow\")\n    else:\n        print(s)",
        "writer": "human",
        "rewrite": [
            "def count_digits(number):\n    return len(str(abs(number)))\n\nn = int(input())\nfor _ in range(n):\n    num1 = int(input())\n    num2 = int(input())\n    result = num1 + num2\n    if count_digits(num1) > 80 or count_digits(num2) > 80 or count_digits(result) > 80:\n        print(\"overflow\")\n    else:\n        print(result)",
            "def count_digits(number):\n    return len(str(abs(number)))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if any(count_digits(x) > 80 for x in (u, v, s)):\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(number):\n    return len(str(number))\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if count_digits(u) > 80 or count_digits(v) > 80 or count_digits(s) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(number):\n    return len(str(abs(number)))\n\nnumber_of_cases = int(input())\nfor case in range(number_of_cases):\n    first_number = int(input())\n    second_number = int(input())\n    total = first_number + second_number\n    if (count_digits(first_number) > 80 or count_digits(second_number) > 80 or count_digits(total) > 80):\n        print(\"overflow\")\n    else:\n        print(total)",
            "def count_digits(number):\n    if number < 10:\n        return 1\n    count = 0\n    while number > 0:\n        count += 1\n        number //= 10\n    return count\n\nn = int(input())\nfor _ in range(n):\n    a = int(input())\n    b = int(input())\n    total = a + b\n    if count_digits(a) > 80 or count_digits(b) > 80 or count_digits(total) > 80:\n        print(\"overflow\")\n    else:\n        print(total)",
            "def count_digits(n):\n    return len(str(n)) if n >= 10 else 1\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if any(count_digits(x) > 80 for x in (u, v, s)):\n        print(\"overflow\")\n    else:\n        print(s)"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(d):\n  s = 0\n  for i in range(1, 600 // d):\n    s += d * (i * d) ** 2\n  return s\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
        "writer": "machine",
        "rewrite": [
            "def compute_area(d):\n    return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "#!/usr/bin/env python\nimport sys\n\ndef function(x):\n    return x*x\n\ndef calculate(d, max):\n    val = d\n    result = 0\n    while val < max:\n        result += function(val) * d\n        val += d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
        "writer": "human",
        "rewrite": [
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x ** 2\n\ndef compute_sum(step, limit):\n    current_value = step\n    total = 0\n    while current_value < limit:\n        total += square(current_value) * step\n        current_value += step\n    return total\n\nif __name__ == '__main__':\n    for input_line in sys.stdin:\n        print(compute_sum(int(input_line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    total = 0\n    for value in range(step, limit, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    current_value = step\n    total = 0\n    while current_value < limit:\n        total += square(current_value) * step\n        current_value += step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_total(increment, limit):\n    current_value = increment\n    total = 0\n    while current_value < limit:\n        total += square(current_value) * increment\n        current_value += increment\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_total(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    total = 0\n    for value in range(step, limit, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef sum_of_squares(step, limit):\n    total = 0\n    for value in range(step, limit, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(sum_of_squares(int(line), 600))"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    x = math.cos(rad)\n    y = math.sin(rad)\n    return x,y\n\ndef run():\n    x, y = 0,0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        d = -d\n        move_x, move_y = move(angle)\n        angle += d\n        x += r * move_x\n        y += r * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(degrees):\n    radians = math.radians(degrees)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        radius, delta = map(int, input().split(','))\n        delta = -delta\n        if radius == 0 and delta == 0:\n            break\n        move_x, move_y = move(angle)\n        angle += delta\n        x += radius * move_x\n        y += radius * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        radius, delta_angle = map(int, input().split(','))\n        delta_angle = -delta_angle\n        if radius == 0 and delta_angle == 0:\n            break\n        move_x, move_y = move(angle)\n        angle += delta_angle\n        x += radius * move_x\n        y += radius * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(degree):\n    radian = math.radians(degree)\n    return math.cos(radian), math.sin(radian)\n\ndef run():\n    x, y = 0, 0\n    direction = 90\n    while True:\n        radius, delta = map(int, input().split(','))\n        delta = -delta\n        if radius == 0 and delta == 0:\n            break\n        move_x, move_y = move(direction)\n        direction += delta\n        x += radius * move_x\n        y += radius * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        radius, delta = map(int, input().split(','))\n        delta = -delta\n        if radius == 0 and delta == 0:\n            break\n        move_x, move_y = move(angle)\n        angle += delta\n        x += radius * move_x\n        y += radius * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    direction = 90\n    while True:\n        radius, delta = map(int, input().split(','))\n        delta = -delta\n        if radius == 0 and delta == 0:\n            break\n        delta_x, delta_y = move(direction)\n        direction += delta\n        x += radius * delta_x\n        y += radius * delta_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "def treasure_hunt():\n  x = 0\n  y = 0\n  while True:\n    d, t = map(int, input().split(\",\"))\n    if d == 0 and t == 0:\n      break\n    angle = t * 3.141592653589793 / 180\n    x += d * round(cos(angle), 3)\n    y += d * round(sin(angle), 3)\n  print(int(x), int(y))",
        "writer": "machine",
        "rewrite": [
            "def treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if (d, t) == (0, 0):\n            break\n        angle = t * (3.141592653589793 / 180)\n        x += d * round(cos(angle), 3)\n        y += d * round(sin(angle), 3)\n    print(int(x), int(y))",
            "def treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        angle = t * (3.141592653589793 / 180)\n        x += d * round(cos(angle), 3)\n        y += d * round(sin(angle), 3)\n    print(int(x), int(y))",
            "def treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        angle = t * 3.141592653589793 / 180\n        x += d * round(cos(angle), 3)\n        y += d * round(sin(angle), 3)\n    print(int(x), int(y))",
            "from math import cos, sin, radians\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if (d, t) == (0, 0):\n            break\n        angle = radians(t)\n        x += d * round(cos(angle), 3)\n        y += d * round(sin(angle), 3)\n    print(int(x), int(y))",
            "import math\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        angle = math.radians(t)\n        x += d * round(math.cos(angle), 3)\n        y += d * round(math.sin(angle), 3)\n    print(int(x), int(y))",
            "def treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        angle = t * (3.141592653589793 / 180)\n        x += d * round(cos(angle), 3)\n        y += d * round(sin(angle), 3)\n    print(int(x), int(y))"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def solve():\n  n = int(input())\n  for _ in range(n):\n    a = input()\n    b = input()\n    if len(a) > 80 or len(b) > 80:\n      print(\"overflow\")\n    else:\n      sum = str(int(a) + int(b))\n      if len(sum) > 80:\n        print(\"overflow\")\n      else:\n        print(sum)\nsolve()",
        "writer": "machine",
        "rewrite": [
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            print(\"overflow\")\n        else:\n            print(int(a) + int(b))\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80:\n            print(\"overflow\")\n        else:\n            total = int(a) + int(b)\n            if total > 10**80 - 1:\n                print(\"overflow\")\n            else:\n                print(total)\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            print(\"overflow\")\n        else:\n            print(int(a) + int(b))\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            print(\"overflow\")\n        else:\n            print(int(a) + int(b))\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            print(\"overflow\")\n        else:\n            print(str(int(a) + int(b)))\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            print(\"overflow\")\n        else:\n            print(int(a) + int(b))\nsolve()"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "def treasure_hunt():\n  x = 0\n  y = 0\n  while True:\n    d, t = map(int, input().split(\",\"))\n    if d == 0 and t == 0:\n      break\n    radians = t * 3.141592653589793 / 180\n    x += int(d *  cos(radians))\n    y += int(d * sin(radians))\n  print(x)\n  print(y)",
        "writer": "machine",
        "rewrite": [
            "def treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if (d, t) == (0, 0):\n            break\n        radians = t * 3.141592653589793 / 180\n        x += int(d * cos(radians))\n        y += int(d * sin(radians))\n    print(x)\n    print(y)",
            "from math import cos, sin\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if (d, t) == (0, 0):\n            break\n        radians = t * 3.141592653589793 / 180\n        x += int(d * cos(radians))\n        y += int(d * sin(radians))\n    print(x)\n    print(y)",
            "def treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        radians = t * 3.141592653589793 / 180\n        x += int(d * cos(radians))\n        y += int(d * sin(radians))\n    print(x, y)",
            "from math import cos, sin, radians\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        angle = radians(t)\n        x += int(d * cos(angle))\n        y += int(d * sin(angle))\n    print(x)\n    print(y)",
            "from math import cos, sin, radians\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if (d, t) == (0, 0):\n            break\n        angle_rad = radians(t)\n        x += int(d * cos(angle_rad))\n        y += int(d * sin(angle_rad))\n    print(x)\n    print(y)",
            "import math\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(\",\"))\n        if d == 0 and t == 0:\n            break\n        radians = math.radians(t)\n        x += int(d * math.cos(radians))\n        y += int(d * math.sin(radians))\n    print(x)\n    print(y)"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "from math import *\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
        "writer": "human",
        "rewrite": [
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef to_radians(degrees):\n    return degrees * pi / 180\n\nx, y = 0, 0\nangle = 90\n\nwhile True:\n    distance, angle_change = map(int, input().split(\",\"))\n    if distance == angle_change == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(to_radians(angle)) * distance\n    y += sin(to_radians(angle)) * distance\n    angle -= angle_change",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        num=list(map(int,line.split()))\n        \n        num.sort()\n        num.reverse()\n        print(' '.join(map(str,num)))\n        \n            \n                \n    \nSortingFiveNumbers()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef sorting_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsorting_five_numbers()",
            "import sys\n\ndef sort_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsort_five_numbers()",
            "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        num = list(map(int, line.split()))\n        print(' '.join(map(str, sorted(num, reverse=True))))\n\nSortingFiveNumbers()",
            "import sys\n\ndef sort_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsort_five_numbers()",
            "import sys\n\ndef sort_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsort_five_numbers()",
            "import sys\n\ndef sort_and_reverse_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsort_and_reverse_numbers()"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decode(text):\n  \"\"\"\n  Decodes a text encrypted by Caesar cipher.\n  \"\"\"\n  for shift in range(1, 26):\n    decoded_text = ''.join([chr((ord(char) - shift - 97) % 26 + 97) if char.isalpha() else char for char in text])\n    if 'the' in decoded_text or 'this' in decoded_text or 'that' in decoded_text:\n      return decoded_text\n  return \"No valid decoding found.\"",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text)\n        if any(word in decoded_text for word in ['the', 'this', 'that']):\n            return decoded_text\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text)\n        if any(word in decoded_text for word in ['the', 'this', 'that']):\n            return decoded_text\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join([chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text])\n        if any(word in decoded_text for word in ['the', 'this', 'that']):\n            return decoded_text\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join([chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text])\n        if any(keyword in decoded_text for keyword in ['the', 'this', 'that']):\n            return decoded_text\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text)\n        if any(word in decoded_text for word in ['the', 'this', 'that']):\n            return decoded_text\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(chr((ord(char) - shift - ord('a')) % 26 + ord('a')) if char.isalpha() else char for char in text)\n        if any(keyword in decoded_text for keyword in ['the', 'this', 'that']):\n            return decoded_text\n    return \"No valid decoding found.\""
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def chg(s,n):\n    res=\"\"\n    for i in s:\n        o=ord(i)\n        if 97<=o<=122:\n            if o+n<=122:\n                res+=chr(o+n)\n            else:\n                res+=chr(o+n-26)\n        else:\n            res+=i\n    return res\n\nwhile True:\n    try:\n        s=input()\n        for i in range(25,-1,-1):\n            c=chg(s,i)\n            e=c.split()\n            if \"the\" in e or \"this\" in e or \"that\" in e:\n                print(c)\n                break\n    except:\n        break",
        "writer": "human",
        "rewrite": [
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_code = ord(char)\n        if 97 <= ascii_code <= 122:\n            new_code = ascii_code + n\n            if new_code > 122:\n                new_code -= 26\n            result += chr(new_code)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            shifted = shift_string(input_string, shift)\n            words = shifted.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted)\n                break\n    except:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            shifted_val = ascii_val + n\n            if shifted_val > 122:\n                shifted_val -= 26\n            result += chr(shifted_val)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        s = input()\n        for i in range(25, -1, -1):\n            shifted_string = shift_string(s, i)\n            words = shifted_string.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(shifted_string)\n                break\n    except EOFError:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_ascii = ascii_value + n\n            if new_ascii > 122:\n                new_ascii -= 26\n            result += chr(new_ascii)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            shifted_string = shift_string(input_string, shift)\n            words = shifted_string.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(shifted_string)\n                break\n    except:\n        break",
            "def caesar_cipher(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_value = ascii_value + n\n            if new_value > 122:\n                new_value -= 26\n            result += chr(new_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            decoded_string = caesar_cipher(input_string, shift)\n            words = decoded_string.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(decoded_string)\n                break\n    except:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            new_ascii = ascii_val + n\n            if new_ascii <= 122:\n                result += chr(new_ascii)\n            else:\n                result += chr(new_ascii - 26)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for decrement in range(25, -1, -1):\n            shifted_string = shift_string(input_string, decrement)\n            words = shifted_string.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted_string)\n                break\n    except EOFError:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            new_char = chr(ascii_val + n)\n            if new_char > 'z':\n                new_char = chr(ord(new_char) - 26)\n            result += new_char\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        user_input = input()\n        for i in range(25, -1, -1):\n            shifted = shift_string(user_input, i)\n            words = shifted.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted)\n                break\n    except:\n        break"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers():\n  numbers = list(map(int, input().split()))\n  numbers.sort(reverse=True)\n  print(*numbers)",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = sorted(map(int, input().split()), reverse=True)\n    print(*numbers)"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers():\n  a, b, c, d, e = map(int, input().split())\n  numbers = [a, b, c, d, e]\n  numbers.sort(reverse=True)\n  print(*numbers)",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers():\n    numbers = list(map(int, input().split()))\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = sorted(map(int, input().split()), reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = sorted(map(int, input().split()), reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = sorted(map(int, input().split()), reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = list(map(int, input().split()))\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers():\n    numbers = sorted(map(int, input().split()), reverse=True)\n    print(*numbers)"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=input()\nprint(factorial(int(n)))",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nn = input()\nprint(factorial(int(n)))",
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n < 2:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product\n\nn = input()\nprint(factorial(int(n)))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def Factorial(n):\n    if n <= 1: return 1\n    return n*Factorial(n-1)\nprint(Factorial(int(input())))\n",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nresult = factorial(int(input()))\nprint(result)",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "ca = ord('a')\ndef convert(s, d):\n    res = []\n    for c in s:\n        if c not in ' .':\n            c = chr(((ord(c) - ca + d) % 26) + ca)\n        res.append(c)\n    return \"\".join(res)\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if \"the\" in s0 or \"this\" in s0 or \"that\" in s0:\n            print(s0)\n            break\n\n",
        "writer": "human",
        "rewrite": [
            "def convert(s, d):\n    return \"\".join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(keyword in s0 for keyword in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return ''.join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return \"\".join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() and c.islower() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in (\"the\", \"this\", \"that\")):\n            print(s0)\n            break",
            "def caesar_cipher_shift(input_string, shift_value):\n    result = []\n    for character in input_string:\n        if character not in ' .':\n            shifted_char = chr(((ord(character) - ord('a') + shift_value) % 26) + ord('a'))\n            result.append(shifted_char)\n        else:\n            result.append(character)\n    return \"\".join(result)\n\nfor line in open(0).readlines():\n    stripped_line = line.strip()\n    for shift in range(26):\n        shifted_result = caesar_cipher_shift(stripped_line, shift)\n        if \"the\" in shifted_result or \"this\" in shifted_result or \"that\" in shifted_result:\n            print(shifted_result)\n            break",
            "def convert(s, d):\n    return ''.join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return \"\".join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nimport sys\n\nfor line in sys.stdin:\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    IN=input()\n    IN.upper()\n\n    print(IN.upper())\n        \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    user_input = input()\n    uppercase_input = user_input.upper()\n    print(uppercase_input)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input()\n    IN = IN.upper()\n\n    print(IN)\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial():\n  n = int(input())\n  fact = 1\n  for i in range(1, n+1):\n    fact = fact * i\n  print(fact)\nfactorial()",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def calculate_factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(calculate_factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def compute_factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nresult = compute_factorial(n)\nprint(result)"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize(text):\n  result = ''\n  for char in text:\n    if char.islower():\n      result += char.upper()\n    else:\n      result += char\n  return result",
        "writer": "machine",
        "rewrite": [
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort(num):\n   l = len(num)\n   for i in range(0,l):\n        for j in range(0,l-i-1):\n            if num[j] < num[j+1]:\n               temp = num[j]\n               num[j] = num[j+1]\n               num[j+1]=temp\n   print(num[0],end='')\n   for i in range(1,len(num)-1):\n       print('',num[i],end='')\n   print('',num[i+1])\n\na , b , c , d , e = map(int,input().split())\nnum = []\nnum.append(a)\nnum.append(b)\nnum.append(c)\nnum.append(d)\nnum.append(e)\nsort(num)",
        "writer": "human",
        "rewrite": [
            "def sort_descending(numbers):\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - i - 1):\n            if numbers[j] < numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_descending(numbers)",
            "def sort_numbers(nums):\n    nums.sort(reverse=True)\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort_numbers(nums):\n    nums.sort(reverse=True)\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort(num):\n    num.sort(reverse=True)\n    print(\" \".join(map(str, num)))\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort(num):\n    num.sort(reverse=True)\n    print(\" \".join(map(str, num)))\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort_numbers_descending(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n - i - 1):\n            if numbers[j] < numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnum_list = [a, b, c, d, e]\nsort_numbers_descending(num_list)"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize(text):\n  result = \"\"\n  for char in text:\n    if char.islower():\n      result += char.upper()\n    else:\n      result += char\n  return result",
        "writer": "machine",
        "rewrite": [
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(char.upper() if char.islower() else char for char in text)"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "'''\nCreated on Mar 22, 2013\n\n@author: wukc\n'''\nfrom sys import stdin\n\ndef toupper(x):\n    return chr(ord(x)-32) if x.islower() else x \n\ns=stdin.readline()\nprint(\"\".join(map(toupper,s)[:-1]))",
        "writer": "human",
        "rewrite": [
            "def to_uppercase(input_string):\n    def convert_char(c):\n        return chr(ord(c) - 32) if c.islower() else c\n    return \"\".join(map(convert_char, input_string))\n\nif __name__ == \"__main__\":\n    import sys\n    input_str = sys.stdin.readline()\n    print(to_uppercase(input_str[:-1]))",
            "def toupper(x):\n    return x.upper()\n\ns = input()\nprint(s[:-1].upper())",
            "def to_uppercase(input_string):\n    return ''.join(chr(ord(char) - 32) if char.islower() else char for char in input_string)\n\ninput_str = input()\nprint(to_uppercase(input_str.rstrip()))",
            "def toupper(s):\n    return ''.join(chr(ord(char) - 32) if char.islower() else char for char in s)\n\ns = input()\nprint(toupper(s))",
            "def toupper(x):\n    return x.upper()\n\ns = input()\nprint(s[:-1].upper())",
            "def toupper(x):\n    return x.upper() if x.islower() else x\n\ns = input()\nprint(s[:-1].translate(str.maketrans('', '', '\\n')))"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decoder(text):\n  \"\"\"\n  Decodes a text encrypted by Caesar cipher.\n  \"\"\"\n  for shift in range(1, 26):\n    decoded_text = ''.join([chr((ord(char) - shift - 97) % 26 + 97) if char.isalpha() else char for char in text])\n    if \"the\" in decoded_text or \"this\" in decoded_text or \"that\" in decoded_text:\n      return decoded_text\n  return text",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decoder(text):\n    for shift in range(1, 26):\n        decoded_text = ''\n        for char in text:\n            if char.isalpha():\n                decoded_char = chr((ord(char) - shift - 97) % 26 + 97)\n                decoded_text += decoded_char\n            else:\n                decoded_text += char\n        if \"the\" in decoded_text or \"this\" in decoded_text or \"that\" in decoded_text:\n            return decoded_text\n    return text",
            "def decode_caesar_cipher(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text)\n        if any(word in decoded_text for word in [\"the\", \"this\", \"that\"]):\n            return decoded_text\n    return text",
            "def caesar_cipher_decoder(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(chr((ord(char) - shift - 97) % 26 + 97) if char.isalpha() and char.islower() else char for char in text)\n        if any(word in decoded_text for word in [\"the\", \"this\", \"that\"]):\n            return decoded_text\n    return text",
            "def decode_caesar_cipher(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join([chr((ord(char) - shift - ord('a')) % 26 + ord('a')) if char.isalpha() else char for char in text])\n        if any(word in decoded_text for word in [\"the\", \"this\", \"that\"]):\n            return decoded_text\n    return text",
            "def caesar_cipher_decoder(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(\n            [chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text]\n        )\n        if any(keyword in decoded_text for keyword in (\"the\", \"this\", \"that\")):\n            return decoded_text\n    return text",
            "def caesar_cipher_decoder(text):\n    for shift in range(1, 26):\n        decoded_text = ''.join(\n            [chr((ord(char) - shift - 97) % 26 + 97) if char.islower() else char for char in text]\n        )\n        if any(word in decoded_text for word in [\"the\", \"this\", \"that\"]):\n            return decoded_text\n    return text"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 - x2 == 0.0:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in xrange(int(stdin.readline())):\n    p = [float(s) for s in stdin.readline().split()]\n    if gradient(*p[:4]) == gradient(*p[4:]):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nimport sys\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if (x1 - x2) == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(sys.stdin.readline())):\n    p = list(map(float, sys.stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nimport sys\n\ndef calculate_gradient(x1, y1, x2, y2):\n    return float('inf') if x1 == x2 else (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(sys.stdin.readline().strip())):\n    points = list(map(float, sys.stdin.readline().strip().split()))\n    if calculate_gradient(*points[:4]) == calculate_gradient(*points[4:]):\n        print('YES')\n    else:\n        print('NO')",
            "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 == x2 else (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(stdin.readline())):\n    points = list(map(float, stdin.readline().split()))\n    result = 'YES' if gradient(*points[:4]) == gradient(*points[4:]) else 'NO'\n    print(result)"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def cross(x, y):\n    return (x.conjugate() * y).imag\n\ndef is_parallel(x, y):\n    if abs(cross(x, y)) < 1e-10:\n        return True\n    return False\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2, y2) - complex(x1, y1)\n    b = complex(x4, y4) - complex(x3, y3)    \n    if is_parallel(a, b):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef check_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)\n    print('YES' if check_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef check_parallelism(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)\n    print('YES' if check_parallelism(vector_a, vector_b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef check_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    if check_parallel(vector_a, vector_b):\n        print('YES')\n    else:\n        print('NO')"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def check_parallelism():\n  n = int(input())\n  for _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n    slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n    if slope1 == slope2:\n      print(\"YES\")\n    else:\n      print(\"NO\")",
        "writer": "machine",
        "rewrite": [
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n        slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        coordinates = list(map(float, input().split()))\n        slope1 = (coordinates[3] - coordinates[1]) / (coordinates[2] - coordinates[0]) if coordinates[2] != coordinates[0] else float('inf')\n        slope2 = (coordinates[7] - coordinates[5]) / (coordinates[6] - coordinates[4]) if coordinates[6] != coordinates[4] else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n        slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n        slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        coords = list(map(float, input().split()))\n        slope1 = (coords[3] - coords[1]) / (coords[2] - coords[0]) if coords[2] != coords[0] else float('inf')\n        slope2 = (coords[7] - coords[5]) / (coords[6] - coords[4]) if coords[6] != coords[4] else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        coordinates = list(map(float, input().split()))\n        slope1 = (coordinates[3] - coordinates[1]) / (coordinates[2] - coordinates[0]) if coordinates[2] != coordinates[0] else float('inf')\n        slope2 = (coordinates[7] - coordinates[5]) / (coordinates[6] - coordinates[4]) if coordinates[6] != coordinates[4] else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial():\n  n = int(input())\n  fact = 1\n  for i in range(1, n + 1):\n    fact *= i\n  print(fact)\nfactorial()",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def check_parallelism():\n  n = int(input())\n  for _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n    slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n    if slope1 == slope2:\n      print(\"YES\")\n    else:\n      print(\"NO\")",
        "writer": "machine",
        "rewrite": [
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            print(\"YES\" if (x1 == x3) else \"NO\")\n        else:\n            slope1 = float('inf') if (x2 - x1) == 0 else (y2 - y1) / (x2 - x1)\n            slope2 = float('inf') if (x4 - x3) == 0 else (y4 - y3) / (x4 - x3)\n            print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        coords = list(map(float, input().split()))\n        slope1 = (coords[3] - coords[1]) / (coords[2] - coords[0]) if coords[2] != coords[0] else float('inf')\n        slope2 = (coords[7] - coords[5]) / (coords[6] - coords[4]) if coords[6] != coords[4] else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else None\n        slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else None\n        print(\"YES\" if slope1 == slope2 else \"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n        slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n        print(\"YES\" if slope1 == slope2 else \"NO\")"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import math\n\ndef sign(x):\n    if x >= 0:\n        return True\n    else:\n        return False\n\nn = int(input())\nwhile n != 0:\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    b = []\n    b.append(a[0])\n    for i in range(1,len(a)):\n        if b[len(b)-1] > 0 and a[i] > 0:\n            b[len(b)-1] = b[len(b)-1] + a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i,len(b)):\n            S = S + b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef max_subarray_sum():\n    n = int(input())\n    while n != 0:\n        a = [int(input()) for _ in range(n)]\n        b = [a[0]]\n        for i in range(1, len(a)):\n            if b[-1] > 0 and a[i] > 0:\n                b[-1] += a[i]\n            else:\n                b.append(a[i])\n\n        ans = b[0]\n        for i in range(len(b)):\n            S = 0\n            for j in range(i, len(b)):\n                S += b[j]\n                ans = max(S, ans)\n        print(ans)\n        n = int(input())\n\nmax_subarray_sum()",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    \n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = sum(b[i:])\n        ans = max(S, ans)\n        \n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\ndef main():\n    n = int(input())\n    while n != 0:\n        a = [int(input()) for _ in range(n)]\n        b = [a[0]]\n        \n        for i in range(1, len(a)):\n            if b[-1] > 0 and a[i] > 0:\n                b[-1] += a[i]\n            else:\n                b.append(a[i])\n\n        ans = b[0]\n        for i in range(len(b)):\n            S = 0\n            for j in range(i, len(b)):\n                S += b[j]\n                ans = max(S, ans)\n        print(ans)\n        n = int(input())\n\nmain()",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n  while True:\n    n = int(input())\n    if n == 0:\n      break\n    nums = [int(input()) for _ in range(n)]\n    max_so_far = nums[0]\n    current_max = nums[0]\n    for i in range(1, n):\n      current_max = max(nums[i], current_max + nums[i])\n      max_so_far = max(max_so_far, current_max)\n    print(max_so_far)\n\nmax_sum_sequence()",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_so_far = nums[0]\n        current_max = nums[0]\n        for i in range(1, n):\n            current_max = max(nums[i], current_max + nums[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n\nmax_sum_sequence()",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_so_far = current_max = nums[0]\n        for i in range(1, n):\n            current_max = max(nums[i], current_max + nums[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n\nmax_sum_sequence()",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_sum, current_sum = nums[0], nums[0]\n        for num in nums[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        print(max_sum)\n\nmax_sum_sequence()",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_so_far = nums[0]\n        current_max = nums[0]\n        for num in nums[1:]:\n            current_max = max(num, current_max + num)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n\nmax_sum_sequence()",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_so_far = current_max = nums[0]\n        for i in range(1, n):\n            current_max = max(nums[i], current_max + nums[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n\nmax_sum_sequence()",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_so_far = current_max = nums[0]\n        for num in nums[1:]:\n            current_max = max(num, current_max + num)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n\nmax_sum_sequence()"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n  N = int(input())\n  for i in range(N):\n    xa, ya, ra, xb, yb, rb = map(float, input().split())\n    distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n    if distance + rb <= ra:\n      print(2)\n    elif distance + ra <= rb:\n      print(-2)\n    elif abs(ra - rb) < distance < ra + rb:\n      print(1)\n    else:\n      print(0)",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n    N = int(input())\n    for _ in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb <= ra:\n            print(2)\n        elif distance + ra <= rb:\n            print(-2)\n        elif abs(ra - rb) < distance < ra + rb:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    N = int(input())\n    for _ in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(ra - rb) < distance < ra + rb:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    N = int(input())\n    for _ in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(ra - rb) < distance < ra + rb:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    N = int(input())\n    for _ in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb <= ra:\n            print(2)\n        elif distance + ra <= rb:\n            print(-2)\n        elif abs(ra - rb) < distance < ra + rb:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    N = int(input())\n    for _ in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb <= ra:\n            print(2)\n        elif distance + ra <= rb:\n            print(-2)\n        elif abs(ra - rb) < distance < ra + rb:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    N = int(input())\n    for _ in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb <= ra:\n            print(2)\n        elif distance + ra <= rb:\n            print(-2)\n        elif abs(ra - rb) < distance < ra + rb:\n            print(1)\n        else:\n            print(0)"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n  while True:\n    n = int(input())\n    if n == 0:\n      break\n    a = [int(input()) for _ in range(n)]\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, n):\n      current_max = max(a[i], current_max + a[i])\n      max_so_far = max(max_so_far, current_max)\n    print(max_so_far)",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        max_sum = a[0]\n        current_sum = a[0]\n        for i in range(1, n):\n            current_sum = max(a[i], current_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n        print(max_sum)",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        max_so_far = a[0]\n        current_max = a[0]\n        for num in a[1:]:\n            current_max = max(num, current_max + num)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        max_so_far = current_max = a[0]\n        for i in range(1, n):\n            current_max = max(a[i], current_max + a[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        max_so_far = current_max = a[0]\n        for i in range(1, n):\n            current_max = max(a[i], current_max + a[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        max_so_far = current_max = a[0]\n        for i in range(1, n):\n            current_max = max(a[i], current_max + a[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        max_so_far = current_max = a[0]\n        for i in range(1, n):\n            current_max = max(a[i], current_max + a[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def f():\n    ax,ay,ar,bx,by,br=map(float,input().split())\n    d=(ax-bx)**2+(ay-by)**2\n    r1=(ar+br)*(ar+br)\n    r2=(ar-br)*(ar-br)\n    if d<=r1 and d>=r2:return 1;\n    elif d<r2 and ar>=br:return 2\n    elif d < r2 and ar <= br:return -2\n    else:return 0\n\nfor _ in range(int(input())):print(f())",
        "writer": "human",
        "rewrite": [
            "def circle_relation():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    r1_squared = (ar + br) ** 2\n    r2_squared = (ar - br) ** 2\n    \n    if r2_squared <= distance_squared <= r1_squared:\n        return 1\n    elif distance_squared < r2_squared and ar >= br:\n        return 2\n    elif distance_squared < r2_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relation())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def circle_relationship():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relationship())",
            "def circle_relationship():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    radius_sum_squared = (ar + br) ** 2\n    radius_diff_squared = (ar - br) ** 2\n    \n    if distance_squared <= radius_sum_squared and distance_squared >= radius_diff_squared:\n        return 1\n    elif distance_squared < radius_diff_squared and ar >= br:\n        return 2\n    elif distance_squared < radius_diff_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relationship())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    outer_radius_squared = (ar + br) ** 2\n    inner_radius_squared = (ar - br) ** 2\n    \n    if inner_radius_squared <= distance_squared <= outer_radius_squared:\n        return 1\n    elif distance_squared < inner_radius_squared and ar >= br:\n        return 2\n    elif distance_squared < inner_radius_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_sq = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_sq = (ar + br) ** 2\n    diff_radii_sq = (ar - br) ** 2\n    \n    if distance_sq <= sum_radii_sq and distance_sq >= diff_radii_sq:\n        return 1\n    elif distance_sq < diff_radii_sq and ar >= br:\n        return 2\n    elif distance_sq < diff_radii_sq and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "import math\ndef aux(v):\n    [xa,ya,ra,xb,yb,rb] = v\n    ab = math.sqrt((xb-xa)**2 + (yb-ya)**2)\n    if ab > ra + rb:\n        rst = 0\n    elif ab + rb < ra:\n        rst = 2\n    elif ab + ra < rb:\n        rst = -2\n    else:\n        rst = 1      \n    return(rst)    \n\nif __name__ == \"__main__\": \n    n = int(input())\n    for i in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef check_circle_relationship(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n\n    if distance_between_centers > ra + rb:\n        result = 0\n    elif distance_between_centers + rb < ra:\n        result = 2\n    elif distance_between_centers + ra < rb:\n        result = -2\n    else:\n        result = 1\n\n    return result\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        circle_values = list(map(float, input().split()))\n        print(check_circle_relationship(circle_values))",
            "import math\n\ndef check_circle_relationships(coords):\n    xa, ya, ra, xb, yb, rb = coords\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n\n    if distance_between_centers > ra + rb:\n        result = 0\n    elif distance_between_centers + rb < ra:\n        result = 2\n    elif distance_between_centers + ra < rb:\n        result = -2\n    else:\n        result = 1\n\n    return result\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        circle_data = list(map(float, input().split()))\n        print(check_circle_relationships(circle_data))",
            "import math\n\ndef check_circle_relationship(params):\n    xa, ya, ra, xb, yb, rb = params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > (ra + rb):\n        return 0\n    elif (distance + rb) < ra:\n        return 2\n    elif (distance + ra) < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\": \n    num_cases = int(input())\n    for _ in range(num_cases):\n        values = list(map(float, input().split()))\n        print(check_circle_relationship(values))",
            "import math\n\ndef check_circle_relationship(circle_data):\n    xa, ya, ra, xb, yb, rb = circle_data\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance_between_centers > ra + rb:\n        return 0\n    elif distance_between_centers + rb < ra:\n        return 2\n    elif distance_between_centers + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\": \n    number_of_cases = int(input())\n    for _ in range(number_of_cases):\n        circle_info = list(map(float, input().split()))\n        print(check_circle_relationship(circle_info))",
            "import math\n\ndef circle_relationship(params):\n    xa, ya, ra, xb, yb, rb = params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        params = list(map(float, input().split()))\n        print(circle_relationship(params))",
            "import math\n\ndef check_circle_relation(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        circle_data = list(map(float, input().split()))\n        print(check_circle_relation(circle_data))"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def crack_ball(v):\n  t = v / 9.8\n  y = 4.9 * t**2\n  floor = (y + 5) // 5\n  return floor",
        "writer": "machine",
        "rewrite": [
            "def calculate_bounces(height):\n    time = height / 9.8\n    distance = 4.9 * time**2\n    bounces = (distance + 5) // 5\n    return bounces",
            "def calculate_falls(v):\n    time = v / 9.8\n    height = 4.9 * time**2\n    levels = (height + 5) // 5\n    return levels",
            "def calculate_floor_height(velocity):\n    time = velocity / 9.8\n    height = 4.9 * time**2\n    floor_number = (height + 5) // 5\n    return floor_number",
            "def crack_ball(v):\n    return (4.9 * (v / 9.8)**2 + 5) // 5",
            "def calculate_height(v):\n    time = v / 9.8\n    height = 4.9 * time**2\n    levels = (height + 5) // 5\n    return levels",
            "def calculate_floors(height):\n    time = height / 9.8\n    distance = 4.9 * time**2\n    floors = (distance + 5) // 5\n    return floors"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n  n = int(input())\n  for _ in range(n):\n    xa, ya, ra, xb, yb, rb = map(float, input().split())\n    distance = ((xa - xb)**2 + (ya - yb)**2)**0.5\n    if distance + rb <= ra:\n      print(2)\n    elif distance + ra <= rb:\n      print(-2)\n    elif abs(distance - ra) <= rb or abs(distance - rb) <= ra:\n      print(1)\n    else:\n      print(0)",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(distance - ra) <= rb or abs(distance - rb) <= ra:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(distance - ra) <= rb or abs(distance - rb) <= ra:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(distance - ra) < rb or abs(distance - rb) < ra:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(distance - ra) <= rb or abs(distance - rb) <= ra:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(distance - ra) < rb or abs(distance - rb) < ra:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n        if distance + rb < ra:\n            print(2)\n        elif distance + ra < rb:\n            print(-2)\n        elif abs(distance - ra) < rb or abs(distance - rb) < ra:\n            print(1)\n        else:\n            print(0)"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def crack_ball():\n  while True:\n    try:\n      v = float(input())\n      t = v / 9.8\n      y = 4.9 * t**2\n      floor = (y + 5) / 5\n      print(int(floor))\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def crack_ball():\n    import sys\n    for line in sys.stdin:\n        try:\n            v = float(line.strip())\n            t = v / 9.8\n            y = 4.9 * t**2\n            floor = (y + 5) / 5\n            print(int(floor))\n        except ValueError:\n            continue",
            "def crack_ball():\n    import sys\n    for line in sys.stdin:\n        try:\n            v = float(line)\n            t = v / 9.8\n            y = 4.9 * t**2\n            floor = (y + 5) / 5\n            print(int(floor))\n        except ValueError:\n            continue",
            "def crack_ball():\n    import sys\n    for line in sys.stdin:\n        try:\n            v = float(line)\n            t = v / 9.8\n            y = 4.9 * t**2\n            floor = (y + 5) / 5\n            print(int(floor))\n        except ValueError:\n            continue",
            "def crack_ball():\n    import sys\n    for line in sys.stdin:\n        try:\n            v = float(line.strip())\n            t = v / 9.8\n            y = 4.9 * t**2\n            floor = (y + 5) / 5\n            print(int(floor))\n        except ValueError:\n            continue",
            "def crack_ball():\n    import sys\n    for line in sys.stdin:\n        try:\n            v = float(line.strip())\n            t = v / 9.8\n            y = 4.9 * t**2\n            floor = (y + 5) / 5\n            print(int(floor))\n        except ValueError:\n            continue",
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            t = v / 9.8\n            y = 4.9 * t ** 2\n            floor = (y + 5) // 5\n            print(int(floor))\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N, v = 1, 0.0\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            else:\n                N += 1\n\nif __name__ == \"__main__\":\n    solve()\n",
        "writer": "human",
        "rewrite": [
            "import sys\nimport math\n\ndef solve():\n    vs = list(map(float, sys.stdin))\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin):\n        N = 1\n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    target_velocities = [float(line.strip()) for line in sys.stdin]\n    \n    for target_velocity in target_velocities:\n        N = 1\n        \n        while True:\n            height = 5 * N - 5\n            current_velocity = math.sqrt(2 * 9.8 * height)\n            if current_velocity > target_velocity:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            height = 5 * N - 5\n            velocity = math.sqrt(2 * 9.8 * height)\n            if velocity > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    inputs = map(float, sys.stdin)\n    \n    for initial_velocity in inputs:\n        index = 1\n        \n        while True:\n            height = 5 * index - 5\n            current_velocity = math.sqrt(2 * 9.8 * height)\n            if current_velocity > initial_velocity:\n                print(index)\n                break\n            index += 1\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import sys\n\ndef solve(numbers):\n    max = -sys.maxsize\n    for i in range(0, len(numbers)):\n        sum = 0\n        for j in range(i, len(numbers)):\n            sum += numbers[j]\n            if sum > max:\n                max = sum\n    return max\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = []\n    for i in range(0, n):\n        numbers.append(int(input()))\n\n    print(solve(numbers))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    for num in numbers:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef max_subarray_sum(numbers):\n    max_sum = -sys.maxsize\n    for start in range(len(numbers)):\n        current_sum = 0\n        for end in range(start, len(numbers)):\n            current_sum += numbers[end]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n\nwhile True:\n    count = int(input())\n    if count == 0:\n        break\n    input_numbers = [int(input()) for _ in range(count)]\n    print(max_subarray_sum(input_numbers))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    \n    for number in numbers:\n        current_sum += number\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    for num in numbers:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef find_max_subarray_sum(nums):\n    max_sum = -sys.maxsize\n    for start in range(len(nums)):\n        current_sum = 0\n        for end in range(start, len(nums)):\n            current_sum += nums[end]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n\nwhile True:\n    count = int(input())\n    if count == 0:\n        break\n    array = [int(input()) for _ in range(count)]\n    print(find_max_subarray_sum(array))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    for num in numbers:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5*n-5\n        v_ex = 2*4.9*(y/k)**0.5\n        if v_ex >= v:\n            return n\n            break\n        else:\n            n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
        "writer": "human",
        "rewrite": [
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * y) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * (y / k)) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = 2 * (k * (y / k) ** 0.5)\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = 2 * k * (y / k) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * (y / k)) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * (y / k) ** 0.5)\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n  while True:\n    try:\n      a = list(map(int, input().split()))\n      b = list(map(int, input().split()))\n      hit = 0\n      blow = 0\n      for i in range(4):\n        if a[i] == b[i]:\n          hit += 1\n        elif b[i] in a:\n          blow += 1\n      print(hit, blow)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in range(4) if a[i] != b[i] and b[i] in a)\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in range(4) if a[i] != b[i] and b[i] in a)\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "import datetime\nimport calendar\n\ndef trans(month, day, year=2004):\n    past = datetime.date(year, month, day)\n    result = calendar.day_name[past.weekday()]\n    return result\n    \nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(trans(month, day))\n    \n",
        "writer": "human",
        "rewrite": [
            "import datetime\nimport calendar\n\ndef get_weekday(month, day, year=2004):\n    date_input = datetime.date(year, month, day)\n    return calendar.day_name[date_input.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0: break\n    print(get_weekday(month, day))",
            "import datetime\nimport calendar\n\ndef get_day_of_week(month, day, year=2004):\n    date = datetime.date(year, month, day)\n    return calendar.day_name[date.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0: break\n    print(get_day_of_week(month, day))",
            "import datetime\n\ndef get_weekday(month, day, year=2004):\n    date_input = datetime.date(year, month, day)\n    return date_input.strftime(\"%A\")\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(get_weekday(month, day))",
            "import datetime\nimport calendar\n\ndef get_day_of_week(month, day, year=2004):\n    date_object = datetime.date(year, month, day)\n    return calendar.day_name[date_object.weekday()]\n    \nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0:\n        break\n    print(get_day_of_week(month, day))",
            "import datetime\n\ndef get_weekday(month, day, year=2004):\n    date_obj = datetime.date(year, month, day)\n    return date_obj.strftime('%A')\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(get_weekday(month, day))",
            "import datetime\nimport calendar\n\ndef get_day_name(month, day, year=2004):\n    date = datetime.date(year, month, day)\n    return calendar.day_name[date.weekday()]\n\ndef main():\n    while True:\n        month, day = map(int, input().split())\n        if month == day == 0:\n            break\n        print(get_day_name(month, day))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def process(A, B):\n    hit, blow = 0, 0\n    for a, b in zip(A, B):\n        if a == b:\n            hit += 1\n        elif a in B:\n            blow += 1\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except: break\n    hit, blow = process(A, B)\n    print(hit, blow)\n",
        "writer": "human",
        "rewrite": [
            "def evaluate_guesses(guess, solution):\n    correct, misplaced = 0, 0\n    for g, s in zip(guess, solution):\n        if g == s:\n            correct += 1\n        elif g in solution:\n            misplaced += 1\n    return (correct, misplaced)\n\nwhile True:\n    try:\n        guess_input = input().split()\n        solution_input = input().split()\n    except: break\n    correct, misplaced = evaluate_guesses(guess_input, solution_input)\n    print(correct, misplaced)",
            "def process_lists(list1, list2):\n    correct_position, incorrect_position = 0, 0\n    for item1, item2 in zip(list1, list2):\n        if item1 == item2:\n            correct_position += 1\n        elif item1 in list2:\n            incorrect_position += 1\n    return (correct_position, incorrect_position)\n\nwhile True:\n    try:\n        list1 = input().split()\n        list2 = input().split()\n    except:\n        break\n    correct, incorrect = process_lists(list1, list2)\n    print(correct, incorrect)",
            "def process(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)",
            "def count_hits_and_blows(secret, guess):\n    hits, blows = 0, 0\n    for s, g in zip(secret, guess):\n        if s == g:\n            hits += 1\n        elif g in secret:\n            blows += 1\n    return hits, blows\n\nwhile True:\n    try:\n        secret_input = input().split()\n        guess_input = input().split()\n    except:\n        break\n    hits, blows = count_hits_and_blows(secret_input, guess_input)\n    print(hits, blows)",
            "def process(A, B):\n    hits = sum(a == b for a, b in zip(A, B))\n    blows = sum(a in B for a in A) - hits\n    return (hits, blows)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hits, blows = process(A, B)\n    print(hits, blows)",
            "def process(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a in B for a in A) - hit\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except EOFError:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    LIST=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    while True:\n        try:\n            count=3\n            M,D=map(int,input().split())\n            if M==0:\n                break\n\n            if M in [1,4,7]:\n                pass\n            elif M in [10]:\n                count+=1\n            elif M in [5]:\n                count+=2\n            elif M in [2,8]:\n                count+=3\n            elif M in [3,11]:\n                count+=4\n            elif M in [6]:\n                count+=5\n            elif M in [9,12]:\n                count+=6\n\n            count+=D%7\n\n            print(LIST[count%7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in [2, 8]:\n                count += 3\n            elif month in [3, 11]:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in [9, 12]:\n                count += 6\n\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in [2, 8]:\n                count += 3\n            elif month in [3, 11]:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in [9, 12]:\n                count += 6\n\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in {1, 4, 7}:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in {2, 8}:\n                count += 3\n            elif month in {3, 11}:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in {9, 12}:\n                count += 6\n\n            count += day % 7\n\n            print(days[count % 7])\n\n        except Exception:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in {1, 4, 7}:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in {2, 8}:\n                count += 3\n            elif month in {3, 11}:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in {9, 12}:\n                count += 6\n\n            count += day % 7\n            print(days[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in [2, 8]:\n                count += 3\n            elif month in [3, 11]:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in [9, 12]:\n                count += 6\n\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in [2, 8]:\n                count += 3\n            elif month in [3, 11]:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in [9, 12]:\n                count += 6\n\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except ValueError:\n            break\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n  while True:\n    try:\n      a = list(map(int, input().split()))\n      b = list(map(int, input().split()))\n      hit = 0\n      blow = 0\n      for i in range(4):\n        if a[i] == b[i]:\n          hit += 1\n        elif b[i] in a:\n          blow += 1\n      print(hit, blow)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in range(4) if b[i] in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for num in b if num in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in b if i in a) - hit\n            print(hit, blow)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "# Aizu Problem 0025: Hit and Blow\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef hit_and_blow(A, B):\n    hit, blow = 0, 0\n    for k in range(4):\n        if A[k] == B[k]:\n            hit += 1\n        elif A[k] in B:\n            blow += 1\n    return hit, blow\n\n\nwhile True:\n    try:\n        A = [int(_) for _ in input().split()]\n    except EOFError:\n        break\n    B = [int(_) for _ in input().split()]\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
        "writer": "human",
        "rewrite": [
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n    except EOFError:\n        break\n    B = list(map(int, input().split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = len(set(A) & set(B)) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n    except EOFError:\n        break\n    B = list(map(int, input().split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        hit, blow = hit_and_blow(A, B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for i in range(4) if A[i] == B[i])\n    blow = sum(1 for i in A if i in B) - hit\n    return hit, blow\n\nfor line in sys.stdin:\n    A = list(map(int, line.split()))\n    B = list(map(int, next(sys.stdin).split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def get_day_of_week(month, day):\n  days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  total_days = sum(days_in_month[:month - 1]) + day\n  days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n  return days_of_week[total_days % 7]\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == 0 and d == 0:\n    break\n  print(get_day_of_week(m, d))",
        "writer": "machine",
        "rewrite": [
            "def determine_weekday(month, day):\n    month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days_count = sum(month_days[:month - 1]) + day\n    weekday_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return weekday_names[total_days_count % 7]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(determine_weekday(month, day))",
            "def find_weekday(month, day):\n    month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(month_days[:month - 1]) + day\n    weekdays = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return weekdays[total_days % 7]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(find_weekday(month, day))",
            "def get_day_of_week(month, day):\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return days_of_week[total_days % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day_of_week(m, d))",
            "def get_day_of_week(month, day):\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"][total_days % 7]\n\nwhile True:\n    m, d = map(int, input().strip().split())\n    if (m, d) == (0, 0):\n        break\n    print(get_day_of_week(m, d))",
            "def calculate_weekday(month, day):\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    weekdays = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return weekdays[total_days % 7]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(calculate_weekday(month, day))",
            "def find_weekday(month, day):\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    weekdays = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return weekdays[total_days % 7]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(find_weekday(month, day))"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))",
        "writer": "machine",
        "rewrite": [
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\ndef main():\n    while True:\n        m, d = map(int, input().split())\n        if (m, d) == (0, 0):\n            break\n        print(get_day(m, d))\n\nif __name__ == \"__main__\":\n    main()",
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if (m, d) == (0, 0):\n        break\n    print(get_day(m, d))",
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\ndef main():\n    while True:\n        m, d = map(int, input().split())\n        if (m, d) == (0, 0):\n            break\n        print(get_day(m, d))\n\nif __name__ == \"__main__\":\n    main()",
            "def get_day(month, day):\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days_of_week[total_days % 7]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(get_day(month, day))",
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if (m, d) == (0, 0):\n        break\n    print(get_day(m, d))",
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))"
        ]
    }
]