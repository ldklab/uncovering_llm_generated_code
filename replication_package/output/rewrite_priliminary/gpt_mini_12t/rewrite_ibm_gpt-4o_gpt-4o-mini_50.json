[
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef digit_number():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
        "writer": "machine",
        "rewrite": [
            "import sys\n\ndef digit_number():\n    input_lines = sys.stdin.read().strip().splitlines()\n    for line in input_lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    lines = sys.stdin.read().strip().split('\\n')\n    for line in lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef count_digits_sum():\n    lines = sys.stdin.read().strip().split('\\n')\n    for line in lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_lines = sys.stdin.read().strip().split('\\n')\n    for line in input_lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_lines = sys.stdin.read().strip().split('\\n')\n    for line in input_lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input = sys.stdin.read().strip().splitlines()\n    for line in input:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    input_lines = sys.stdin.read().strip().split('\\n')\n    for line in input_lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def main():\n    for a in range(1,10):\n        for b in range(1,10):\n            print(\"{}x{}={}\".format(a,b,a*b))\n    return None\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a * b}\")\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a} x {b} = {a * b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n    return None\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def __main():\n    x = 1;\n    while x <= 9 :\n        y = 1;\n        while y <= 9 :\n             z = x * y;\n             print(str(x) + \"x\" + str(y)  + \"=\" + str(z) )\n             y = y + 1\n        x = x + 1\n        \n        \n__main()\n\n",
        "writer": "human",
        "rewrite": [
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x} x {y} = {z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()",
            "def main():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            z = x * y\n            print(f\"{x}x{y}={z}\")\n\nmain()"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n\n        c = a + b\n\n        if c == 0:\n            print(1)\n        else:\n            ans = 0\n\n            while c > 0:\n                ans += 1\n                c //= 10\n\n            print(ans)\n\nif __name__ == '__main__':\n    solve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(c)))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        \n        print(1 if c == 0 else len(str(c)))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        \n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n        \nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(abs(c))))\n        \nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        c = a + b\n        print(1 if c == 0 else len(str(c)))\n\nif __name__ == '__main__':\n    solve()"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "import sys\n#from me.io import dup_file_stdin\n\n#@dup_file_stdin\ndef solve():\n    m=[]\n    for line in sys.stdin:\n        m.append(int(line))\n    m.sort(reverse=True)\n    for h in m[0:3]:\n        print(h)\nsolve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    top_numbers = sorted(numbers, reverse=True)[:3]\n    for number in top_numbers:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    top_three = sorted(numbers, reverse=True)[:3]\n    for number in top_three:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    m = [int(line) for line in sys.stdin]\n    m.sort(reverse=True)\n    print(*m[:3], sep='\\n')\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    m = [int(line) for line in sys.stdin]\n    m.sort(reverse=True)\n    print(*m[:3], sep='\\n')\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for num in numbers[:3]:\n        print(num)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\nsolve()",
            "import sys\n\ndef solve():\n    m = [int(line) for line in sys.stdin]\n    m.sort(reverse=True)\n    for h in m[:3]:\n        print(h)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = list(map(int, sys.stdin))\n    numbers.sort(reverse=True)\n    for num in numbers[:3]:\n        print(num)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    top_three = sorted(numbers, reverse=True)[:3]\n    for number in top_three:\n        print(number)\n\nsolve()"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")\n\nprint_multiplication_table()",
        "writer": "machine",
        "rewrite": [
            "def display_multiplication_table():\n    for row in range(1, 10):\n        for col in range(1, 10):\n            print(f\"{row} * {col} = {row * col}\")\n\ndisplay_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        results = []\n        for j in range(1, 10):\n            results.append(f\"{i}x{j}={i*j}\")\n        print(\" \".join(results))\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    table = [(i, j, i * j) for i in range(1, 10) for j in range(1, 10)]\n    for i, j, product in table:\n        print(f\"{i}x{j}={product}\")\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\nprint_multiplication_table()",
            "def display_multiplication_table():\n    for row in range(1, 10):\n        for col in range(1, 10):\n            print(f\"{row} x {col} = {row * col}\")\n\ndisplay_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(i * j, end=' ')\n        print()\n\nprint_multiplication_table()",
            "def multiplication_table(n=9):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            print(f\"{i} x {j} = {i * j}\")\n\nmultiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} x {j} = {i * j}\")\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(\"{0}x{1}={2}\".format(i, j, i * j))\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\nprint_multiplication_table()",
            "def display_multiplication_table():\n    for row in range(1, 10):\n        for col in range(1, 10):\n            print(f\"{row} * {col} = {row * col}\")\n\ndisplay_multiplication_table()"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
        "writer": "machine",
        "rewrite": [
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n\n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def count_digits_sum():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = []\n\tfor i in range(10):\n\t\tmountains.append(int(input()))\n\t\n\tmountains = sorted(mountains, reverse = True)\n\n\tfor i in range(3):\n\t\tprint(mountains[i])\n\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = [int(input()) for _ in range(10)]\n\tmountains.sort(reverse=True)\n\tprint(*mountains[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    top_mountains = sorted(mountains, reverse=True)[:3]\n    \n    for mountain in top_mountains:\n        print(mountain)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = [int(input()) for _ in range(10)]\n\tmountains.sort(reverse=True)\n\tprint(*mountains[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()",
            "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()",
            "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n    mountains = [int(input()) for _ in range(10)]\n    mountains.sort(reverse=True)\n\n    for mountain in mountains[:3]:\n        print(mountain)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    mountains = [int(input()) for _ in range(10)]\n    for height in sorted(mountains, reverse=True)[:3]:\n        print(height)\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")\n\nprint_multiplication_tables()",
        "writer": "machine",
        "rewrite": [
            "def multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\nmultiplication_tables()",
            "def print_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\nprint_multiplication_tables()",
            "def display_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\ndisplay_multiplication_tables()",
            "def display_multiplication_tables():\n    for row in range(1, 10):\n        for column in range(1, 10):\n            result = row * column\n            print(f\"{row} x {column} = {result}\")\n\ndisplay_multiplication_tables()",
            "def multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\nmultiplication_tables()",
            "def print_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            result = i * j\n            print(f\"{i} x {j} = {result}\")\n\nprint_multiplication_tables()",
            "def display_multiplication_tables():\n    for row in range(1, 10):\n        for column in range(1, 10):\n            print(f\"{row} * {column} = {row * column}\")\n\ndisplay_multiplication_tables()",
            "def display_multiplication_tables():\n    for row in range(1, 10):\n        for column in range(1, 10):\n            print(f\"{row} * {column} = {row * column}\")\n\ndisplay_multiplication_tables()",
            "def display_multiplication_table():\n    for row in range(1, 10):\n        for column in range(1, 10):\n            result = row * column\n            print(f\"{row} * {column} = {result}\")\n\ndisplay_multiplication_table()",
            "def display_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\ndisplay_multiplication_tables()",
            "def display_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\ndisplay_multiplication_tables()",
            "def display_multiplication_tables():\n    for num1 in range(1, 10):\n        for num2 in range(1, 10):\n            print(f\"{num1} * {num2} = {num1 * num2}\")\n\ndisplay_multiplication_tables()"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def triangle(dataset):\n    a, b, c = dataset\n    if a*a + b*b == c*c:\n        return 1\n    return 0\n\nN = int(input())\nfor _ in range(N):\n    dataset = sorted(map(int, input().split()))\n    flag = triangle(dataset)\n    print([\"NO\", \"YES\"][flag])\n",
        "writer": "human",
        "rewrite": [
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return int(x * x + y * y == z * z)\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print([\"NO\", \"YES\"][result])",
            "def is_right_triangle(sides):\n    x, y, z = sorted(sides)\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = list(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sorted(sides)\n    return x * x + y * y == z * z\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = list(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return x * x + y * y == z * z\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return x * x + y * y == z * z\n\ncount = int(input())\nfor _ in range(count):\n    sides = sorted(map(int, input().split()))\n    output = \"YES\" if is_right_triangle(sides) else \"NO\"\n    print(output)",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return x * x + y * y == z * z\n\nM = int(input())\nfor _ in range(M):\n    edges = sorted(map(int, input().split()))\n    result = is_right_triangle(edges)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return x**2 + y**2 == z**2\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")",
            "def is_right_triangle(sides):\n    x, y, z = sides\n    return 1 if x * x + y * y == z * z else 0\n\nN = int(input())\nfor _ in range(N):\n    sides = sorted(map(int, input().split()))\n    result = is_right_triangle(sides)\n    print(\"YES\" if result else \"NO\")"
        ]
    },
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef main():\n    \"\"\" ????????? \"\"\"\n    istr = sys.stdin.read()\n    wi = istr.splitlines()\n    for i in wi:\n        a = list(map(int,i.split()))\n        b = str(a[0] + a[1])\n        print(len(b))\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    data = sys.stdin.read()\n    lines = data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        result = str(sum(numbers))\n        print(len(result))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        result = numbers[0] + numbers[1]\n        print(len(str(result)))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        result = str(numbers[0] + numbers[1])\n        print(len(result))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        sum_result = numbers[0] + numbers[1]\n        print(len(str(sum_result)))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        sum_result = str(sum(numbers))\n        print(len(sum_result))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    istr = sys.stdin.read()\n    wi = istr.splitlines()\n    for i in wi:\n        a = list(map(int, i.split()))\n        print(len(str(sum(a))))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        result_sum = str(numbers[0] + numbers[1])\n        print(len(result_sum))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        total_sum = numbers[0] + numbers[1]\n        print(len(str(total_sum)))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        total = str(numbers[0] + numbers[1])\n        print(len(total))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    numbers = sys.stdin.read().splitlines()\n    for line in numbers:\n        a = list(map(int, line.split()))\n        result_length = len(str(a[0] + a[1]))\n        print(result_length)\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        total = str(sum(numbers))\n        print(len(total))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    input_data = sys.stdin.read()\n    lines = input_data.splitlines()\n    for line in lines:\n        numbers = list(map(int, line.split()))\n        result_sum = numbers[0] + numbers[1]\n        print(len(str(result_sum)))\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "# coding:utf-8\n\ndef main():\n    N = int(input().rstrip())\n\n    for i in range(N):\n        ls = list(map(int, input().split(' ')))\n        ls.sort()\n\n        if(ls[0]**2 + ls[1]**2 == ls[2]**2):\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
        "writer": "human",
        "rewrite": [
            "# coding:utf-8\n\ndef main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        sides = list(map(int, input().split()))\n        sides.sort()\n\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n    for _ in range(N):\n        ls = sorted(map(int, input().split()))\n        print('YES' if ls[0]**2 + ls[1]**2 == ls[2]**2 else 'NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n    \n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n        \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        ls = sorted(map(int, input().split()))\n        print('YES' if ls[0]**2 + ls[1]**2 == ls[2]**2 else 'NO')\n            \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n    \n    for _ in range(N):\n        ls = sorted(map(int, input().split()))\n        \n        print('YES' if ls[0]**2 + ls[1]**2 == ls[2]**2 else 'NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input())\n\n    for _ in range(N):\n        ls = sorted(map(int, input().split()))\n        print('YES' if ls[0]**2 + ls[1]**2 == ls[2]**2 else 'NO')\n        \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n    \n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        \n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == \"__main__\":\n    main()",
            "# coding:utf-8\n\ndef main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        nums = sorted(map(int, input().split()))\n        \n        if nums[0] ** 2 + nums[1] ** 2 == nums[2] ** 2:\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        sides = sorted(map(int, input().split()))\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')\n        \nif __name__ == \"__main__\":\n    main()",
            "# coding:utf-8\n\ndef main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        numbers = sorted(map(int, input().split()))\n        \n        if numbers[0] ** 2 + numbers[1] ** 2 == numbers[2] ** 2:\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
            "def main():\n    N = int(input().strip())\n\n    for _ in range(N):\n        numbers = sorted(map(int, input().split()))\n        print('YES' if numbers[0]**2 + numbers[1]**2 == numbers[2]**2 else 'NO')\n        \nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(N):\n        a, b, c = sorted(map(int, data[index:index+3]))\n        if a**2 + b**2 == c**2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n        index += 3\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n\n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3 : 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 4 + i * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = [(\"YES\" if sorted(map(int, data[i:i+3]))[0]**2 + sorted(map(int, data[i:i+3]))[1]**2 == sorted(map(int, data[i:i+3]))[2]**2 else \"NO\") for i in range(1, N*3, 3)]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 4 + i * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n\n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 1 + (i + 1) * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 4 + i * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a, b, c = sorted(map(int, data[1 + i * 3: 4 + i * 3]))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n\n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def rev(str):\n    revstr=''\n    for i in range(len(str)-1,-1,-1):\n        revstr=revstr + str[i]\n    return revstr\nstr=input(\"\")\nprint(rev(str))",
        "writer": "human",
        "rewrite": [
            "def reverse_string(s):\n    return s[::-1]\n\ninput_string = input(\"\")\nprint(reverse_string(input_string))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\ninput_string = input(\"\")\nprint(reverse_string(input_string))",
            "def reverse_string(s):\n    return s[::-1]\n\ns = input(\"\")\nprint(reverse_string(s))",
            "def rev(s):\n    return s[::-1]\n\ns = input(\"\")\nprint(rev(s))",
            "def reverse_string(s):\n    return s[::-1]\n\ninput_string = input(\"\")\nprint(reverse_string(input_string))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\nuser_input = input(\"\")\nprint(reverse_string(user_input))",
            "def reverse_string(s):\n    return s[::-1]\n\ns = input(\"\")\nprint(reverse_string(s))"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_hills(heights):\n    heights.sort(reverse=True)\n    return heights[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
        "writer": "machine",
        "rewrite": [
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
            "def get_top_three(high_altitudes):\n    return sorted(high_altitudes, reverse=True)[:3]\n\n# Example usage:\naltitudes = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three(altitudes))\n\naltitudes = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three(altitudes))",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(s):\n    return s[::-1]",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string",
            "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string",
            "def reverse_string(s):\n    reversed_string = \"\"\n    for char in s:\n        reversed_string = char + reversed_string\n    return reversed_string",
            "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str",
            "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str",
            "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str",
            "def reverse_string(s):\n    reversed_string = ''.join(reversed(s))\n    return reversed_string",
            "def reverse_string(s):\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str",
            "def reverse_string(s):\n    return ''.join(reversed(s))",
            "def reverse_string(s):\n    return ''.join(reversed(s))"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_mountains(heights):\n    top_three = sorted(heights, reverse=True)[:3]\n    return top_three\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_mountains(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_mountains(heights))",
        "writer": "machine",
        "rewrite": [
            "def top_three_mountains(heights):\n    return sorted(heights, key=lambda x: x, reverse=True)[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_mountains(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_mountains(heights))",
            "def top_three_mountains(heights):\n    return sorted(heights, key=lambda x: x, reverse=True)[:3]\n\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_mountains(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_mountains(heights))",
            "def get_top_three_mountains(heights):\n    return sorted(heights, key=lambda x: x, reverse=True)[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(heights))",
            "def get_top_three_mountains(mountain_heights):\n    return sorted(mountain_heights, key=lambda x: -x)[:3]\n\n# Example usage:\nheights_data = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(heights_data))\n\nheights_data = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(heights_data))",
            "def get_top_three_mountains(mountain_heights):\n    return sorted(mountain_heights, key=lambda x: x, reverse=True)[:3]\n\n# Example usage:\nmountain_heights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(mountain_heights))\n\nmountain_heights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(mountain_heights))",
            "def get_top_three_mountains(heights):\n    return sorted(heights, reverse=True)[:3]\n\n# Example usage:\nheights_1 = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(heights_1))\n\nheights_2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(heights_2))",
            "def get_top_three_mountains(heights):\n    return sorted(heights, key=lambda x: -x)[:3]\n\nheights1 = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(heights1))\n\nheights2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(heights2))",
            "def get_top_three_mountains(heights):\n    return sorted(heights, reverse=True)[:3]\n\n# Example usage:\nmountain_heights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(mountain_heights))\n\nmountain_heights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(mountain_heights))",
            "def get_top_three_heights(heights):\n    return sorted(heights, key=lambda x: x, reverse=True)[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_heights(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_heights(heights))",
            "def get_top_three_mounts(mountain_heights):\n    return sorted(mountain_heights, reverse=True)[:3]\n\n# Example usage:\nmountain_heights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mounts(mountain_heights))\n\nmountain_heights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mounts(mountain_heights))",
            "def get_top_three_highest_mountains(mountain_heights):\n    return sorted(mountain_heights, reverse=True)[:3]\n\n# Example usage:\nmountain_heights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_highest_mountains(mountain_heights))\n\nmountain_heights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_highest_mountains(mountain_heights))",
            "def get_top_three_mountains(heights):\n    return sorted(heights, reverse=True)[:3]\n\nheights_example_1 = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(get_top_three_mountains(heights_example_1))\n\nheights_example_2 = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(get_top_three_mountains(heights_example_2))"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(1, N + 1):\n        a, b, c = sorted(map(int, data[i].split()))\n        if a**2 + b**2 == c**2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    lines = input().splitlines()\n    \n    N = int(lines[0])\n    results = []\n    \n    for i in range(1, N + 1):\n        a, b, c = sorted(map(int, lines[i].split()))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    results = [\"YES\" if (a**2 + b**2 == c**2) else \"NO\" for a, b, c in (sorted(map(int, data[i].split())) for i in range(1, N + 1))]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    from sys import stdin\n    data = stdin.read().splitlines()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(1, N + 1):\n        a, b, c = sorted(map(int, data[i].split()))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    results = [\"YES\" if sum(sorted(map(int, line.split()))[:2])**2 == sorted(map(int, line.split()))[2]**2 else \"NO\" for line in data[1:int(data[0]) + 1]]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    results = [\"YES\" if (lambda a, b, c: a**2 + b**2 == c**2)(*sorted(map(int, data[i].split()))) else \"NO\" for i in range(1, N + 1)]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    lines = input().splitlines()\n    \n    results = []\n    \n    for line in lines[1:int(lines[0]) + 1]:\n        a, b, c = sorted(map(int, line.split()))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().splitlines()\n\n    results = [\n        \"YES\" if (lambda a, b, c: a**2 + b**2 == c**2)(*sorted(map(int, line.split()))) else \"NO\"\n        for line in data[1:int(data[0]) + 1]\n    ]\n\n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    results = [\"YES\" if sorted(map(int, data[i].split()))[0]**2 + sorted(map(int, data[i].split()))[1]**2 == sorted(map(int, data[i].split()))[2]**2 else \"NO\" for i in range(1, N + 1)]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    lines = input().splitlines()\n    \n    for line in lines[1:int(lines[0]) + 1]:\n        a, b, c = sorted(map(int, line.split()))\n        print(\"YES\" if a**2 + b**2 == c**2 else \"NO\")",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    results = [\"YES\" if (lambda a, b, c: a**2 + b**2 == c**2)(*sorted(map(int, data[i].split()))) else \"NO\" for i in range(1, int(data[0]) + 1)]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    results = [\"YES\" if sorted(map(int, line.split()))[0]**2 + sorted(map(int, line.split()))[1]**2 == sorted(map(int, line.split()))[2]**2 else \"NO\" for line in data[1:N + 1]]\n    \n    print(\"\\n\".join(results))",
            "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    lines = input().splitlines()\n    \n    results = []\n    for line in lines[1:int(lines[0]) + 1]:\n        a, b, c = sorted(map(int, line.split()))\n        results.append(\"YES\" if a**2 + b**2 == c**2 else \"NO\")\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(s: str) -> str:\n    return s[::-1]\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(s: str) -> str:\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    reversed_str = \"\"\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    reversed_str = \"\"\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    reversed_s = ''\n    for char in s:\n        reversed_s = char + reversed_s\n    return reversed_s\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    return ''.join(reversed(s))\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s):\n    return ''.join(reversed(s))\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    result = ''\n    for char in s:\n        result = char + result\n    return result\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    result = ''\n    for char in s:\n        result = char + result\n    return result\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    return ''.join(reversed(s))\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
            "def reverse_string(s: str) -> str:\n    reversed_str = ''\n    for char in s:\n        reversed_str = char + reversed_str\n    return reversed_str\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd(a, b) :\n    if a % b == 0 :\n        return b\n    else :\n        return gcd(b, a % b)\n\nwhile True :\n    try :\n        a, b = map(int, input().split())\n    except EOFError :\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)\n",
        "writer": "human",
        "rewrite": [
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n\n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n\n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b = map(int, input().split())\n        a, b = max(a, b), min(a, b)\n        x = gcd(a, b)\n        print(x, a * b // x)\nexcept EOFError:\n    pass",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n\n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n    except EOFError:\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\ndef gcd(a, b):\n    for i in range(1, a+1):\n        if a % i == 0:\n            t = a // i\n            if b % t == 0:\n                return t\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, lcm(a, b))",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a * (b // gcdab))",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\nfrom math import gcd\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, lcm(a, b))",
            "import sys\nfrom math import gcd\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\nfrom math import gcd\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcd_ab = gcd(a, b)\n    print(gcd_ab, (a // gcd_ab) * b)",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, (a // gcdab) * b)",
            "import sys\nfrom math import gcd\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
            "import sys\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def main():\n    str = input()\n    str = str[::-1]\n    print(str)\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_string = user_input[::-1]\n    print(reversed_string)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_string = user_input[::-1]\n    print(reversed_string)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_str = user_input[::-1]\n    print(reversed_str)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_str = user_input[::-1]\n    print(reversed_str)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_string = user_input[::-1]\n    print(reversed_string)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_str = user_input[::-1]\n    print(reversed_str)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_string = user_input[::-1]\n    print(reversed_string)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    user_input = input()\n    reversed_input = user_input[::-1]\n    print(reversed_input)\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        # Calculate the determinant\n        det = a * e - b * d\n        # Calculate x and y using Cramer's rule\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        # Print the solutions rounded to three decimal places\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
        "writer": "machine",
        "rewrite": [
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        determinant = a * e - b * d\n        x = (c * e - b * f) / determinant\n        y = (a * f - c * d) / determinant\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        if det != 0:\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        determinant = a * e - b * d\n        x = (c * e - b * f) / determinant\n        y = (a * f - c * d) / determinant\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        det = a * e - b * d\n        if det != 0:\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_system_of_equations():\n    for line in sys.stdin:\n        coefficients = list(map(int, line.split()))\n        a, b, c, d, e, f = coefficients\n        determinant = a * e - b * d\n        x = (c * e - b * f) / determinant\n        y = (a * f - c * d) / determinant\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_system_of_equations()"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = (a * b) // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
        "writer": "machine",
        "rewrite": [
            "import sys\nfrom math import gcd\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            greatest_common_divisor = gcd(a, b)\n            least_common_multiple = (a * b) // greatest_common_divisor\n            print(greatest_common_divisor, least_common_multiple)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().splitlines()\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            gcd_value = math.gcd(a, b)\n            lcm_value = (a * b) // gcd_value\n            print(gcd_value, lcm_value)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().splitlines()\n    results = []\n    for line in input_data:\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = (a * b) // gcd\n            results.append(f\"{gcd} {lcm}\")\n    print(\"\\n\".join(results))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = abs(a * b) // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = (a * b) // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = a * b // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().splitlines():\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = abs(a * b) // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef calculate_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd_value = math.gcd(a, b)\n            lcm_value = (a * b) // gcd_value\n            print(gcd_value, lcm_value)\n\ncalculate_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = abs(a * b) // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = a * b // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = a * b // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = a * b // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import sys\n\ndef solve_simultaneous_equations():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
        "writer": "machine",
        "rewrite": [
            "import sys\n\ndef solve_simultaneous_equations():\n    lines = sys.stdin.read().strip().split('\\n')\n    for line in lines:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        if denominator != 0:\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    data = sys.stdin.read().strip().split('\\n')\n    for entry in data:\n        a, b, c, d, e, f = map(int, entry.split())\n        denom = a * e - b * d\n        x = (c * e - b * f) / denom\n        y = (a * f - c * d) / denom\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input_lines = sys.stdin.read().strip().split('\\n')\n    for line in input_lines:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input_data = sys.stdin.read().strip().split('\\n')\n    for line in input_data:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input_data = sys.stdin.read().strip().split('\\n')\n    results = []\n    for line in input_data:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        results.append(f\"{x:.3f} {y:.3f}\")\n    print(\"\\n\".join(results))",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    lines = sys.stdin.read().strip().split('\\n')\n    for line in lines:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        if denominator != 0:\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    input_lines = sys.stdin.read().strip().split('\\n')\n    for line in input_lines:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = ((debt * 1.05 + 999) // 1000) * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
        "writer": "machine",
        "rewrite": [
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def calculate_debt(years):\n    debt = 100000\n    for _ in range(years):\n        debt = ((debt * 1.05 + 999) // 1000) * 1000\n    print(int(debt))\n\n# Example usage:\n# years = int(input())\n# calculate_debt(years)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = ((debt * 1.05 + 999) // 1000) * 1000\n    return int(debt)\n\n# Example usage:\n# n = int(input())\n# print(compute_debt(n))",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = ((debt * 1.05 + 999) // 1000) * 1000\n    return int(debt)\n\n# Example usage:\n# n = int(input())\n# print(compute_debt(n))",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = round(debt * 1.05 + 999, -3)\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = round(debt * 1.05 / 1000) * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\nn = int(input().strip())\ndebt_in_n_weeks(n)",
        "writer": "machine",
        "rewrite": [
            "def calculate_debt_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    return int(debt)\n\n# Example usage:\nn = int(input().strip())\nprint(calculate_debt_weeks(n))",
            "def calculate_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\nn = int(input().strip())\ncalculate_debt(n)",
            "def calculate_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\nn = int(input().strip())\ncalculate_debt(n)",
            "def calculate_debt(weeks):\n    debt_amount = 100000\n    for _ in range(weeks):\n        debt_amount = (debt_amount * 1.05 + 999) // 1000 * 1000\n    return int(debt_amount)\n\n# Example usage:\nweeks_input = int(input().strip())\nprint(calculate_debt(weeks_input))",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\nn = int(input().strip())\ndebt_in_n_weeks(n)",
            "def calculate_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    return int(debt)\n\n# Example usage:\nn = int(input().strip())\nprint(calculate_debt(n))",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    return int(debt)\n\n# Example usage:\nn = int(input().strip())\nprint(debt_in_n_weeks(n))",
            "def calculate_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\nn = int(input().strip())\ncalculate_debt(n)",
            "def calculate_debt_after_weeks(weeks):\n    initial_debt = 100000\n    for _ in range(weeks):\n        initial_debt = (initial_debt * 1.05 + 999) // 1000 * 1000\n    print(int(initial_debt))\n\nweeks_input = int(input().strip())\ncalculate_debt_after_weeks(weeks_input)",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    return int(debt)\n\nn = int(input().strip())\nprint(debt_in_n_weeks(n))",
            "def calculate_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    return int(debt)\n\n# Example usage:\nn = int(input().strip())\nprint(calculate_debt(n))",
            "def calculate_debt_after_weeks(weeks):\n    initial_debt = 100000\n    for _ in range(weeks):\n        initial_debt = (initial_debt * 1.05 + 999) // 1000 * 1000\n    print(int(initial_debt))\n\nweeks = int(input().strip())\ncalculate_debt_after_weeks(weeks)"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(10):\n            for b in range(10):\n                for c in range(10):\n                    for d in range(10):\n                        if a + b + c + d == n:\n                            count += 1\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
        "writer": "machine",
        "rewrite": [
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        results.append(sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n))\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import sys\n\ndef compoundInterest(x, i, n):\n    if n == 0:\n        return x\n\n    ans = int(x * (1 + i))\n    hasu = ans % 1000\n    if hasu != 0:\n        ans -= hasu\n        ans += 1000\n    return compoundInterest(ans, i, n-1)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print (ans)",
        "writer": "human",
        "rewrite": [
            "def compound_interest(principal, rate, periods):\n    for _ in range(periods):\n        principal = int(principal * (1 + rate))\n        if principal % 1000 != 0:\n            principal = (principal // 1000 + 1) * 1000\n    return principal\n\nif __name__ == \"__main__\":\n    periods = int(input())\n    result = compound_interest(100000, 0.05, periods)\n    print(result)",
            "import sys\n\ndef compound_interest(principal, rate, periods):\n    if periods == 0:\n        return principal\n\n    amount = int(principal * (1 + rate))\n    remainder = amount % 1000\n    if remainder != 0:\n        amount -= remainder\n        amount += 1000\n    return compound_interest(amount, rate, periods - 1)\n\nif __name__ == \"__main__\":\n    num_periods = int(input())\n    result = compound_interest(100000, 0.05, num_periods)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    for _ in range(periods):\n        principal *= (1 + rate)\n        principal = int(principal / 1000) * 1000 + 1000\n    return principal\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = compound_interest(100000, 0.05, n)\n    print(result)",
            "def compound_interest(principal, rate, years):\n    if years == 0:\n        return principal\n\n    total = int(principal * (1 + rate))\n    remainder = total % 1000\n    if remainder != 0:\n        total -= remainder\n        total += 1000\n    return compound_interest(total, rate, years - 1)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    for _ in range(periods):\n        principal *= (1 + rate)\n        principal = int(principal) // 1000 * 1000 + 1000 if int(principal) % 1000 != 0 else int(principal)\n    return principal\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = compound_interest(100000, 0.05, n)\n    print(result)",
            "def compound_interest(principal, rate, years):\n    if years == 0:\n        return principal\n\n    amount = int(principal * (1 + rate))\n    remainder = amount % 1000\n    if remainder != 0:\n        amount -= remainder\n        amount += 1000\n    return compound_interest(amount, rate, years - 1)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "def compound_interest(principal, rate, years):\n    if years == 0:\n        return principal\n\n    amount = int(principal * (1 + rate))\n    remainder = amount % 1000\n    if remainder != 0:\n        amount -= remainder\n        amount += 1000\n    return compound_interest(amount, rate, years - 1)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    if periods == 0:\n        return principal\n\n    amount = int(principal * (1 + rate))\n    remainder = amount % 1000\n    if remainder != 0:\n        amount -= remainder\n        amount += 1000\n    return compound_interest(amount, rate, periods - 1)\n\nif __name__ == \"__main__\":\n    periods = int(input())\n    result = compound_interest(100000, 0.05, periods)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    for _ in range(periods):\n        principal = int(principal * (1 + rate))\n        remainder = principal % 1000\n        if remainder != 0:\n            principal -= remainder\n            principal += 1000\n    return principal\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = compound_interest(100000, 0.05, n)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    for _ in range(periods):\n        principal = int(principal * (1 + rate))\n        remainder = principal % 1000\n        if remainder != 0:\n            principal -= remainder\n            principal += 1000\n    return principal\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = compound_interest(100000, 0.05, n)\n    print(result)",
            "def compound_interest(principal, rate, periods):\n    if periods == 0:\n        return principal\n\n    total = int(principal * (1 + rate))\n    remainder = total % 1000\n    if remainder != 0:\n        total -= remainder\n        total += 1000\n    return compound_interest(total, rate, periods - 1)\n\nif __name__ == \"__main__\":\n    periods = int(input())\n    result = compound_interest(100000, 0.05, periods)\n    print(result)",
            "def compound_interest(principal, rate, years):\n    for _ in range(years):\n        principal *= (1 + rate)\n        principal = (principal // 1000 + (1 if principal % 1000 > 0 else 0)) * 1000\n    return int(principal)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    result = compound_interest(100000, 0.05, n)\n    print(result)"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().split('\\n')\n    results = []\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        results.append(f\"{gcd} {lcm}\")\n    for result in results:\n        print(result)\n\ncompute_gcd_lcm()",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().split('\\n')\n    results = []\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = (a * b) // gcd\n        results.append(f\"{gcd} {lcm}\")\n    print(\"\\n\".join(results))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        print(f\"{gcd} {lcm}\")\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().splitlines()\n    results = []\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = (a * b) // gcd\n        results.append(f\"{gcd} {lcm}\")\n    print('\\n'.join(results))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        print(f\"{gcd} {lcm}\")\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().splitlines()\n    results = []\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = (a * b) // gcd\n        results.append(f\"{gcd} {lcm}\")\n    print(\"\\n\".join(results))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().splitlines()\n    results = []\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = (a * b) // gcd\n        results.append(f\"{gcd} {lcm}\")\n    print(\"\\n\".join(results))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef calculate_gcd_lcm():\n    data = sys.stdin.read().strip().splitlines()\n    output = []\n    for entry in data:\n        x, y = map(int, entry.split())\n        greatest_common_divisor = math.gcd(x, y)\n        least_common_multiple = x * y // greatest_common_divisor\n        output.append(f\"{greatest_common_divisor} {least_common_multiple}\")\n    print(\"\\n\".join(output))\n\ncalculate_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().splitlines()\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        print(f\"{gcd} {lcm}\")\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef calculate_gcd_lcm():\n    lines = sys.stdin.read().strip().split('\\n')\n    output = []\n    for line in lines:\n        x, y = map(int, line.split())\n        gcd_value = math.gcd(x, y)\n        lcm_value = x * y // gcd_value\n        output.append(f\"{gcd_value} {lcm_value}\")\n    print('\\n'.join(output))\n\ncalculate_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        print(f\"{gcd} {lcm}\")\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef calculate_gcd_lcm():\n    data = sys.stdin.read().strip().splitlines()\n    output = []\n    for entry in data:\n        x, y = map(int, entry.split())\n        greatest_common_divisor = math.gcd(x, y)\n        least_common_multiple = x * y // greatest_common_divisor\n        output.append(f\"{greatest_common_divisor} {least_common_multiple}\")\n    print(\"\\n\".join(output))\n\ncalculate_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        print(f\"{gcd} {lcm}\")\n\ncompute_gcd_lcm()"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import math\ndef saidai(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n\n    return saidai(x, y % x)\n\ndef saisyo(x, y):\n    spam = saidai(x, y)\n    return spam * (x / spam) * (y / spam)\n\n# a,b,c,d,e,f  = list(map(int,'1 2 3 4 5 6'.split()))\ntry:\n    while 1:\n\n        a,b,c,d,e,f  = list(map(int,input().split()))\n        s = saidai(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1*c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b*y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        s = gcd(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\ndef lcm(x, y):\n    g = gcd(x, y)\n    return g * (x // g) * (y // g)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = d / g * -1\n        k2 = a / g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    g = gcd(x, y)\n    return g * (x // g) * (y // g)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n\n        k1 = d / g * -1\n        k2 = a / g\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    return gcd(y % x, x) if x != 0 else y\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        gcd_value = gcd(a, d)\n\n        k1 = d / gcd_value * -1\n        k2 = a / gcd_value\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        s = gcd(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n\n        k1 = d // g * -1\n        k2 = a // g\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    divisor = gcd(x, y)\n    return divisor * (x // divisor) * (y // divisor)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        divisor = gcd(a, d)\n        k1 = d / divisor * -1\n        k2 = a / divisor\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    if x == 0:\n        return y\n    return gcd(y % x, x)\n\ndef lcm(x, y):\n    g = gcd(x, y)\n    return g * (x // g) * (y // g)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n\n        k1 = d / g * -1\n        k2 = a / g\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    g = gcd(x, y)\n    return g * (x // g) * (y // g)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n\n        k1 = d / g * -1\n        k2 = a / g\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef calculate(x, y):\n    common_divisor = gcd(x, y)\n    return common_divisor * (x / common_divisor) * (y / common_divisor)\n\ntry:\n    while True:\n        a, b, c, d, e, f = list(map(int, input().split()))\n        common_divisor = gcd(a, d)\n        \n        k1 = d / common_divisor * -1\n        k2 = a / common_divisor\n        \n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef lcm(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        divisor = gcd(a, d)\n\n        k1 = d / divisor * -1\n        k2 = a / divisor\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
            "import math\n\ndef gcd(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n    return gcd(x, y % x)\n\ndef least_common_multiple(x, y):\n    gcd_value = gcd(x, y)\n    return gcd_value * (x // gcd_value) * (y // gcd_value)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        gcd_ab = gcd(a, d)\n\n        k1 = d / gcd_ab * -1\n        k2 = a / gcd_ab\n\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(10):\n            for b in range(10):\n                for c in range(10):\n                    for d in range(10):\n                        if a + b + c + d == n:\n                            count += 1\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
        "writer": "machine",
        "rewrite": [
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    return [sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n) for n in datasets]\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def count_quadruples(datasets):\n    results = []\n    for target in datasets:\n        count = 0\n        for a in range(10):\n            for b in range(10):\n                for c in range(10):\n                    for d in range(10):\n                        if a + b + c + d == target:\n                            count += 1\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(count_quadruples(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\n\ndef ans(num):\n    ans = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a+b+c+d == num:\n                        ans += 1\n\n    return ans\n\n\ndef main():\n    a = []\n\n    for line in sys.stdin:\n        a.append(int(line))\n\n    for line in a:\n        print(ans(line))\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef count_combinations(num):\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == num:\n                        count += 1\n    return count\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    results = [count_combinations(num) for num in numbers]\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(num):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == num:\n                        count += 1\n\n    return count\n\ndef main():\n    inputs = []\n\n    for line in sys.stdin:\n        inputs.append(int(line))\n\n    for num in inputs:\n        print(count_combinations(num))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n\n    for digits in range(10000):\n        if sum(int(digit) for digit in str(digits).zfill(4)) == target_sum:\n            count += 1\n\n    return count\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    \n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target_sum:\n                        count += 1\n\n    return count\n\ndef main():\n    inputs = [int(line) for line in sys.stdin]\n    for number in inputs:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n    for digits in range(10000):\n        if sum(int(x) for x in str(digits).zfill(4)) == target_sum:\n            count += 1\n    return count\n\ndef main():\n    inputs = [int(line) for line in sys.stdin]\n    for number in inputs:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_digit_combinations(num):\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == num:\n                        count += 1\n    return count\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    results = [count_digit_combinations(num) for num in numbers]\n    for result in results:\n        print(result)\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_digit_sums(target):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target:\n                        count += 1\n\n    return count\n\ndef main():\n    inputs = []\n\n    for line in sys.stdin:\n        inputs.append(int(line.strip()))\n\n    for number in inputs:\n        print(count_digit_sums(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target_sum:\n                        count += 1\n\n    return count\n\ndef main():\n    inputs = [int(line) for line in sys.stdin]\n\n    for num in inputs:\n        print(count_combinations(num))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(num):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == num)\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == target_sum)\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(num):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == num)\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef count_combinations(target_sum):\n    count = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == target_sum:\n                        count += 1\n\n    return count\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    \n    for number in numbers:\n        print(count_combinations(number))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    p = 2\n    while p * p <= n:\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n        p += 1\n    return sum(sieve)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    numbers = [int(num) for num in data]\n    for n in numbers:\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
        "writer": "machine",
        "rewrite": [
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0], sieve[1] = False, False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    numbers = map(int, sys.stdin.read().strip().split())\n    print(*(count_primes(n) for n in numbers), sep='\\n')\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            sieve[p*p:n+1:p] = [False] * len(sieve[p*p:n+1:p])\n    return sum(sieve)\n\ndef main():\n    import sys\n    for n in map(int, sys.stdin.read().strip().split()):\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if primes[p]:\n            for multiple in range(p * p, n + 1, p):\n                primes[multiple] = False\n    return sum(primes)\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        n = int(line.strip())\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0], sieve[1] = False, False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        n = int(line.strip())\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    input_data = sys.stdin.read().strip().split()\n    for num in map(int, input_data):\n        print(count_primes(num))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0:2] = [False, False]\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        n = int(line.strip())\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        n = int(line.strip())\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0], sieve[1] = False, False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        n = int(line.strip())\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    numbers = map(int, sys.stdin.read().strip().split())\n    for n in numbers:\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0], sieve[1] = False, False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    data = map(int, sys.stdin.read().strip().split())\n    for n in data:\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    numbers = map(int, input().strip().split())\n    for n in numbers:\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n    return sum(sieve)\n\ndef main():\n    import sys\n    for line in sys.stdin:\n        n = int(line.strip())\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    N = [1 for _ in range(n)]\n    a = sum(N[:pos[0]])\n    b = sum(N[pos[0]:pos[1]])\n    c = sum(N[pos[1]:pos[2]])\n    d = sum(N[pos[2]:])\n    if a > 9 or b > 9 or c > 9 or d > 9:\n        return None\n    return (a,b,c,d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        probs = [get_nums(n, p) for p in comb(range(n+1), 3)]\n        probs = [p for p in probs if p != None]\n        print(len(probs))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    segment_sums = [sum(1 for _ in range(pos[i] if i > 0 else 0, pos[i + 1])) for i in range(3)] + [sum(1 for _ in range(pos[2], n))]\n    if any(s > 9 for s in segment_sums):\n        return None\n    return tuple(segment_sums)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3) if get_nums(n, p) is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_segment_sums(n, positions):\n    segment_counts = [1] * n\n    segment_sums = [sum(segment_counts[start:end]) for start, end in zip([0] + list(positions), positions + [n])]\n    if any(segment_sum > 9 for segment_sum in segment_sums):\n        return None\n    return tuple(segment_sums)\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        valid_combinations = [get_segment_sums(n, pos) for pos in comb(range(n + 1), 3) if get_segment_sums(n, pos) is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    a, b, c, d = (sum([1] * p) for p in [pos[0], pos[1] - pos[0], pos[2] - pos[1], n - pos[2]])\n    if any(x > 9 for x in (a, b, c, d)):\n        return None\n    return (a, b, c, d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_numbers_count(n, positions):\n    segments = [sum(1 for _ in range(positions[i] if i == 0 else positions[i] - positions[i - 1])) for i in range(4)]\n    if any(segment > 9 for segment in segments):\n        return None\n    return tuple(segments)\n\ndef execute():\n    for line in sys.stdin:\n        n = int(line)\n        valid_combinations = [get_numbers_count(n, pos) for pos in comb(range(n + 1), 3)]\n        valid_combinations = [combo for combo in valid_combinations if combo is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    execute()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    parts = [sum(1 for _ in range(pos[i] if i < len(pos) else n)) for i in range(4)]\n    if any(part > 9 for part in parts):\n        return None\n    return tuple(parts)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n+1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    segments = [1] * n\n    a, b, c, d = sum(segments[:pos[0]]), sum(segments[pos[0]:pos[1]]), sum(segments[pos[1]:pos[2]]), sum(segments[pos[2]:])\n    if any(x > 9 for x in (a, b, c, d)):\n        return None\n    return (a, b, c, d)\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    segments = [sum(1 for _ in range(pos[i] - (pos[i - 1] if i > 0 else 0))) for i in range(3)]\n    segments.append(n - sum(segments))\n    if any(seg > 9 for seg in segments):\n        return None\n    return tuple(segments)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    parts = [sum(1 for _ in range(pos[i] if i > 0 else 0, pos[i + 1])) for i in range(3)] + [n - pos[2]]\n    if any(part > 9 for part in parts):\n        return None\n    return tuple(parts)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_probs = [get_nums(n, p) for p in comb(range(n + 1), 3) if get_nums(n, p) is not None]\n        print(len(valid_probs))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef calculate_sums(n, positions):\n    totals = [1] * n\n    segments = [sum(totals[start:end]) for start, end in zip(positions, positions[1:] + [None])]\n    if any(segment > 9 for segment in segments):\n        return None\n    return tuple(segments)\n\ndef execute():\n    for input_value in sys.stdin:\n        n = int(input_value)\n        valid_combinations = [calculate_sums(n, positions) for positions in comb(range(n + 1), 3)]\n        valid_combinations = [combo for combo in valid_combinations if combo is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    execute()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    a = pos[0]\n    b = pos[1] - pos[0]\n    c = pos[2] - pos[1]\n    d = n - pos[2]\n    if any(x > 9 for x in [a, b, c, d]):\n        return None\n    return (a, b, c, d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    segments = [sum(1 for _ in range(pos[i] - (pos[i - 1] if i > 0 else 0))) for i in range(3)]\n    segments.append(n - pos[2])\n    if any(x > 9 for x in segments):\n        return None\n    return tuple(segments)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    sections = [sum(1 for _ in range(pos[i] - (pos[i-1] if i > 0 else 0))) for i in range(3)] + [n - pos[2]]\n    if any(x > 9 for x in sections):\n        return None\n    return tuple(sections)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        valid_combinations = [get_nums(n, p) for p in comb(range(n + 1), 3)]\n        valid_combinations = [p for p in valid_combinations if p is not None]\n        print(len(valid_combinations))\n\nif __name__ == '__main__':\n    run()"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = [i for i in range(w+1)]\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n\n        xs[a], xs[b] = xs[b], xs[a]\n\n    for i in range(1, w+1):\n        print(xs[i])\n\nif __name__ == \"__main__\": main()",
        "writer": "human",
        "rewrite": [
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    width = int(input())\n    swaps = int(input())\n\n    items = list(range(width + 1))\n    for _ in range(swaps):\n        first, second = map(int, input().split(\",\"))\n        items[first], items[second] = items[second], items[first]\n\n    for i in range(1, width + 1):\n        print(items[i])\n\nif __name__ == \"__main__\": main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    positions = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    for i in range(1, w + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n    positions = list(range(w + 1))\n    \n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n    \n    print(*positions[1:], sep=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        xs[a], xs[b] = xs[b], xs[a]\n\n    print(*xs[1:w + 1], sep='\\n')\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        xs[a], xs[b] = xs[b], xs[a]\n\n    print(*xs[1:], sep='\\n')\n\nif __name__ == \"__main__\": main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    num_swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(num_swaps):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\": main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n    \n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        xs[a], xs[b] = xs[b], xs[a]\n    \n    print(*xs[1:w + 1], sep='\\n')\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    num_swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(num_swaps):\n        index_a, index_b = map(int, input().split(\",\"))\n        positions[index_a], positions[index_b] = positions[index_b], positions[index_a]\n\n    for i in range(1, width + 1):\n        print(positions[i])\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n    xs = list(range(w + 1))\n\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        xs[a], xs[b] = xs[b], xs[a]\n\n    print(*xs[1:w + 1], sep='\\n')\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    width = int(input())\n    num_swaps = int(input())\n\n    positions = list(range(width + 1))\n    for _ in range(num_swaps):\n        x, y = map(int, input().split(\",\"))\n        positions[x], positions[y] = positions[y], positions[x]\n\n    for idx in range(1, width + 1):\n        print(positions[idx])\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n    \n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        xs[a], xs[b] = xs[b], xs[a]\n\n    print(*xs[1:], sep=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()",
            "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    positions = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n        positions[a], positions[b] = positions[b], positions[a]\n\n    print(*positions[1:], sep=\"\\n\")\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "import sys\n\n\ndef main():\n    stack = []\n    for x in sys.stdin:\n        x = int(x)\n        if x:\n            stack.append(x)\n        else:\n            print(stack.pop())\n\n\nif __name__ == '__main__':\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        num = int(line)\n        if num != 0:\n            stack.append(num)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        elif stack:\n            print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        num = int(line.strip())\n        if num != 0:\n            stack.append(num)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        num = int(line)\n        if num:\n            stack.append(num)\n        elif stack:\n            print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number != 0:\n            stack.append(number)\n        else:\n            if stack:\n                print(stack.pop())\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        number = int(line)\n        if number:\n            stack.append(number)\n        elif stack:\n            print(stack.pop())\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for op in operations:\n        a, b = op\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
        "writer": "machine",
        "rewrite": [
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def swap_lines(width, num_operations, swap_operations):\n    positions = list(range(1, width + 1))\n    for operation in swap_operations:\n        x, y = operation\n        positions[x - 1], positions[y - 1] = positions[y - 1], positions[x - 1]\n    return positions\n\n# Sample usage\nwidth = 5\nnum_operations = 4\nswap_operations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = swap_lines(width, num_operations, swap_operations)\nfor number in result:\n    print(number)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(width, num_operations, swaps):\n    positions = list(range(1, width + 1))\n    for swap in swaps:\n        x, y = swap\n        positions[x - 1], positions[y - 1] = positions[y - 1], positions[x - 1]\n    return positions\n\n# Sample usage\nwidth = 5\nnum_operations = 4\nswaps = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(width, num_operations, swaps)\nfor position in result:\n    print(position)",
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "# ????????\u00a3???????\u00a8????????\u00a7\u00a3???????????\u00b0??????\n# ax + by = c\n# dx + ey = f\nimport sys\n\ndef inverse(a, b, d, e):\n    deta = a * e - b * d\n    return (deta, e, -b, -d, a)\n\nwhile True:\n    data = sys.stdin.readline()\n    if data is None or data.strip() == '':\n        break\n    data = data.strip().split(' ')\n    a, b, c, d, e, f = [float(i) for i in data]\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0] + 0\n    y = (inv[3] * c + inv[4] * f) / inv[0] + 0\n\n    print('%.3f %.3f' % (x, y))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\ndef solve_equations():\n    while True:\n        input_data = sys.stdin.readline()\n        if not input_data.strip():\n            break\n        a, b, c, d, e, f = map(float, input_data.strip().split())\n\n        inv = calculate_inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nsolve_equations()",
            "import sys\n\ndef inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\nfor line in sys.stdin:\n    values = line.strip().split()\n    if not values:\n        break\n    a, b, c, d, e, f = map(float, values)\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0]\n    y = (inv[3] * c + inv[4] * f) / inv[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef inverse(a, b, d, e):\n    deta = a * e - b * d\n    return (deta, e, -b, -d, a)\n\nfor line in sys.stdin:\n    data = line.strip().split()\n    if not data:\n        break\n    a, b, c, d, e, f = map(float, data)\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0]\n    y = (inv[3] * c + inv[4] * f) / inv[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\nfor line in sys.stdin:\n    if not line.strip():\n        break\n    a, b, c, d, e, f = map(float, line.split())\n\n    inverse_result = calculate_inverse(a, b, d, e)\n    x = (inverse_result[1] * c + inverse_result[2] * f) / inverse_result[0]\n    y = (inverse_result[3] * c + inverse_result[4] * f) / inverse_result[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef solve_linear_system(a, b, c, d, e, f):\n    determinant = a * e - b * d\n    x = (e * c - b * f) / determinant\n    y = (a * f - d * c) / determinant\n    return x, y\n\nwhile True:\n    data = sys.stdin.readline()\n    if not data.strip():\n        break\n    a, b, c, d, e, f = map(float, data.strip().split())\n    x, y = solve_linear_system(a, b, c, d, e, f)\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line.strip():\n        break\n    coefficients = list(map(float, line.strip().split()))\n    a, b, c, d, e, f = coefficients\n\n    inverse_values = calculate_inverse(a, b, d, e)\n    x = (inverse_values[1] * c + inverse_values[2] * f) / inverse_values[0]\n    y = (inverse_values[3] * c + inverse_values[4] * f) / inverse_values[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef inverse(a, b, d, e):\n    deta = a * e - b * d\n    return (deta, e, -b, -d, a)\n\ndef main():\n    for line in sys.stdin:\n        data = line.strip().split()\n        if not data:\n            break\n        a, b, c, d, e, f = map(float, data)\n\n        inv = inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef inverse(a, b, d, e):\n    det = a * e - b * d\n    return (det, e, -b, -d, a)\n\nfor line in sys.stdin:\n    data = line.strip().split()\n    if not data:\n        break\n    a, b, c, d, e, f = map(float, data)\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0]\n    y = (inv[3] * c + inv[4] * f) / inv[0]\n\n    print(f'{x:.3f} {y:.3f}')",
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if not line.strip():\n            break\n        a, b, c, d, e, f = map(float, line.strip().split())\n\n        inv = calculate_inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\ndef main():\n    while True:\n        data = sys.stdin.readline().strip()\n        if not data:\n            break\n        a, b, c, d, e, f = map(float, data.split())\n\n        inv = inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef inverse(a, b, d, e):\n    det = a * e - b * d\n    return (det, e, -b, -d, a)\n\ndef main():\n    while True:\n        data = sys.stdin.readline()\n        if not data.strip():\n            break\n        a, b, c, d, e, f = map(float, data.strip().split())\n        inv = inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef calculate_inverse(a, b, d, e):\n    determinant = a * e - b * d\n    return (determinant, e, -b, -d, a)\n\ndef main():\n    while True:\n        line = sys.stdin.readline()\n        if not line.strip():\n            break\n        coefficients = list(map(float, line.strip().split()))\n        a, b, c, d, e, f = coefficients\n\n        inv = calculate_inverse(a, b, d, e)\n        x = (inv[1] * c + inv[2] * f) / inv[0]\n        y = (inv[3] * c + inv[4] * f) / inv[0]\n\n        print(f'{x:.3f} {y:.3f}')\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "w = int(input())\nn = int(input())\nlst = [i + 1 for i in range(w)]\ndef swap(t):\n  a,b = t\n  temp = lst[a-1]\n  lst[a-1] = lst[b-1]\n  lst[b-1] = temp\nfor i in range(n):\n  swap(tuple(map(int,input().split(\",\"))))\nfor i in range(w):\n  print(lst[i])\n",
        "writer": "human",
        "rewrite": [
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor i in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(a, b):\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    a, b = map(int, input().split(\",\"))\n    swap(a, b)\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    lst[t[0] - 1], lst[t[1] - 1] = lst[t[1] - 1], lst[t[0] - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(','))))\n\nprint('\\n'.join(map(str, lst)))",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nfor item in lst:\n    print(item)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep=\"\\n\")",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nfor value in lst:\n    print(value)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nfor item in lst:\n    print(item)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\n\ndef swap(t):\n    a, b = t\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\n\nfor _ in range(n):\n    swap(tuple(map(int, input().split(\",\"))))\n\nfor value in lst:\n    print(value)"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "import sys\nimport math as mas\n\ndef sieve(n):\n\tp=[True for i in range(n+1)]\n\tp[0]=p[1]=False\n\tend=int(n**0.5)\n\tfor i in range(2,end+1):\n\t\tif p[i]:\n\t\t\tfor j in range(i*i,n+1,i):\n\t\t\t\tp[j]=False\n\treturn p\n\t\nsosu=sieve(1000010)\nfor i in sys.stdin:\n\tt=int(i)\n\tif t<2:print(0)\n\telif t==2:print(1)\n\telse:print(1+sum(sosu[t] for t in range(3,int(i)+1,2)))\n\n#\ta,b=map(int,i.split())\n#\tprint(gcd(a,b),lcm(a,b))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\n\nprimes_list = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(primes_list[i] for i in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[k] for k in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[num] for num in range(3, t + 1, 2)))",
            "import sys\nimport math\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[x] for x in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    end = int(n**0.5)\n    for i in range(2, end + 1):\n        if p[i]:\n            for j in range(i*i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor i in sys.stdin:\n    t = int(i)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[j] for j in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[i] for i in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\n\nprime_list = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line.strip())\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        count = 1 + sum(prime_list[i] for i in range(3, t + 1, 2))\n        print(count)",
            "import sys\nimport math\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\n\nsieve_primes = sieve(1000010)\n\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sieve_primes[i] for i in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[i] for i in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[k] for k in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i*i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor line in sys.stdin:\n    t = int(line.strip())\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[k] for k in range(3, t + 1, 2)))",
            "import sys\n\ndef sieve(n):\n    p = [True] * (n + 1)\n    p[0] = p[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = False\n    return p\n\nsosu = sieve(1000010)\nfor i in sys.stdin:\n    t = int(i)\n    if t < 2:\n        print(0)\n    elif t == 2:\n        print(1)\n    else:\n        print(1 + sum(sosu[k] for k in range(3, t + 1, 2)))"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(datasets):\n    results = []\n    for d in datasets:\n        area = sum((i * d) ** 2 * d for i in range(1, 600 // d + 1))\n        results.append(area)\n    return results\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
        "writer": "machine",
        "rewrite": [
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [(sum((i * d) ** 2 * d for i in range(1, 600 // d + 1))) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [\n        sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) \n        for d in datasets\n    ]\n\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "MAX = 1000000\nSQRT = 1000     # sqrt(MAX)\n \nprime = [0] * MAX\n \ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n \nsieve()\ncnt = [0] * (MAX+1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1;\n    cnt[i] = cnt[i+1] = f\n     \nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break\n",
        "writer": "human",
        "rewrite": [
            "MAX = 1000000\nSQRT = 1000\n\ndef sieve_of_eratosthenes():\n    prime = [0] * MAX\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i]:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n    return prime\n\ndef count_primes(prime):\n    cnt = [0] * (MAX + 1)\n    cnt[2] = f = 1\n    for i in range(3, MAX, 2):\n        if prime[i]:\n            f += 1\n        cnt[i] = cnt[i + 1] = f\n    return cnt\n\ndef main():\n    prime = sieve_of_eratosthenes()\n    cnt = count_primes(prime)\n    while True:\n        try:\n            print(cnt[int(input())])\n        except EOFError:\n            break\n\nmain()",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ndef main():\n    while True:\n        try:\n            print(cnt[int(input())])\n        except EOFError:\n            break\n\nmain()",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ndef main():\n    while True:\n        try:\n            print(cnt[int(input())])\n        except EOFError:\n            break\n\nmain()",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nimport sys\n\nfor line in sys.stdin:\n    print(cnt[int(line)])",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\ndef count_primes():\n    cnt = [0] * (MAX + 1)\n    cnt[2] = f = 1\n    for i in range(3, MAX, 2):\n        if prime[i]:\n            f += 1\n        cnt[i] = cnt[i + 1] = f\n    return cnt\n\nsieve()\ncnt = count_primes()\n\nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i]:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    for number in data:\n        print(cnt[int(number)])\n\nif __name__ == \"__main__\":\n    main()",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = 1\nf = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ntry:\n    while True:\n        print(cnt[int(input())])\nexcept EOFError:\n    pass",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i]:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nfor number in data:\n    print(cnt[int(number)])",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\n\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\ndef main():\n    while True:\n        try:\n            print(cnt[int(input())])\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i]:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nimport sys\n\nfor line in sys.stdin:\n    print(cnt[int(line.strip())])",
            "MAX = 1000000\nSQRT = 1000\n\nprime = [0] * MAX\n\ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i * i, MAX, i):\n                prime[j] = 0\n\nsieve()\ncnt = [0] * (MAX + 1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1\n    cnt[i] = cnt[i + 1] = f\n\nimport sys\ninput = sys.stdin.read\ndata = input().split()\nfor num in data:\n    print(cnt[int(num)])"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def sieve(n):\n        primes = [True] * (n + 1)\n        p = 2\n        while p * p <= n:\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n            p += 1\n        return [p for p in range(2, n + 1) if primes[p]]\n    \n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        count = sum(1 for p in prime_list if p <= n)\n        results.append(count)\n    return results\n\n# Sample usage with the provided sample input",
        "writer": "machine",
        "rewrite": [
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n\n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        results.append(len([p for p in prime_list if p <= n]))\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_n = max(datasets)\n    primes = [True] * (max_n + 1)\n    for p in range(2, int(max_n**0.5) + 1):\n        if primes[p]:\n            for multiple in range(p * p, max_n + 1, p):\n                primes[multiple] = False\n    prime_list = [p for p in range(2, max_n + 1) if primes[p]]\n    \n    return [sum(1 for p in prime_list if p <= n) for n in datasets]",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n\n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    results = [sum(1 for p in prime_list if p <= n) for n in datasets]\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(num**0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n    \n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n    \n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    return [sum(1 for p in prime_list if p <= n) for n in datasets]",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    results = []\n    for n in datasets:\n        count = sum(1 for i in range(n + 1) if is_prime(i))\n        results.append(count)\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n\n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        results.append(sum(1 for p in prime_list if p <= n))\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_n = max(datasets)\n    prime_list = [num for num in range(2, max_n + 1) if is_prime(num)]\n    results = [sum(1 for p in prime_list if p <= n) for n in datasets]\n    \n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(num**0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n\n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        count = sum(1 for p in prime_list if p <= n)\n        results.append(count)\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n    \n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        count = sum(p <= n for p in prime_list)\n        results.append(count)\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    results = []\n    for n in datasets:\n        count = sum(1 for i in range(2, n + 1) if is_prime(i))\n        results.append(count)\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(num**0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n\n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        results.append(sum(p <= n for p in prime_list))\n    return results",
            "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        for i in range(5, int(num**0.5) + 1, 6):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n        return True\n\n    def sieve(n):\n        primes = [True] * (n + 1)\n        for p in range(2, int(n**0.5) + 1):\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n        return [p for p in range(2, n + 1) if primes[p]]\n\n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        count = sum(1 for p in prime_list if p <= n)\n        results.append(count)\n    return results"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
        "writer": "machine",
        "rewrite": [
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd != 0:\n            stack.append(cmd)\n        else:\n            if stack:\n                result.append(stack.pop())\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd:\n            stack.append(cmd)\n        else:\n            result.append(stack.pop())\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd:\n            stack.append(cmd)\n        else:\n            result.append(stack.pop())\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0 and stack:\n            result.append(stack.pop())\n        elif cmd != 0:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    result = []\n    stack = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x,d):\n    return d*func(x)\n\narray = []\nfor i in sys.stdin:\n    array.append(int(i))\n\nfor i in range(len(array)):\n    d = array[i]\n    k = int(600/d)\n    result = 0\n    for j in range(k):\n        result += rec(j*d,d)\n\n    print(result)",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef square(x):\n    return x**2\n\ndef scaled_square(x, factor):\n    return factor * square(x)\n\nnumbers = [int(line) for line in sys.stdin]\nfor number in numbers:\n    factor = number\n    limit = 600 // factor\n    total = sum(scaled_square(j * factor, factor) for j in range(limit))\n    print(total)",
            "import sys\n\ndef func(x):\n    return x ** 2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\n\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)",
            "import sys\n\ndef square(x):\n    return x ** 2\n\ndef multiply_square(x, d):\n    return d * square(x)\n\ninput_numbers = [int(i) for i in sys.stdin]\n\nfor d in input_numbers:\n    k = 600 // d\n    total = sum(multiply_square(j * d, d) for j in range(k))\n    print(total)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef square(x):\n    return x ** 2\n\ndef weighted_sum(x, d):\n    return d * square(x)\n\ndata = []\nfor line in sys.stdin:\n    data.append(int(line))\n\nfor value in data:\n    divisor = int(600 / value)\n    total = 0\n    for j in range(divisor):\n        total += weighted_sum(j * value, value)\n    print(total)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef square(x):\n    return x ** 2\n\ndef multiply_square(x, d):\n    return d * square(x)\n\nvalues = []\nfor line in sys.stdin:\n    values.append(int(line.strip()))\n\nfor value in values:\n    divisor = int(600 / value)\n    total = 0\n    for j in range(divisor):\n        total += multiply_square(j * value, value)\n\n    print(total)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef calculate_square(x):\n    return x**2\n\ndef multiply_square(x, multiplier):\n    return multiplier * calculate_square(x)\n\nvalues = []\nfor line in sys.stdin:\n    values.append(int(line))\n\nfor value in values:\n    divisor = value\n    count = 600 // divisor\n    total = 0\n    for j in range(count):\n        total += multiply_square(j * divisor, divisor)\n\n    print(total)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef square(x):\n    return x ** 2\n\ndef multiply_square(x, d):\n    return d * square(x)\n\ndata = [int(line) for line in sys.stdin]\n\nfor value in data:\n    divisor = int(600 / value)\n    total = sum(multiply_square(j * value, value) for j in range(divisor))\n    print(total)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)",
            "import sys\n\ndef square(x):\n    return x ** 2\n\ndef weighted_sum(x, d):\n    return d * square(x)\n\ndef main():\n    numbers = [int(line) for line in sys.stdin]\n    \n    for d in numbers:\n        k = 600 // d\n        total = sum(weighted_sum(j * d, d) for j in range(k))\n        print(total)\n\nif __name__ == \"__main__\":\n    main()",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x, d):\n    return d * func(x)\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    k = 600 // d\n    result = sum(rec(j * d, d) for j in range(k))\n    print(result)",
            "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef square(x):\n    return x**2\n\ndef weighted_sum(x, d):\n    return d * square(x)\n\nvalues = [int(line) for line in sys.stdin]\n\nfor value in values:\n    d = value\n    limit = 600 // d\n    total = sum(weighted_sum(j * d, d) for j in range(limit))\n    print(total)",
            "import sys\n\ndef square(x):\n    return x ** 2\n\ndef calculated_value(x, d):\n    return d * square(x)\n\ninput_values = [int(line) for line in sys.stdin]\n\nfor value in input_values:\n    divisor = value\n    limit = 600 // divisor\n    total = sum(calculated_value(j * divisor, divisor) for j in range(limit))\n    print(total)"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(datasets):\n    results = []\n    for d in datasets:\n        n = 600 // d\n        area = sum((i * d) ** 2 for i in range(1, n + 1)) * d\n        results.append(area)\n    return results\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
        "writer": "machine",
        "rewrite": [
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [\n        sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d \n        for d in datasets\n    ]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 601 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [\n        sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d\n        for d in datasets\n    ]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]\n\ndatasets = [20, 10]\nprint(compute_area(datasets))",
            "def calculate_area(data):\n    areas = []\n    for value in data:\n        limit = 600 // value\n        total_area = sum((i * value) ** 2 for i in range(1, limit + 1)) * value\n        areas.append(total_area)\n    return areas\n\n# Example usage:\ndata_sets = [20, 10]\nprint(calculate_area(data_sets))"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "# coding: utf-8\n\nclass Stack(object):\n\tmaxnum = 100\n\tarray = []\n\tfor i in range(100):\n\t\tarray.append(0)\n\tindex = 0\n\tdef push(self, data):\n\t\tself.array[self.index] = data\n\t\tself.index += 1\n\tdef pop(self):\n\t\tprint(self.array[self.index-1])\n\t\tself.index -= 1\n\nroad = Stack()\nwhile True:\n\ttry:\n\t\tnum = int(raw_input())\n\t\tif num != 0:\n\t\t\troad.push(num)\n\t\telse:\n\t\t\troad.pop()\n\texcept EOFError:\n\t\tbreak\n",
        "writer": "human",
        "rewrite": [
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n        return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            result = road.pop()\n            if result is not None:\n                print(result)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, max_size=100):\n        self.max_size = max_size\n        self.array = [0] * max_size\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.max_size:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            print(road.pop())\n    except EOFError:\n        break",
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self, maxsize=100):\n        self.maxsize = maxsize\n        self.array = [0] * maxsize\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxsize:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            value = road.pop()\n            if value is not None:\n                print(value)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            print(road.pop())\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.array = [0] * maxnum\n        self.index = 0\n        \n    def push(self, data):\n        if self.index < len(self.array):\n            self.array[self.index] = data\n            self.index += 1\n            \n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            print(self.array[self.index])\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            road.pop()\n    except EOFError:\n        break",
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self):\n        self.maxnum = 100\n        self.array = [0] * self.maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            value = road.pop()\n            if value is not None:\n                print(value)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self):\n        self.maxnum = 100\n        self.array = [0] * self.maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            print(self.array[self.index])\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            road.pop()\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            print(self.array[self.index])\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            road.pop()\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            print(road.pop())\n    except EOFError:\n        break",
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n        return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            value = road.pop()\n            if value is not None:\n                print(value)\n    except EOFError:\n        break",
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self, maxnum=100):\n        self.maxnum = maxnum\n        self.array = [0] * maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n        return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            value = road.pop()\n            if value is not None:\n                print(value)\n    except EOFError:\n        break",
            "# coding: utf-8\n\nclass Stack:\n    def __init__(self):\n        self.maxnum = 100\n        self.array = [0] * self.maxnum\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxnum:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            print(road.pop())\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "#!/usr/bin/env python\nimport sys\n\ndef function(x):\n    return x*x\n\ndef calculate(d, max):\n    val = d\n    result = 0\n    while val < max:\n        result += function(val) * d\n        val += d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
        "writer": "human",
        "rewrite": [
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    total = 0\n    for value in range(step, limit, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(increment, limit):\n    current_value = increment\n    total = 0\n    while current_value < limit:\n        total += square(current_value) * increment\n        current_value += increment\n    return total\n\nif __name__ == '__main__':\n    for input_line in sys.stdin:\n        print(compute_sum(int(input_line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef calculate_sum(delta, limit):\n    total = 0\n    for value in range(delta, limit, delta):\n        total += square(value) * delta\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    total = 0\n    for value in range(step, limit, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(delta, limit):\n    total = 0\n    for value in range(delta, limit, delta):\n        total += square(value) * delta\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef function(x):\n    return x * x\n\ndef calculate(d, max_val):\n    result = sum(function(val) * d for val in range(d, max_val, d))\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(increment, limit):\n    total = 0\n    for value in range(increment, limit, increment):\n        total += square(value) * increment\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(increment, limit):\n    total = 0\n    for value in range(increment, limit, increment):\n        total += square(value) * increment\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    total = 0\n    for value in range(step, limit, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, limit):\n    current = step\n    total = 0\n    while current < limit:\n        total += square(current) * step\n        current += step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_sum(step, threshold):\n    total = 0\n    for value in range(step, threshold, step):\n        total += square(value) * step\n    return total\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_sum(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef square(x):\n    return x * x\n\ndef compute_total(increment, limit):\n    current_value = increment\n    total_result = 0\n    while current_value < limit:\n        total_result += square(current_value) * increment\n        current_value += increment\n    return total_result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(compute_total(int(line), 600))"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    for i in range(int(input())):\n        a=int(input())+int(input())\n        if a>=10**80:\n            print(\"overflow\")\n        else:\n            print(a)\n            \n    \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = sum(int(input()) for _ in range(2))\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = sum(int(input()) for _ in range(2))\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = sum(int(input()) for _ in range(2))\n        print(\"overflow\" if a >= 10**80 else a)\n        \nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    test_cases = int(input())\n    for _ in range(test_cases):\n        sum_result = int(input()) + int(input())\n        print(\"overflow\" if sum_result >= 10**80 else sum_result)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = int(input()) + int(input())\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    for _ in range(int(input())):\n        a = sum(int(input()) for _ in range(2))\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = sum(int(input()) for _ in range(2))\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    for _ in range(int(input())):\n        a = sum(int(input()) for _ in range(2))\n        print(\"overflow\" if a >= 10**80 else a)\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    for car in result:\n        print(car)",
        "writer": "machine",
        "rewrite": [
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in map(int, data):\n        if item == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(item)\n    \n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n\n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n\n    print('\\n'.join(map(str, result)))",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item != '0':\n            stack.append(int(item))\n        else:\n            if stack:\n                result.append(stack.pop())\n    \n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    cars = input().split()\n    \n    stack = []\n    switched_cars = []\n    \n    for car in cars:\n        if car == '0':\n            if stack:\n                switched_cars.append(stack.pop())\n        else:\n            stack.append(int(car))\n    \n    for switched_car in switched_cars:\n        print(switched_car)",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    cars = input().split()\n    \n    stack = []\n    output = []\n    \n    for car in cars:\n        if car == '0':\n            if stack:\n                output.append(stack.pop())\n        else:\n            stack.append(int(car))\n    \n    print(*output, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in map(int, data):\n        if item == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(item)\n    \n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    print('\\n'.join(map(str, result)))",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    data = sys.stdin.read().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n\n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n\n    print(*result, sep='\\n')",
            "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    print(*result, sep='\\n')"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def digits(n):\n    if n < 10: return 1\n    c = 0\n    while n > 0:\n        c += 1\n        n = n // 10\n\n    return c\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if (digits(u) > 80 or digits(v) > 80 or digits(s) > 80):\n        print(\"overflow\")\n    else:\n        print(s)",
        "writer": "human",
        "rewrite": [
            "def count_digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if any(count_digits(x) > 80 for x in (u, v, s)):\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if any(count_digits(x) > 80 for x in (u, v, s)):\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(number):\n    if number < 10:\n        return 1\n    count = 0\n    while number > 0:\n        count += 1\n        number //= 10\n    return count\n\nn = int(input())\nfor _ in range(n):\n    a = int(input())\n    b = int(input())\n    total = a + b\n    if count_digits(a) > 80 or count_digits(b) > 80 or count_digits(total) > 80:\n        print(\"overflow\")\n    else:\n        print(total)",
            "def count_digits(number):\n    return len(str(number))\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    first_num = int(input())\n    second_num = int(input())\n    total = first_num + second_num\n    if any(count_digits(x) > 80 for x in (first_num, second_num, total)):\n        print(\"overflow\")\n    else:\n        print(total)",
            "def count_digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if any(count_digits(x) > 80 for x in [u, v, s]):\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(number):\n    return len(str(abs(number)))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    sum_result = u + v\n    if any(count_digits(x) > 80 for x in (u, v, sum_result)):\n        print(\"overflow\")\n    else:\n        print(sum_result)",
            "def count_digits(n):\n    if n < 10:\n        return 1\n    count = 0\n    while n > 0:\n        count += 1\n        n //= 10\n    return count\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    total = u + v\n    if count_digits(u) > 80 or count_digits(v) > 80 or count_digits(total) > 80:\n        print(\"overflow\")\n    else:\n        print(total)",
            "def count_digits(num):\n    return len(str(num)) if num > 0 else 1\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if count_digits(u) > 80 or count_digits(v) > 80 or count_digits(s) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(num):\n    if num < 10:\n        return 1\n    count = 0\n    while num > 0:\n        count += 1\n        num //= 10\n    return count\n\nn = int(input())\nfor _ in range(n):\n    a = int(input())\n    b = int(input())\n    total = a + b\n    if count_digits(a) > 80 or count_digits(b) > 80 or count_digits(total) > 80:\n        print(\"overflow\")\n    else:\n        print(total)",
            "def count_digits(num):\n    return len(str(num)) if num > 0 else 1\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if count_digits(u) > 80 or count_digits(v) > 80 or count_digits(s) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(num):\n    return len(str(num)) if num > 0 else 1\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if count_digits(u) > 80 or count_digits(v) > 80 or count_digits(s) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def count_digits(number):\n    if number < 10:\n        return 1\n    count = 0\n    while number > 0:\n        count += 1\n        number //= 10\n    return count\n\nn = int(input())\nfor _ in range(n):\n    first_num = int(input())\n    second_num = int(input())\n    total = first_num + second_num\n    if count_digits(first_num) > 80 or count_digits(second_num) > 80 or count_digits(total) > 80:\n        print(\"overflow\")\n    else:\n        print(total)"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import math\ndef int_ceil(src, range):\n    return int(math.ceil(src/float(range)) * range)\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef int_ceil(src, range_value):\n    return int(math.ceil(src / float(range_value)) * range_value)\n\ndef main():\n    weeks = int(input())\n    total_debt = 100000\n    for _ in range(weeks):\n        interest = total_debt * 0.05\n        total_debt = int_ceil(total_debt + interest, 1000)\n    print(total_debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(value, step):\n    return int(math.ceil(value / step) * step)\n\ndef main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        interest = debt * 0.05\n        debt = int_ceil(debt + interest, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return int(math.ceil(src / range)) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range_value):\n    return int(math.ceil(src / float(range_value)) * range_value)\n\ndef main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        increase = debt * 0.05\n        debt = int_ceil(debt + increase, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        interest = debt * 0.05\n        debt = int_ceil(debt + interest, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef round_up(value, multiple):\n    return int(math.ceil(value / float(multiple)) * multiple)\n\ndef main():\n    weeks = int(input())\n    total_debt = 100000\n    for _ in range(weeks):\n        interest = total_debt * 0.05\n        total_debt = round_up(total_debt + interest, 1000)\n    print(total_debt)\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef int_ceil(src, range):\n    return -(-src // range) * range\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "from math import *\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
        "writer": "human",
        "rewrite": [
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import *\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef convert_to_radians(degrees):\n    return degrees * pi / 180\n\nx, y = 0, 0\nangle = 90\n\nwhile True:\n    distance, angle_change = map(int, input().split(\",\"))\n    if distance == angle_change == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(convert_to_radians(angle)) * distance\n    y += sin(convert_to_radians(angle)) * distance\n    angle -= angle_change",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "from math import cos, sin, pi\n\ndef rad(n):\n    return n * pi / 180\n\ndef calculate_position():\n    x, y = 0, 0\n    na = 90\n    while True:\n        d, a = map(int, input().split(\",\"))\n        if d == a == 0:\n            print(int(x))\n            print(int(y))\n            break\n        x += cos(rad(na)) * d\n        y += sin(rad(na)) * d\n        na -= a\n\ncalculate_position()"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    x = math.cos(rad)\n    y = math.sin(rad)\n    return x,y\n\ndef run():\n    x, y = 0,0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        cos_val, sin_val = move(angle)\n        angle += d\n        x += r * cos_val\n        y += r * sin_val\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        d = -d\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        d = -d\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    rad = math.radians(angle)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        cos_val, sin_val = move(angle)\n        angle += d\n        x += r * cos_val\n        y += r * sin_val\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    rad = math.radians(angle)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        x_step, y_step = move(angle)\n        angle += d\n        x += r * x_step\n        y += r * y_step\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef calculate_coordinates(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef main():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        radius, delta_angle = map(int, input().split(','))\n        delta_angle = -delta_angle\n        if radius == 0 and delta_angle == 0:\n            break\n        cos_angle, sin_angle = calculate_coordinates(angle)\n        angle += delta_angle\n        x += radius * cos_angle\n        y += radius * sin_angle\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    main()",
            "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        d = -d\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y, dig = 0, 0, 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        d = -d\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        x_increment, y_increment = move(angle)\n        angle += d\n        x += r * x_increment\n        y += r * y_increment\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().strip().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        delta_x, delta_y = move(angle)\n        angle += d\n        x += r * delta_x\n        y += r * delta_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        radius, delta = map(int, input().split(','))\n        delta = -delta\n        if radius == 0 and delta == 0:\n            break\n        move_x, move_y = move(angle)\n        angle += delta\n        x += radius * move_x\n        y += radius * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef move(angle):\n    radians = math.radians(angle)\n    return math.cos(radians), math.sin(radians)\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        move_x, move_y = move(angle)\n        angle += d\n        x += r * move_x\n        y += r * move_y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        num=list(map(int,line.split()))\n        \n        num.sort()\n        num.reverse()\n        print(' '.join(map(str,num)))\n        \n            \n                \n    \nSortingFiveNumbers()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef sorting_five_numbers():\n    for line in sys.stdin:\n        nums = list(map(int, line.split()))\n        nums.sort(reverse=True)\n        print(' '.join(map(str, nums)))\n\nsorting_five_numbers()",
            "def sort_and_reverse_numbers():\n    import sys\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsort_and_reverse_numbers()",
            "import sys\n\ndef sorting_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsorting_five_numbers()",
            "def sort_and_print_numbers():\n    import sys\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsort_and_print_numbers()",
            "def sort_and_print_numbers():\n    import sys\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsort_and_print_numbers()",
            "import sys\n\ndef sort_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        \n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsort_five_numbers()",
            "def sorting_five_numbers():\n    import sys\n\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsorting_five_numbers()",
            "def sorting_five_numbers():\n    import sys\n    \n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsorting_five_numbers()",
            "def sorting_five_numbers():\n    import sys\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsorting_five_numbers()",
            "import sys\n\ndef sort_and_reverse_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(' '.join(map(str, numbers)))\n\nsort_and_reverse_numbers()",
            "import sys\n\ndef sorting_five_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsorting_five_numbers()",
            "def sorting_five_numbers():\n    import sys\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(' '.join(map(str, sorted_numbers)))\n\nsorting_five_numbers()"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers_descending():\n    numbers = list(map(int, input().split()))\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(' '.join(str(x) for x in numbers))",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(*numbers)",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))",
            "def sort_five_numbers_descending():\n    numbers = sorted(map(int, input().split()), reverse=True)\n    print(*numbers)",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(\" \".join(map(str, numbers)))",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort()\n    numbers.reverse()\n    print(' '.join(map(str, numbers)))",
            "def sort_five_numbers_descending():\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    print(' '.join(str(x) for x in numbers))"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef treasure_hunt():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef treasure_hunt():\n    import sys\n    data = sys.stdin.read().strip().split()\n    \n    x, y, current_angle = 0, 0, 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if (d, t) == (0, 0):\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\nimport sys\n\ndef treasure_hunt():\n    data = sys.stdin.read().strip().split()\n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if (d, t) == (0, 0):\n            break\n        current_angle += t\n        x += d * math.cos(math.radians(current_angle))\n        y += d * math.sin(math.radians(current_angle))\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\n\ndef treasure_hunt():\n    import sys\n    input_data = sys.stdin.read().strip().split()\n    \n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in input_data:\n        distance, turn = map(int, pair.split(','))\n        if distance == 0 and turn == 0:\n            break\n        current_angle += turn\n        radian_angle = math.radians(current_angle)\n        x += distance * math.cos(radian_angle)\n        y += distance * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\nimport sys\n\ndef treasure_hunt():\n    data = sys.stdin.read().strip().split()\n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    x, y, current_angle = 0, 0, 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    import sys\n    input_data = sys.stdin.read().strip().split()\n    \n    x, y, current_angle = 0, 0, 0\n    \n    for pair in input_data:\n        distance, turn = map(int, pair.split(','))\n        if distance == 0 and turn == 0:\n            break\n        current_angle += turn\n        radian_angle = math.radians(current_angle)\n        x += distance * math.cos(radian_angle)\n        y += distance * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\nimport sys\n\ndef treasure_hunt():\n    data = sys.stdin.read().strip().split()\n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\n\ndef treasure_hunt():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    x, y = 0, 0\n    angle = 0\n    \n    for pair in data:\n        distance, turn = map(int, pair.split(','))\n        if distance == 0 and turn == 0:\n            break\n        angle += turn\n        radian = math.radians(angle)\n        x += distance * math.cos(radian)\n        y += distance * math.sin(radian)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\nimport sys\n\ndef treasure_hunt():\n    data = sys.stdin.read().strip().split()\n    x, y, current_angle = 0, 0, 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
            "import math\n\ndef treasure_hunt():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    x, y, current_angle = 0, 0, 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(round(x))\n    print(round(y))",
            "import math\nimport sys\n\ndef treasure_hunt():\n    data = sys.stdin.read().strip().split()\n    \n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        decrypted = []\n        for char in text:\n            if 'a' <= char <= 'z':\n                decrypted.append(chr((ord(char) - ord('a') - shift) % 26 + ord('a')))\n            else:\n                decrypted.append(char)\n        return ''.join(decrypted)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n\n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n\n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(\n            chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char \n            for char in text\n        )\n\n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(\n            chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n\n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(\n            chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        return ''.join(chr((ord(char) - ord('a') - shift) % 26 + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        distance, turn = map(int, direction.split(','))\n        if distance == 0 and turn == 0:\n            break\n        angle += turn\n        radians = math.radians(angle)\n        x += distance * math.cos(radians)\n        y += distance * math.sin(radians)\n\n    print(int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if not (d or t):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if (d, t) == (0, 0):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(round(x), round(y))\n\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y, angle = 0, 0, 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if (d, t) == (0, 0):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(round(x), round(y))\n\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    return int(round(x)), int(round(y))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\nresult = treasure_hunt(directions)\nprint(result)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    return int(round(x)), int(round(y))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\nresult = treasure_hunt(directions)\nprint(result)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if (d, t) == (0, 0):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(round(x), round(y))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y, angle = 0, 0, 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if (d, t) == (0, 0):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y, angle = 0, 0, 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if (d, t) == (0, 0):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(round(x), round(y))\n\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if (d, t) == (0, 0):\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(round(x), round(y))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    return (int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\nresult = treasure_hunt(directions)\nprint(result)",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    return (int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\nresult = treasure_hunt(directions)\nprint(result)"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def chg(s,n):\n    res=\"\"\n    for i in s:\n        o=ord(i)\n        if 97<=o<=122:\n            if o+n<=122:\n                res+=chr(o+n)\n            else:\n                res+=chr(o+n-26)\n        else:\n            res+=i\n    return res\n\nwhile True:\n    try:\n        s=input()\n        for i in range(25,-1,-1):\n            c=chg(s,i)\n            e=c.split()\n            if \"the\" in e or \"this\" in e or \"that\" in e:\n                print(c)\n                break\n    except:\n        break",
        "writer": "human",
        "rewrite": [
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_value = ascii_value + n\n            if new_value > 122:\n                new_value -= 26\n            result += chr(new_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            shifted_result = shift_string(input_string, shift)\n            words = shifted_result.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted_result)\n                break\n    except Exception:\n        break",
            "def chg(s, n):\n    return ''.join(chr((ord(i) - 97 + n) % 26 + 97) if 'a' <= i <= 'z' else i for i in s)\n\nwhile True:\n    try:\n        s = input()\n        for i in range(26):\n            c = chg(s, 25 - i)\n            if any(word in c.split() for word in [\"the\", \"this\", \"that\"]):\n                print(c)\n                break\n    except:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_value = ascii_value + n\n            if new_value > 122:\n                new_value -= 26\n            result += chr(new_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            shifted_string = shift_string(input_string, shift)\n            words = shifted_string.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted_string)\n                break\n    except:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 'a' <= char <= 'z':\n            new_ascii = ascii_val + n\n            if new_ascii > ord('z'):\n                new_ascii -= 26\n            result += chr(new_ascii)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        text = input()\n        for shift in range(25, -1, -1):\n            shifted_text = shift_string(text, shift)\n            words = shifted_text.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(shifted_text)\n                break\n    except:\n        break",
            "def decrypt_caesar_cipher(s):\n    def shift_character(c, n):\n        if 'a' <= c <= 'z':\n            shifted = ord(c) + n\n            if shifted > ord('z'):\n                shifted -= 26\n            return chr(shifted)\n        return c\n\n    for n in range(25, -1, -1):\n        decrypted = ''.join(shift_character(c, n) for c in s)\n        words = decrypted.split()\n        if any(word in words for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n\nwhile True:\n    try:\n        s = input()\n        result = decrypt_caesar_cipher(s)\n        if result:\n            print(result)\n            break\n    except EOFError:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            shifted_val = ascii_val + n\n            if shifted_val > 122:\n                shifted_val -= 26\n            result += chr(shifted_val)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            shifted_string = shift_string(input_string, shift)\n            words = shifted_string.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(shifted_string)\n                break\n    except EOFError:\n        break",
            "def change_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_value = ascii_value + n\n            if new_value > 122:\n                new_value -= 26\n            result += chr(new_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            changed_string = change_string(input_string, shift)\n            words = changed_string.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(changed_string)\n                break\n    except:\n        break",
            "def shift_text(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            new_val = ascii_val + n\n            if new_val > 122:\n                new_val -= 26\n            result += chr(new_val)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        text = input()\n        for shift in range(25, -1, -1):\n            shifted_text = shift_text(text, shift)\n            words = shifted_text.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(shifted_text)\n                break\n    except:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_value = ascii_value + n\n            if new_value > 122:\n                new_value -= 26\n            result += chr(new_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        user_input = input()\n        for shift in range(25, -1, -1):\n            shifted_value = shift_string(user_input, shift)\n            words = shifted_value.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted_value)\n                break\n    except EOFError:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_val = ord(char)\n        if 97 <= ascii_val <= 122:\n            shifted_val = ascii_val + n\n            if shifted_val > 122:\n                shifted_val -= 26\n            result += chr(shifted_val)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        input_string = input()\n        for shift in range(25, -1, -1):\n            shifted_string = shift_string(input_string, shift)\n            words = shifted_string.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted_string)\n                break\n    except:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            shifted_value = ascii_value + n\n            if shifted_value > 122:\n                shifted_value -= 26\n            result += chr(shifted_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        user_input = input()\n        for shift_amount in range(25, -1, -1):\n            shifted = shift_string(user_input, shift_amount)\n            words = shifted.split()\n            if \"the\" in words or \"this\" in words or \"that\" in words:\n                print(shifted)\n                break\n    except EOFError:\n        break",
            "def shift_string(s, n):\n    result = \"\"\n    for char in s:\n        ascii_value = ord(char)\n        if 97 <= ascii_value <= 122:\n            new_value = ascii_value + n\n            if new_value > 122:\n                new_value -= 26\n            result += chr(new_value)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        user_input = input()\n        for shift_amount in range(25, -1, -1):\n            shifted = shift_string(user_input, shift_amount)\n            words = shifted.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(shifted)\n                break\n    except:\n        break"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    return 1 if n in (0, 1) else n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    return 1 if n in (0, 1) else n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "ca = ord('a')\ndef convert(s, d):\n    res = []\n    for c in s:\n        if c not in ' .':\n            c = chr(((ord(c) - ca + d) % 26) + ca)\n        res.append(c)\n    return \"\".join(res)\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if \"the\" in s0 or \"this\" in s0 or \"that\" in s0:\n            print(s0)\n            break\n\n",
        "writer": "human",
        "rewrite": [
            "def convert(s, d):\n    res = []\n    for c in s:\n        if c not in ' .':\n            c = chr(((ord(c) - ord('a') + d) % 26) + ord('a'))\n        res.append(c)\n    return \"\".join(res)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "ca = ord('a')\n\ndef convert(s, d):\n    return \"\".join(chr(((ord(c) - ca + d) % 26) + ca) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "ca = ord('a')\n\ndef convert(s, d):\n    return ''.join(chr(((ord(c) - ca + d) % 26) + ca) if c not in ' .' else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "ca = ord('a')\ndef convert(s, d):\n    return \"\".join(chr(((ord(c) - ca + d) % 26) + ca) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(keyword in s0 for keyword in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return ''.join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "ca = ord('a')\n\ndef convert(s, d):\n    return \"\".join(chr(((ord(c) - ca + d) % 26) + ca) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "ca = ord('a')\n\ndef convert(s, d):\n    return \"\".join(chr(((ord(c) - ca + d) % 26) + ca) if c not in ' .' else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return \"\".join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return \"\".join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert(s, d):\n    return ''.join(chr((ord(c) - ord('a') + d) % 26 + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "def convert_string(s, d):\n    return \"\".join(chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s)\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        converted = convert_string(s, d)\n        if any(word in converted for word in (\"the\", \"this\", \"that\")):\n            print(converted)\n            break",
            "def convert(s, d):\n    return \"\".join(\n        chr(((ord(c) - ord('a') + d) % 26) + ord('a')) if c.isalpha() else c for c in s\n    )\n\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if any(word in s0 for word in (\"the\", \"this\", \"that\")):\n            print(s0)\n            break"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers():\n    numbers = list(map(int, input().split()))\n    sorted_numbers = sorted(numbers, reverse=True)\n    print(\" \".join(map(str, sorted_numbers)))",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=int, reverse=True)\n    print(\" \".join(map(str, sorted_numbers)))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=int, reverse=True)\n    print(\" \".join(str(x) for x in sorted_numbers))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=lambda x: x, reverse=True)\n    print(\" \".join(str(x) for x in sorted_numbers))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=lambda x: -x)\n    print(*sorted_numbers)",
            "def sort_five_numbers():\n    numbers = list(map(int, input(\"Enter five numbers separated by spaces: \").split()))\n    if len(numbers) == 5:\n        sorted_numbers = sorted(numbers, reverse=True)\n        print(\" \".join(map(str, sorted_numbers)))\n    else:\n        print(\"Please enter exactly five numbers.\")",
            "def sort_five_numbers():\n    numbers = list(map(int, input().split()))\n    if len(numbers) != 5:\n        return\n    sorted_numbers = sorted(numbers, reverse=True)\n    print(\" \".join(map(str, sorted_numbers)))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=lambda x: -x)\n    print(\" \".join(str(x) for x in sorted_numbers))",
            "def sort_five_numbers():\n    numbers = list(map(int, input().strip().split()))\n    sorted_numbers = sorted(numbers, reverse=True)\n    print(*sorted_numbers)",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=lambda x: -x)\n    print(\" \".join(map(str, sorted_numbers)))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=int, reverse=True)\n    print(\" \".join(map(str, sorted_numbers)))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=lambda x: -x)\n    print(\" \".join(str(x) for x in sorted_numbers))",
            "def sort_five_numbers():\n    numbers = [int(x) for x in input().split()]\n    sorted_numbers = sorted(numbers, key=int, reverse=True)\n    print(\" \".join(map(str, sorted_numbers)))"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort(num):\n   l = len(num)\n   for i in range(0,l):\n        for j in range(0,l-i-1):\n            if num[j] < num[j+1]:\n               temp = num[j]\n               num[j] = num[j+1]\n               num[j+1]=temp\n   print(num[0],end='')\n   for i in range(1,len(num)-1):\n       print('',num[i],end='')\n   print('',num[i+1])\n\na , b , c , d , e = map(int,input().split())\nnum = []\nnum.append(a)\nnum.append(b)\nnum.append(c)\nnum.append(d)\nnum.append(e)\nsort(num)",
        "writer": "human",
        "rewrite": [
            "def sort_numbers(nums):\n    nums.sort(reverse=True)\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort_numbers(num):\n    num.sort(reverse=True)\n    print(*num)\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort_numbers(num)",
            "def sort(numbers):\n    sorted_numbers = sorted(numbers, reverse=True)\n    print(*sorted_numbers)\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort_numbers(nums):\n    for i in range(len(nums)):\n        for j in range(0, len(nums) - i - 1):\n            if nums[j] < nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort_numbers(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] < numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort(num):\n    num.sort(reverse=True)\n    print(*num)\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort_numbers(nums):\n    for i in range(len(nums)):\n        for j in range(0, len(nums) - i - 1):\n            if nums[j] < nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort(num):\n    num.sort(reverse=True)\n    print(*num)\n\na, b, c, d, e = map(int, input().split())\nsort([a, b, c, d, e])",
            "def sort_descending(numbers):\n    for i in range(len(numbers)):\n        for j in range(len(numbers) - i - 1):\n            if numbers[j] < numbers[j + 1]:\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnum_list = [a, b, c, d, e]\nsort_descending(num_list)",
            "def sort_numbers_descending(numbers):\n    n = len(numbers)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if numbers[j] < numbers[j+1]:\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers_descending(numbers)",
            "def sort_descending(nums):\n    nums.sort(reverse=True)\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnum_list = [a, b, c, d, e]\nsort_descending(num_list)",
            "def sort_numbers(nums):\n    for i in range(len(nums)):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] < nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    IN=input()\n    IN.upper()\n\n    print(IN.upper())\n        \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    user_input = input()\n    upper_input = user_input.upper()\n\n    print(upper_input)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input()\n    IN_upper = IN.upper()\n    \n    print(IN_upper)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input()\n    result = IN.upper()\n    print(result)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n        \nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    IN = input().upper()\n    print(IN)\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize_text(text):\n    return text.upper()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: THIS IS A PEN.",
        "writer": "machine",
        "rewrite": [
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This Is A Pen.",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This Is A Pen.",
            "def capitalize_text(text):\n    return text.capitalize()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This is a pen.",
            "def capitalize_text(text):\n    return text.upper()\n\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.capitalize()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This is a pen.",
            "def capitalize_text(text):\n    \"\"\"Convert the input text to uppercase.\"\"\"\n    return text.upper()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.capitalize()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This is a pen.",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This Is A Pen.",
            "def to_uppercase(text):\n    return text.upper()\n\n# Sample usage\ninput_string = \"this is a pen.\"\nprint(to_uppercase(input_string))  # Output: THIS IS A PEN.",
            "def capitalize_text(text):\n    return text.capitalize()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This is a pen.",
            "def capitalize_text(text):\n    return text.capitalize()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This is a pen.",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: This Is A Pen."
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n    from math import prod\n    return prod(range(1, n + 1)) if n > 0 else 1\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.read().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=input()\nprint(factorial(int(n)))",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n < 2:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n < 0:\n        return \"Undefined for negative numbers\"\n    elif n == 0 or n == 1:\n        return 1\n    else:\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n\nn = input()\nprint(factorial(int(n)))",
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nn = input()\nprint(factorial(int(n)))",
            "def factorial(n):\n    if n < 2:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize_text(text):\n    return text.upper()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
        "writer": "machine",
        "rewrite": [
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def convert_to_uppercase(text):\n    return text.upper()\n\n# Sample usage\ntext_input = \"this is a pen.\"\nprint(convert_to_uppercase(text_input))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.capitalize()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def transform_to_uppercase(input_string):\n    return input_string.upper()\n\n# Sample usage\nexample_text = \"this is a pen.\"\nprint(transform_to_uppercase(example_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
            "def capitalize_text(text):\n    return text.title()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decrypt(text):\n    common_words = [\"the\", \"this\", \"that\"]\n    \n    def shift_text(text, shift):\n        decrypted_text = []\n        for char in text:\n            if 'a' <= char <= 'z':\n                new_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n                decrypted_text.append(new_char)\n            else:\n                decrypted_text.append(char)\n        return ''.join(decrypted_text)\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\n# Example usage:\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n\n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n\n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n\n    def shift_text(text, shift):\n        decrypted_text = []\n        for char in text:\n            if 'a' <= char <= 'z':\n                new_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n                decrypted_text.append(new_char)\n            else:\n                decrypted_text.append(char)\n        return ''.join(decrypted_text)\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = [\"the\", \"this\", \"that\"]\n\n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char \n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n    \n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n    \n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n    \n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\nprint(caesar_cipher_decrypt(sys.stdin.read().strip()))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n\n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n\n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) \n            if 'a' <= char <= 'z' else char for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n    \n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char \n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n    \n    def shift_text(text, shift):\n        return ''.join(chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char for char in text)\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if common_words.intersection(decrypted_text.split()):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "def caesar_cipher_decrypt(text):\n    common_words = {\"the\", \"this\", \"that\"}\n\n    def shift_text(text, shift):\n        return ''.join(\n            chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char\n            for char in text\n        )\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(N):\n        a = data[index]\n        b = data[index + 1]\n        index += 2\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        if len(str(sum_ab)) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(sum_ab))\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(1, int(data[0]) * 2, 2):\n        a, b = data[i], data[i + 1]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        if len(str(sum_ab)) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b = data[1 + 2 * i], data[2 + 2 * i]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        if len(str(sum_ab)) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b = data[1 + 2 * i], data[2 + 2 * i]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b = data[2 * i + 1], data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a, b = data[2 * i + 1], data[2 * i + 2]\n\n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n\n        sum_ab = int(a) + int(b)\n        results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n\n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            if len(str(sum_ab)) > 80:\n                results.append(\"overflow\")\n            else:\n                results.append(str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b = data[2*i + 1], data[2*i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        if len(str(sum_ab)) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[1 + 2 * i]\n        b = data[2 + 2 * i]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a, b = data[2*i + 1], data[2*i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "'''\nCreated on Mar 22, 2013\n\n@author: wukc\n'''\nfrom sys import stdin\n\ndef toupper(x):\n    return chr(ord(x)-32) if x.islower() else x \n\ns=stdin.readline()\nprint(\"\".join(map(toupper,s)[:-1]))",
        "writer": "human",
        "rewrite": [
            "def convert_to_uppercase(s):\n    def toupper(x):\n        return chr(ord(x) - 32) if x.islower() else x\n\n    return \"\".join(map(toupper, s))\n\ns = input()\nprint(convert_to_uppercase(s))",
            "def convert_to_uppercase(input_string):\n    return \"\".join(chr(ord(char) - 32) if char.islower() else char for char in input_string)\n\nimport sys\ninput_string = sys.stdin.readline()\nprint(convert_to_uppercase(input_string[:-1]))",
            "def to_uppercase(s):\n    return ''.join(chr(ord(char) - 32) if char.islower() else char for char in s)\n\nif __name__ == \"__main__\":\n    from sys import stdin\n    input_string = stdin.readline().strip()\n    print(to_uppercase(input_string))",
            "def to_uppercase(string):\n    return ''.join(char.upper() for char in string.strip())\n\ns = input()\nprint(to_uppercase(s))",
            "def toupper(char):\n    return char.upper() if char.islower() else char\n\ns = input()\nprint(\"\".join(map(toupper, s)))",
            "def to_uppercase(input_string):\n    return ''.join(chr(ord(char) - 32) if char.islower() else char for char in input_string)\n\nif __name__ == \"__main__\":\n    input_string = input()\n    print(to_uppercase(input_string))",
            "def toupper(x):\n    return x.upper() if x.islower() else x \n\ns = input()\nprint(\"\".join(map(toupper, s)))",
            "def to_uppercase(input_string):\n    return ''.join(chr(ord(char) - 32) if char.islower() else char for char in input_string)\n\ns = input()\nprint(to_uppercase(s))",
            "def toupper(x):\n    return x.upper()\n\ns = input()\nprint(toupper(s.strip()))",
            "from sys import stdin\n\ndef toupper(char):\n    return char.upper() if char.islower() else char \n\ns = stdin.readline().rstrip()\nprint(\"\".join(map(toupper, s)))",
            "def to_uppercase(input_string):\n    return \"\".join(chr(ord(char) - 32) if char.islower() else char for char in input_string)\n\nif __name__ == \"__main__\":\n    import sys\n    input_string = sys.stdin.readline()\n    print(to_uppercase(input_string[:-1]))",
            "from sys import stdin\n\ndef convert_to_uppercase(input_string):\n    return \"\".join(chr(ord(char) - 32) if char.islower() else char for char in input_string)\n\ns = stdin.readline()\nprint(convert_to_uppercase(s.strip()))"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    \n    results = []\n    for _ in range(N):\n        a = data[index]\n        b = data[index + 1]\n        index += 2\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            if len(str(sum_ab)) > 80:\n                results.append(\"overflow\")\n            else:\n                results.append(str(sum_ab))\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[1 + 2 * i]\n        b = data[2 + 2 * i]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(1, 2 * N, 2):\n        a = data[i]\n        b = data[i + 1]\n        \n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input_data = sys.stdin.read().split()\n    \n    N = int(input_data[0])\n    results = []\n    \n    for i in range(N):\n        a = input_data[2 * i + 1]\n        b = input_data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            results.append(\"overflow\" if len(str(sum_ab)) > 80 else str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    results = []\n    for i in range(1, int(data[0]) * 2, 2):\n        a, b = data[i], data[i + 1]\n        \n        if len(a) > 80 or len(b) > 80 or len(a) + len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(N):\n        a = data[index]\n        b = data[index + 1]\n        index += 2\n        \n        if any(len(x) > 80 for x in (a, b)) or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(*results, sep='\\n')",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            if len(str(sum_ab)) > 80:\n                results.append(\"overflow\")\n            else:\n                results.append(str(sum_ab))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        a, b = data[1 + 2 * i], data[2 + 2 * i]\n        \n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n\n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        a = data[2 * i + 1]\n        b = data[2 * i + 2]\n        \n        if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(int(a) + int(b)))\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 - x2 == 0.0:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in xrange(int(stdin.readline())):\n    p = [float(s) for s in stdin.readline().split()]\n    if gradient(*p[:4]) == gradient(*p[4:]):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nimport sys\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(sys.stdin.readline())):\n    p = list(map(float, sys.stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nimport sys\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(sys.stdin.readline())):\n    p = list(map(float, sys.stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 == x2 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nimport sys\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 == x2 else (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(sys.stdin.readline().strip())):\n    points = list(map(float, sys.stdin.readline().split()))\n    print('YES' if gradient(*points[:4]) == gradient(*points[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    if gradient(*p[:4]) == gradient(*p[4:]):\n        print('YES')\n    else:\n        print('NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 == x2 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function, unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 == x2 else (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(stdin.readline())):\n    points = list(map(float, stdin.readline().split()))\n    print('YES' if gradient(*points[:4]) == gradient(*points[4:]) else 'NO')",
            "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nimport sys\n\ndef gradient(x1, y1, x2, y2):\n    return float('inf') if x1 - x2 == 0.0 else (y1 - y2) / (x1 - x2)\n\nfor n in range(int(sys.stdin.readline())):\n    p = list(map(float, sys.stdin.readline().split()))\n    print('YES' if gradient(*p[:4]) == gradient(*p[4:]) else 'NO')"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import math\n\ndef sign(x):\n    if x >= 0:\n        return True\n    else:\n        return False\n\nn = int(input())\nwhile n != 0:\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    b = []\n    b.append(a[0])\n    for i in range(1,len(a)):\n        if b[len(b)-1] > 0 and a[i] > 0:\n            b[len(b)-1] = b[len(b)-1] + a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i,len(b)):\n            S = S + b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef max_consecutive_sum():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = [int(input()) for _ in range(n)]\n        b = [a[0]]\n        \n        for i in range(1, len(a)):\n            if b[-1] > 0 and a[i] > 0:\n                b[-1] += a[i]\n            else:\n                b.append(a[i])\n\n        ans = b[0]\n        for i in range(len(b)):\n            S = 0\n            for j in range(i, len(b)):\n                S += b[j]\n                ans = max(S, ans)\n        \n        print(ans)\n\nmax_consecutive_sum()",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = max_sum = b[0]\n    for i in range(len(b)):\n        sum_segment = 0\n        for j in range(i, len(b)):\n            sum_segment += b[j]\n            max_sum = max(sum_segment, max_sum)\n    print(max_sum)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    \n    print(ans)\n    n = int(input())",
            "import math\n\ndef max_subarray_sum():\n    n = int(input())\n    while n != 0:\n        a = [int(input()) for _ in range(n)]\n        b = [a[0]]\n        for i in range(1, len(a)):\n            if b[-1] > 0 and a[i] > 0:\n                b[-1] += a[i]\n            else:\n                b.append(a[i])\n\n        ans = b[0]\n        for i in range(len(b)):\n            S = 0\n            for j in range(i, len(b)):\n                S += b[j]\n                ans = max(S, ans)\n        print(ans)\n        n = int(input())\n\nmax_subarray_sum()",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = max_sum = b[0]\n    for i in range(len(b)):\n        max_sum = 0\n        for j in range(i, len(b)):\n            max_sum += b[j]\n            ans = max(max_sum, ans)\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n\n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    \n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    \n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    \n    for i in range(1, len(a)):\n        if b[-1] > 0 and a[i] > 0:\n            b[-1] += a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i, len(b)):\n            S += b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def Factorial(n):\n    if n <= 1: return 1\n    return n*Factorial(n-1)\nprint(Factorial(int(input())))\n",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n <= 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n\n    i = 0\n    results = []\n\n    while True:\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n\n        max_sum = current_sum = numbers[0]\n\n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n\n        results.append(max_sum)\n\n    print(*results, sep='\\n')",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    results = []\n    \n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        numbers = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print(*results, sep='\\n')",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print(*results, sep='\\n')",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    results = []\n    \n    while index < len(data):\n        n = int(data[index])\n        if n == 0:\n            break\n        index += 1\n        numbers = list(map(int, data[index:index+n]))\n        index += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for number in numbers[1:]:\n            current_sum = max(number, current_sum + number)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print('\\n'.join(map(str, results)))",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    index = 0\n    \n    while index < len(data):\n        n = int(data[index])\n        if n == 0:\n            break\n        index += 1\n        numbers = list(map(int, data[index:index + n]))\n        index += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print('\\n'.join(map(str, results)))",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    results = []\n    \n    while index < len(data):\n        n = int(data[index])\n        if n == 0:\n            break\n        index += 1\n        numbers = list(map(int, data[index:index+n]))\n        index += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print(*results, sep='\\n')",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = float('-inf')\n        current_sum = 0\n        \n        for num in numbers:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print('\\n'.join(map(str, results)))",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n\n    index = 0\n    results = []\n\n    while True:\n        n = int(data[index])\n        if n == 0:\n            break\n        index += 1\n        numbers = list(map(int, data[index:index+n]))\n        index += n\n\n        max_sum = current_sum = numbers[0]\n\n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n\n        results.append(max_sum)\n\n    print(*results, sep='\\n')",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = float('-inf')\n        current_sum = 0\n        \n        for num in numbers:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N, v = 1, 0.0\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            else:\n                N += 1\n\nif __name__ == \"__main__\":\n    solve()\n",
        "writer": "human",
        "rewrite": [
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            if math.sqrt(2 * 9.8 * (5 * N - 5)) > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s.strip()) for s in sys.stdin]\n    \n    for v0 in vs:\n        N = 1\n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin):\n        N = 1\n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin):\n        N = 1\n        while True:\n            v = math.sqrt(2 * 9.8 * (5 * N - 5))\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = list(map(float, sys.stdin))\n    \n    for v0 in vs:\n        N = 1\n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    velocities = [float(line) for line in sys.stdin]\n    \n    for target_velocity in velocities:\n        N = 1\n        \n        while True:\n            height = 5 * N - 5\n            current_velocity = math.sqrt(2 * 9.8 * height)\n            if current_velocity > target_velocity:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = map(float, sys.stdin)\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = map(float, sys.stdin)\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin):\n        N = 1\n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    vs = list(map(float, sys.stdin))\n    \n    for v0 in vs:\n        N = 1\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            N += 1\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = float(data[index]), float(data[index+1]), float(data[index+2]), float(data[index+3])\n        x3, y3, x4, y4 = float(data[index+4]), float(data[index+5]), float(data[index+6]), float(data[index+7])\n        index += 8\n        \n        # Calculate the direction vectors of AB and CD\n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        # Check if the cross product of the direction vectors is zero\n        if dx1 * dy2 == dy1 * dx2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n\n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, data[1 + i * 8: 9 + i * 8])\n        \n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        results.append(\"YES\" if dx1 * dy2 == dy1 * dx2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        results.append(\"YES\" if dx1 * dy2 == dy1 * dx2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        results.append(\"YES\" if dx1 * dy2 == dy1 * dx2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    n = int(data[0])\n    results = []\n\n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8 : 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8 : 9 + i * 8])\n\n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        if dx1 * dy2 == dy1 * dx2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = list(map(float, input().split()))\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = data[1 + i * 8: 5 + i * 8]\n        x3, y3, x4, y4 = data[5 + i * 8: 9 + i * 8]\n        \n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        results.append(\"YES\" if dx1 * dy2 == dy1 * dx2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n\n    for i in range(n):\n        coords = list(map(float, data[1 + i * 8: 1 + (i + 1) * 8]))\n        x1, y1, x2, y2, x3, y3, x4, y4 = coords\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[i*8 + 1:i*8 + 5])\n        x3, y3, x4, y4 = map(float, data[i*8 + 5:i*8 + 9])\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        results.append(\"YES\" if dx1 * dy2 == dy1 * dx2 else \"NO\")\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def cross(x, y):\n    return (x.conjugate() * y).imag\n\ndef is_parallel(x, y):\n    if abs(cross(x, y)) < 1e-10:\n        return True\n    return False\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2, y2) - complex(x1, y1)\n    b = complex(x4, y4) - complex(x3, y3)    \n    if is_parallel(a, b):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross(x, y):\n    return (x.conjugate() * y).imag\n\ndef is_parallel(x, y):\n    return abs(cross(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2, y2) - complex(x1, y1)\n    b = complex(x4, y4) - complex(x3, y3)\n    print('YES' if is_parallel(a, b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(vec1, vec2):\n    return (vec1.conjugate() * vec2).imag\n\ndef are_parallel(vec1, vec2):\n    return abs(cross_product(vec1, vec2)) < 1e-10\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(vec1, vec2):\n    return (vec1.conjugate() * vec2).imag\n\ndef are_parallel(vec1, vec2):\n    return abs(cross_product(vec1, vec2)) < 1e-10\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    if are_parallel(vector_a, vector_b):\n        print('YES')\n    else:\n        print('NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(a, b):\n    return (a.conjugate() * b).imag\n\ndef are_parallel(a, b):\n    return abs(cross_product(a, b)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')",
            "def cross_product(x, y):\n    return (x.conjugate() * y).imag\n\ndef are_parallel(x, y):\n    return abs(cross_product(x, y)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    coords = list(map(float, input().split()))\n    a = complex(coords[2], coords[3]) - complex(coords[0], coords[1])\n    b = complex(coords[6], coords[7]) - complex(coords[4], coords[5])    \n    print('YES' if are_parallel(a, b) else 'NO')",
            "def cross_product(u, v):\n    return (u.conjugate() * v).imag\n\ndef are_parallel(u, v):\n    return abs(cross_product(u, v)) < 1e-10\n\nnum_cases = int(input())\nfor _ in range(num_cases):\n    coords = list(map(float, input().split()))\n    line1_start = complex(coords[0], coords[1])\n    line1_end = complex(coords[2], coords[3])\n    line2_start = complex(coords[4], coords[5])\n    line2_end = complex(coords[6], coords[7])\n    \n    vector_a = line1_end - line1_start\n    vector_b = line2_end - line2_start\n    \n    if are_parallel(vector_a, vector_b):\n        print('YES')\n    else:\n        print('NO')",
            "def cross_product(a, b):\n    return (a.conjugate() * b).imag\n\ndef are_parallel(a, b):\n    return abs(cross_product(a, b)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    vector_a = complex(x2, y2) - complex(x1, y1)\n    vector_b = complex(x4, y4) - complex(x3, y3)    \n    if are_parallel(vector_a, vector_b):\n        print('YES')\n    else:\n        print('NO')",
            "def cross_product(z1, z2):\n    return (z1.conjugate() * z2).imag\n\ndef are_parallel(z1, z2):\n    return abs(cross_product(z1, z2)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    coords = list(map(float, input().split()))\n    a = complex(coords[2], coords[3]) - complex(coords[0], coords[1])\n    b = complex(coords[6], coords[7]) - complex(coords[4], coords[5])\n    print('YES' if are_parallel(a, b) else 'NO')",
            "def cross_product(vector1, vector2):\n    return (vector1.conjugate() * vector2).imag\n\ndef are_parallel(vector1, vector2):\n    return abs(cross_product(vector1, vector2)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    points = list(map(float, input().split()))\n    vector_a = complex(points[2], points[3]) - complex(points[0], points[1])\n    vector_b = complex(points[6], points[7]) - complex(points[4], points[5])\n    print('YES' if are_parallel(vector_a, vector_b) else 'NO')"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5*n-5\n        v_ex = 2*4.9*(y/k)**0.5\n        if v_ex >= v:\n            return n\n            break\n        else:\n            n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
        "writer": "human",
        "rewrite": [
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * y) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * (y / k)) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * y) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = 2 * 4.9 * (y / k) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * y)**0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * y) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = 2 * 4.9 * (y / k) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * y) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * (y / k)) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = 2 * k * (y / k) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\ntry:\n    while True:\n        v = float(input())\n        print(experiment(v))\nexcept EOFError:\n    pass",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = 2 * (k * y) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        v_ex = (2 * k * (y / k)) ** 0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import sys\n\ndef solve(numbers):\n    max = -sys.maxsize\n    for i in range(0, len(numbers)):\n        sum = 0\n        for j in range(i, len(numbers)):\n            sum += numbers[j]\n            if sum > max:\n                max = sum\n    return max\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = []\n    for i in range(0, n):\n        numbers.append(int(input()))\n\n    print(solve(numbers))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    for num in numbers:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "def solve(numbers):\n    max_sum = float('-inf')\n    for i in range(len(numbers)):\n        current_sum = 0\n        for j in range(i, len(numbers)):\n            current_sum += numbers[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "def solve(numbers):\n    max_sum = float('-inf')\n    current_sum = 0\n    for number in numbers:\n        current_sum += number\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "def solve(numbers):\n    max_sum = float('-inf')\n    for i in range(len(numbers)):\n        current_sum = 0\n        for j in range(i, len(numbers)):\n            current_sum += numbers[j]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "def solve(numbers):\n    max_sum = float('-inf')\n    current_sum = 0\n    for number in numbers:\n        current_sum = max(number, current_sum + number)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef find_max_subarray_sum(arr):\n    max_sum = -sys.maxsize\n    for start in range(len(arr)):\n        current_sum = 0\n        for end in range(start, len(arr)):\n            current_sum += arr[end]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    count = int(input())\n    if count == 0:\n        break\n    elements = [int(input()) for _ in range(count)]\n    print(find_max_subarray_sum(elements))",
            "def find_max_subarray_sum(nums):\n    max_sum = float('-inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum\n\nwhile True:\n    count = int(input())\n    if count == 0:\n        break\n    array = [int(input()) for _ in range(count)]\n    print(find_max_subarray_sum(array))",
            "def find_maximum_subarray_sum(numbers):\n    max_sum = float('-inf')\n    current_sum = 0\n    for number in numbers:\n        current_sum += number\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(find_maximum_subarray_sum(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    for num in numbers:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "def solve(numbers):\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for number in numbers:\n        current_sum += number\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize\n    current_sum = 0\n    for number in numbers:\n        current_sum += number\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef find_max_subarray_sum(numbers):\n    max_sum = -sys.maxsize\n    for start in range(len(numbers)):\n        current_sum = 0\n        for end in range(start, len(numbers)):\n            current_sum += numbers[end]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(find_max_subarray_sum(numbers))"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\n# Example usage:\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
        "writer": "machine",
        "rewrite": [
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\n# Example usage:\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
            "def amidakuji(width, swaps):\n    lines = list(range(1, width + 1))\n    for x, y in swaps:\n        lines[x - 1], lines[y - 1] = lines[y - 1], lines[x - 1]\n    return lines\n\n# Example usage:\nwidth = 5\nswaps = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(width, swaps)\nfor number in result:\n    print(number)",
            "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nprint(*result, sep='\\n')"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "import math\ndef aux(v):\n    [xa,ya,ra,xb,yb,rb] = v\n    ab = math.sqrt((xb-xa)**2 + (yb-ya)**2)\n    if ab > ra + rb:\n        rst = 0\n    elif ab + rb < ra:\n        rst = 2\n    elif ab + ra < rb:\n        rst = -2\n    else:\n        rst = 1      \n    return(rst)    \n\nif __name__ == \"__main__\": \n    n = int(input())\n    for i in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef check_circle_relation(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        params = list(map(float, input().split()))\n        print(check_circle_relation(params))",
            "import math\n\ndef circle_relationship(v):\n    xa, ya, ra, xb, yb, rb = v\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        values = list(map(float, input().split()))\n        print(circle_relationship(values))",
            "import math\n\ndef circle_relationship(v):\n    xa, ya, ra, xb, yb, rb = v\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1      \n\nif __name__ == \"__main__\": \n    test_cases = int(input())\n    for _ in range(test_cases):\n        parameters = list(map(float, input().split()))\n        print(circle_relationship(parameters))",
            "import math\n\ndef check_circle_relationship(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance_between_centers > ra + rb:\n        return 0\n    elif distance_between_centers + rb < ra:\n        return 2\n    elif distance_between_centers + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    number_of_cases = int(input())\n    for _ in range(number_of_cases):\n        parameters = list(map(float, input().split()))\n        print(check_circle_relationship(parameters))",
            "import math\n\ndef circle_relation(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        circle_data = list(map(float, input().split()))\n        print(circle_relation(circle_data))",
            "import math\n\ndef check_circle_relationships(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance_between_centers > ra + rb:\n        return 0\n    elif distance_between_centers + rb < ra:\n        return 2\n    elif distance_between_centers + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    number_of_cases = int(input())\n    for _ in range(number_of_cases):\n        parameters = list(map(float, input().split()))\n        print(check_circle_relationships(parameters))",
            "import math\n\ndef check_circle_relationships(params):\n    xa, ya, ra, xb, yb, rb = params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n\n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1      \n\nif __name__ == \"__main__\": \n    num_cases = int(input())\n    for _ in range(num_cases):\n        values = list(map(float, input().split()))\n        print(check_circle_relationships(values))",
            "import math\n\ndef check_circle_relationship(params):\n    xa, ya, ra, xb, yb, rb = params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n\n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        parameters = list(map(float, input().split()))\n        print(check_circle_relationship(parameters))",
            "import math\n\ndef aux(v):\n    xa, ya, ra, xb, yb, rb = v\n    ab = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    if ab > ra + rb:\n        return 0\n    elif ab + rb < ra:\n        return 2\n    elif ab + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
            "import math\n\ndef check_circle_relationships(coords):\n    xa, ya, ra, xb, yb, rb = coords\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance_between_centers > ra + rb:\n        return 0\n    elif distance_between_centers + rb < ra:\n        return 2\n    elif distance_between_centers + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\": \n    n = int(input())\n    for _ in range(n):\n        values = list(map(float, input().split()))\n        print(check_circle_relationships(values))",
            "import math\n\ndef circle_relationship(v):\n    xa, ya, ra, xb, yb, rb = v\n    distance_between_centers = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n    \n    if distance_between_centers > ra + rb:\n        return 0\n    elif distance_between_centers + rb < ra:\n        return 2\n    elif distance_between_centers + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    number_of_cases = int(input())\n    for _ in range(number_of_cases):\n        circle_values = list(map(float, input().split()))\n        print(circle_relationship(circle_values))",
            "import math\n\ndef check_circle_relationships(circle_params):\n    xa, ya, ra, xb, yb, rb = circle_params\n    distance = math.sqrt((xb - xa) ** 2 + (yb - ya) ** 2)\n\n    if distance > ra + rb:\n        return 0\n    elif distance + rb < ra:\n        return 2\n    elif distance + ra < rb:\n        return -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    num_cases = int(input())\n    for _ in range(num_cases):\n        params = list(map(float, input().split()))\n        print(check_circle_relationships(params))"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(N):\n        x_a = float(data[index])\n        y_a = float(data[index + 1])\n        r_a = float(data[index + 2])\n        x_b = float(data[index + 3])\n        y_b = float(data[index + 4])\n        r_b = float(data[index + 5])\n        index += 6\n\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    for result in results:\n        print(result)\n\ncircles_intersection()",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n    import math\n    import sys\n    \n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a = float(data[i * 6 + 1])\n        y_a = float(data[i * 6 + 2])\n        r_a = float(data[i * 6 + 3])\n        x_b = float(data[i * 6 + 4])\n        y_b = float(data[i * 6 + 5])\n        r_b = float(data[i * 6 + 6])\n        \n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    \n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 1 + (i + 1) * 6])\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 4 + i * 6])\n        x_b, y_b, r_b = map(float, data[4 + i * 6: 7 + i * 6])\n        \n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[index:index + 6])\n        index += 6\n\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(\"\\n\".join(map(str, results)))\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n\n    input = sys.stdin.read\n    data = input().split()\n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 4 + i * 6])\n        x_b, y_b, r_b = map(float, data[4 + i * 6: 7 + i * 6])\n        \n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 1 + (i + 1) * 6])\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    \n    input = sys.stdin.read\n    data = input().split()\n    results = []\n    \n    for i in range(int(data[0])):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 4 + i * 6])\n        x_b, y_b, r_b = map(float, data[4 + i * 6: 7 + i * 6])\n        \n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n        \n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(\"\\n\".join(map(str, results)))\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[index:index + 6])\n        index += 6\n\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(N):\n        x_a, y_a, r_a = map(float, data[index:index + 3])\n        x_b, y_b, r_b = map(float, data[index + 3:index + 6])\n        index += 6\n\n        distance = math.dist((x_a, y_a), (x_b, y_b))\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print('\\n'.join(map(str, results)))\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n\n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 1 + (i + 1) * 6])\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n\n    print(\"\\n\".join(map(str, results)))\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6 : 1 + (i + 1) * 6])\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n\n    data = input().split()\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 1 + i * 6 + 3])\n        x_b, y_b, r_b = map(float, data[1 + i * 6 + 3: 1 + i * 6 + 6])\n        \n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n\n    print('\\n'.join(map(str, results)))\n\ncircles_intersection()"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    results = []\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print('\\n'.join(map(str, results)))",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    results = []\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = -float('inf')\n        current_sum = 0\n        \n        for num in a:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    results = []\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = float('-inf')\n        current_sum = 0\n        for num in a:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    while index < len(data):\n        n = int(data[index])\n        if n == 0:\n            break\n        index += 1\n        array = list(map(int, data[index:index+n]))\n        index += n\n        \n        max_sum = current_sum = array[0]\n        for number in array[1:]:\n            current_sum = max(number, current_sum + number)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    results = []\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx + n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    print('\\n'.join(map(str, results)))",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)\n\n# Possible rewrite\ndef max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum, current_sum = a[0], a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)\n\ndef max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while True:\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    index = 0\n    while index < len(data):\n        n = int(data[index])\n        if n == 0:\n            break\n        index += 1\n        arr = list(map(int, data[index:index+n]))\n        index += n\n        \n        max_sum = current_sum = arr[0]\n        for value in arr[1:]:\n            current_sum = max(value, current_sum + value)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
            "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    results = []\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def process(A, B):\n    hit, blow = 0, 0\n    for a, b in zip(A, B):\n        if a == b:\n            hit += 1\n        elif a in B:\n            blow += 1\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except: break\n    hit, blow = process(A, B)\n    print(hit, blow)\n",
        "writer": "human",
        "rewrite": [
            "def process(A, B):\n    hit, blow = 0, 0\n    for a in A:\n        if a in B:\n            if A.index(a) == B.index(a):\n                hit += 1\n            else:\n                blow += 1\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)",
            "def evaluate_numbers(A, B):\n    hits, blows = 0, 0\n    for a_digit, b_digit in zip(A, B):\n        if a_digit == b_digit:\n            hits += 1\n        elif a_digit in B:\n            blows += 1\n    return (hits, blows)\n\nwhile True:\n    try:\n        A_input = input().split()\n        B_input = input().split()\n    except:\n        break\n    hits, blows = evaluate_numbers(A_input, B_input)\n    print(hits, blows)",
            "def process(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a in B for a in A) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)",
            "def process_lists(list1, list2):\n    hits, blows = 0, 0\n    for item1, item2 in zip(list1, list2):\n        if item1 == item2:\n            hits += 1\n        elif item1 in list2:\n            blows += 1\n    return (hits, blows)\n\nwhile True:\n    try:\n        input_list1 = input().split()\n        input_list2 = input().split()\n    except: \n        break\n    hits, blows = process_lists(input_list1, input_list2)\n    print(hits, blows)",
            "def calculate_hits_and_blows(secret, guess):\n    hits, blows = 0, 0\n    for s, g in zip(secret, guess):\n        if s == g:\n            hits += 1\n        elif g in secret:\n            blows += 1\n    return (hits, blows)\n\nwhile True:\n    try:\n        secret_list = input().split()\n        guess_list = input().split()\n    except:\n        break\n    hits, blows = calculate_hits_and_blows(secret_list, guess_list)\n    print(hits, blows)",
            "def count_hits_and_blows(sequence1, sequence2):\n    hits, blows = 0, 0\n    for item1, item2 in zip(sequence1, sequence2):\n        if item1 == item2:\n            hits += 1\n        elif item1 in sequence2:\n            blows += 1\n    return (hits, blows)\n\nwhile True:\n    try:\n        sequence1 = input().split()\n        sequence2 = input().split()\n    except: break\n    hits, blows = count_hits_and_blows(sequence1, sequence2)\n    print(hits, blows)",
            "def process(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a in B for a in A) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)",
            "def process(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)",
            "def process_lists(list1, list2):\n    correct, incorrect_position = 0, 0\n    for item1, item2 in zip(list1, list2):\n        if item1 == item2:\n            correct += 1\n        elif item1 in list2:\n            incorrect_position += 1\n    return (correct, incorrect_position)\n\nwhile True:\n    try:\n        list1 = input().split()\n        list2 = input().split()\n    except:\n        break\n    correct, incorrect_position = process_lists(list1, list2)\n    print(correct, incorrect_position)",
            "def evaluate_guess(secret, guess):\n    correct_positions, incorrect_positions = 0, 0\n    for s, g in zip(secret, guess):\n        if s == g:\n            correct_positions += 1\n        elif g in secret:\n            incorrect_positions += 1\n    return (correct_positions, incorrect_positions)\n\nwhile True:\n    try:\n        secret_input = input().split()\n        guess_input = input().split()\n    except: break\n    correct, incorrect = evaluate_guess(secret_input, guess_input)\n    print(correct, incorrect)",
            "def count_hits_bows(A, B):\n    hits, blows = 0, 0\n    for a, b in zip(A, B):\n        if a == b:\n            hits += 1\n        elif a in B:\n            blows += 1\n    return (hits, blows)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hits, blows = count_hits_bows(A, B)\n    print(hits, blows)",
            "def process(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except:\n        break\n    hit, blow = process(A, B)\n    print(hit, blow)"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef find_crack_floor():\n    input = sys.stdin.read()\n    data = input.split()\n    results = []\n    \n    for v in data:\n        v = float(v)\n        t = v / 9.8\n        y = 4.9 * t * t\n        N = math.ceil((y + 5) / 5)\n        results.append(N)\n    \n    for result in results:\n        print(result)\n\nfind_crack_floor()",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef find_crack_floor():\n    input = sys.stdin.read()\n    data = input.split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in data]\n    \n    for result in results:\n        print(result)\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in data]\n    \n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = []\n    \n    for value in data:\n        velocity = float(value)\n        time = velocity / 9.8\n        height = 4.9 * time ** 2\n        floor_number = math.ceil((height + 5) / 5)\n        results.append(floor_number)\n    \n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = []\n\n    for v in map(float, data):\n        y = 4.9 * (v / 9.8) ** 2\n        N = math.ceil((y + 5) / 5)\n        results.append(N)\n\n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = map(float, sys.stdin.read().split())\n    results = [math.ceil((4.9 * (v / 9.8) ** 2 + 5) / 5) for v in data]\n    \n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef calculate_crack_floors():\n    input_data = sys.stdin.read().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in input_data]\n    print(\"\\n\".join(map(str, results)))\n\ncalculate_crack_floors()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in data]\n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = []\n\n    for v in map(float, data):\n        y = 4.9 * (v / 9.8) ** 2\n        results.append(math.ceil((y + 5) / 5))\n\n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef calculate_crack_floor():\n    input_data = sys.stdin.read().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in input_data]\n    print(*results, sep='\\n')\n\ncalculate_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in data]\n    print('\\n'.join(map(str, results)))\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in data]\n    print(*results, sep='\\n')\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    for v in map(float, sys.stdin.read().split()):\n        t = v / 9.8\n        y = 4.9 * t ** 2\n        N = math.ceil((y + 5) / 5)\n        print(N)\n\nfind_crack_floor()"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(N):\n        x_a = float(data[index])\n        y_a = float(data[index + 1])\n        r_a = float(data[index + 2])\n        x_b = float(data[index + 3])\n        y_b = float(data[index + 4])\n        r_b = float(data[index + 5])\n        index += 6\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            if r_a > r_b:\n                results.append(\"2\")\n            else:\n                results.append(\"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    for result in results:\n        print(result)\n\n# To use this function, redirect the input to sys.stdin in your environment",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    N = int(data[0])\n    results = []\n\n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 1 + (i + 1) * 6])\n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n\n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n\n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 7 + i * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r_sq = (r_a + r_b) ** 2\n        diff_r_sq = (r_a - r_b) ** 2\n        \n        if distance_sq < diff_r_sq:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r_sq:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 1 + (i + 1) * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 1 + (i + 1) * 6])\n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 4 + i * 6])\n        x_b, y_b, r_b = map(float, data[4 + i * 6: 7 + i * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 4 + i * 6])\n        x_b, y_b, r_b = map(float, data[4 + i * 6: 7 + i * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r_sq = (r_a + r_b) ** 2\n        diff_r_sq = (r_a - r_b) ** 2\n        \n        if distance_sq < diff_r_sq:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r_sq:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 7 + i * 6])\n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 7 + i * 6])\n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(N):\n        x_a, y_a, r_a = map(float, data[index:index + 3])\n        x_b, y_b, r_b = map(float, data[index + 3:index + 6])\n        index += 6\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a = map(float, data[1 + i * 6: 4 + i * 6])\n        x_b, y_b, r_b = map(float, data[4 + i * 6: 7 + i * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6 : 1 + (i + 1) * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))",
            "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[1 + i * 6: 7 + i * 6])\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            results.append(\"2\" if r_a > r_b else \"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "import datetime\nimport calendar\n\ndef trans(month, day, year=2004):\n    past = datetime.date(year, month, day)\n    result = calendar.day_name[past.weekday()]\n    return result\n    \nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(trans(month, day))\n    \n",
        "writer": "human",
        "rewrite": [
            "import datetime\nimport calendar\n\ndef get_day_name(month, day, year=2004):\n    date_object = datetime.date(year, month, day)\n    return calendar.day_name[date_object.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if (month, day) == (0, 0):\n        break\n    print(get_day_name(month, day))",
            "import datetime\nimport calendar\n\ndef get_day_name(month, day, year=2004):\n    date_object = datetime.date(year, month, day)\n    return calendar.day_name[date_object.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: \n        break\n    print(get_day_name(month, day))",
            "from datetime import date\nimport sys\n\ndef get_day_of_week(month, day, year=2004):\n    return date(year, month, day).strftime(\"%A\")\n\nfor line in sys.stdin:\n    month, day = map(int, line.split())\n    if month == day == 0:\n        break\n    print(get_day_of_week(month, day))",
            "import datetime\n\ndef get_weekday(month, day, year=2004):\n    date_object = datetime.date(year, month, day)\n    return date_object.strftime(\"%A\")\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(get_weekday(month, day))",
            "import datetime\nimport calendar\n\ndef get_day_name(month, day, year=2004):\n    date_value = datetime.date(year, month, day)\n    return calendar.day_name[date_value.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(get_day_name(month, day))",
            "import datetime\nimport calendar\n\ndef get_weekday(month, day, year=2004):\n    date = datetime.date(year, month, day)\n    return calendar.day_name[date.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: \n        break\n    print(get_weekday(month, day))",
            "import datetime\nimport calendar\n\ndef get_weekday(month, day, year=2004):\n    date_obj = datetime.date(year, month, day)\n    return calendar.day_name[date_obj.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if (month, day) == (0, 0): break\n    print(get_weekday(month, day))",
            "import datetime\n\ndef get_weekday(month, day, year=2004):\n    if month == 0 and day == 0:\n        return None\n    date = datetime.date(year, month, day)\n    return date.strftime('%A')\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(get_weekday(month, day))",
            "import datetime\nimport calendar\n\ndef get_weekday(month, day, year=2004):\n    date_obj = datetime.date(year, month, day)\n    return calendar.day_name[date_obj.weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0: break\n    print(get_weekday(month, day))",
            "import datetime\n\ndef get_day_of_week(month, day, year=2004):\n    date = datetime.date(year, month, day)\n    return date.strftime(\"%A\")\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: \n        break\n    print(get_day_of_week(month, day))",
            "from datetime import date\nfrom calendar import day_name\n\ndef get_day_name(month, day, year=2004):\n    return day_name[date(year, month, day).weekday()]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(get_day_name(month, day))",
            "import datetime\n\ndef get_day_of_week(month, day, year=2004):\n    date = datetime.date(year, month, day)\n    return date.strftime(\"%A\")\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == 0 and day == 0:\n        break\n    print(get_day_of_week(month, day))"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def f():\n    ax,ay,ar,bx,by,br=map(float,input().split())\n    d=(ax-bx)**2+(ay-by)**2\n    r1=(ar+br)*(ar+br)\n    r2=(ar-br)*(ar-br)\n    if d<=r1 and d>=r2:return 1;\n    elif d<r2 and ar>=br:return 2\n    elif d < r2 and ar <= br:return -2\n    else:return 0\n\nfor _ in range(int(input())):print(f())",
        "writer": "human",
        "rewrite": [
            "def circle_relationship():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n\n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relationship())",
            "def check_circle_relationship():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n\n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circle_relationship())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    combined_radius_squared = (ar + br) ** 2\n    radius_difference_squared = (ar - br) ** 2\n    \n    if distance_squared <= combined_radius_squared and distance_squared >= radius_difference_squared:\n        return 1\n    elif distance_squared < radius_difference_squared and ar >= br:\n        return 2\n    elif distance_squared < radius_difference_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n\n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def circle_relationship():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radius_squared = (ar + br) ** 2\n    diff_radius_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radius_squared and distance_squared >= diff_radius_squared:\n        return 1\n    elif distance_squared < diff_radius_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radius_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relationship())",
            "def calculate_overlap():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    radius_sum_squared = (ar + br) ** 2\n    radius_diff_squared = (ar - br) ** 2\n\n    if radius_diff_squared <= distance_squared <= radius_sum_squared:\n        return 1\n    elif distance_squared < radius_diff_squared and ar >= br:\n        return 2\n    elif distance_squared < radius_diff_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(calculate_overlap())",
            "def check_circles_overlap():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles_overlap())",
            "def check_circles():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    difference_radii_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radii_squared and distance_squared >= difference_radii_squared:\n        return 1\n    elif distance_squared < difference_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < difference_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def check_circle_intersection():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    radius_sum_squared = (ar + br) ** 2\n    radius_diff_squared = (ar - br) ** 2\n    \n    if distance_squared <= radius_sum_squared and distance_squared >= radius_diff_squared:\n        return 1\n    elif distance_squared < radius_diff_squared and ar >= br:\n        return 2\n    elif distance_squared < radius_diff_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circle_intersection())",
            "def circle_relationship():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    r1_squared = (ar + br) ** 2\n    r2_squared = (ar - br) ** 2\n\n    if r2_squared <= distance_squared <= r1_squared:\n        return 1\n    elif distance_squared < r2_squared and ar >= br:\n        return 2\n    elif distance_squared < r2_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relationship())",
            "def intersection_case():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    distance_squared = (ax - bx) ** 2 + (ay - by) ** 2\n    sum_radii_squared = (ar + br) ** 2\n    diff_radii_squared = (ar - br) ** 2\n    \n    if distance_squared <= sum_radii_squared and distance_squared >= diff_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared and ar >= br:\n        return 2\n    elif distance_squared < diff_radii_squared and ar < br:\n        return -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(intersection_case())"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def day_of_date():\n    import sys\n    input = sys.stdin.read\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = input().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])\n\n# Example usage:\n# day_of_date()\n# Input should be provided via stdin redirection or similar method in actual use.",
        "writer": "machine",
        "rewrite": [
            "def day_of_date():\n    from sys import stdin\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = stdin.read().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    from datetime import datetime\n    import sys\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    for line in input_data:\n        month, day = map(int, line.split())\n        if month == 0 and day == 0:\n            break\n        date = datetime(2004, month, day)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    from datetime import datetime\n    import sys\n    \n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = sys.stdin.read().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    import sys\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = sys.stdin.read().strip().split('\\n')\n\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        day_index = (datetime(2004, m, d) - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    from datetime import datetime\n    import sys\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    input_data = sys.stdin.read().strip().split('\\n')\n\n    for line in input_data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        day_index = (datetime(2004, m, d) - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    import sys\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    for line in input_data:\n        month, day = map(int, line.split())\n        if month == 0 and day == 0:\n            break\n        date = datetime(2004, month, day)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])\n\n# Example usage:\n# day_of_date()\n# Input should be provided via stdin redirection or similar method in actual use.",
            "def day_of_date():\n    import sys\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = sys.stdin.read().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    import sys\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = sys.stdin.read().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        print(days_of_week[(date - datetime(2004, 1, 1)).days % 7])",
            "def day_of_date():\n    import sys\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    for line in sys.stdin.read().strip().split('\\n'):\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    from datetime import datetime\n    import sys\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    for line in input_data:\n        month, day = map(int, line.split())\n        if month == 0 and day == 0:\n            break\n        date = datetime(2004, month, day)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    from sys import stdin\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = stdin.read().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])",
            "def day_of_date():\n    from datetime import datetime\n    import sys\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    input_data = sys.stdin.read().strip().split('\\n')\n    \n    for line in input_data:\n        month, day = map(int, line.split())\n        if month == 0 and day == 0:\n            break\n        date = datetime(2004, month, day)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = sum(1 for j in range(4) if b[j] in a) - hits\n        \n        print(hits, blows)",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = sum(1 for num in b if num in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i + 1].split()))\n        \n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = sum(1 for j in range(4) if b[j] in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i + 1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(1 for num in b if num in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i + 1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(1 for x in b if x in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(b[j] in a for j in range(4)) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(1 for j in range(4) if b[j] in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i + 1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(min(a.count(x), b.count(x)) for x in set(a)) - hits\n        \n        results.append(f\"{hits} {blows}\")\n        \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i + 1].split()))\n        \n        hits = sum(x == y for x, y in zip(a, b))\n        blows = sum(1 for x in a if x in b) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    print('\\n'.join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(1 for j in range(4) if b[j] in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i + 1].split()))\n\n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = len(set(b) & set(a)) - hits\n        \n        print(hits, blows)",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(a[j] == b[j] for j in range(4))\n        blows = sum(1 for num in b if num in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    results = []\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = sum(1 for j in range(4) if b[j] in a) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "# Aizu Problem 0025: Hit and Blow\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef hit_and_blow(A, B):\n    hit, blow = 0, 0\n    for k in range(4):\n        if A[k] == B[k]:\n            hit += 1\n        elif A[k] in B:\n            blow += 1\n    return hit, blow\n\n\nwhile True:\n    try:\n        A = [int(_) for _ in input().split()]\n    except EOFError:\n        break\n    B = [int(_) for _ in input().split()]\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
        "writer": "human",
        "rewrite": [
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a in B for a in A) - hit\n    return hit, blow\n\nfor line in sys.stdin:\n    A = list(map(int, line.split()))\n    B = list(map(int, next(sys.stdin).split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit, blow = 0, 0\n    for a, b in zip(A, B):\n        if a == b:\n            hit += 1\n        elif a in B:\n            blow += 1\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n    except EOFError:\n        break\n    B = list(map(int, input().split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(A[k] == B[k] for k in range(4))\n    blow = sum(A[k] in B for k in range(4)) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        hit, blow = hit_and_blow(A, B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit, blow = 0, 0\n    for i in range(4):\n        if A[i] == B[i]:\n            hit += 1\n        elif A[i] in B:\n            blow += 1\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n    except EOFError:\n        break\n    B = list(map(int, input().split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hits = sum(a == b for a, b in zip(A, B))\n    blows = sum(1 for a in A if a in B) - hits\n    return hits, blows\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        hit, blow = hit_and_blow(A, B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys, os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n    except EOFError:\n        break\n    B = list(map(int, input().split()))\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
            "import sys\nimport os\n\nPYDEV = os.environ.get('PYDEV')\nif PYDEV == \"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\ndef hit_and_blow(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a in B for a in A) - hit\n    return hit, blow\n\ndef main():\n    while True:\n        try:\n            A = list(map(int, input().split()))\n            B = list(map(int, input().split()))\n            hit, blow = hit_and_blow(A, B)\n            print(hit, blow)\n        except EOFError:\n            break\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    LIST=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    while True:\n        try:\n            count=3\n            M,D=map(int,input().split())\n            if M==0:\n                break\n\n            if M in [1,4,7]:\n                pass\n            elif M in [10]:\n                count+=1\n            elif M in [5]:\n                count+=2\n            elif M in [2,8]:\n                count+=3\n            elif M in [3,11]:\n                count+=4\n            elif M in [6]:\n                count+=5\n            elif M in [9,12]:\n                count+=6\n\n            count+=D%7\n\n            print(LIST[count%7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_adjustments = {1: 0, 4: 0, 7: 0, 10: 1, 5: 2, 2: 3, 8: 3, 3: 4, 11: 4, 6: 5, 9: 6, 12: 6}\n            count += month_adjustments.get(month, 0)\n            count += day % 7\n\n            print(days[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            M, D = map(int, input().split())\n            if M == 0:\n                break\n\n            month_adjustments = {1: 0, 4: 0, 7: 0, 10: 1, 5: 2, 2: 3, 8: 3, 3: 4, 11: 4, 6: 5, 9: 6, 12: 6}\n            count += month_adjustments.get(M, 0)\n            count += D % 7\n\n            print(days[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                offset = 3\n            elif month in [10]:\n                offset = 4\n            elif month in [5]:\n                offset = 5\n            elif month in [2, 8]:\n                offset = 6\n            elif month in [3, 11]:\n                offset = 7\n            elif month in [6]:\n                offset = 8\n            elif month in [9, 12]:\n                offset = 9\n\n            final_day_index = (offset + (day % 7)) % 7\n            print(days_of_week[final_day_index])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_offsets = {\n                1: 0, 4: 0, 7: 0,\n                10: 1, \n                5: 2, \n                2: 3, 8: 3, \n                3: 4, 11: 4, \n                6: 5, \n                9: 6, 12: 6\n            }\n\n            count += month_offsets.get(month, 0)\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except Exception:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_offsets = {\n                1: 0, 4: 0, 7: 0,\n                10: 1, \n                5: 2, \n                2: 3, 8: 3,\n                3: 4, 11: 4,\n                6: 5, \n                9: 6, 12: 6\n            }\n            count += month_offsets.get(month, 0)\n            count += day % 7\n\n            print(days[count % 7])\n\n        except Exception:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in [2, 8]:\n                count += 3\n            elif month in [3, 11]:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in [9, 12]:\n                count += 6\n\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_adjustments = {\n                1: 0, 4: 0, 7: 0,\n                10: 1, 5: 2,\n                2: 3, 8: 3,\n                3: 4, 11: 4,\n                6: 5,\n                9: 6, 12: 6\n            }\n          \n            count += month_adjustments.get(month, 0)\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            if month in [1, 4, 7]:\n                pass\n            elif month == 10:\n                count += 1\n            elif month == 5:\n                count += 2\n            elif month in [2, 8]:\n                count += 3\n            elif month in [3, 11]:\n                count += 4\n            elif month == 6:\n                count += 5\n            elif month in [9, 12]:\n                count += 6\n\n            count += day % 7\n\n            print(days[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_days = {1: 0, 4: 0, 7: 0, 10: 1, 5: 2, 2: 3, 8: 3, 3: 4, 11: 4, 6: 5, 9: 6, 12: 6}\n            count += month_days.get(month, 0)\n\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_offset = {\n                1: 0, 4: 0, 7: 0,\n                10: 1,\n                5: 2,\n                2: 3, 8: 3,\n                3: 4, 11: 4,\n                6: 5,\n                9: 6, 12: 6\n            }\n            \n            count += month_offset.get(month, 0)\n            count += day % 7\n\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_counts = {\n                1: 0, 4: 0, 7: 0,\n                2: 3, 8: 3,\n                3: 4, 11: 4,\n                5: 2,\n                6: 5,\n                9: 6, 12: 6,\n                10: 1\n            }\n            count += month_counts.get(month, 0)\n            count += day % 7\n\n            print(days[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "# -*- coding:utf-8 -*-\n\ndef main():\n    days_of_week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\n    while True:\n        try:\n            count = 3\n            month, day = map(int, input().split())\n            if month == 0:\n                break\n\n            month_adjustments = {1: 0, 4: 0, 7: 0, 10: 1, 5: 2, 2: 3, 8: 3, 3: 4, 11: 4, 6: 5, 9: 6, 12: 6}\n            count += month_adjustments.get(month, 0)\n\n            count += day % 7\n            print(days_of_week[count % 7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef find_cracking_floor():\n    input = sys.stdin.read().strip().split()\n    results = []\n    \n    for line in input:\n        v = float(line)\n        t = v / 9.8\n        y = 4.9 * t ** 2\n        floor = math.ceil((y + 5) / 5)\n        results.append(floor)\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef find_cracking_floor():\n    lines = sys.stdin.read().strip().split()\n    results = [math.ceil((4.9 * (float(line) / 9.8) ** 2 + 5) / 5) for line in lines]\n    print('\\n'.join(map(str, results)))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    input_data = sys.stdin.read().strip().split()\n    results = []\n\n    for line in input_data:\n        velocity = float(line)\n        time = velocity / 9.8\n        height = 4.9 * time ** 2\n        floor_number = math.ceil((height + 5) / 5)\n        results.append(floor_number)\n\n    print(*results, sep='\\n')",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    input_data = sys.stdin.read().strip().split()\n    results = []\n\n    for line in input_data:\n        velocity = float(line)\n        time = velocity / 9.8\n        height = 4.9 * time ** 2\n        floor_number = math.ceil((height + 5) / 5)\n        results.append(floor_number)\n\n    print(*results, sep='\\n')",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    data = sys.stdin.read().strip().split()\n    output = []\n\n    for value in data:\n        speed = float(value)\n        time = speed / 9.8\n        height = 4.9 * time ** 2\n        floor_number = math.ceil((height + 5) / 5)\n        output.append(floor_number)\n\n    for floor in output:\n        print(floor)",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    data = sys.stdin.read().strip().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in data]\n    print(*results, sep='\\n')",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    results = []\n    \n    for line in sys.stdin.read().strip().split():\n        v = float(line)\n        t = v / 9.8\n        y = 4.9 * t ** 2\n        floor = math.ceil((y + 5) / 5)\n        results.append(floor)\n    \n    print(*results, sep='\\n')",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    input_data = sys.stdin.read().strip().split()\n    outputs = []\n    \n    for entry in input_data:\n        velocity = float(entry)\n        time_elapsed = velocity / 9.8\n        height = 4.9 * time_elapsed ** 2\n        floor_number = math.ceil((height + 5) / 5)\n        outputs.append(floor_number)\n    \n    for output in outputs:\n        print(output)",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    lines = sys.stdin.read().strip().split()\n    results = [math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5) for v in lines]\n    print(*results, sep='\\n')",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    inputs = sys.stdin.read().strip().split()\n    results = [(math.ceil((4.9 * (float(v) / 9.8) ** 2 + 5) / 5)) for v in inputs]\n    \n    for result in results:\n        print(result)",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    data = sys.stdin.read().strip().split()\n    results = [(math.ceil(((4.9 * (float(v) / 9.8) ** 2) + 5) / 5)) for v in data]\n    print(\"\\n\".join(map(str, results)))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    results = []\n    \n    for line in sys.stdin.read().strip().split():\n        v = float(line)\n        floor = math.ceil((4.9 * (v / 9.8) ** 2 + 5) / 5)\n        results.append(floor)\n    \n    print(\"\\n\".join(map(str, results)))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    input_data = sys.stdin.read().strip().split()\n    results = [math.ceil((4.9 * (float(line) / 9.8) ** 2 + 5) / 5) for line in input_data]\n    print(*results, sep='\\n')"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(1 for j in range(4) if A[j] == B[j])\n        blows = sum(1 for j in range(4) if A[j] in B and A[j] != B[j])\n        \n        results.append(f\"{hits} {blows}\")\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(1 for a in A if a in B) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(1 for a in A if a in B) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(min(A.count(x), B.count(x)) for x in set(A) if x in B) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(A[j] == B[j] for j in range(4))\n        blows = sum(1 for j in range(4) if A[j] in B and A[j] != B[j])\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(a in B and A.count(a) > B.count(a) for a in A)\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(1 for a in A if a in B) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(A[j] == B[j] for j in range(4))\n        blows = sum(A[j] in B and A[j] != B[j] for j in range(4))\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(a in B and A.count(a) > B.count(a) for a in A)\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(A[j] == B[j] for j in range(4))\n        blows = sum(A[j] in B and A[j] != B[j] for j in range(4))\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(1 for a in A if a in B) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input_data = sys.stdin.read().strip().split()\n    \n    results = []\n    for i in range(0, len(input_data), 8):\n        A = input_data[i:i + 4]\n        B = input_data[i + 4:i + 8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(1 for a in A if a in B and A[A.index(a)] != B[B.index(a)])\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))",
            "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    \n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(a == b for a, b in zip(A, B))\n        blows = sum(min(A.count(x), B.count(x)) for x in set(A)) - hits\n        \n        results.append(f\"{hits} {blows}\")\n    \n    print(\"\\n\".join(results))"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        days = sum(days_in_month[:m-1]) + d - 1\n        return day_names[days % 7]\n    \n    results = []\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        results.append(calculate_day(m, d))\n    \n    for result in results:\n        print(result)\n\n# Example usage:\n# day_of_the_date()",
        "writer": "machine",
        "rewrite": [
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = [calculate_day(*map(int, line.split())) for line in data if (m := int(line.split()[0])) != 0 or (d := int(line.split()[1])) != 0]\n    \n    print(\"\\n\".join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = [calculate_day(*map(int, line.split())) for line in data if line.strip() and tuple(map(int, line.split())) != (0, 0)]\n    \n    print(\"\\n\".join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = [calculate_day(*(map(int, line.split()))) for line in data if line != '0 0']\n    \n    print(*results, sep='\\n')",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    results = []\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        days = sum(days_in_month[:m-1]) + d - 1\n        results.append(day_names[days % 7])\n    \n    print(\"\\n\".join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = [calculate_day(*map(int, line.split())) for line in data if line.strip() != \"0 0\"]\n    \n    print(\"\\n\".join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    results = []\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        days = sum(days_in_month[:m-1]) + d - 1\n        results.append(day_names[days % 7])\n    \n    print('\\n'.join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n\n    results = [calculate_day(*map(int, line.split())) for line in data if line.strip() and (line.split() != ['0', '0'])]\n    \n    print(\"\\n\".join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = []\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        results.append(calculate_day(m, d))\n    \n    print('\\n'.join(results))",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    results = []\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        days = sum(days_in_month[:m - 1]) + d - 1\n        results.append(day_names[days % 7])\n\n    print(\"\\n\".join(results))",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = [calculate_day(*map(int, line.split())) for line in data if line.strip() and line.split() != ['0', '0']]\n    \n    print('\\n'.join(results))\n\n# Example usage:\n# day_of_the_date()",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        return day_names[(sum(days_in_month[:m-1]) + d - 1) % 7]\n    \n    results = [calculate_day(*map(int, line.split())) for line in data if (line := line.strip()) != '0 0']\n    \n    print('\\n'.join(results))",
            "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        days = sum(days_in_month[:m-1]) + d - 1\n        return day_names[days % 7]\n    \n    results = [calculate_day(*map(int, line.split())) for line in data if line.strip() and (m := int(line.split()[0])) != 0 or (d := int(line.split()[1])) != 0]\n    \n    print('\\n'.join(results))\n\n# Example usage:\n# day_of_the_date()"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    \n    results = []\n    for _ in range(n):\n        x1, y1, x2, y2 = float(data[index]), float(data[index+1]), float(data[index+2]), float(data[index+3])\n        x3, y3, x4, y4 = float(data[index+4]), float(data[index+5]), float(data[index+6]), float(data[index+7])\n        index += 8\n        \n        # Calculate slopes\n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            if slope1 == slope2:\n                results.append(\"YES\")\n            else:\n                results.append",
        "writer": "machine",
        "rewrite": [
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index + 4])\n        x3, y3, x4, y4 = map(float, data[index + 4:index + 8])\n        index += 8\n        \n        if (x2 - x1) * (x4 - x3) == 0:\n            results.append(\"YES\" if (x2 - x1) == 0 and (x4 - x3) == 0 else \"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    index = 1\n\n    results = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n\n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n\n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n\n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    \n    results = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    \n    results = []\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print('\\n'.join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n\n    n = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index + 4])\n        x3, y3, x4, y4 = map(float, data[index + 4:index + 8])\n        index += 8\n\n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = map(float, data[index:index+4])\n        x3, y3, x4, y4 = map(float, data[index+4:index+8])\n        index += 8\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))",
            "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    results = []\n    \n    for i in range(n):\n        x1, y1, x2, y2 = map(float, data[1 + i * 8: 5 + i * 8])\n        x3, y3, x4, y4 = map(float, data[5 + i * 8: 9 + i * 8])\n        \n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    print(\"\\n\".join(results))"
        ]
    }
]