[
    {
        "id": 3,
        "prompt": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"",
        "code": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"\n    new_set = self.copy()\n    for resolved_pkg, built_pkg in built_packages.items():\n        if resolved_pkg in new_set:\n            new_set.remove(resolved_pkg)\n            new_set.add(built_pkg)\n    return new_set",
        "writer": "machine",
        "rewrite": [
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    for resolved_pkg, built_pkg in built_packages.items():\n        new_set.discard(resolved_pkg)\n        new_set.add(built_pkg)\n    return new_set",
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    for resolved_pkg, built_pkg in built_packages.items():\n        if resolved_pkg in new_set:\n            new_set.discard(resolved_pkg)\n            new_set.add(built_pkg)\n    return new_set",
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    for resolved_pkg, built_pkg in built_packages.items():\n        if resolved_pkg in new_set:\n            new_set.discard(resolved_pkg)\n            new_set.add(built_pkg)\n    return new_set"
        ]
    },
    {
        "id": 2,
        "prompt": "def selectOptimalChunk(self, peer):\n        \"\"\"\n        select an optimal chunk to send to a peer.\n\n        @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n        otherwise None, None\n        \"\"\"",
        "code": "def selectOptimalChunk(self, peer):\n    \"\"\"\n    select an optimal chunk to send to a peer.\n\n    @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n    otherwise None, None\n    \"\"\"\n    available_chunks = set(self.chunks.keys()) - set(peer.has_chunks)\n    if not available_chunks:\n        return None, None\n    \n    optimal_chunk = min(available_chunks)\n    chunk_data = self.chunks[optimal_chunk]\n    \n    return optimal_chunk, chunk_data",
        "writer": "machine",
        "rewrite": [
            "def select_optimal_chunk(self, peer):\n    available_chunks = set(self.chunks) - set(peer.has_chunks)\n    if not available_chunks:\n        return None, None\n    \n    optimal_chunk = min(available_chunks)\n    return optimal_chunk, self.chunks[optimal_chunk]",
            "def select_optimal_chunk(self, peer):\n    available_chunks = set(self.chunks) - set(peer.has_chunks)\n    if not available_chunks:\n        return None, None\n    \n    optimal_chunk = min(available_chunks)\n    return optimal_chunk, self.chunks[optimal_chunk]",
            "def select_optimal_chunk(self, peer):\n    available_chunks = set(self.chunks) - set(peer.has_chunks)\n    if not available_chunks:\n        return None, None\n    optimal_chunk = min(available_chunks)\n    return optimal_chunk, self.chunks[optimal_chunk]"
        ]
    },
    {
        "id": 3,
        "prompt": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"",
        "code": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"\n    def map_packages(resolved_packages):\n      packages = OrderedSet(built_packages.get(p, p) for p in resolved_packages.packages)\n      return _ResolvedPackages(resolved_packages.resolvable, packages,\n                               resolved_packages.parent, resolved_packages.constraint_only)\n\n    return _ResolvableSet([map_packages(rp) for rp in self.__tuples])",
        "writer": "human",
        "rewrite": [
            "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"\n    mapped_packages = [\n        _ResolvedPackages(\n            rp.resolvable,\n            OrderedSet(built_packages.get(pkg, pkg) for pkg in rp.packages),\n            rp.parent,\n            rp.constraint_only\n        )\n        for rp in self.__tuples\n    ]\n    return _ResolvableSet(mapped_packages)",
            "def replace_built(self, built_packages):\n    \"\"\"Return a new resolvable set with built package replacements made.\"\"\"\n    \n    def map_packages(resolved_packages):\n        packages = OrderedSet(built_packages.get(p, p) for p in resolved_packages.packages)\n        return _ResolvedPackages(resolved_packages.resolvable, packages,\n                                 resolved_packages.parent, resolved_packages.constraint_only)\n    \n    return _ResolvableSet([map_packages(rp) for rp in self.__tuples])",
            "def replace_built(self, built_packages):\n    def map_packages(resolved_packages):\n        packages = OrderedSet(built_packages.get(p, p) for p in resolved_packages.packages)\n        return _ResolvedPackages(resolved_packages.resolvable, packages,\n                                 resolved_packages.parent, resolved_packages.constraint_only)\n\n    return _ResolvableSet(map(map_packages, self.__tuples))"
        ]
    },
    {
        "id": 1,
        "prompt": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"",
        "code": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"\n    HYDROPH_DIST_MAX = 4.0\n    hydrophobic_pairs = []\n    \n    for atom_a in atom_set_a:\n        if atom_a.element == 'C' and not atom_a.is_polar():\n            for atom_b in atom_set_b:\n                if atom_b.element == 'C' and not atom_b.is_polar():\n                    distance = calculate_distance(atom_a, atom_b)\n                    if distance <= HYDROPH_DIST_MAX:\n                        hydrophobic_pairs.append((atom_a, atom_b))\n    \n    return hydrophobic_pairs",
        "writer": "machine",
        "rewrite": [
            "def detect_hydrophobic_interactions(binding_site_atoms, ligand_atoms):\n    \"\"\"Identify hydrophobic interactions between binding site atoms and ligand atoms.\n    Criteria: Carbon atoms within a maximum distance defined by HYDROPH_DIST_MAX.\"\"\"\n    HYDROPH_DIST_MAX = 4.0\n    interactions = []\n    \n    for atom_a in binding_site_atoms:\n        if atom_a.element == 'C' and not atom_a.is_polar():\n            for atom_b in ligand_atoms:\n                if atom_b.element == 'C' and not atom_b.is_polar():\n                    if calculate_distance(atom_a, atom_b) <= HYDROPH_DIST_MAX:\n                        interactions.append((atom_a, atom_b))\n    \n    return interactions",
            "def detect_hydrophobic_interactions(binding_site_atoms, ligand_atoms):\n    \"\"\"Identify hydrophobic interactions between binding_site_atoms and ligand_atoms.\n    This function considers all pairs of non-polar carbon atoms that are within a distance of HYDROPH_DIST_MAX.\"\"\"\n    HYDROPH_DIST_MAX = 4.0\n    hydrophobic_pairs = []\n    \n    for atom_a in binding_site_atoms:\n        if atom_a.element == 'C' and not atom_a.is_polar():\n            for atom_b in ligand_atoms:\n                if atom_b.element == 'C' and not atom_b.is_polar():\n                    if calculate_distance(atom_a, atom_b) <= HYDROPH_DIST_MAX:\n                        hydrophobic_pairs.append((atom_a, atom_b))\n    \n    return hydrophobic_pairs",
            "def find_hydrophobic_pairs(binding_site, ligand):\n    MAX_DISTANCE = 4.0\n    pairs = []\n    \n    for atom1 in binding_site:\n        if atom1.element == 'C' and not atom1.is_polar():\n            for atom2 in ligand:\n                if atom2.element == 'C' and not atom2.is_polar():\n                    if calculate_distance(atom1, atom2) <= MAX_DISTANCE:\n                        pairs.append((atom1, atom2))\n    \n    return pairs"
        ]
    },
    {
        "id": 5,
        "prompt": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"",
        "code": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"\n    import math\n    \n    char_count = len(chars)\n    if char_count == 0 or length == 0:\n        return 0.0\n    \n    entropy = length * math.log2(char_count)\n    return entropy",
        "writer": "machine",
        "rewrite": [
            "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"\n    import math\n    \n    if not chars or length <= 0:\n        return 0.0\n    \n    return length * math.log2(len(chars))",
            "def calculate_password_entropy(length: int, characters: str) -> float:\n    \"\"\"Calculate the entropy of a password using its length and character set.\"\"\"\n    from math import log2\n    \n    num_chars = len(characters)\n    if num_chars == 0 or length == 0:\n        return 0.0\n    \n    return length * log2(num_chars)",
            "def calculate_password_entropy(length: int, characters: str) -> float:\n    \"\"\"Compute the entropy for a password based on its length and character set.\"\"\"\n    import math\n    \n    num_chars = len(characters)\n    if num_chars == 0 or length == 0:\n        return 0.0\n    \n    entropy_value = length * math.log2(num_chars)\n    return entropy_value"
        ]
    },
    {
        "id": 6,
        "prompt": "def actualize_source_type (self, sources, prop_set):\n        \"\"\" Helper for 'actualize_sources'.\n            For each passed source, actualizes it with the appropriate scanner.\n            Returns the actualized virtual targets.\n        \"\"\"",
        "code": "def actualize_source_type(self, sources, prop_set):\n    actualized_targets = []\n    for source in sources:\n        scanner = self.get_scanner(source)\n        if scanner:\n            actualized = scanner.actualize(source, prop_set)\n            actualized_targets.extend(actualized)\n        else:\n            actualized_targets.append(source)\n    return actualized_targets",
        "writer": "machine",
        "rewrite": [
            "def actualize_source_type(self, sources, prop_set):\n    return [self.get_scanner(source).actualize(source, prop_set) if self.get_scanner(source) else source for source in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    return [\n        self.get_scanner(source).actualize(source, prop_set) if self.get_scanner(source) else source\n        for source in sources\n    ]",
            "def actualize_source_type(self, sources, prop_set):\n    return [self.get_scanner(source).actualize(source, prop_set) if self.get_scanner(source) else source for source in sources]"
        ]
    },
    {
        "id": 5,
        "prompt": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"",
        "code": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"\n    if not isinstance(length, int):\n        raise TypeError('length can only be int')\n    if length < 0:\n        raise ValueError('length should be greater than 0')\n    if not isinstance(chars, str):\n        raise TypeError('chars can only be string')\n    if not chars:\n        raise ValueError(\"chars can't be null\")\n\n    if length == 0:\n        return 0.0\n\n    entropy_c = entropy_bits(list(chars))\n    return float(length * entropy_c)",
        "writer": "human",
        "rewrite": [
            "def password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int):\n        raise TypeError('length can only be int')\n    if length <= 0:\n        raise ValueError('length should be greater than 0')\n    if not isinstance(chars, str):\n        raise TypeError('chars can only be string')\n    if not chars:\n        raise ValueError(\"chars can't be null\")\n\n    return float(length * entropy_bits(list(chars))) if length > 0 else 0.0",
            "def calculate_password_entropy(length: int, characters: str) -> float:\n    \"\"\"Compute the entropy of a password given its length and the set of characters.\"\"\"\n    if not isinstance(length, int):\n        raise TypeError('length must be an integer')\n    if length < 1:\n        raise ValueError('length must be greater than 0')\n    if not isinstance(characters, str):\n        raise TypeError('characters must be a string')\n    if not characters:\n        raise ValueError(\"characters cannot be empty\")\n\n    if length == 0:\n        return 0.0\n\n    entropy_value = entropy_bits(list(characters))\n    return float(length * entropy_value)",
            "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and characters.\"\"\"\n    if not isinstance(length, int):\n        raise TypeError('length must be an integer')\n    if length <= 0:\n        raise ValueError('length must be greater than 0')\n    if not isinstance(chars, str):\n        raise TypeError('chars must be a string')\n    if not chars:\n        raise ValueError(\"chars cannot be empty\")\n\n    return float(length * entropy_bits(list(chars))) if length > 0 else 0.0"
        ]
    },
    {
        "id": 6,
        "prompt": "def actualize_source_type (self, sources, prop_set):\n        \"\"\" Helper for 'actualize_sources'.\n            For each passed source, actualizes it with the appropriate scanner.\n            Returns the actualized virtual targets.\n        \"\"\"",
        "code": "def actualize_source_type (self, sources, prop_set):\n        \"\"\" Helper for 'actualize_sources'.\n            For each passed source, actualizes it with the appropriate scanner.\n            Returns the actualized virtual targets.\n        \"\"\"\n        assert is_iterable_typed(sources, VirtualTarget)\n        assert isinstance(prop_set, property_set.PropertySet)\n        result = []\n        for i in sources:\n            scanner = None\n\n# FIXME: what's this?\n#            if isinstance (i, str):\n#                i = self.manager_.get_object (i)\n\n            if i.type ():\n                scanner = b2.build.type.get_scanner (i.type (), prop_set)\n\n            r = i.actualize (scanner)\n            result.append (r)\n\n        return result",
        "writer": "human",
        "rewrite": [
            "def actualize_source_type(self, sources, prop_set):\n    \"\"\" Helper for 'actualize_sources'.\n        For each passed source, actualizes it with the appropriate scanner.\n        Returns the actualized virtual targets.\n    \"\"\"\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    result = []\n\n    for source in sources:\n        scanner = b2.build.type.get_scanner(source.type(), prop_set) if source.type() else None\n        result.append(source.actualize(scanner))\n\n    return result",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [i.actualize(b2.build.type.get_scanner(i.type(), prop_set) if i.type() else None) for i in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    result = []\n    \n    for source in sources:\n        scanner = None\n\n        if source.type():\n            scanner = b2.build.type.get_scanner(source.type(), prop_set)\n\n        actualized_target = source.actualize(scanner)\n        result.append(actualized_target)\n\n    return result"
        ]
    },
    {
        "id": 2,
        "prompt": "def selectOptimalChunk(self, peer):\n        \"\"\"\n        select an optimal chunk to send to a peer.\n\n        @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n        otherwise None, None\n        \"\"\"",
        "code": "def selectOptimalChunk(self, peer):\n        \"\"\"\n        select an optimal chunk to send to a peer.\n\n        @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n        otherwise None, None\n        \"\"\"\n\n        # stuff I have\n        have = sets.Set(self.mask.positions(1))\n        # stuff that this peer wants\n        want = sets.Set(self.peers[peer].mask.positions(0))\n        exchangeable = have.intersection(want)\n        finalSet = dict.fromkeys(exchangeable, 0)\n\n        # taking a page from bittorrent, rarest-first\n        for chunkNumber in exchangeable:\n            for otherPeer in self.peers.itervalues():\n                finalSet[chunkNumber] += not otherPeer.mask[chunkNumber]\n        rarityList = [(rarity, random.random(), chunkNumber)\n                      for (chunkNumber, rarity)\n                      in finalSet.iteritems()]\n        if not rarityList:\n            return None, None\n        rarityList.sort()\n        chunkNumber = rarityList[-1][-1] # sorted in ascending order of rarity\n\n        # sanity check\n        assert self.mask[chunkNumber], \"I wanted to send a chunk I didn't have\"\n\n        self.file.seek(chunkNumber * CHUNK_SIZE)\n        chunkData = self.file.read(CHUNK_SIZE)\n        self.sha1sums[chunkNumber] = sha.new(chunkData).digest()\n        return chunkNumber, chunkData",
        "writer": "human",
        "rewrite": [
            "def select_optimal_chunk(self, peer):\n    \"\"\"\n    Select an optimal chunk to send to a peer.\n\n    @return: int(chunk_number), str(chunk_data) if there is data to be sent,\n    otherwise None, None\n    \"\"\"\n\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have.intersection(want)\n    final_set = {chunk_number: 0 for chunk_number in exchangeable}\n\n    for chunk_number in exchangeable:\n        for other_peer in self.peers.values():\n            final_set[chunk_number] += not other_peer.mask[chunk_number]\n    rarity_list = [(rarity, random.random(), chunk_number) for chunk_number, rarity in final_set.items()]\n    \n    if not rarity_list:\n        return None, None\n    \n    rarity_list.sort()\n    chunk_number = rarity_list[-1][-1]\n\n    assert self.mask[chunk_number], \"I wanted to send a chunk I didn't have\"\n\n    self.file.seek(chunk_number * CHUNK_SIZE)\n    chunk_data = self.file.read(CHUNK_SIZE)\n    self.sha1sums[chunk_number] = sha.new(chunk_data).digest()\n    return chunk_number, chunk_data",
            "def select_optimal_chunk(self, peer):\n    \"\"\"\n    Select an optimal chunk to send to a peer.\n\n    @return: int(chunk_number), str(chunk_data) if there is data to be sent,\n    otherwise None, None\n    \"\"\"\n\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have.intersection(want)\n    final_set = {chunk_number: 0 for chunk_number in exchangeable}\n\n    for chunk_number in exchangeable:\n        for other_peer in self.peers.values():\n            final_set[chunk_number] += not other_peer.mask[chunk_number]\n    \n    rarity_list = [(rarity, random.random(), chunk_number) for chunk_number, rarity in final_set.items()]\n    if not rarity_list:\n        return None, None\n        \n    rarity_list.sort()\n    chunk_number = rarity_list[-1][-1]\n\n    assert self.mask[chunk_number], \"I wanted to send a chunk I didn't have\"\n\n    self.file.seek(chunk_number * CHUNK_SIZE)\n    chunk_data = self.file.read(CHUNK_SIZE)\n    self.sha1sums[chunk_number] = sha.new(chunk_data).digest()\n    return chunk_number, chunk_data",
            "def select_optimal_chunk(self, peer):\n    \"\"\"\n    Select an optimal chunk to send to a peer.\n\n    @return: int(chunk_number), str(chunk_data) if there is data to be sent,\n    otherwise None, None\n    \"\"\"\n\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have.intersection(want)\n    final_set = {chunk_number: 0 for chunk_number in exchangeable}\n\n    for chunk_number in exchangeable:\n        for other_peer in self.peers.values():\n            final_set[chunk_number] += not other_peer.mask[chunk_number]\n\n    rarity_list = [(rarity, random.random(), chunk_number) \n                   for chunk_number, rarity in final_set.items()]\n    \n    if not rarity_list:\n        return None, None\n\n    rarity_list.sort()\n    chunk_number = rarity_list[-1][-1]\n\n    assert self.mask[chunk_number], \"I wanted to send a chunk I didn't have\"\n\n    self.file.seek(chunk_number * CHUNK_SIZE)\n    chunk_data = self.file.read(CHUNK_SIZE)\n    self.sha1sums[chunk_number] = sha.new(chunk_data).digest()\n    \n    return chunk_number, chunk_data"
        ]
    },
    {
        "id": 1,
        "prompt": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"",
        "code": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"\n    data = namedtuple('hydroph_interaction', 'bsatom bsatom_orig_idx ligatom ligatom_orig_idx '\n                                             'distance restype resnr reschain restype_l, resnr_l, reschain_l')\n    pairings = []\n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx:\n            continue\n        e = euclidean3d(a.atom.coords, b.atom.coords)\n        if not config.MIN_DIST < e < config.HYDROPH_DIST_MAX:\n            continue\n        restype, resnr, reschain = whichrestype(a.atom), whichresnumber(a.atom), whichchain(a.atom)\n        restype_l, resnr_l, reschain_l = whichrestype(b.orig_atom), whichresnumber(b.orig_atom), whichchain(b.orig_atom)\n        contact = data(bsatom=a.atom, bsatom_orig_idx=a.orig_idx, ligatom=b.atom, ligatom_orig_idx=b.orig_idx,\n                       distance=e, restype=restype, resnr=resnr,\n                       reschain=reschain, restype_l=restype_l,\n                       resnr_l=resnr_l, reschain_l=reschain_l)\n        pairings.append(contact)\n    return filter_contacts(pairings)",
        "writer": "human",
        "rewrite": [
            "from collections import namedtuple\nimport itertools\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    Interaction = namedtuple('Interaction', 'bsatom bsatom_orig_idx ligatom ligatom_orig_idx '\n                                             'distance restype resnr reschain restype_l resnr_l reschain_l')\n    pairings = []\n    \n    for a in atom_set_a:\n        for b in atom_set_b:\n            if a.orig_idx == b.orig_idx:\n                continue\n            \n            distance = euclidean3d(a.atom.coords, b.atom.coords)\n            if not (config.MIN_DIST < distance < config.HYDROPH_DIST_MAX):\n                continue\n            \n            restype = whichrestype(a.atom)\n            resnr = whichresnumber(a.atom)\n            reschain = whichchain(a.atom)\n            restype_l = whichrestype(b.orig_atom)\n            resnr_l = whichresnumber(b.orig_atom)\n            reschain_l = whichchain(b.orig_atom)\n\n            contact = Interaction(bsatom=a.atom, bsatom_orig_idx=a.orig_idx, ligatom=b.atom, \n                                  ligatom_orig_idx=b.orig_idx, distance=distance, \n                                  restype=restype, resnr=resnr, reschain=reschain, \n                                  restype_l=restype_l, resnr_l=resnr_l, reschain_l=reschain_l)\n            pairings.append(contact)\n    \n    return filter_contacts(pairings)",
            "from collections import namedtuple\nimport itertools\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    Interaction = namedtuple('Interaction', \n                             'bsatom bsatom_orig_idx ligatom ligatom_orig_idx distance '\n                             'restype resnr reschain restype_l resnr_l reschain_l')\n    pairings = []\n    \n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx:\n            continue\n        distance = euclidean3d(a.atom.coords, b.atom.coords)\n        if not (config.MIN_DIST < distance < config.HYDROPH_DIST_MAX):\n            continue\n        \n        restype = whichrestype(a.atom)\n        resnr = whichresnumber(a.atom)\n        reschain = whichchain(a.atom)\n        restype_l = whichrestype(b.orig_atom)\n        resnr_l = whichresnumber(b.orig_atom)\n        reschain_l = whichchain(b.orig_atom)\n\n        contact = Interaction(bsatom=a.atom, \n                              bsatom_orig_idx=a.orig_idx, \n                              ligatom=b.atom, \n                              ligatom_orig_idx=b.orig_idx,\n                              distance=distance, \n                              restype=restype, \n                              resnr=resnr, \n                              reschain=reschain, \n                              restype_l=restype_l, \n                              resnr_l=resnr_l, \n                              reschain_l=reschain_l)\n        pairings.append(contact)\n    \n    return filter_contacts(pairings)",
            "from collections import namedtuple\nimport itertools\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    InteractionData = namedtuple('hydroph_interaction', \n                                  'bsatom bsatom_orig_idx ligatom ligatom_orig_idx '\n                                  'distance restype resnr reschain restype_l resnr_l reschain_l')\n    pairings = []\n    \n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx:\n            continue\n        \n        distance = euclidean3d(a.atom.coords, b.atom.coords)\n        if not (config.MIN_DIST < distance < config.HYDROPH_DIST_MAX):\n            continue\n        \n        restype = whichrestype(a.atom)\n        resnr = whichresnumber(a.atom)\n        reschain = whichchain(a.atom)\n        restype_l = whichrestype(b.orig_atom)\n        resnr_l = whichresnumber(b.orig_atom)\n        reschain_l = whichchain(b.orig_atom)\n        \n        contact = InteractionData(bsatom=a.atom,\n                                   bsatom_orig_idx=a.orig_idx,\n                                   ligatom=b.atom,\n                                   ligatom_orig_idx=b.orig_idx,\n                                   distance=distance,\n                                   restype=restype,\n                                   resnr=resnr,\n                                   reschain=reschain,\n                                   restype_l=restype_l,\n                                   resnr_l=resnr_l,\n                                   reschain_l=reschain_l)\n        pairings.append(contact)\n    \n    return filter_contacts(pairings)"
        ]
    },
    {
        "id": 7,
        "prompt": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"",
        "code": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    return {\n        'id': row[0],\n        'name': row[1],\n        'description': row[2],\n        'created_at': row[3],\n        'updated_at': row[4],\n        'status': row[5],\n        'creator_id': row[6],\n        'hunt_id': row[7],\n        'flow_args': row[8]\n    }",
        "writer": "machine",
        "rewrite": [
            "def generate_flow_object_from_row(row):\n    return {\n        'id': row[0],\n        'name': row[1],\n        'description': row[2],\n        'created_at': row[3],\n        'updated_at': row[4],\n        'status': row[5],\n        'creator_id': row[6],\n        'hunt_id': row[7],\n        'flow_args': row[8]\n    }",
            "def hunt_object_from_row(row):\n    return {\n        'id': row[0],\n        'name': row[1],\n        'description': row[2],\n        'created_at': row[3],\n        'updated_at': row[4],\n        'status': row[5],\n        'creator_id': row[6],\n        'hunt_id': row[7],\n        'flow_args': row[8]\n    }",
            "def create_flow_object(row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    return {\n        'id': row[0],\n        'name': row[1],\n        'description': row[2],\n        'created_at': row[3],\n        'updated_at': row[4],\n        'status': row[5],\n        'creator_id': row[6],\n        'hunt_id': row[7],\n        'flow_args': row[8]\n    }"
        ]
    },
    {
        "id": 8,
        "prompt": "def ff(items, targets):\n    \"\"\"First-Fit\n\n    This is perhaps the simplest packing heuristic;\n    it simply packs items in the next available bin.\n\n    Complexity O(n^2)\n    \"\"\"",
        "code": "def ff(items, targets):\n    \"\"\"First-Fit\n\n    This is perhaps the simplest packing heuristic;\n    it simply packs items in the next available bin.\n\n    Complexity O(n^2)\n    \"\"\"\n    bins = [(target, []) for target in targets]\n    skip = []\n\n    for item in items:\n        for target, content in bins:\n            if item <= (target - sum(content)):\n                content.append(item)\n                break\n        else:\n            skip.append(item)\n    return bins, skip",
        "writer": "human",
        "rewrite": [
            "def first_fit_packing(items, targets):\n    bins = [(target, []) for target in targets]\n    skipped_items = []\n\n    for item in items:\n        for target, contents in bins:\n            if item <= (target - sum(contents)):\n                contents.append(item)\n                break\n        else:\n            skipped_items.append(item)\n    return bins, skipped_items",
            "def first_fit_pack(items, targets):\n    bins = [(target, []) for target in targets]\n    skipped_items = []\n\n    for item in items:\n        for target, bin_content in bins:\n            if item <= (target - sum(bin_content)):\n                bin_content.append(item)\n                break\n        else:\n            skipped_items.append(item)\n    return bins, skipped_items",
            "def first_fit(items, targets):\n    bins = [(target, []) for target in targets]\n    skipped_items = []\n\n    for item in items:\n        for target, contents in bins:\n            if item <= (target - sum(contents)):\n                contents.append(item)\n                break\n        else:\n            skipped_items.append(item)\n    return bins, skipped_items"
        ]
    },
    {
        "id": 4,
        "prompt": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n        \"\"\"\n        Create a new UserObject from the given template.\n\n        :param configuration:  EB configuration to use\n        :param tpl: CreateUserObject template, contain misc settings\n        :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n        :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n        :return: UO - user object ready to use\n        \"\"\"",
        "code": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    \"\"\"\n    Create a new UserObject from the given template.\n\n    :param configuration:  EB configuration to use\n    :param tpl: CreateUserObject template, contain misc settings\n    :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n    :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n    :return: UO - user object ready to use\n    \"\"\"\n    if configuration is None:\n        configuration = self.default_configuration\n    \n    if tpl is None:\n        tpl = self.default_template\n    \n    if keys is None:\n        keys = {}\n    \n    if obj_type is None:\n        obj_type = self.determine_obj_type(keys, tpl)\n    \n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set",
        "writer": "machine",
        "rewrite": [
            "def create_user_object(self, config=None, template=None, key_dict=None, object_type=None):\n    \"\"\"\n    Create a new UserObject from the given template.\n\n    :param config: EB configuration to use\n    :param template: CreateUserObject template, contain misc settings\n    :param key_dict: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n    :param object_type: optional field for easy object type entry - required flags are computed from key_dict and template.\n    :return: UO - user object ready to use\n    \"\"\"\n    config = config or self.default_configuration\n    template = template or self.default_template\n    key_dict = key_dict or {}\n    object_type = object_type or self.determine_obj_type(key_dict, template)\n    \n    user_object = UserObject(config, object_type)\n    user_object.apply_template(template)\n    return user_object",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    if configuration is None:\n        configuration = self.default_configuration\n\n    if tpl is None:\n        tpl = self.default_template\n\n    keys = keys or {}\n    obj_type = obj_type or self.determine_obj_type(keys, tpl)\n\n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set",
            "def create_user_object(self, configuration=None, template=None, keys=None, object_type=None):\n    if configuration is None:\n        configuration = self.default_configuration\n\n    if template is None:\n        template = self.default_template\n\n    if keys is None:\n        keys = {}\n\n    if object_type is None:\n        object_type = self.determine_object_type(keys, template)\n\n    user_object = UserObject(configuration, object_type)\n    user_object.apply_template(template)\n    user_object.set"
        ]
    },
    {
        "id": 8,
        "prompt": "def ff(items, targets):\n    \"\"\"First-Fit\n\n    This is perhaps the simplest packing heuristic;\n    it simply packs items in the next available bin.\n\n    Complexity O(n^2)\n    \"\"\"",
        "code": "def ff(items, targets):\n    bins = []\n    for item in items:\n        for bin in bins:\n            if sum(bin) + item <= targets:\n                bin.append(item)\n                break\n        else:\n            bins.append([item])\n    return bins",
        "writer": "machine",
        "rewrite": [
            "def bin_pack(items, target):\n    bins = []\n    for item in items:\n        added = False\n        for b in bins:\n            if sum(b) + item <= target:\n                b.append(item)\n                added = True\n                break\n        if not added:\n            bins.append([item])\n    return bins",
            "def distribute_items(items, target):\n    bins = []\n    for item in items:\n        placed = False\n        for bin in bins:\n            if sum(bin) + item <= target:\n                bin.append(item)\n                placed = True\n                break\n        if not placed:\n            bins.append([item])\n    return bins",
            "def fit_items_into_bins(items, target):\n    bins = []\n    for item in items:\n        placed = False\n        for bin in bins:\n            if sum(bin) + item <= target:\n                bin.append(item)\n                placed = True\n                break\n        if not placed:\n            bins.append([item])\n    return bins"
        ]
    },
    {
        "id": 10,
        "prompt": "def c_getprocs(self):\n        \"\"\"Get the getprocs of the module.\"\"\"",
        "code": "def c_getprocs(self):\n    \"\"\"Get the getprocs of the module.\"\"\"\n    return self._getprocs",
        "writer": "machine",
        "rewrite": [
            "def get_processes(self):\n    \"\"\"Retrieve the processes of the module.\"\"\"\n    return self._processes",
            "def get_processes(self):\n    \"\"\"Retrieve the processes of the module.\"\"\"\n    return self._processes",
            "def get_processes(self):\n    \"\"\"Retrieve the processes of the module.\"\"\"\n    return self._processes"
        ]
    },
    {
        "id": 11,
        "prompt": "def SLICE(array, n, position=None):\n    \"\"\"\n    Returns a subset of an array.\n    See https://docs.mongodb.com/manual/reference/operator/aggregation/slice/\n    for more details\n    :param array: Any valid expression as long as it resolves to an array.\n    :param n: Any valid expression as long as it resolves to an integer.\n    :param position: Optional. Any valid expression as long as it resolves to an integer.\n    :return: Aggregation operator\n    \"\"\"",
        "code": "def SLICE(array, n, position=None):\n    \"\"\"\n    Returns a subset of an array.\n    See https://docs.mongodb.com/manual/reference/operator/aggregation/slice/\n    for more details\n    :param array: Any valid expression as long as it resolves to an array.\n    :param n: Any valid expression as long as it resolves to an integer.\n    :param position: Optional. Any valid expression as long as it resolves to an integer.\n    :return: Aggregation operator\n    \"\"\"\n    return {'$slice': [array, position, n]} if position is not None else {'$slice': [array, n]}",
        "writer": "human",
        "rewrite": [
            "def slice_array(array, n, position=None):\n    return {'$slice': [array, position, n]} if position is not None else {'$slice': [array, n]}",
            "def slice_array(array, n, position=None):\n    return {'$slice': [array, position, n]} if position is not None else {'$slice': [array, n]}",
            "def slice_array(array, n, position=None):\n    return {'$slice': [array, position, n]} if position is not None else {'$slice': [array, n]}"
        ]
    },
    {
        "id": 9,
        "prompt": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"",
        "code": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"\n    if os.path.exists(image_path):\n        compressed_image = \"%s.gz\" %image_path\n        os.system('gzip -c -6 %s > %s' %(image_path, compressed_image))\n        return compressed_image\n\n    bot.exit(\"Cannot find image %s\" %image_path)",
        "writer": "human",
        "rewrite": [
            "import os\nimport gzip\nimport shutil\n\ndef compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"\n    if os.path.exists(image_path):\n        compressed_image = f\"{image_path}.gz\"\n        with open(image_path, 'rb') as f_in:\n            with gzip.open(compressed_image, 'wb') as f_out:\n                shutil.copyfileobj(f_in, f_out)\n        return compressed_image\n\n    bot.exit(f\"Cannot find image {image_path}\")",
            "def compress(self, image_path):\n    \"\"\"Compress an image using gzip.\"\"\"\n    if os.path.isfile(image_path):\n        compressed_image = f\"{image_path}.gz\"\n        with open(image_path, 'rb') as f_in, gzip.open(compressed_image, 'wb', compresslevel=6) as f_out:\n            shutil.copyfileobj(f_in, f_out)\n        return compressed_image\n    \n    bot.exit(f\"Cannot find image {image_path}\")",
            "import os\nimport gzip\nimport shutil\n\ndef compress(self, image_path):\n    \"\"\"Compress an image using gzip.\"\"\"\n    if os.path.exists(image_path):\n        compressed_image = f\"{image_path}.gz\"\n        with open(image_path, 'rb') as f_in:\n            with gzip.open(compressed_image, 'wb') as f_out:\n                shutil.copyfileobj(f_in, f_out)\n        return compressed_image\n\n    bot.exit(f\"Cannot find image {image_path}\")"
        ]
    },
    {
        "id": 7,
        "prompt": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"",
        "code": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    (\n        create_time,\n        last_update_time,\n        creator,\n        duration_micros,\n        client_rate,\n        client_limit,\n        hunt_state,\n        hunt_state_comment,\n        init_start_time,\n        last_start_time,\n        num_clients_at_start_time,\n        description,\n        body,\n    ) = row\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(body)\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(duration_micros)\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(create_time)\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(\n        last_update_time)\n\n    # Checks below are needed for hunts that were written to the database before\n    # respective fields became part of F1 schema.\n    if creator is not None:\n      hunt_obj.creator = creator\n\n    if client_rate is not None:\n      hunt_obj.client_rate = client_rate\n\n    if client_limit is not None:\n      hunt_obj.client_limit = client_limit\n\n    if hunt_state is not None:\n      hunt_obj.hunt_state = hunt_state\n\n    if hunt_state_comment is not None:\n      hunt_obj.hunt_state_comment = hunt_state_comment\n\n    if init_start_time is not None:\n      hunt_obj.init_start_time = mysql_utils.TimestampToRDFDatetime(\n          init_start_time)\n\n    if last_start_time is not None:\n      hunt_obj.last_start_time = mysql_utils.TimestampToRDFDatetime(\n          last_start_time)\n\n    if num_clients_at_start_time is not None:\n      hunt_obj.num_clients_at_start_time = num_clients_at_start_time\n\n    if description is not None:\n      hunt_obj.description = description\n\n    return hunt_obj",
        "writer": "human",
        "rewrite": [
            "def _HuntObjectFromRow(self, row):\n    create_time, last_update_time, creator, duration_micros, client_rate, client_limit, hunt_state, hunt_state_comment, init_start_time, last_start_time, num_clients_at_start_time, description, body = row\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(body)\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(duration_micros)\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(create_time)\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(last_update_time)\n\n    attributes = {\n        'creator': creator,\n        'client_rate': client_rate,\n        'client_limit': client_limit,\n        'hunt_state': hunt_state,\n        'hunt_state_comment': hunt_state_comment,\n        'init_start_time': mysql_utils.TimestampToRDFDatetime(init_start_time) if init_start_time is not None else None,\n        'last_start_time': mysql_utils.TimestampToRDFDatetime(last_start_time) if last_start_time is not None else None,\n        'num_clients_at_start_time': num_clients_at_start_time,\n        'description': description\n    }\n\n    for attr, value in attributes.items():\n        if value is not None:\n            setattr(hunt_obj, attr, value)\n\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    (create_time, last_update_time, creator, duration_micros, client_rate,\n     client_limit, hunt_state, hunt_state_comment, init_start_time,\n     last_start_time, num_clients_at_start_time, description, body) = row\n     \n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(body)\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(duration_micros)\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(create_time)\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(last_update_time)\n\n    optional_fields = {\n        'creator': creator,\n        'client_rate': client_rate,\n        'client_limit': client_limit,\n        'hunt_state': hunt_state,\n        'hunt_state_comment': hunt_state_comment,\n        'init_start_time': mysql_utils.TimestampToRDFDatetime(init_start_time) if init_start_time is not None else None,\n        'last_start_time': mysql_utils.TimestampToRDFDatetime(last_start_time) if last_start_time is not None else None,\n        'num_clients_at_start_time': num_clients_at_start_time,\n        'description': description,\n    }\n    \n    for field, value in optional_fields.items():\n        if value is not None:\n            setattr(hunt_obj, field, value)\n\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    (\n        create_time,\n        last_update_time,\n        creator,\n        duration_micros,\n        client_rate,\n        client_limit,\n        hunt_state,\n        hunt_state_comment,\n        init_start_time,\n        last_start_time,\n        num_clients_at_start_time,\n        description,\n        body,\n    ) = row\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(body)\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(duration_micros)\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(create_time)\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(last_update_time)\n\n    fields = {\n        'creator': creator,\n        'client_rate': client_rate,\n        'client_limit': client_limit,\n        'hunt_state': hunt_state,\n        'hunt_state_comment': hunt_state_comment,\n        'init_start_time': init_start_time,\n        'last_start_time': last_start_time,\n        'num_clients_at_start_time': num_clients_at_start_time,\n        'description': description\n    }\n\n    for attr, value in fields.items():\n        if value is not None:\n            if 'time' in attr:\n                value = mysql_utils.TimestampToRDFDatetime(value)\n            setattr(hunt_obj, attr, value)\n\n    return hunt_obj"
        ]
    },
    {
        "id": 11,
        "prompt": "def SLICE(array, n, position=None):\n    \"\"\"\n    Returns a subset of an array.\n    See https://docs.mongodb.com/manual/reference/operator/aggregation/slice/\n    for more details\n    :param array: Any valid expression as long as it resolves to an array.\n    :param n: Any valid expression as long as it resolves to an integer.\n    :param position: Optional. Any valid expression as long as it resolves to an integer.\n    :return: Aggregation operator\n    \"\"\"",
        "code": "def SLICE(array, n, position=None):\n    if position is None:\n        if n >= 0:\n            return array[:n]\n        else:\n            return array[n:]\n    else:\n        start = max(0, position)\n        end = start + n if n >= 0 else len(array) + n\n        return array[start:end]",
        "writer": "machine",
        "rewrite": [
            "def slice_array(array, n, position=None):\n    if position is None:\n        return array[:n] if n >= 0 else array[n:]\n    else:\n        start = max(0, position)\n        end = start + n if n >= 0 else len(array) + n\n        return array[start:end]",
            "def slice_array(array, n, position=None):\n    if position is None:\n        return array[:n] if n >= 0 else array[n:]\n    start = max(0, position)\n    end = start + n if n >= 0 else len(array) + n\n    return array[start:end]",
            "def slice_array(array, n, position=None):\n    if position is None:\n        return array[:n] if n >= 0 else array[n:]\n    start = max(0, position)\n    end = start + n if n >= 0 else len(array) + n\n    return array[start:end]"
        ]
    },
    {
        "id": 9,
        "prompt": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"",
        "code": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"\n    from PIL import Image\n    import os\n\n    # Open the image\n    img = Image.open(image_path)\n\n    # Get the original file size\n    original_size = os.path.getsize(image_path)\n\n    # Set the quality (adjust as needed)\n    quality = 85\n\n    # Get the file extension\n    file_name, file_extension = os.path.splitext(image_path)\n\n    # Create the new file name\n    compressed_path = f\"{file_name}_compressed{file_extension}\"\n\n    # Compress and save the image\n    img.save(compressed_path, optimize=True, quality=quality)\n\n    # Get the compressed file size\n    compressed_size = os.path.getsize(compressed_path)\n\n    # If the compression didn't reduce the file size, return the original image path\n    if compressed_size >= original_size:\n        os.remove(compressed_path)\n        return image_path\n\n    return compressed_path",
        "writer": "machine",
        "rewrite": [
            "def compress_image(image_path, quality=85):\n    from PIL import Image\n    import os\n\n    img = Image.open(image_path)\n    original_size = os.path.getsize(image_path)\n    file_name, file_extension = os.path.splitext(image_path)\n    compressed_path = f\"{file_name}_compressed{file_extension}\"\n    \n    img.save(compressed_path, optimize=True, quality=quality)\n    compressed_size = os.path.getsize(compressed_path)\n\n    if compressed_size >= original_size:\n        os.remove(compressed_path)\n        return image_path\n\n    return compressed_path",
            "def compress_image(image_path):\n    from PIL import Image\n    import os\n\n    img = Image.open(image_path)\n    original_size = os.path.getsize(image_path)\n    quality = 85\n    file_name, file_extension = os.path.splitext(image_path)\n    compressed_path = f\"{file_name}_compressed{file_extension}\"\n    \n    img.save(compressed_path, optimize=True, quality=quality)\n    compressed_size = os.path.getsize(compressed_path)\n\n    if compressed_size >= original_size:\n        os.remove(compressed_path)\n        return image_path\n\n    return compressed_path",
            "def compress(self, image_path):\n    from PIL import Image\n    import os\n\n    img = Image.open(image_path)\n    original_size = os.path.getsize(image_path)\n    quality = 85\n    file_name, file_extension = os.path.splitext(image_path)\n    compressed_path = f\"{file_name}_compressed{file_extension}\"\n    \n    img.save(compressed_path, optimize=True, quality=quality)\n    compressed_size = os.path.getsize(compressed_path)\n\n    if compressed_size >= original_size:\n        os.remove(compressed_path)\n        return image_path\n\n    return compressed_path"
        ]
    },
    {
        "id": 13,
        "prompt": "def raise_302(instance, location):\n    \"\"\"Abort the current request with a 302 (Found) response code. Sets the\n    Location header correctly. If the location does not start with a slash,\n    the path of the current request is prepended.\n\n    :param instance: Resource instance (used to access the response)\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` of status 302\n    \"\"\"",
        "code": "def raise_302(instance, location):\n    if not location.startswith('/'):\n        location = instance.request.path + '/' + location\n    instance.response.status_code = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception_class(instance.response)",
        "writer": "machine",
        "rewrite": [
            "def raise_302(instance, location):\n    location = location if location.startswith('/') else f\"{instance.request.path}/{location}\"\n    instance.response.status_code = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception_class(instance.response)",
            "def raise_redirect(instance, location):\n    if not location.startswith('/'):\n        location = f\"{instance.request.path}/{location}\"\n    instance.response.status_code = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception_class(instance.response)",
            "def raise_302(instance, location):\n    location = location if location.startswith('/') else f\"{instance.request.path}/{location}\"\n    instance.response.status_code = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception_class(instance.response)"
        ]
    },
    {
        "id": 14,
        "prompt": "def _count_extra_actions(self, game_image):\n        \"\"\"Count the number of extra actions for player in this turn.\"\"\"",
        "code": "def _count_extra_actions(self, game_image):\n    \"\"\"Count the number of extra actions for player in this turn.\"\"\"\n    extra_actions = 0\n    action_icons = self._detect_action_icons(game_image)\n    for icon in action_icons:\n        if icon.type == 'extra_action':\n            extra_actions += 1\n    return extra_actions",
        "writer": "machine",
        "rewrite": [
            "def count_extra_actions(self, game_image):\n    return sum(1 for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action')",
            "def count_extra_actions(self, game_image):\n    extra_actions = sum(1 for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action')\n    return extra_actions",
            "def count_extra_actions(self, game_image):\n    extra_actions = sum(1 for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action')\n    return extra_actions"
        ]
    },
    {
        "id": 17,
        "prompt": "def add(self, **kwargs):\n        \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"",
        "code": "def add(self, **kwargs):\n        \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"\n        return self.from_datetime(\n            pendulum.instance(self.datetime()).add(**kwargs)\n        )",
        "writer": "human",
        "rewrite": [
            "def add(self, **kwargs):\n    return self.from_datetime(\n        pendulum.instance(self.datetime()).plus(**kwargs)\n    )",
            "def add(self, **kwargs):\n    return self.from_datetime(\n        pendulum.instance(self.datetime()).add(**kwargs)\n    )",
            "def add(self, **kwargs):\n    \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"\n    new_datetime = self.datetime() + pendulum.duration(**kwargs)\n    return self.from_datetime(new_datetime)"
        ]
    },
    {
        "id": 18,
        "prompt": "def _periodic_callback(self):\n        \"\"\" Will be started on first emit \"\"\"",
        "code": "def _periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)",
        "writer": "machine",
        "rewrite": [
            "def periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)",
            "def periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)",
            "def periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)"
        ]
    },
    {
        "id": 13,
        "prompt": "def raise_302(instance, location):\n    \"\"\"Abort the current request with a 302 (Found) response code. Sets the\n    Location header correctly. If the location does not start with a slash,\n    the path of the current request is prepended.\n\n    :param instance: Resource instance (used to access the response)\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` of status 302\n    \"\"\"",
        "code": "def raise_302(instance, location):\n    \"\"\"Abort the current request with a 302 (Found) response code. Sets the\n    Location header correctly. If the location does not start with a slash,\n    the path of the current request is prepended.\n\n    :param instance: Resource instance (used to access the response)\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` of status 302\n    \"\"\"\n    _set_location(instance, location)\n    instance.response.status = 302\n    raise ResponseException(instance.response)",
        "writer": "human",
        "rewrite": [
            "def raise_302(instance, location):\n    _set_location(instance, location)\n    instance.response.status = 302\n    raise ResponseException(instance.response)",
            "def raise_302(instance, location):\n    \"\"\"Send a 302 Found response with a Location header. The location is\n    adjusted if it doesn't start with a slash.\n\n    :param instance: Resource instance for accessing the response\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` with status 302\n    \"\"\"\n    if not location.startswith('/'):\n        location = instance.request.path.rstrip('/') + '/' + location\n    instance.response.headers['Location'] = location\n    instance.response.status = 302\n    raise ResponseException(instance.response)",
            "def raise_302(instance, location):\n    _set_location(instance, location)\n    instance.response.status = 302\n    raise ResponseException(instance.response)"
        ]
    },
    {
        "id": 17,
        "prompt": "def add(self, **kwargs):\n        \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"",
        "code": "def add(self, **kwargs):\n    \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"\n    from maya import MayaDT\n    from datetime import timedelta\n    \n    offset = timedelta()\n    for unit, value in kwargs.items():\n        if unit in ['years', 'months']:\n            offset += timedelta(days=value * 365.25 / 12 if unit == 'months' else value * 365.25)\n        else:\n            offset += timedelta(**{unit: value})\n    \n    return MayaDT(self.epoch + offset.total_seconds())",
        "writer": "machine",
        "rewrite": [
            "def add(self, **kwargs):\n    from maya import MayaDT\n    from datetime import timedelta\n\n    offset = timedelta()\n    for unit, value in kwargs.items():\n        if unit in ['years', 'months']:\n            days = value * (365.25 / 12 if unit == 'months' else 365.25)\n            offset += timedelta(days=days)\n        else:\n            offset += timedelta(**{unit: value})\n\n    return MayaDT(self.epoch + offset.total_seconds())",
            "def add(self, **kwargs):\n    \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"\n    from maya import MayaDT\n    from datetime import timedelta\n    \n    offset = timedelta()\n    for unit, value in kwargs.items():\n        if unit in ['years', 'months']:\n            days = value * (365.25 / 12 if unit == 'months' else 365.25)\n            offset += timedelta(days=days)\n        else:\n            offset += timedelta(**{unit: value})\n    \n    return MayaDT(self.epoch + offset.total_seconds())",
            "def add(self, **kwargs):\n    \"\"\"Returns a new MayaDT object with the specified time offsets.\"\"\"\n    from maya import MayaDT\n    from datetime import timedelta\n    \n    offset = timedelta()\n    for unit, value in kwargs.items():\n        if unit in ['years', 'months']:\n            days = value * (365.25 / 12 if unit == 'months' else 365.25)\n            offset += timedelta(days=days)\n        else:\n            offset += timedelta(**{unit: value})\n    \n    return MayaDT(self.epoch + offset.total_seconds())"
        ]
    },
    {
        "id": 18,
        "prompt": "def _periodic_callback(self):\n        \"\"\" Will be started on first emit \"\"\"",
        "code": "def _periodic_callback(self):\n        \"\"\" Will be started on first emit \"\"\"\n        try:\n            self.notify(self._state)  # emit to all subscribers\n        except Exception:  # pylint: disable=broad-except\n            self._error_callback(*sys.exc_info())\n\n        if self._subscriptions:\n            # if there are still subscriptions register next _periodic callback\n            self._call_later_handle = \\\n                self._loop.call_later(self._interval, self._periodic_callback)\n        else:\n            self._state = NONE\n            self._call_later_handle = None",
        "writer": "human",
        "rewrite": [
            "def periodic_callback(self):\n    \"\"\" Initiates on the first emit \"\"\"\n    try:\n        self.notify(self._state)\n    except Exception:\n        self._error_callback(*sys.exc_info())\n\n    if self._subscriptions:\n        self._call_later_handle = self._loop.call_later(self._interval, self.periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None",
            "def periodic_callback(self):\n    \"\"\"Initiates the callback on the first emit.\"\"\"\n    try:\n        self.notify(self._state)  # Notify all subscribers\n    except Exception:\n        self._error_callback(*sys.exc_info())\n\n    if self._subscriptions:\n        # Register the next periodic callback if there are active subscriptions\n        self._call_later_handle = self._loop.call_later(self._interval, self.periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None",
            "def periodic_callback(self):\n    \"\"\"Will be started on first emit\"\"\"\n    try:\n        self.notify(self._state)\n    except Exception:\n        self._error_callback(*sys.exc_info())\n\n    if self._subscriptions:\n        self._call_later_handle = self._loop.call_later(self._interval, self.periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None"
        ]
    },
    {
        "id": 14,
        "prompt": "def _count_extra_actions(self, game_image):\n        \"\"\"Count the number of extra actions for player in this turn.\"\"\"",
        "code": "def _count_extra_actions(self, game_image):\n        \"\"\"Count the number of extra actions for player in this turn.\"\"\"\n        proportional = self._bonus_tools['extra_action_region']\n        # Use ProportionalRegion to isolate the extra actions area\n        t, l, b, r = proportional.region_in(game_image)\n        token_region = game_image[t:b, l:r]\n        # Use TemplateFinder (multiple) to check for extra actions\n        game_h, game_w = game_image.shape[0:2]\n        token_h = int(round(game_h * 27.0 / 960))\n        token_w = int(round(game_w * 22.0 / 1280))\n        sizes = (token_h, token_w),\n        # sizes change every time so just remake it.\n        # thresholds are tight since need to count conservatively\n        finder = v.TemplateFinder(pq_data.extra_action_template,\n                                  sizes=sizes,\n                                  acceptable_threshold=0.1,\n                                  immediate_threshold=0.1)\n        found_tokens = finder.locate_multiple_in(token_region)\n        return len(found_tokens)",
        "writer": "human",
        "rewrite": [
            "def count_extra_actions(self, game_image):\n    proportional = self._bonus_tools['extra_action_region']\n    t, l, b, r = proportional.region_in(game_image)\n    token_region = game_image[t:b, l:r]\n    game_h, game_w = game_image.shape[0:2]\n    token_h = int(round(game_h * 27.0 / 960))\n    token_w = int(round(game_w * 22.0 / 1280))\n    sizes = (token_h, token_w),\n    finder = v.TemplateFinder(pq_data.extra_action_template,\n                              sizes=sizes,\n                              acceptable_threshold=0.1,\n                              immediate_threshold=0.1)\n    found_tokens = finder.locate_multiple_in(token_region)\n    return len(found_tokens)",
            "def _count_extra_actions(self, game_image):\n    proportional = self._bonus_tools['extra_action_region']\n    t, l, b, r = proportional.region_in(game_image)\n    token_region = game_image[t:b, l:r]\n    game_h, game_w = game_image.shape[0:2]\n    token_h = int(round(game_h * 27.0 / 960))\n    token_w = int(round(game_w * 22.0 / 1280))\n    sizes = (token_h, token_w),\n    finder = v.TemplateFinder(pq_data.extra_action_template,\n                              sizes=sizes,\n                              acceptable_threshold=0.1,\n                              immediate_threshold=0.1)\n    found_tokens = finder.locate_multiple_in(token_region)\n    return len(found_tokens)",
            "def _count_extra_actions(self, game_image):\n    \"\"\"Count the number of extra actions for player in this turn.\"\"\"\n    proportional = self._bonus_tools['extra_action_region']\n    t, l, b, r = proportional.region_in(game_image)\n    token_region = game_image[t:b, l:r]\n    \n    game_h, game_w = game_image.shape[0:2]\n    token_h = int(round(game_h * 27.0 / 960))\n    token_w = int(round(game_w * 22.0 / 1280))\n    sizes = (token_h, token_w),\n\n    finder = v.TemplateFinder(pq_data.extra_action_template,\n                              sizes=sizes,\n                              acceptable_threshold=0.1,\n                              immediate_threshold=0.1)\n    \n    found_tokens = finder.locate_multiple_in(token_region)\n    return len(found_tokens)"
        ]
    },
    {
        "id": 19,
        "prompt": "def add_node(self, node):\n        \"\"\"Add an agent, connecting it to the previous node.\"\"\"",
        "code": "def add_node(self, node):\n    if not self.nodes:\n        self.nodes.append(node)\n    else:\n        prev_node = self.nodes[-1]\n        prev_node.next = node\n        node.prev = prev_node\n        self.nodes.append(node)",
        "writer": "machine",
        "rewrite": [
            "def add_node(self, node):\n    self.nodes.append(node)\n    if len(self.nodes) > 1:\n        prev_node = self.nodes[-2]\n        prev_node.next = node\n        node.prev = prev_node",
            "def add_node(self, node):\n    if len(self.nodes) == 0:\n        self.nodes.append(node)\n    else:\n        node.prev = self.nodes[-1]\n        self.nodes[-1].next = node\n        self.nodes.append(node)",
            "def add_node(self, node):\n    self.nodes.append(node)\n    if len(self.nodes) > 1:\n        prev_node = self.nodes[-2]\n        prev_node.next = node\n        node.prev = prev_node"
        ]
    },
    {
        "id": 19,
        "prompt": "def add_node(self, node):\n        \"\"\"Add an agent, connecting it to the previous node.\"\"\"",
        "code": "def add_node(self, node):\n        \"\"\"Add an agent, connecting it to the previous node.\"\"\"\n        other_nodes = [n for n in self.nodes() if n.id != node.id]\n\n        if isinstance(node, Source) and other_nodes:\n            raise(Exception(\"Chain network already has a nodes, \"\n                            \"can't add a source.\"))\n\n        if other_nodes:\n            parent = max(other_nodes, key=attrgetter('creation_time'))\n            parent.connect(whom=node)",
        "writer": "human",
        "rewrite": [
            "def add_node(self, node):\n    \"\"\"Add an agent, connecting it to the previous node.\"\"\"\n    other_nodes = [n for n in self.nodes() if n.id != node.id]\n\n    if isinstance(node, Source) and other_nodes:\n        raise Exception(\"Chain network already has a nodes, can't add a source.\")\n\n    if other_nodes:\n        parent = max(other_nodes, key=lambda n: n.creation_time)\n        parent.connect(whom=node)",
            "def add_node(self, node):\n    \"\"\"Add an agent, connecting it to the previous node.\"\"\"\n    other_nodes = [n for n in self.nodes() if n.id != node.id]\n\n    if isinstance(node, Source) and other_nodes:\n        raise Exception(\"Chain network already has a nodes, can't add a source.\")\n\n    if other_nodes:\n        parent = max(other_nodes, key=lambda n: n.creation_time)\n        parent.connect(whom=node)",
            "def add_node(self, node):\n    \"\"\"Add an agent, connecting it to the previous node.\"\"\"\n    existing_nodes = [n for n in self.nodes() if n.id != node.id]\n\n    if isinstance(node, Source) and existing_nodes:\n        raise Exception(\"Chain network already has nodes, can't add a source.\")\n\n    if existing_nodes:\n        parent_node = max(existing_nodes, key=attrgetter('creation_time'))\n        parent_node.connect(whom=node)"
        ]
    },
    {
        "id": 10,
        "prompt": "def c_getprocs(self):\n        \"\"\"Get the getprocs of the module.\"\"\"",
        "code": "def c_getprocs(self):\n        \"\"\"Get the getprocs of the module.\"\"\"\n        getprocs = []\n        for name, dummy_args in self.funcs:\n            if name == 'GetProcAddress':\n                if callable(self.opts.hash_func):\n                    continue\n                getter = 'get_proc_by_string'\n            elif self.opts.no_structs:\n                getter = 'GetProcAddress'\n            else:\n                getter = 'windll->kernel32.GetProcAddress'\n            if callable(self.opts.hash_func):\n                getter = 'get_proc_by_hash'\n            if self.opts.no_structs:\n                var = name\n            else:\n                var = 'windll->{}.{}'.format(self.name, name)\n            getproc = '{} = ({} *){}({}, {}{});\\n'.format(\n                var,\n                self._c_type_name(name),\n                getter,\n                self._c_base_var(),\n                self.opts.prefix, name\n            )\n            getprocs.append(getproc + self._c_null_check(var))\n        return getprocs",
        "writer": "human",
        "rewrite": [
            "def c_getprocs(self):\n    \"\"\"Get the getprocs of the module.\"\"\"\n    getprocs = []\n    for name, _ in self.funcs:\n        getter = 'windll->kernel32.GetProcAddress'\n        if name == 'GetProcAddress':\n            if callable(self.opts.hash_func):\n                continue\n            getter = 'get_proc_by_string'\n        elif self.opts.no_structs:\n            getter = 'GetProcAddress'\n        if callable(self.opts.hash_func):\n            getter = 'get_proc_by_hash'\n        \n        var = name if self.opts.no_structs else 'windll->{}.{}'.format(self.name, name)\n        getproc = '{} = ({} *){}({}, {}{});\\n'.format(\n            var,\n            self._c_type_name(name),\n            getter,\n            self._c_base_var(),\n            self.opts.prefix, name\n        )\n        getprocs.append(getproc + self._c_null_check(var))\n    \n    return getprocs",
            "def c_getprocs(self):\n    \"\"\"Get the getprocs of the module.\"\"\"\n    getprocs = []\n    for name, dummy_args in self.funcs:\n        if name == 'GetProcAddress':\n            getter = 'get_proc_by_string' if not callable(self.opts.hash_func) else getter\n        else:\n            getter = 'GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress'\n        if callable(self.opts.hash_func):\n            getter = 'get_proc_by_hash'\n        var = name if self.opts.no_structs else 'windll->{}.{}'.format(self.name, name)\n        getproc = '{} = ({} *){}({}, {}{});\\n'.format(\n            var,\n            self._c_type_name(name),\n            getter,\n            self._c_base_var(),\n            self.opts.prefix, name\n        )\n        getprocs.append(getproc + self._c_null_check(var))\n    return getprocs",
            "def c_getprocs(self):\n    getprocs = []\n    for name, _ in self.funcs:\n        if name == 'GetProcAddress':\n            getter = 'get_proc_by_string' if not callable(self.opts.hash_func) else None\n        else:\n            getter = 'GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress'\n        \n        if callable(self.opts.hash_func):\n            getter = 'get_proc_by_hash'\n        \n        var = name if self.opts.no_structs else f'windll->{self.name}.{name}'\n        getproc = f'{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n'\n        getprocs.append(getproc + self._c_null_check(var))\n    \n    return getprocs"
        ]
    },
    {
        "id": 20,
        "prompt": "def predict(self, X, **kwargs):\n        \"\"\"Predict the closest cluster each sample in X belongs to.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            New data to predict.\n\n        Returns\n        -------\n        labels : array, shape [n_samples,]\n            Index of the cluster each sample belongs to.\n        \"\"\"",
        "code": "def predict(self, X, **kwargs):\n    distances = self._compute_distances(X)\n    return distances.argmin(axis=1)",
        "writer": "machine",
        "rewrite": [
            "def predict(self, X, **kwargs):\n    distances = self._compute_distances(X)\n    return np.argmin(distances, axis=1)",
            "def predict(self, X, **kwargs):\n    distances = self._compute_distances(X)\n    return np.argmin(distances, axis=1)",
            "def predict(self, X, **kwargs):\n    return self._compute_distances(X).argmin(axis=1)"
        ]
    },
    {
        "id": 22,
        "prompt": "def append(self, decoration):\n        \"\"\"\n        Adds a text decoration on a CodeEdit instance\n\n        :param decoration: Text decoration to add\n        :type decoration: pyqode.core.api.TextDecoration\n        \"\"\"",
        "code": "def append(self, decoration):\n    \"\"\"\n    Adds a text decoration on a CodeEdit instance\n\n    :param decoration: Text decoration to add\n    :type decoration: pyqode.core.api.TextDecoration\n    \"\"\"\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
        "writer": "machine",
        "rewrite": [
            "def add_decoration(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
            "def add_decoration(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
            "def append(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)"
        ]
    },
    {
        "id": 22,
        "prompt": "def append(self, decoration):\n        \"\"\"\n        Adds a text decoration on a CodeEdit instance\n\n        :param decoration: Text decoration to add\n        :type decoration: pyqode.core.api.TextDecoration\n        \"\"\"",
        "code": "def append(self, decoration):\n        \"\"\"\n        Adds a text decoration on a CodeEdit instance\n\n        :param decoration: Text decoration to add\n        :type decoration: pyqode.core.api.TextDecoration\n        \"\"\"\n        if decoration not in self._decorations:\n            self._decorations.append(decoration)\n            self._decorations = sorted(\n                self._decorations, key=lambda sel: sel.draw_order)\n            self.editor.setExtraSelections(self._decorations)\n            return True\n        return False",
        "writer": "human",
        "rewrite": [
            "def append(self, decoration):\n    if decoration not in self._decorations:\n        self._decorations.append(decoration)\n        self._decorations.sort(key=lambda sel: sel.draw_order)\n        self.editor.setExtraSelections(self._decorations)\n        return True\n    return False",
            "def append(self, decoration):\n    if decoration not in self._decorations:\n        self._decorations.append(decoration)\n        self._decorations.sort(key=lambda sel: sel.draw_order)\n        self.editor.setExtraSelections(self._decorations)\n        return True\n    return False",
            "def append(self, decoration):\n    if decoration not in self._decorations:\n        self._decorations.append(decoration)\n        self._decorations.sort(key=lambda sel: sel.draw_order)\n        self.editor.setExtraSelections(self._decorations)\n        return True\n    return False"
        ]
    },
    {
        "id": 23,
        "prompt": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"",
        "code": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"\n    t = Transliterator(source_lang=self.language,\n                       target_lang=target_language)\n    return t.transliterate(self.string)",
        "writer": "human",
        "rewrite": [
            "def transliterate_text(self, language_code=\"en\"):\n    \"\"\"Transliterate the string to the specified language.\"\"\"\n    transliterator = Transliterator(source_lang=self.language, target_lang=language_code)\n    return transliterator.transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    transliterator = Transliterator(source_lang=self.language, target_lang=target_language)\n    return transliterator.transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    transliterator = Transliterator(source_lang=self.language, target_lang=target_language)\n    return transliterator.transliterate(self.string)"
        ]
    },
    {
        "id": 23,
        "prompt": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"",
        "code": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"\n    from unidecode import unidecode\n    \n    if target_language.lower() == \"en\":\n        return unidecode(self)\n    else:\n        raise ValueError(\"Transliteration to languages other than English is not supported.\")",
        "writer": "machine",
        "rewrite": [
            "def transliterate(self, target_language=\"en\"):\n    from unidecode import unidecode\n\n    if target_language == \"en\":\n        return unidecode(self)\n    raise ValueError(\"Transliteration to languages other than English is not supported.\")",
            "def transliterate(self, target_language=\"en\"):\n    from unidecode import unidecode\n\n    if target_language == \"en\":\n        return unidecode(self)\n    raise ValueError(\"Transliteration to languages other than English is not supported.\")",
            "def transliterate(self, target_language=\"en\"):\n    from unidecode import unidecode\n\n    if target_language.lower() == \"en\":\n        return unidecode(self)\n    \n    raise ValueError(\"Transliteration to languages other than English is not supported.\")"
        ]
    },
    {
        "id": 26,
        "prompt": "def flatten(obj, isinstance=isinstance, StringTypes=StringTypes,\n            SequenceTypes=SequenceTypes, do_flatten=do_flatten):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"",
        "code": "def flatten(obj, isinstance=isinstance, StringTypes=(str, bytes), SequenceTypes=(list, tuple)):\n    def do_flatten(sequence):\n        for item in sequence:\n            if isinstance(item, StringTypes):\n                yield item\n            elif isinstance(item, SequenceTypes):\n                yield from do_flatten(item)\n            else:\n                yield item\n\n    if isinstance(obj, StringTypes):\n        return [obj]\n    elif isinstance(obj, SequenceTypes):\n        return list(do_flatten(obj))\n    else:\n        return [obj]",
        "writer": "machine",
        "rewrite": [
            "def flatten(obj):\n    def do_flatten(sequence):\n        for item in sequence:\n            if isinstance(item, (str, bytes)):\n                yield item\n            elif isinstance(item, (list, tuple)):\n                yield from do_flatten(item)\n            else:\n                yield item\n\n    if isinstance(obj, (str, bytes)):\n        return [obj]\n    elif isinstance(obj, (list, tuple)):\n        return list(do_flatten(obj))\n    else:\n        return [obj]",
            "def flatten(obj):\n    def do_flatten(sequence):\n        for item in sequence:\n            if isinstance(item, (str, bytes)):\n                yield item\n            elif isinstance(item, (list, tuple)):\n                yield from do_flatten(item)\n            else:\n                yield item\n\n    if isinstance(obj, (str, bytes)):\n        return [obj]\n    elif isinstance(obj, (list, tuple)):\n        return list(do_flatten(obj))\n    else:\n        return [obj]",
            "def flatten(obj):\n    from collections.abc import Iterable\n    if isinstance(obj, str) or isinstance(obj, bytes):\n        return [obj]\n    elif isinstance(obj, Iterable) and not isinstance(obj, (str, bytes)):\n        result = []\n        for item in obj:\n            result.extend(flatten(item))\n        return result\n    else:\n        return [obj]"
        ]
    },
    {
        "id": 26,
        "prompt": "def flatten(obj, isinstance=isinstance, StringTypes=StringTypes,\n            SequenceTypes=SequenceTypes, do_flatten=do_flatten):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"",
        "code": "def flatten(obj, isinstance=isinstance, StringTypes=StringTypes,\n            SequenceTypes=SequenceTypes, do_flatten=do_flatten):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"\n    if isinstance(obj, StringTypes) or not isinstance(obj, SequenceTypes):\n        return [obj]\n    result = []\n    for item in obj:\n        if isinstance(item, StringTypes) or not isinstance(item, SequenceTypes):\n            result.append(item)\n        else:\n            do_flatten(item, result)\n    return result",
        "writer": "human",
        "rewrite": [
            "def flatten(obj):\n    \"\"\"Flatten a sequence to a non-nested list.\"\"\"\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    result = []\n    for item in obj:\n        if isinstance(item, str) or not isinstance(item, (list, tuple)):\n            result.append(item)\n        else:\n            result.extend(flatten(item))\n    return result",
            "def flatten(obj):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    result = []\n    for item in obj:\n        if isinstance(item, str) or not isinstance(item, (list, tuple)):\n            result.append(item)\n        else:\n            result.extend(flatten(item))\n    return result",
            "def flatten(obj):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    result = []\n    for item in obj:\n        if isinstance(item, str) or not isinstance(item, (list, tuple)):\n            result.append(item)\n        else:\n            result.extend(flatten(item))\n    return result"
        ]
    },
    {
        "id": 27,
        "prompt": "def clean(self, value):\n\t\t\"\"\"Clean\n\n\t\tUses the valid method to check which type the value is, and then calls\n\t\tthe correct version of clean on that node\n\n\t\tArguments:\n\t\t\tvalue {mixed} -- The value to clean\n\n\t\tReturns:\n\t\t\tmixed\n\t\t\"\"\"",
        "code": "def clean(self, value):\n\t\t\"\"\"Clean\n\n\t\tUses the valid method to check which type the value is, and then calls\n\t\tthe correct version of clean on that node\n\n\t\tArguments:\n\t\t\tvalue {mixed} -- The value to clean\n\n\t\tReturns:\n\t\t\tmixed\n\t\t\"\"\"\n\n\t\t# If the value is None and it's optional, return as is\n\t\tif value is None and self._optional:\n\t\t\treturn None\n\n\t\t# Go through each of the nodes\n\t\tfor i in range(len(self._nodes)):\n\n\t\t\t# If it's valid\n\t\t\tif self._nodes[i].valid(value):\n\n\t\t\t\t# Use it's clean\n\t\t\t\treturn self._nodes[i].clean(value)\n\n\t\t# Something went wrong\n\t\traise ValueError('value', value)",
        "writer": "human",
        "rewrite": [
            "def clean(self, value):\n    if value is None and self._optional:\n        return None\n\n    for node in self._nodes:\n        if node.valid(value):\n            return node.clean(value)\n\n    raise ValueError('value', value)",
            "def clean(self, value):\n    if value is None and self._optional:\n        return None\n    \n    for node in self._nodes:\n        if node.valid(value):\n            return node.clean(value)\n    \n    raise ValueError('value', value)",
            "def clean(self, value):\n    if value is None and self._optional:\n        return None\n\n    for node in self._nodes:\n        if node.valid(value):\n            return node.clean(value)\n\n    raise ValueError('value', value)"
        ]
    },
    {
        "id": 24,
        "prompt": "def to_example(dictionary):\n  \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"",
        "code": "def to_example(dictionary):\n    \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"\n    import tensorflow as tf\n    features = {}\n    for k, v in dictionary.items():\n        if isinstance(v[0], int):\n            features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n        elif isinstance(v[0], float):\n            features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n        elif isinstance(v[0], str):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[s.encode() for s in v]))\n        else:\n            raise ValueError(f\"Unsupported type for key {k}: {type(v[0])}\")\n    return tf.train.Example(features=tf.train.Features(feature=features))",
        "writer": "machine",
        "rewrite": [
            "def to_example(dictionary):\n    import tensorflow as tf\n    features = {k: tf.train.Feature(\n        int64_list=tf.train.Int64List(value=v) if isinstance(v[0], int) else \n        float_list=tf.train.FloatList(value=v) if isinstance(v[0], float) else \n        bytes_list=tf.train.BytesList(value=[s.encode() for s in v]) if isinstance(v[0], str) else \n        ValueError(f\"Unsupported type for key {k}: {type(v[0])}\")\n    ) for k, v in dictionary.items()}\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "def to_example(dictionary):\n    import tensorflow as tf\n    features = {\n        k: (\n            tf.train.Feature(int64_list=tf.train.Int64List(value=v)) if isinstance(v[0], int) else\n            tf.train.Feature(float_list=tf.train.FloatList(value=v)) if isinstance(v[0], float) else\n            tf.train.Feature(bytes_list=tf.train.BytesList(value=[s.encode() for s in v])) if isinstance(v[0], str) else\n            ValueError(f\"Unsupported type for key {k}: {type(v[0])}\")\n        ) for k, v in dictionary.items()\n    }\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "def to_example(dictionary):\n    import tensorflow as tf\n    features = {k: tf.train.Feature(\n        int64_list=tf.train.Int64List(value=v) if isinstance(v[0], int) else\n        float_list=tf.train.FloatList(value=v) if isinstance(v[0], float) else\n        bytes_list=tf.train.BytesList(value=[s.encode() for s in v]) if isinstance(v[0], str) else\n        None\n    ) for k, v in dictionary.items() if (isinstance(v[0], int) or isinstance(v[0], float) or isinstance(v[0], str))}\n    \n    if None in features.values():\n        raise ValueError(f\"Unsupported type in features.\")\n        \n    return tf.train.Example(features=tf.train.Features(feature=features))"
        ]
    },
    {
        "id": 27,
        "prompt": "def clean(self, value):\n\t\t\"\"\"Clean\n\n\t\tUses the valid method to check which type the value is, and then calls\n\t\tthe correct version of clean on that node\n\n\t\tArguments:\n\t\t\tvalue {mixed} -- The value to clean\n\n\t\tReturns:\n\t\t\tmixed\n\t\t\"\"\"",
        "code": "def clean(self, value):\n    if self.valid(value):\n        if isinstance(value, str):\n            return self.clean_string(value)\n        elif isinstance(value, int):\n            return self.clean_integer(value)\n        elif isinstance(value, float):\n            return self.clean_float(value)\n        elif isinstance(value, bool):\n            return self.clean_boolean(value)\n        elif isinstance(value, list):\n            return self.clean_list(value)\n        elif isinstance(value, dict):\n            return self.clean_dict(value)\n        else:\n            return value\n    else:\n        raise ValueError(\"Invalid value\")",
        "writer": "machine",
        "rewrite": [
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    \n    type_cleaner = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict\n    }\n    \n    return type_cleaner.get(type(value), lambda x: x)(value)",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    clean_methods = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict\n    }\n    return clean_methods.get(type(value), lambda x: x)(value)",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n\n    cleaning_methods = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict,\n    }\n    \n    return cleaning_methods.get(type(value), lambda x: x)(value)"
        ]
    },
    {
        "id": 20,
        "prompt": "def predict(self, X, **kwargs):\n        \"\"\"Predict the closest cluster each sample in X belongs to.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            New data to predict.\n\n        Returns\n        -------\n        labels : array, shape [n_samples,]\n            Index of the cluster each sample belongs to.\n        \"\"\"",
        "code": "def predict(self, X, **kwargs):\n        \"\"\"Predict the closest cluster each sample in X belongs to.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            New data to predict.\n\n        Returns\n        -------\n        labels : array, shape [n_samples,]\n            Index of the cluster each sample belongs to.\n        \"\"\"\n\n        assert hasattr(self, '_enc_cluster_centroids'), \"Model not yet fitted.\"\n\n        if self.verbose and self.cat_dissim == ng_dissim:\n            print(\"Ng's dissimilarity measure was used to train this model, \"\n                  \"but now that it is predicting the model will fall back to \"\n                  \"using simple matching dissimilarity.\")\n\n        X = pandas_to_numpy(X)\n        X = check_array(X, dtype=None)\n        X, _ = encode_features(X, enc_map=self._enc_map)\n        return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
        "writer": "human",
        "rewrite": [
            "def predict(self, X, **kwargs):\n    \"\"\"Predict the closest cluster each sample in X belongs to.\n\n    Parameters\n    ----------\n    X : array-like, shape = [n_samples, n_features]\n        New data to predict.\n\n    Returns\n    -------\n    labels : array, shape [n_samples,]\n        Index of the cluster each sample belongs to.\n    \"\"\"\n\n    if not hasattr(self, '_enc_cluster_centroids'):\n        raise RuntimeError(\"Model not yet fitted.\")\n\n    if self.verbose and self.cat_dissim == ng_dissim:\n        print(\"Ng's dissimilarity measure was used to train this model, \"\n              \"but now that it is predicting the model will fall back to \"\n              \"using simple matching dissimilarity.\")\n\n    X = pandas_to_numpy(X)\n    X = check_array(X, dtype=None)\n    X, _ = encode_features(X, enc_map=self._enc_map)\n    labels, _ = _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)\n    return labels",
            "def predict(self, X, **kwargs):\n    \"\"\"Predict the closest cluster each sample in X belongs to.\n\n    Parameters\n    ----------\n    X : array-like, shape = [n_samples, n_features]\n        New data to predict.\n\n    Returns\n    -------\n    labels : array, shape [n_samples,]\n        Index of the cluster each sample belongs to.\n    \"\"\"\n\n    if not hasattr(self, '_enc_cluster_centroids'):\n        raise RuntimeError(\"Model not yet fitted.\")\n\n    if self.verbose and self.cat_dissim == ng_dissim:\n        print(\"Ng's dissimilarity measure was used to train this model, \"\n              \"but now that it is predicting the model will fall back to \"\n              \"using simple matching dissimilarity.\")\n\n    X = pandas_to_numpy(X)\n    X = check_array(X)\n    X, _ = encode_features(X, enc_map=self._enc_map)\n    \n    labels, _ = _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)\n    return labels",
            "def predict(self, X, **kwargs):\n    \"\"\"Predict the closest cluster each sample in X belongs to.\n\n    Parameters\n    ----------\n    X : array-like, shape = [n_samples, n_features]\n        New data to predict.\n\n    Returns\n    -------\n    labels : array, shape [n_samples,]\n        Index of the cluster each sample belongs to.\n    \"\"\"\n\n    if not hasattr(self, '_enc_cluster_centroids'):\n        raise RuntimeError(\"Model not yet fitted.\")\n\n    if self.verbose and self.cat_dissim == ng_dissim:\n        print(\"Ng's dissimilarity measure was used to train this model, \"\n              \"but now that it is predicting the model will fall back to \"\n              \"using simple matching dissimilarity.\")\n\n    X = pandas_to_numpy(X)\n    X = check_array(X, dtype=None)\n    X, _ = encode_features(X, enc_map=self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]"
        ]
    },
    {
        "id": 30,
        "prompt": "def add_router(self, path, router):\n        \"\"\"\n        Add a (regex, router) pair to this router. Any req.path that\n        matches the regex will pass the request/response objects to\n        that router.\n        \"\"\"",
        "code": "def add_router(self, path, router):\n        \"\"\"\n        Add a (regex, router) pair to this router. Any req.path that\n        matches the regex will pass the request/response objects to\n        that router.\n        \"\"\"\n        self.add(HTTPMethod.ALL, path, router)\n        return self",
        "writer": "human",
        "rewrite": [
            "def add_router(self, path, router):\n    self.add(HTTPMethod.ALL, path, router)\n    return self",
            "def add_router(self, path, router):\n    self.add(HTTPMethod.ALL, path, router)\n    return self",
            "def add_router(self, path, router):\n    self.add(HTTPMethod.ALL, path, router)\n    return self"
        ]
    },
    {
        "id": 28,
        "prompt": "def _co_names_from_config(self):\n        \"\"\"\n        Parse the configuration for the names of the COs for which to\n        construct virtual IdPs.\n\n        :rtype: [str]\n\n        :return: list of CO names\n        \"\"\"",
        "code": "def _co_names_from_config(self):\n        \"\"\"\n        Parse the configuration for the names of the COs for which to\n        construct virtual IdPs.\n\n        :rtype: [str]\n\n        :return: list of CO names\n        \"\"\"\n        co_names = [co[self.KEY_ENCODEABLE_NAME] for\n                    co in self.config[self.KEY_CO]]\n\n        return co_names",
        "writer": "human",
        "rewrite": [
            "def get_co_names_from_config(self):\n    return [co[self.KEY_ENCODEABLE_NAME] for co in self.config.get(self.KEY_CO, [])]",
            "def get_co_names_from_config(self):\n    return [co[self.KEY_ENCODEABLE_NAME] for co in self.config[self.KEY_CO]]",
            "def get_co_names(self):\n    return [co[self.KEY_ENCODEABLE_NAME] for co in self.config[self.KEY_CO]]"
        ]
    },
    {
        "id": 30,
        "prompt": "def add_router(self, path, router):\n        \"\"\"\n        Add a (regex, router) pair to this router. Any req.path that\n        matches the regex will pass the request/response objects to\n        that router.\n        \"\"\"",
        "code": "def add_router(self, path, router):\n    \"\"\"\n    Add a (regex, router) pair to this router. Any req.path that\n    matches the regex will pass the request/response objects to\n    that router.\n    \"\"\"\n    self.routers.append((re.compile(path), router))",
        "writer": "machine",
        "rewrite": [
            "def add_router(self, path, router):\n    import re\n    self.routers.append((re.compile(path), router))",
            "def add_router(self, path, router):\n    compiled_path = re.compile(path)\n    self.routers.append((compiled_path, router))",
            "def add_router(self, path, router):\n    compiled_path = re.compile(path)\n    self.routers.append((compiled_path, router))"
        ]
    },
    {
        "id": 28,
        "prompt": "def _co_names_from_config(self):\n        \"\"\"\n        Parse the configuration for the names of the COs for which to\n        construct virtual IdPs.\n\n        :rtype: [str]\n\n        :return: list of CO names\n        \"\"\"",
        "code": "def _co_names_from_config(self):\n    co_names = []\n    if 'CO_NAMES' in self.config:\n        co_names = self.config['CO_NAMES'].split(',')\n    return [name.strip() for name in co_names]",
        "writer": "machine",
        "rewrite": [
            "def get_co_names_from_config(self):\n    return [name.strip() for name in self.config.get('CO_NAMES', '').split(',') if name]",
            "def get_co_names_from_config(self):\n    co_names = self.config.get('CO_NAMES', '').split(',')\n    return [name.strip() for name in co_names]",
            "def get_co_names(self):\n    if 'CO_NAMES' in self.config:\n        return [name.strip() for name in self.config['CO_NAMES'].split(',')]\n    return []"
        ]
    },
    {
        "id": 24,
        "prompt": "def to_example(dictionary):\n  \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"",
        "code": "def to_example(dictionary):\n  \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"\n  features = {}\n  for (k, v) in six.iteritems(dictionary):\n    if not v:\n      raise ValueError(\"Empty generated field: %s\" % str((k, v)))\n    if isinstance(v[0], six.integer_types):\n      features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n    elif isinstance(v[0], float):\n      features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n    elif isinstance(v[0], six.string_types):\n      if not six.PY2:  # Convert in python 3.\n        v = [bytes(x, \"utf-8\") for x in v]\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    elif isinstance(v[0], bytes):\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    else:\n      raise ValueError(\"Value for %s is not a recognized type; v: %s type: %s\" %\n                       (k, str(v[0]), str(type(v[0]))))\n  return tf.train.Example(features=tf.train.Features(feature=features))",
        "writer": "human",
        "rewrite": [
            "def to_example(dictionary):\n    features = {}\n    for key, value in dictionary.items():\n        if not value:\n            raise ValueError(\"Empty generated field: %s\" % str((key, value)))\n        if isinstance(value[0], (int, float)):\n            if isinstance(value[0], int):\n                features[key] = tf.train.Feature(int64_list=tf.train.Int64List(value=value))\n            else:\n                features[key] = tf.train.Feature(float_list=tf.train.FloatList(value=value))\n        elif isinstance(value[0], str):\n            features[key] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[bytes(x, \"utf-8\") for x in value]))\n        elif isinstance(value[0], bytes):\n            features[key] = tf.train.Feature(bytes_list=tf.train.BytesList(value=value))\n        else:\n            raise ValueError(\"Value for %s is not a recognized type; v: %s type: %s\" %\n                             (key, str(value[0]), str(type(value[0]))))\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "def to_example(dictionary):\n    features = {}\n    for k, v in dictionary.items():\n        if not v:\n            raise ValueError(f\"Empty generated field: {(k, v)}\")\n        if isinstance(v[0], (int, float)):\n            if isinstance(v[0], int):\n                features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n            else:\n                features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n        elif isinstance(v[0], str):\n            v = [x.encode(\"utf-8\") for x in v]\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n        elif isinstance(v[0], bytes):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n        else:\n            raise ValueError(f\"Value for {k} is not a recognized type; v: {v[0]} type: {type(v[0])}\")\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "def to_example(dictionary):\n    features = {}\n    for k, v in dictionary.items():\n        if not v:\n            raise ValueError(\"Empty generated field: %s\" % str((k, v)))\n        if isinstance(v[0], (int, float)):\n            if isinstance(v[0], int):\n                features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n            else:\n                features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n        elif isinstance(v[0], str):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode(\"utf-8\") for x in v]))\n        elif isinstance(v[0], bytes):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n        else:\n            raise ValueError(\"Value for %s is not a recognized type; v: %s type: %s\" % (k, str(v[0]), str(type(v[0]))))\n    return tf.train.Example(features=tf.train.Features(feature=features))"
        ]
    },
    {
        "id": 31,
        "prompt": "def http_stream(url, chunk=4096):\n    \"\"\"Generate stream for a given record video.\n\n    :param chunk: chunk bytes to read per time\n    :returns generator object\n    \"\"\"",
        "code": "def http_stream(url, chunk=4096):\n    import requests\n    response = requests.get(url, stream=True)\n    for data in response.iter_content(chunk_size=chunk):\n        yield data",
        "writer": "machine",
        "rewrite": [
            "def fetch_http_stream(url, chunk_size=4096):\n    import requests\n    with requests.get(url, stream=True) as response:\n        for chunk in response.iter_content(chunk_size=chunk_size):\n            yield chunk",
            "def fetch_url_stream(url, buffer_size=4096):\n    import requests\n    response = requests.get(url, stream=True)\n    for chunk in response.iter_content(chunk_size=buffer_size):\n        yield chunk",
            "def stream_http_content(url, chunk_size=4096):\n    import requests\n    with requests.get(url, stream=True) as response:\n        for chunk in response.iter_content(chunk_size=chunk_size):\n            yield chunk"
        ]
    },
    {
        "id": 4,
        "prompt": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n        \"\"\"\n        Create a new UserObject from the given template.\n\n        :param configuration:  EB configuration to use\n        :param tpl: CreateUserObject template, contain misc settings\n        :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n        :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n        :return: UO - user object ready to use\n        \"\"\"",
        "code": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n        \"\"\"\n        Create a new UserObject from the given template.\n\n        :param configuration:  EB configuration to use\n        :param tpl: CreateUserObject template, contain misc settings\n        :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n        :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n        :return: UO - user object ready to use\n        \"\"\"\n        if configuration is not None:\n            self.configuration = configuration\n        if tpl is not None:\n            self.tpl = tpl\n        if keys is not None:\n            self.keys = keys\n        if self.keys is None:\n            self.keys = dict()\n\n        # generate comm keys if not present\n        TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n\n        # obj_type infer\n        if obj_type is not None:\n            tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n            self.tpl = CreateUO.set_type(self.tpl if self.tpl is not None else dict(), tpl_type)\n\n        # Create template specifications, using local config and defaults.\n        spec = CreateUO.get_template_request_spec(self.configuration)\n        if self.tpl is not None:\n            if isinstance(self.tpl, dict):\n                spec = EBUtils.update(spec, self.tpl)\n            else:\n                raise ValueError('Unknown tpl format')\n\n        # Fetch template for new UO.\n        tpl_resp = CreateUO.template_request(self.configuration, spec)\n\n        # Process the template, fill in the keys, do the crypto\n        tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n        tpl_req = tpl_processor.process()\n\n        # Import the initialized UO\n        self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n\n        # Build UO\n        uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req,\n                                            import_resp=self.import_resp)\n        return uo",
        "writer": "human",
        "rewrite": [
            "def create_user_object(self, configuration=None, template=None, keys=None, object_type=None):\n    \"\"\"\n    Create a new UserObject from the given template.\n\n    :param configuration: EB configuration to use\n    :param template: CreateUserObject template, containing miscellaneous settings\n    :param keys: dictionary of keys, create_user_object.KeyTypes. Communication keys, application key (if applicable).\n    :param object_type: optional field for easy object type entry - required flags are computed from keys dict and template.\n    :return: UserObject - ready to use\n    \"\"\"\n    self.configuration = configuration if configuration is not None else self.configuration\n    self.template = template if template is not None else self.template\n    self.keys = keys if keys is not None else dict()\n\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n\n    if object_type is not None:\n        template_type = CreateUO.get_uo_type(object_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.template = CreateUO.set_type(self.template if self.template is not None else dict(), template_type)\n\n    specification = CreateUO.get_template_request_spec(self.configuration)\n    if self.template is not None:\n        if isinstance(self.template, dict):\n            specification = EBUtils.update(specification, self.template)\n        else:\n            raise ValueError('Unknown template format')\n\n    template_response = CreateUO.template_request(self.configuration, specification)\n\n    template_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=template_response)\n    template_request = template_processor.process()\n\n    self.import_response = CreateUO.import_object(configuration=self.configuration, tpl=template_request)\n\n    user_object = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=template_request,\n                                                  import_resp=self.import_response)\n    return user_object",
            "def create_user_object(self, config=None, template=None, key_data=None, object_type=None):\n    \"\"\"\n    Create a new UserObject from the given template.\n\n    :param config: EB configuration to use\n    :param template: CreateUserObject template, contain misc settings\n    :param key_data: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n    :param object_type: optional field for easy object type entry - required flags are computed from keys dict and template.\n    :return: UserObject - user object ready to use\n    \"\"\"\n    if config is not None:\n        self.configuration = config\n    if template is not None:\n        self.template = template\n    if key_data is not None:\n        self.keys = key_data\n    if self.keys is None:\n        self.keys = dict()\n\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n\n    if object_type is not None:\n        tpl_type = CreateUO.get_uo_type(object_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.template = CreateUO.set_type(self.template if self.template is not None else dict(), tpl_type)\n\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.template is not None:\n        if isinstance(self.template, dict):\n            spec = EBUtils.update(spec, self.template)\n        else:\n            raise ValueError('Unknown template format')\n\n    tpl_response = CreateUO.template_request(self.configuration, spec)\n\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_response)\n    tpl_request = tpl_processor.process()\n\n    self.import_response = CreateUO.import_object(configuration=self.configuration, tpl=tpl_request)\n\n    user_object = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_request,\n                                                  import_resp=self.import_response)\n    return user_object",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    if configuration is not None:\n        self.configuration = configuration\n    if tpl is not None:\n        self.tpl = tpl\n    if keys is not None:\n        self.keys = keys\n    if self.keys is None:\n        self.keys = {}\n\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n\n    if obj_type is not None:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl if self.tpl is not None else {}, tpl_type)\n\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl is not None:\n        if isinstance(self.tpl, dict):\n            spec = EBUtils.update(spec, self.tpl)\n        else:\n            raise ValueError('Unknown tpl format')\n\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req,\n                                        import_resp=self.import_resp)\n    return uo"
        ]
    },
    {
        "id": 31,
        "prompt": "def http_stream(url, chunk=4096):\n    \"\"\"Generate stream for a given record video.\n\n    :param chunk: chunk bytes to read per time\n    :returns generator object\n    \"\"\"",
        "code": "def http_stream(url, chunk=4096):\n    \"\"\"Generate stream for a given record video.\n\n    :param chunk: chunk bytes to read per time\n    :returns generator object\n    \"\"\"\n    ret = requests.get(url, stream=True)\n    ret.raise_for_status()\n    for data in ret.iter_content(chunk):\n        yield data",
        "writer": "human",
        "rewrite": [
            "import requests\n\ndef stream_http_content(url, chunk_size=4096):\n    \"\"\"Yield chunks of data from a streaming response.\n\n    :param chunk_size: Number of bytes to read at a time\n    :return: A generator yielding data chunks\n    \"\"\"\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    for chunk in response.iter_content(chunk_size):\n        yield chunk",
            "import requests\n\ndef fetch_video_stream(url, chunk_size=4096):\n    \"\"\"Yield chunks of video data from the provided URL.\n\n    :param chunk_size: Number of bytes to read at a time\n    :returns: A generator that yields chunks of video data\n    \"\"\"\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    for chunk in response.iter_content(chunk_size):\n        yield chunk",
            "import requests\n\ndef stream_http_video(url, chunk_size=4096):\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    for chunk in response.iter_content(chunk_size):\n        yield chunk"
        ]
    },
    {
        "id": 36,
        "prompt": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n        \"\"\"\n        Evaluates the model on the validation data and updates the validation metric(s).\n        \"\"\"",
        "code": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n        \"\"\"\n        Evaluates the model on the validation data and updates the validation metric(s).\n        \"\"\"\n        val_iter.reset()\n        val_metric.reset()\n        self.model.evaluate(val_iter, val_metric)",
        "writer": "human",
        "rewrite": [
            "def evaluate_model(self, validation_iterator: data_io.BaseParallelSampleIter, validation_metric: mx.metric.EvalMetric):\n    validation_iterator.reset()\n    validation_metric.reset()\n    self.model.evaluate(validation_iterator, validation_metric)",
            "def evaluate_model(self, validation_iterator: data_io.BaseParallelSampleIter, validation_metric: mx.metric.EvalMetric):\n    validation_iterator.reset()\n    validation_metric.reset()\n    self.model.evaluate(validation_iterator, validation_metric)",
            "def evaluate_model(self, validation_iterator: data_io.BaseParallelSampleIter, validation_metric: mx.metric.EvalMetric):\n    validation_iterator.reset()\n    validation_metric.reset()\n    self.model.evaluate(validation_iterator, validation_metric)"
        ]
    },
    {
        "id": 33,
        "prompt": "def _to_edit(self, infoid):\n        \"\"\"\n        render the HTML page for post editing.\n        \"\"\"",
        "code": "def _to_edit(self, infoid):\n    \"\"\"\n    render the HTML page for post editing.\n    \"\"\"\n    post = self.get_post(infoid)\n    if not post:\n        return self.error(404)\n    return self.render_template('edit_post.html', post=post)",
        "writer": "machine",
        "rewrite": [
            "def edit_post(self, post_id):\n    \"\"\"\n    Render the HTML page for editing a post.\n    \"\"\"\n    post = self.get_post(post_id)\n    if post is None:\n        return self.error(404)\n    return self.render_template('edit_post.html', post=post)",
            "def edit_post(self, post_id):\n    \"\"\"\n    Render the HTML page for editing a post.\n    \"\"\"\n    post = self.get_post(post_id)\n    if post is None:\n        return self.error(404)\n    return self.render_template('edit_post.html', post=post)",
            "def edit_post(self, post_id):\n    \"\"\"\n    Render the HTML page for editing a post.\n    \"\"\"\n    post = self.get_post(post_id)\n    if post is None:\n        return self.error(404)\n    return self.render_template('edit_post.html', post=post)"
        ]
    },
    {
        "id": 36,
        "prompt": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n        \"\"\"\n        Evaluates the model on the validation data and updates the validation metric(s).\n        \"\"\"",
        "code": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        data = self.model.prepare_data(batch)\n        outputs = self.model(*data)\n        val_metric.update(batch.labels, outputs)\n    return val_metric.get()",
        "writer": "machine",
        "rewrite": [
            "def evaluate(self, validation_iterator: data_io.BaseParallelSampleIter, validation_metric: mx.metric.EvalMetric):\n    validation_iterator.reset()\n    validation_metric.reset()\n    for batch in validation_iterator:\n        data = self.model.prepare_data(batch)\n        predictions = self.model(*data)\n        validation_metric.update(batch.labels, predictions)\n    return validation_metric.get()",
            "def evaluate(self, validation_iterator: data_io.BaseParallelSampleIter, validation_metric: mx.metric.EvalMetric):\n    validation_iterator.reset()\n    validation_metric.reset()\n    for batch in validation_iterator:\n        input_data = self.model.prepare_data(batch)\n        predictions = self.model(*input_data)\n        validation_metric.update(batch.labels, predictions)\n    return validation_metric.get()",
            "def evaluate(self, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        data = self.model.prepare_data(batch)\n        outputs = self.model(*data)\n        val_metric.update(batch.labels, outputs)\n    return val_metric.get()"
        ]
    },
    {
        "id": 40,
        "prompt": "def interpret(self, msg):\n        \"\"\" Load input \"\"\"",
        "code": "def interpret(self, msg):\n        \"\"\" Load input \"\"\"\n        slides = msg.get('slides', [])\n\n        result = []\n        for slide in slides:\n            image = self.layout(slide)\n\n            result.append(image)\n\n        return result",
        "writer": "human",
        "rewrite": [
            "def interpret(self, msg):\n    slides = msg.get('slides', [])\n    return [self.layout(slide) for slide in slides]",
            "def interpret(self, msg):\n    slides = msg.get('slides', [])\n    return [self.layout(slide) for slide in slides]",
            "def interpret(self, msg):\n        slides = msg.get('slides', [])\n        return [self.layout(slide) for slide in slides]"
        ]
    },
    {
        "id": 40,
        "prompt": "def interpret(self, msg):\n        \"\"\" Load input \"\"\"",
        "code": "def interpret(self, msg):\n    \"\"\"Load input\"\"\"\n    return msg.strip().lower()",
        "writer": "machine",
        "rewrite": [
            "def interpret(self, msg):\n    return msg.strip().lower()",
            "def interpret(self, msg):\n    return msg.strip().lower()",
            "def interpret(self, msg):\n    return msg.strip().lower()"
        ]
    },
    {
        "id": 37,
        "prompt": "def save(self, filething=None, padding=None):\n        \"\"\"save(filething=None, padding=None)\n\n        Save a tag to a file.\n\n        If no filename is given, the one most recently loaded is used.\n\n        Args:\n            filething (filething)\n            padding (:obj:`mutagen.PaddingFunction`)\n        Raises:\n            mutagen.MutagenError\n        \"\"\"",
        "code": "def save(self, filething=None, padding=None):\n        \"\"\"save(filething=None, padding=None)\n\n        Save a tag to a file.\n\n        If no filename is given, the one most recently loaded is used.\n\n        Args:\n            filething (filething)\n            padding (:obj:`mutagen.PaddingFunction`)\n        Raises:\n            mutagen.MutagenError\n        \"\"\"\n\n        try:\n            self.tags._inject(filething.fileobj, padding)\n        except (IOError, error) as e:\n            reraise(self._Error, e, sys.exc_info()[2])\n        except EOFError:\n            raise self._Error(\"no appropriate stream found\")",
        "writer": "human",
        "rewrite": [
            "def save(self, filething=None, padding=None):\n    \"\"\"Save a tag to a file.\n\n    If no filename is given, uses the most recently loaded one.\n\n    Args:\n        filething (filething)\n        padding (:obj:`mutagen.PaddingFunction`)\n    Raises:\n        mutagen.MutagenError\n    \"\"\"\n    try:\n        self.tags._inject(filething.fileobj, padding)\n    except (IOError, error) as e:\n        reraise(self._Error, e, sys.exc_info()[2])\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")",
            "def save(self, filething=None, padding=None):\n    \"\"\"Save a tag to a file.\n\n    If no filename is provided, uses the most recently loaded one.\n\n    Args:\n        filething: An object representing the file.\n        padding: A function related to mutagen padding.\n    Raises:\n        mutagen.MutagenError\n    \"\"\"\n    \n    try:\n        self.tags._inject(filething.fileobj, padding)\n    except (IOError, error) as e:\n        reraise(self._Error, e, sys.exc_info()[2])\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")",
            "def save(self, filething=None, padding=None):\n    \"\"\"save(filething=None, padding=None)\n\n    Save a tag to a file.\n\n    If no filename is given, the one most recently loaded is used.\n\n    Args:\n        filething (filething)\n        padding (:obj:`mutagen.PaddingFunction`)\n    Raises:\n        mutagen.MutagenError\n    \"\"\"\n\n    try:\n        self.tags._inject(filething.fileobj, padding)\n    except (IOError, error) as e:\n        reraise(self._Error, e, sys.exc_info()[2])\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")"
        ]
    },
    {
        "id": 34,
        "prompt": "def on_binlog(event, stream):\n    \"\"\" Process on a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"",
        "code": "def on_binlog(event, stream):\n    event_dict = event.__dict__\n    table_name = event.table\n    schema_name = event.schema\n\n    if isinstance(event, WriteRowsEvent):\n        for row in event.rows:\n            stream.send(f\"INSERT:{schema_name}.{table_name}\", row)\n    elif isinstance(event, UpdateRowsEvent):\n        for row in event.rows:\n            stream.send(f\"UPDATE:{schema_name}.{table_name}\", row)\n    elif isinstance(event, DeleteRowsEvent):\n        for row in event.rows:\n            stream.send(f\"DELETE:{schema_name}.{table_name}\", row)\n\n    stream.send(f\"SCHEMA:{schema_name}\", event_dict)\n    stream.send(f\"TABLE:{schema_name}.{table_name}\", event_dict)\n    stream.send(\"BINLOG\", event_dict)",
        "writer": "machine",
        "rewrite": [
            "def on_binlog(event, stream):\n    schema_name = event.schema\n    table_name = event.table\n    event_dict = event.__dict__\n\n    action_map = {\n        WriteRowsEvent: \"INSERT\",\n        UpdateRowsEvent: \"UPDATE\",\n        DeleteRowsEvent: \"DELETE\"\n    }\n\n    for action, rows in event.items() if isinstance(event, action) for row in rows:\n        stream.send(f\"{action_map[action]}:{schema_name}.{table_name}\", row)\n\n    stream.send(f\"SCHEMA:{schema_name}\", event_dict)\n    stream.send(f\"TABLE:{schema_name}.{table_name}\", event_dict)\n    stream.send(\"BINLOG\", event_dict)",
            "def on_binlog(event, stream):\n    table_name = event.table\n    schema_name = event.schema\n    event_dict = event.__dict__\n\n    action_map = {\n        WriteRowsEvent: \"INSERT\",\n        UpdateRowsEvent: \"UPDATE\",\n        DeleteRowsEvent: \"DELETE\"\n    }\n\n    action = action_map.get(type(event))\n    if action:\n        for row in event.rows:\n            stream.send(f\"{action}:{schema_name}.{table_name}\", row)\n\n    stream.send(f\"SCHEMA:{schema_name}\", event_dict)\n    stream.send(f\"TABLE:{schema_name}.{table_name}\", event_dict)\n    stream.send(\"BINLOG\", event_dict)",
            "def on_binlog(event, stream):\n    table_name = event.table\n    schema_name = event.schema\n    event_type = type(event).__name__\n\n    action_map = {\n        'WriteRowsEvent': 'INSERT',\n        'UpdateRowsEvent': 'UPDATE',\n        'DeleteRowsEvent': 'DELETE'\n    }\n\n    if event_type in action_map:\n        for row in event.rows:\n            stream.send(f\"{action_map[event_type]}:{schema_name}.{table_name}\", row)\n\n    event_dict = event.__dict__\n    stream.send(f\"SCHEMA:{schema_name}\", event_dict)\n    stream.send(f\"TABLE:{schema_name}.{table_name}\", event_dict)\n    stream.send(\"BINLOG\", event_dict)"
        ]
    },
    {
        "id": 37,
        "prompt": "def save(self, filething=None, padding=None):\n        \"\"\"save(filething=None, padding=None)\n\n        Save a tag to a file.\n\n        If no filename is given, the one most recently loaded is used.\n\n        Args:\n            filething (filething)\n            padding (:obj:`mutagen.PaddingFunction`)\n        Raises:\n            mutagen.MutagenError\n        \"\"\"",
        "code": "def save(self, filething=None, padding=None):\n    if filething is None:\n        filething = self._filename\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    \n    try:\n        with open(filething, \"rb+\") as file:\n            data = self._render()\n            if padding:\n                data = padding(data)\n            file.seek(0)\n            file.write(data)\n            file.truncate()\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
        "writer": "machine",
        "rewrite": [
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    \n    try:\n        with open(filething, \"rb+\") as file:\n            data = self._render()\n            if padding:\n                data = padding(data)\n            file.seek(0)\n            file.write(data)\n            file.truncate()\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    \n    try:\n        with open(filething, \"rb+\") as file:\n            data = self._render()\n            if padding:\n                data = padding(data)\n            file.seek(0)\n            file.write(data)\n            file.truncate()\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    \n    try:\n        with open(filething, \"rb+\") as file:\n            data = self._render()\n            if padding:\n                data = padding(data)\n            file.seek(0)\n            file.write(data)\n            file.truncate()\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")"
        ]
    },
    {
        "id": 34,
        "prompt": "def on_binlog(event, stream):\n    \"\"\" Process on a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"",
        "code": "def on_binlog(event, stream):\n    \"\"\" Process on a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"\n    rows, meta = _rows_event_to_dict(event, stream)\n\n    table_name = '%s.%s' % (meta['schema'], meta['table'])\n\n    if meta['action'] == 'insert':\n        sig = signals.rows_inserted\n    elif meta['action'] == 'update':\n        sig = signals.rows_updated\n    elif meta['action'] == 'delete':\n        sig = signals.rows_deleted\n    else:\n        raise RuntimeError('Invalid action \"%s\"' % meta['action'])\n\n    sig.send(table_name, rows=rows, meta=meta)",
        "writer": "human",
        "rewrite": [
            "def on_binlog(event, stream):\n    \"\"\" Process a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n\n    action_to_signal = {\n        'insert': signals.rows_inserted,\n        'update': signals.rows_updated,\n        'delete': signals.rows_deleted\n    }\n    \n    sig = action_to_signal.get(meta['action'])\n    if sig is None:\n        raise RuntimeError(f'Invalid action \"{meta[\"action\"]}\"')\n\n    sig.send(table_name, rows=rows, meta=meta)",
            "def process_binlog_event(event, stream):\n    \"\"\"Handle a binlog event by converting it into a dictionary and sending related signals.\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"\n    rows, metadata = _rows_event_to_dict(event, stream)\n\n    table_identifier = f\"{metadata['schema']}.{metadata['table']}\"\n\n    action_signals = {\n        'insert': signals.rows_inserted,\n        'update': signals.rows_updated,\n        'delete': signals.rows_deleted\n    }\n\n    if metadata['action'] in action_signals:\n        signal = action_signals[metadata['action']]\n        signal.send(table_identifier, rows=rows, meta=metadata)\n    else:\n        raise RuntimeError(f'Invalid action \"{metadata[\"action\"]}\"')",
            "def on_binlog(event, stream):\n    \"\"\" Process a binary log event and send corresponding signals based on action.\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    \n    action_signals = {\n        'insert': signals.rows_updated,\n        'update': signals.rows_updated,\n        'delete': signals.rows_deleted\n    }\n\n    sig = action_signals.get(meta['action'])\n    if sig is None:\n        raise RuntimeError(f'Invalid action \"{meta[\"action\"]}\"')\n\n    sig.send(table_name, rows=rows, meta=meta)"
        ]
    },
    {
        "id": 43,
        "prompt": "def getAnalysisRequests(self):\n        \"\"\" Return all the Analysis Request brains linked to the Sampling Round\n        \"\"\"",
        "code": "def getAnalysisRequests(self):\n        \"\"\" Return all the Analysis Request brains linked to the Sampling Round\n        \"\"\"\n        # I have to get the catalog in this way because I can't do it with 'self'...\n        pc = getToolByName(api.portal.get(), 'portal_catalog')\n        contentFilter = {'portal_type': 'AnalysisRequest',\n                         'is_active': True,\n                         'SamplingRoundUID': self.UID()}\n        return pc(contentFilter)",
        "writer": "human",
        "rewrite": [
            "def get_analysis_requests(self):\n    \"\"\" Return all the Analysis Request brains linked to the Sampling Round \"\"\"\n    catalog = getToolByName(api.portal.get(), 'portal_catalog')\n    filter_criteria = {'portal_type': 'AnalysisRequest',\n                       'is_active': True,\n                       'SamplingRoundUID': self.UID()}\n    return catalog(filter_criteria)",
            "def get_analysis_requests(self):\n    \"\"\"Return all active Analysis Request brains linked to the Sampling Round.\"\"\"\n    catalog = getToolByName(api.portal.get(), 'portal_catalog')\n    filter_criteria = {\n        'portal_type': 'AnalysisRequest',\n        'is_active': True,\n        'SamplingRoundUID': self.UID()\n    }\n    return catalog(filter_criteria)",
            "def get_analysis_requests(self):\n    \"\"\"Return all active Analysis Requests linked to the Sampling Round.\"\"\"\n    catalog = getToolByName(api.portal.get(), 'portal_catalog')\n    query = {\n        'portal_type': 'AnalysisRequest',\n        'is_active': True,\n        'SamplingRoundUID': self.UID()\n    }\n    return catalog(query)"
        ]
    },
    {
        "id": 42,
        "prompt": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"",
        "code": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    import soundfile as sf\n    import librosa\n\n    audio, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n    audio = librosa.util.normalize(audio)\n    sf.write(tgt_wav_fn, audio, sr, subtype='PCM_16')",
        "writer": "machine",
        "rewrite": [
            "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    import soundfile as sf\n    import librosa\n\n    audio, sr = librosa.load(str(org_wav_fn), sr=16000, mono=True)\n    audio = (audio - audio.min()) / (audio.max() - audio.min())\n    sf.write(str(tgt_wav_fn), audio, sr, subtype='PCM_16')",
            "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    import soundfile as sf\n    import librosa\n\n    audio, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n    audio_normalized = librosa.util.normalize(audio)\n    sf.write(tgt_wav_fn, audio_normalized, sr, subtype='PCM_16')",
            "def convert_wav(original_file: Path, target_file: Path) -> None:\n    import soundfile as sf\n    import librosa\n\n    audio_data, sample_rate = librosa.load(original_file, sr=16000, mono=True)\n    normalized_audio = librosa.util.normalize(audio_data)\n    sf.write(target_file, normalized_audio, sample_rate, subtype='PCM_16')"
        ]
    },
    {
        "id": 42,
        "prompt": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"",
        "code": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"\n    if not org_wav_fn.exists():\n        raise FileNotFoundError\n    args = [config.FFMPEG_PATH,\n            \"-i\", str(org_wav_fn), \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)]\n    subprocess.run(args)",
        "writer": "human",
        "rewrite": [
            "def convert_wav(original_wav: Path, target_wav: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            original_wav: A `Path` to the original wave file\n            target_wav: The `Path` to output the processed wave file\n    \"\"\"\n    if not original_wav.exists():\n        raise FileNotFoundError\n    command = [config.FFMPEG_PATH,\n               \"-i\", str(original_wav), \"-ac\", \"1\", \"-ar\", \"16000\", str(target_wav)]\n    subprocess.run(command)",
            "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"\n    if org_wav_fn.is_file():\n        subprocess.run([config.FFMPEG_PATH, \"-i\", str(org_wav_fn), \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)])\n    else:\n        raise FileNotFoundError(f\"{org_wav_fn} does not exist.\")",
            "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.is_file():\n        raise FileNotFoundError(\"The specified original WAV file does not exist.\")\n    subprocess.run([\n        config.FFMPEG_PATH,\n        \"-i\", str(org_wav_fn),\n        \"-ac\", \"1\",\n        \"-ar\", \"16000\",\n        str(tgt_wav_fn)\n    ])"
        ]
    },
    {
        "id": 43,
        "prompt": "def getAnalysisRequests(self):\n        \"\"\" Return all the Analysis Request brains linked to the Sampling Round\n        \"\"\"",
        "code": "def getAnalysisRequests(self):\n    \"\"\"Return all the Analysis Request brains linked to the Sampling Round\"\"\"\n    catalog = api.get_tool('portal_catalog')\n    query = {\n        'portal_type': 'AnalysisRequest',\n        'getSamplingRoundUID': self.UID(),\n        'sort_on': 'created',\n        'sort_order': 'ascending'\n    }\n    return catalog(query)",
        "writer": "machine",
        "rewrite": [
            "def get_analysis_requests(self):\n    \"\"\"Return all Analysis Request objects linked to the Sampling Round\"\"\"\n    catalog = api.get_tool('portal_catalog')\n    query = {\n        'portal_type': 'AnalysisRequest',\n        'getSamplingRoundUID': self.UID(),\n        'sort_on': 'created',\n        'sort_order': 'ascending'\n    }\n    return catalog(query)",
            "def get_analysis_requests(self):\n    \"\"\"Return all Analysis Request brains associated with the Sampling Round.\"\"\"\n    catalog = api.get_tool('portal_catalog')\n    query = {\n        'portal_type': 'AnalysisRequest',\n        'getSamplingRoundUID': self.UID(),\n        'sort_on': 'created',\n        'sort_order': 'ascending'\n    }\n    return catalog(query)",
            "def get_analysis_requests(self):\n    \"\"\"Return all Analysis Request objects associated with the Sampling Round.\"\"\"\n    catalog = api.get_tool('portal_catalog')\n    query = {\n        'portal_type': 'AnalysisRequest',\n        'getSamplingRoundUID': self.UID(),\n        'sort_on': 'created',\n        'sort_order': 'ascending'\n    }\n    return catalog(query)"
        ]
    },
    {
        "id": 49,
        "prompt": "def new(cls, nsptagname, val):\n        \"\"\"\n        Return a new ``CT_DecimalNumber`` element having tagname *nsptagname*\n        and ``val`` attribute set to *val*.\n        \"\"\"",
        "code": "def new(cls, nsptagname, val):\n        \"\"\"\n        Return a new ``CT_DecimalNumber`` element having tagname *nsptagname*\n        and ``val`` attribute set to *val*.\n        \"\"\"\n        return OxmlElement(nsptagname, attrs={qn('w:val'): str(val)})",
        "writer": "human",
        "rewrite": [
            "def create_decimal_number(cls, tag_name, value):\n    return OxmlElement(tag_name, attrs={qn('w:val'): str(value)})",
            "def create_decimal_number_element(cls, tag_name, value):\n    return OxmlElement(tag_name, attrs={qn('w:val'): str(value)})",
            "def create_decimal_number(cls, tag_name, value):\n    return OxmlElement(tag_name, attrs={qn('w:val'): str(value)})"
        ]
    },
    {
        "id": 44,
        "prompt": "def _load_aux_image(self, image, auxfile):\n        \"\"\"\n        Load a fits file (bkg/rms/curve) and make sure that\n        it is the same shape as the main image.\n\n        Parameters\n        ----------\n        image : :class:`AegeanTools.fits_image.FitsImage`\n            The main image that has already been loaded.\n\n        auxfile : str or HDUList\n            The auxiliary file to be loaded.\n\n        Returns\n        -------\n        aux : :class:`AegeanTools.fits_image.FitsImage`\n            The loaded image.\n        \"\"\"",
        "code": "def _load_aux_image(self, image, auxfile):\n    aux = FitsImage(auxfile)\n    if aux.shape != image.shape:\n        raise AssertionError(\"Aux image shape does not match input image shape\")\n    return aux",
        "writer": "machine",
        "rewrite": [
            "def load_aux_image(self, image, auxfile):\n    aux = FitsImage(auxfile)\n    if aux.shape != image.shape:\n        raise ValueError(\"Aux image shape does not match input image shape\")\n    return aux",
            "def load_aux_image(self, image, auxfile):\n    aux = FitsImage(auxfile)\n    if aux.shape != image.shape:\n        raise ValueError(\"Aux image shape does not match input image shape\")\n    return aux",
            "def load_aux_image(self, image, auxfile):\n    aux = FitsImage(auxfile)\n    if aux.shape != image.shape:\n        raise ValueError(\"Aux image shape does not match input image shape\")\n    return aux"
        ]
    },
    {
        "id": 49,
        "prompt": "def new(cls, nsptagname, val):\n        \"\"\"\n        Return a new ``CT_DecimalNumber`` element having tagname *nsptagname*\n        and ``val`` attribute set to *val*.\n        \"\"\"",
        "code": "def new(cls, nsptagname, val):\n    element = OxmlElement(nsptagname)\n    element.val = val\n    return element",
        "writer": "machine",
        "rewrite": [
            "@classmethod\ndef create_element(cls, tag_name, value):\n    element = OxmlElement(tag_name)\n    element.val = value\n    return element",
            "@classmethod\ndef create_element(cls, tag_name, value):\n    element = OxmlElement(tag_name)\n    element.val = value\n    return element",
            "def create_element(cls, tag_name, value):\n    element = OxmlElement(tag_name)\n    element.val = value\n    return element"
        ]
    },
    {
        "id": 44,
        "prompt": "def _load_aux_image(self, image, auxfile):\n        \"\"\"\n        Load a fits file (bkg/rms/curve) and make sure that\n        it is the same shape as the main image.\n\n        Parameters\n        ----------\n        image : :class:`AegeanTools.fits_image.FitsImage`\n            The main image that has already been loaded.\n\n        auxfile : str or HDUList\n            The auxiliary file to be loaded.\n\n        Returns\n        -------\n        aux : :class:`AegeanTools.fits_image.FitsImage`\n            The loaded image.\n        \"\"\"",
        "code": "def _load_aux_image(self, image, auxfile):\n        \"\"\"\n        Load a fits file (bkg/rms/curve) and make sure that\n        it is the same shape as the main image.\n\n        Parameters\n        ----------\n        image : :class:`AegeanTools.fits_image.FitsImage`\n            The main image that has already been loaded.\n\n        auxfile : str or HDUList\n            The auxiliary file to be loaded.\n\n        Returns\n        -------\n        aux : :class:`AegeanTools.fits_image.FitsImage`\n            The loaded image.\n        \"\"\"\n        auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n        if auximg.shape != image.get_pixels().shape:\n            self.log.error(\"file {0} is not the same size as the image map\".format(auxfile))\n            self.log.error(\"{0}= {1}, image = {2}\".format(auxfile, auximg.shape, image.get_pixels().shape))\n            sys.exit(1)\n        return auximg",
        "writer": "human",
        "rewrite": [
            "def load_aux_image(self, image, auxfile):\n    auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    if auximg.shape != image.get_pixels().shape:\n        self.log.error(f\"file {auxfile} is not the same size as the image map\")\n        self.log.error(f\"{auxfile}= {auximg.shape}, image = {image.get_pixels().shape}\")\n        sys.exit(1)\n    return auximg",
            "def load_aux_image(self, image, auxfile):\n    auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    if auximg.shape != image.get_pixels().shape:\n        self.log.error(f\"file {auxfile} is not the same size as the image map\")\n        self.log.error(f\"{auxfile}= {auximg.shape}, image = {image.get_pixels().shape}\")\n        sys.exit(1)\n    return auximg",
            "def load_aux_image(self, image, auxfile):\n    auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    if auximg.shape != image.get_pixels().shape:\n        self.log.error(f\"file {auxfile} is not the same size as the image map\")\n        self.log.error(f\"{auxfile}= {auximg.shape}, image = {image.get_pixels().shape}\")\n        sys.exit(1)\n    return auximg"
        ]
    },
    {
        "id": 46,
        "prompt": "def describe_edge(self, edge):\n        \"\"\"\n        return edge, edge data, head, tail for edge\n        \"\"\"",
        "code": "def describe_edge(self, edge):\n        \"\"\"\n        return edge, edge data, head, tail for edge\n        \"\"\"\n        head, tail, data = self.edges[edge]\n        return edge, data, head, tail",
        "writer": "human",
        "rewrite": [
            "def describe_edge(self, edge):\n    head, tail, data = self.edges.get(edge, (None, None, None))\n    return edge, data, head, tail",
            "def describe_edge(self, edge):\n    head, tail, data = self.edges.get(edge, (None, None, None))\n    return edge, data, head, tail",
            "def describe_edge(self, edge):\n    head, tail, data = self.edges.get(edge, (None, None, None))\n    return edge, data, head, tail"
        ]
    },
    {
        "id": 46,
        "prompt": "def describe_edge(self, edge):\n        \"\"\"\n        return edge, edge data, head, tail for edge\n        \"\"\"",
        "code": "def describe_edge(self, edge):\n    \"\"\"\n    return edge, edge data, head, tail for edge\n    \"\"\"\n    edge_data = self.graph[edge[0]][edge[1]]\n    head = edge[0]\n    tail = edge[1]\n    return edge, edge_data, head, tail",
        "writer": "machine",
        "rewrite": [
            "def describe_edge(self, edge):\n    edge_data = self.graph[edge[0]][edge[1]]\n    return edge, edge_data, edge[0], edge[1]",
            "def describe_edge(self, edge):\n    edge_data = self.graph.get(edge[0], {}).get(edge[1], {})\n    head, tail = edge\n    return edge, edge_data, head, tail",
            "def describe_edge(self, edge):\n    edge_data = self.graph.get(edge[0], {}).get(edge[1])\n    return edge, edge_data, edge[0], edge[1]"
        ]
    },
    {
        "id": 51,
        "prompt": "def create_api_equipment(self):\n        \"\"\"Get an instance of Api Equipment services facade.\"\"\"",
        "code": "def create_api_equipment(self):\n    return ApiEquipment(self.client)",
        "writer": "machine",
        "rewrite": [
            "def create_api_equipment(self):\n    api_equipment_instance = ApiEquipment(self.client)\n    return api_equipment_instance",
            "def create_api_equipment(self):\n    api_equipment_instance = ApiEquipment(self.client)\n    return api_equipment_instance",
            "def create_api_equipment(self):\n    return ApiEquipment(client=self.client)"
        ]
    },
    {
        "id": 51,
        "prompt": "def create_api_equipment(self):\n        \"\"\"Get an instance of Api Equipment services facade.\"\"\"",
        "code": "def create_api_equipment(self):\n        \"\"\"Get an instance of Api Equipment services facade.\"\"\"\n        return ApiEquipment(\n            self.networkapi_url,\n            self.user,\n            self.password,\n            self.user_ldap)",
        "writer": "human",
        "rewrite": [
            "def create_api_equipment(self):\n    return ApiEquipment(self.networkapi_url, self.user, self.password, self.user_ldap)",
            "def create_api_equipment_instance(self):\n        \"\"\"Create and return an instance of the ApiEquipment service.\"\"\"\n        return ApiEquipment(\n            self.networkapi_url,\n            self.user,\n            self.password,\n            self.user_ldap)",
            "def create_api_equipment(self):\n    return ApiEquipment(self.networkapi_url, self.user, self.password, self.user_ldap)"
        ]
    },
    {
        "id": 52,
        "prompt": "def clean_series_name(seriesname):\n    \"\"\"Cleans up series name.\n\n    By removing any . and _ characters, along with any trailing hyphens.\n\n    Is basically equivalent to replacing all _ and . with a\n    space, but handles decimal numbers in string, for example:\n\n    >>> _clean_series_name(\"an.example.1.0.test\")\n    'an example 1.0 test'\n    >>> _clean_series_name(\"an_example_1.0_test\")\n    'an example 1.0 test'\n    \"\"\"",
        "code": "def clean_series_name(seriesname):\n    cleaned = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = cleaned.split()\n    result = []\n    for i, part in enumerate(parts):\n        if i > 0 and part.replace('.', '').isdigit() and parts[i-1].replace('.', '').isdigit():\n            result.append('.' + part)\n        else:\n            result.append(part)\n    return ' '.join(result).strip('-')",
        "writer": "machine",
        "rewrite": [
            "def clean_series_name(seriesname):\n    cleaned = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = cleaned.split()\n    result = []\n    for i in range(len(parts)):\n        if i > 0 and parts[i].replace('.', '').isdigit() and parts[i-1].replace('.', '').isdigit():\n            result.append('.' + parts[i])\n        else:\n            result.append(parts[i])\n    return ' '.join(result).strip('-')",
            "def clean_series_name(seriesname):\n    seriesname = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = seriesname.split()\n    result = []\n\n    for i, part in enumerate(parts):\n        if i > 0 and part.replace('.', '').isdigit() and parts[i - 1].replace('.', '').isdigit():\n            result.append('.' + part)\n        else:\n            result.append(part)\n\n    return ' '.join(result).strip('-')",
            "def clean_series_name(seriesname):\n    cleaned = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = cleaned.split()\n    result = []\n    for i in range(len(parts)):\n        if i > 0 and parts[i].replace('.', '').isdigit() and parts[i-1].replace('.', '').isdigit():\n            result.append('.' + parts[i])\n        else:\n            result.append(parts[i])\n    return ' '.join(result).strip('-')"
        ]
    },
    {
        "id": 33,
        "prompt": "def _to_edit(self, infoid):\n        \"\"\"\n        render the HTML page for post editing.\n        \"\"\"",
        "code": "def _to_edit(self, infoid):\n        \"\"\"\n        render the HTML page for post editing.\n        \"\"\"\n\n        postinfo = MPost.get_by_uid(infoid)\n\n        if postinfo:\n            pass\n        else:\n            return self.show404()\n\n        if 'def_cat_uid' in postinfo.extinfo:\n            catid = postinfo.extinfo['def_cat_uid']\n        elif 'gcat0' in postinfo.extinfo:\n            catid = postinfo.extinfo['gcat0']\n        else:\n            catid = ''\n\n        if len(catid) == 4:\n            pass\n        else:\n            catid = ''\n\n        catinfo = None\n        p_catinfo = None\n\n        post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n        if post2catinfo:\n            catid = post2catinfo.tag_id\n            catinfo = MCategory.get_by_uid(catid)\n            if catinfo:\n                p_catinfo = MCategory.get_by_uid(catinfo.pid)\n\n        kwd = {\n            'gcat0': catid,\n            'parentname': '',\n            'catname': '',\n            'parentlist': MCategory.get_parent_list(),\n            'userip': self.request.remote_ip,\n            'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n        }\n\n        if self.filter_view:\n            tmpl = 'autogen/edit/edit_{0}.html'.format(catid)\n        else:\n            tmpl = 'post_{0}/post_edit.html'.format(self.kind)\n\n        logger.info('Meta template: {0}'.format(tmpl))\n\n        self.render(\n            tmpl,\n            kwd=kwd,\n            postinfo=postinfo,\n            catinfo=catinfo,\n            pcatinfo=p_catinfo,\n            userinfo=self.userinfo,\n            cat_enum=MCategory.get_qian2(catid[:2]),\n            tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n            tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n            app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n            app2label_info=MPost2Label.get_by_uid(infoid).objects()\n        )",
        "writer": "human",
        "rewrite": [
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0') or ''\n    catid = catid if len(catid) == 4 else ''\n\n    catinfo = None\n    p_catinfo = None\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        if catinfo:\n            p_catinfo = MCategory.get_by_uid(catinfo.pid)\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{0}.html'.format(catid) if self.filter_view else 'post_{0}/post_edit.html'.format(self.kind)\n\n    logger.info('Meta template: {0}'.format(tmpl))\n\n    self.render(\n        tmpl,\n        kwd=kwd,\n        postinfo=postinfo,\n        catinfo=catinfo,\n        pcatinfo=p_catinfo,\n        userinfo=self.userinfo,\n        cat_enum=MCategory.get_qian2(catid[:2]),\n        tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n        tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n        app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n        app2label_info=MPost2Label.get_by_uid(infoid).objects()\n    )",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0') or ''\n    catid = catid if len(catid) == 4 else ''\n\n    catinfo = None\n    p_catinfo = None\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        if catinfo:\n            p_catinfo = MCategory.get_by_uid(catinfo.pid)\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{0}.html'.format(catid) if self.filter_view else 'post_{0}/post_edit.html'.format(self.kind)\n    logger.info('Meta template: {0}'.format(tmpl))\n\n    self.render(\n        tmpl,\n        kwd=kwd,\n        postinfo=postinfo,\n        catinfo=catinfo,\n        pcatinfo=p_catinfo,\n        userinfo=self.userinfo,\n        cat_enum=MCategory.get_qian2(catid[:2]),\n        tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n        tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n        app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n        app2label_info=MPost2Label.get_by_uid(infoid).objects()\n    )",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0') or ''\n    catid = catid if len(catid) == 4 else ''\n\n    catinfo = None\n    p_catinfo = None\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        if catinfo:\n            p_catinfo = MCategory.get_by_uid(catinfo.pid)\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{0}.html'.format(catid) if self.filter_view else 'post_{0}/post_edit.html'.format(self.kind)\n\n    logger.info('Meta template: {0}'.format(tmpl))\n\n    self.render(\n        tmpl,\n        kwd=kwd,\n        postinfo=postinfo,\n        catinfo=catinfo,\n        pcatinfo=p_catinfo,\n        userinfo=self.userinfo,\n        cat_enum=MCategory.get_qian2(catid[:2]),\n        tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n        tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n        app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n        app2label_info=MPost2Label.get_by_uid(infoid).objects()\n    )"
        ]
    },
    {
        "id": 52,
        "prompt": "def clean_series_name(seriesname):\n    \"\"\"Cleans up series name.\n\n    By removing any . and _ characters, along with any trailing hyphens.\n\n    Is basically equivalent to replacing all _ and . with a\n    space, but handles decimal numbers in string, for example:\n\n    >>> _clean_series_name(\"an.example.1.0.test\")\n    'an example 1.0 test'\n    >>> _clean_series_name(\"an_example_1.0_test\")\n    'an example 1.0 test'\n    \"\"\"",
        "code": "def clean_series_name(seriesname):\n    \"\"\"Cleans up series name.\n\n    By removing any . and _ characters, along with any trailing hyphens.\n\n    Is basically equivalent to replacing all _ and . with a\n    space, but handles decimal numbers in string, for example:\n\n    >>> _clean_series_name(\"an.example.1.0.test\")\n    'an example 1.0 test'\n    >>> _clean_series_name(\"an_example_1.0_test\")\n    'an example 1.0 test'\n    \"\"\"\n    if not seriesname:\n        return seriesname\n    # TODO(xxxx): Could this be made to clean \"Hawaii.Five-0.2010\" into\n    # \"Hawaii Five-0 2010\"?\n    seriesname = re.sub(r'(\\D)[.](\\D)', '\\\\1 \\\\2', seriesname)\n    seriesname = re.sub(r'(\\D)[.]', '\\\\1 ', seriesname)\n    seriesname = re.sub(r'[.](\\D)', ' \\\\1', seriesname)\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub('-$', '', seriesname)\n    return _replace_series_name(seriesname.strip(),\n                                cfg.CONF.input_series_replacements)",
        "writer": "human",
        "rewrite": [
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = re.sub(r'(\\D)[.](\\D)', r'\\1 \\2', seriesname)\n    seriesname = re.sub(r'(\\D)[.]', r'\\1 ', seriesname)\n    seriesname = re.sub(r'[.](\\D)', r' \\1', seriesname)\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub('-$', '', seriesname)\n    return _replace_series_name(seriesname.strip(), cfg.CONF.input_series_replacements)",
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = re.sub(r'(\\D)[.](\\D)', r'\\1 \\2', seriesname)\n    seriesname = re.sub(r'(\\D)[.]', r'\\1 ', seriesname)\n    seriesname = re.sub(r'[.](\\D)', r' \\1', seriesname)\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub('-$', '', seriesname)\n    return _replace_series_name(seriesname.strip(), cfg.CONF.input_series_replacements)",
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = re.sub(r'(\\D)[.](\\D)', r'\\1 \\2', seriesname)\n    seriesname = re.sub(r'(\\D)[.]', r'\\1 ', seriesname)\n    seriesname = re.sub(r'[.](\\D)', r' \\1', seriesname)\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub('-$', '', seriesname)\n    return _replace_series_name(seriesname.strip(), cfg.CONF.input_series_replacements)"
        ]
    },
    {
        "id": 50,
        "prompt": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n                 format=\"png\"):\n        \"\"\"\n        Convert to selected format (discarding geo).\n\n        Optionally also resizes.\n        Note: for color images returns interlaced.\n        :param transparent: if True - sets alpha channel for nodata pixels\n        :param thumbnail_size: if not None - resize to thumbnail size, e.g. 512\n        :param in_range: input intensity range\n        :param out_range: output intensity range\n        :param format : str, image format, default \"png\"\n        :param resampling: one of Resampling enums\n\n        :return bytes\n        \"\"\"",
        "code": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    from rasterio.enums import Resampling\n\n    data = self.read()\n    mask = self.read_masks(1)\n    \n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n    \n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n    \n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n    \n    img = Image.fromarray(data)\n    \n    if transparent:\n        mask = Image.fromarray(mask)\n        img.putalpha(mask)",
        "writer": "machine",
        "rewrite": [
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    from rasterio.enums import Resampling\n\n    data = self.read()\n    mask = self.read_masks(1)\n    \n    in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max) if in_range == 'dtype' else in_range\n    out_range = (0, 255) if out_range == 'dtype' else out_range\n    \n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n    \n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n    \n    img = Image.fromarray(data)\n    \n    if transparent:\n        mask = Image.fromarray(mask)\n        img.putalpha(mask)",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    from rasterio.enums import Resampling\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n\n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        mask_img = Image.fromarray(mask)\n        img.putalpha(mask_img)",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    from rasterio.enums import Resampling\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max) if in_range == 'dtype' else in_range\n    out_range = (0, 255) if out_range == 'dtype' else out_range\n\n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        mask = Image.fromarray(mask)\n        img.putalpha(mask)"
        ]
    },
    {
        "id": 54,
        "prompt": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"",
        "code": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The list_nodes_min function must be called with -f or --function.'\n        )\n\n    nodes = list_nodes_full()\n\n    result = {}\n    for instance_id, full_node in nodes.items():\n        result[instance_id] = {\n            'name': full_node['instance_name'],\n            'status': full_node['status'],\n        }\n\n    return result",
        "writer": "human",
        "rewrite": [
            "def list_nodes_min(call=None):\n    if call != 'function':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n\n    nodes = list_nodes_full()\n    \n    return {\n        instance_id: {'name': full_node['instance_name'], 'status': full_node['status']}\n        for instance_id, full_node in nodes.items()\n    }",
            "def list_nodes_min(call=None):\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The list_nodes_min function must be called with -f or --function.'\n        )\n\n    nodes = list_nodes_full()\n    return {instance_id: {'name': full_node['instance_name'], 'status': full_node['status']} for instance_id, full_node in nodes.items()}",
            "def list_nodes_min(call=None):\n    if call != 'function':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n\n    nodes = list_nodes_full()\n    return {instance_id: {'name': full_node['instance_name'], 'status': full_node['status']} for instance_id, full_node in nodes.items()}"
        ]
    },
    {
        "id": 55,
        "prompt": "def init2(\n        self, \n        input_tube,      # Read task from the input tube.\n        output_tubes,    # Send result on all the output tubes.\n        num_workers,     # Total number of workers in the stage.\n        disable_result,  # Whether to override any result with None.\n        do_stop_task,    # Whether to call doTask() on \"stop\" request.\n        ):\n        \"\"\"Create *num_workers* worker objects with *input_tube* and \n        an iterable of *output_tubes*. The worker reads a task from *input_tube* \n        and writes the result to *output_tubes*.\"\"\"",
        "code": "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]",
        "writer": "machine",
        "rewrite": [
            "def initialize(self, input_tube, output_tubes, worker_count, disable_result, stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.worker_count = worker_count\n    self.disable_result = disable_result\n    self.stop_task = stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, stop_task) for _ in range(worker_count)]",
            "def initialize(self, input_tube, output_tubes, worker_count, result_disabled, stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = worker_count\n    self.disable_result = result_disabled\n    self.do_stop_task = stop_task\n    self.workers = [Worker(input_tube, output_tubes, result_disabled, stop_task) for _ in range(worker_count)]",
            "def initialize(self, input_channel, output_channels, worker_count, skip_result, stop_task):\n    self.input_channel = input_channel\n    self.output_channels = output_channels\n    self.worker_count = worker_count\n    self.skip_result = skip_result\n    self.stop_task = stop_task\n    self.workers = [Worker(input_channel, output_channels, skip_result, stop_task) for _ in range(worker_count)]"
        ]
    },
    {
        "id": 57,
        "prompt": "def L1(layer=\"input\", constant=0, batch=None):\n  \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"",
        "code": "def L1(layer=\"input\", constant=0, batch=None):\n    \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"\n    import tensorflow as tf\n    \n    if batch is None:\n        batch = tf.shape(layer)[0]\n    \n    l1_norm = tf.reduce_sum(tf.abs(layer), axis=list(range(1, len(layer.shape))))\n    l1_norm = tf.reshape(l1_norm, [batch, -1])\n    \n    return constant * tf.reduce_sum(l1_norm)",
        "writer": "machine",
        "rewrite": [
            "def calculate_l1_norm(layer=\"input\", constant=0, batch=None):\n    import tensorflow as tf\n    \n    if batch is None:\n        batch = tf.shape(layer)[0]\n    \n    l1_norm = tf.reduce_sum(tf.abs(layer), axis=list(range(1, len(layer.shape))))\n    l1_norm = tf.reshape(l1_norm, [batch, -1])\n    \n    return constant * tf.reduce_sum(l1_norm)",
            "def l1_penalty(layer=\"input\", constant=0, batch=None):\n    import tensorflow as tf\n    \n    if batch is None:\n        batch = tf.shape(layer)[0]\n    \n    l1_norm = tf.reduce_sum(tf.abs(layer), axis=1)\n    l1_norm = tf.reshape(l1_norm, [batch, -1])\n    \n    return constant * tf.reduce_sum(l1_norm)",
            "def l1_norm(layer=\"input\", constant=0, batch=None):\n    import tensorflow as tf\n    \n    if batch is None:\n        batch = tf.shape(layer)[0]\n    \n    l1_norm = tf.reduce_sum(tf.math.abs(layer), axis=range(1, tf.rank(layer)))\n    l1_norm = tf.reshape(l1_norm, [batch, -1])\n    \n    return constant * tf.reduce_sum(l1_norm)"
        ]
    },
    {
        "id": 57,
        "prompt": "def L1(layer=\"input\", constant=0, batch=None):\n  \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"",
        "code": "def L1(layer=\"input\", constant=0, batch=None):\n  \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"\n  if batch is None:\n    return lambda T: tf.reduce_sum(tf.abs(T(layer) - constant))\n  else:\n    return lambda T: tf.reduce_sum(tf.abs(T(layer)[batch] - constant))",
        "writer": "human",
        "rewrite": [
            "def l1_norm(layer=\"input\", constant=0, batch=None):\n    \"\"\"Calculate the L1 norm of a specified layer, typically used as a penalty.\"\"\"\n    if batch is None:\n        return lambda T: tf.reduce_sum(tf.abs(T(layer) - constant))\n    else:\n        return lambda T: tf.reduce_sum(tf.abs(T(layer)[batch] - constant))",
            "def l1_norm(layer=\"input\", constant=0, batch=None):\n    \"\"\"Compute L1 norm of a specified layer, applicable as a penalty term.\"\"\"\n    return lambda T: tf.reduce_sum(tf.abs(T(layer)[batch] - constant) if batch is not None else tf.abs(T(layer) - constant))",
            "def L1(layer=\"input\", constant=0, batch=None):\n    if batch is None:\n        return lambda T: tf.reduce_sum(tf.abs(T[layer] - constant))\n    else:\n        return lambda T: tf.reduce_sum(tf.abs(T[layer][batch] - constant))"
        ]
    },
    {
        "id": 53,
        "prompt": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"",
        "code": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"\n    # Log the request\n    self.logger.info(f\"SOAP Request: {envelope}\")\n    self.logger.info(f\"HTTP Headers: {http_headers}\")\n    self.logger.info(f\"Operation: {operation}\")\n    self.logger.info(f\"Binding Options: {binding_options}\")\n\n    # Return the envelope and headers without modification\n    return envelope, http_headers",
        "writer": "machine",
        "rewrite": [
            "def log_egress(self, soap_envelope, headers, soap_operation, options):\n    \"\"\"Logs information about the outbound SOAP request.\n\n    Args:\n      soap_envelope: An Element containing SOAP request data.\n      headers: A dict of current HTTP headers.\n      soap_operation: The SoapOperation instance.\n      options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the soap_envelope and headers.\n    \"\"\"\n    # Log the request details\n    self.logger.info(f\"SOAP Request: {soap_envelope}\")\n    self.logger.info(f\"HTTP Headers: {headers}\")\n    self.logger.info(f\"Operation: {soap_operation}\")\n    self.logger.info(f\"Binding Options: {options}\")\n\n    # Return the envelope and headers as they are\n    return soap_envelope, headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    self.logger.info(f\"SOAP Request: {envelope}\")\n    self.logger.info(f\"HTTP Headers: {http_headers}\")\n    self.logger.info(f\"Operation: {operation}\")\n    self.logger.info(f\"Binding Options: {binding_options}\")\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Logs the details of a SOAP request.\n\n    Args:\n      envelope: An Element containing the SOAP request data.\n      http_headers: A dictionary of the current HTTP headers.\n      operation: The SoapOperation instance.\n      binding_options: A dictionary of options for the SOAP binding.\n\n    Returns:\n      A tuple containing the envelope and headers.\n    \"\"\"\n    for log_info in [(\"SOAP Request\", envelope), (\"HTTP Headers\", http_headers), (\"Operation\", operation), (\"Binding Options\", binding_options)]:\n        self.logger.info(f\"{log_info[0]}: {log_info[1]}\")\n    \n    return envelope, http_headers"
        ]
    },
    {
        "id": 55,
        "prompt": "def init2(\n        self, \n        input_tube,      # Read task from the input tube.\n        output_tubes,    # Send result on all the output tubes.\n        num_workers,     # Total number of workers in the stage.\n        disable_result,  # Whether to override any result with None.\n        do_stop_task,    # Whether to call doTask() on \"stop\" request.\n        ):\n        \"\"\"Create *num_workers* worker objects with *input_tube* and \n        an iterable of *output_tubes*. The worker reads a task from *input_tube* \n        and writes the result to *output_tubes*.\"\"\"",
        "code": "def init2(\n        self, \n        input_tube,      # Read task from the input tube.\n        output_tubes,    # Send result on all the output tubes.\n        num_workers,     # Total number of workers in the stage.\n        disable_result,  # Whether to override any result with None.\n        do_stop_task,    # Whether to call doTask() on \"stop\" request.\n        ):\n        \"\"\"Create *num_workers* worker objects with *input_tube* and \n        an iterable of *output_tubes*. The worker reads a task from *input_tube* \n        and writes the result to *output_tubes*.\"\"\"\n\n        super(UnorderedWorker, self).__init__()\n        self._tube_task_input = input_tube\n        self._tubes_result_output = output_tubes\n        self._num_workers = num_workers\n        self._disable_result = disable_result\n        self._do_stop_task = do_stop_task",
        "writer": "human",
        "rewrite": [
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    \"\"\"Create *num_workers* worker objects with *input_tube* and \n    an iterable of *output_tubes*. The worker reads a task from *input_tube* \n    and writes the result to *output_tubes*.\"\"\"\n    \n    super().__init__()\n    self._tube_task_input = input_tube\n    self._tubes_result_output = output_tubes\n    self._num_workers = num_workers\n    self._disable_result = disable_result\n    self._do_stop_task = do_stop_task",
            "def initialize_workers(\n        self, \n        task_input,     \n        result_outputs,  \n        total_workers,   \n        override_result,  \n        handle_stop_task,  \n        ):\n        \"\"\"Create *total_workers* worker instances with *task_input* and \n        an iterable of *result_outputs*. The workers will read a task from *task_input* \n        and send the result to *result_outputs*.\"\"\"\n\n        super(UnorderedWorker, self).__init__()\n        self._input_task_tube = task_input\n        self._output_result_tubes = result_outputs\n        self._worker_count = total_workers\n        self._result_override = override_result\n        self._stop_task_handler = handle_stop_task",
            "def initialize_workers(\n        self, \n        input_tube,      \n        output_tubes,    \n        num_workers,     \n        disable_result,  \n        do_stop_task,    \n        ):\n        \"\"\"Set up the specified number of worker instances with the provided \n        input tube and a list of output tubes. Each worker reads a task from \n        the input tube and sends the result to the output tubes.\"\"\"\n        \n        super(UnorderedWorker, self).__init__()\n        self.input_tube = input_tube\n        self.output_tubes = output_tubes\n        self.number_of_workers = num_workers\n        self.override_result = disable_result\n        self.handle_stop_task = do_stop_task"
        ]
    },
    {
        "id": 59,
        "prompt": "def _validate_condition_keys(self, field, value, error):\n        \"\"\"\n        Validates that all of the keys in one of the sets of keys are defined\n        as keys of ``value``.\n        \"\"\"",
        "code": "def _validate_condition_keys(self, field, value, error):\n    \"\"\"\n    Validates that all of the keys in one of the sets of keys are defined\n    as keys of ``value``.\n    \"\"\"\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n    else:\n        valid_keys = set(self.condition_keys)\n        provided_keys = set(value.keys())\n        if not valid_keys.issuperset(provided_keys):\n            invalid_keys = provided_keys - valid_keys\n            error(field, f\"Invalid keys: {', '.join(invalid_keys)}\")",
        "writer": "machine",
        "rewrite": [
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n    elif not set(value.keys()).issubset(self.condition_keys):\n        invalid_keys = set(value.keys()) - self.condition_keys\n        error(field, f\"Invalid keys: {', '.join(invalid_keys)}\")",
            "def validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n    elif not set(value.keys()).issubset(set(self.condition_keys)):\n        invalid_keys = set(value.keys()) - set(self.condition_keys)\n        error(field, f\"Invalid keys: {', '.join(invalid_keys)}\")",
            "def validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n    else:\n        if not set(value.keys()).issubset(self.condition_keys):\n            invalid_keys = set(value.keys()) - self.condition_keys\n            error(field, f\"Invalid keys: {', '.join(invalid_keys)}\")"
        ]
    },
    {
        "id": 62,
        "prompt": "def close(self):\n        \"\"\"\n        Close the stream. Assumes stream has 'close' method.\n        \"\"\"",
        "code": "def close(self):\n        \"\"\"\n        Close the stream. Assumes stream has 'close' method.\n        \"\"\"\n        self.out_stream.close()\n        # If we're asked to write in place, substitute the named\n        # temporary file for the current file\n        if self.in_place:\n            shutil.move(self.temp_file.name, self.out)",
        "writer": "human",
        "rewrite": [
            "def close(self):\n    self.out_stream.close()\n    if self.in_place:\n        shutil.move(self.temp_file.name, self.out)",
            "def close(self):\n    self.out_stream.close()\n    if self.in_place:\n        shutil.move(self.temp_file.name, self.out)",
            "def close(self):\n    self.out_stream.close()\n    if self.in_place:\n        shutil.move(self.temp_file.name, self.out)"
        ]
    },
    {
        "id": 61,
        "prompt": "def next(self):\n        \"\"\" allow us to iterate over the output of our command \"\"\"",
        "code": "def next(self):\n    if self.current_index < len(self.output):\n        result = self.output[self.current_index]\n        self.current_index += 1\n        return result\n    else:\n        raise StopIteration()",
        "writer": "machine",
        "rewrite": [
            "def __next__(self):\n    if self.current_index < len(self.output):\n        result = self.output[self.current_index]\n        self.current_index += 1\n        return result\n    raise StopIteration",
            "def next(self):\n    try:\n        result = self.output[self.current_index]\n        self.current_index += 1\n        return result\n    except IndexError:\n        raise StopIteration()",
            "def next(self):\n    if self.current_index < len(self.output):\n        result = self.output[self.current_index]\n        self.current_index += 1\n        return result\n    raise StopIteration"
        ]
    },
    {
        "id": 50,
        "prompt": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n                 format=\"png\"):\n        \"\"\"\n        Convert to selected format (discarding geo).\n\n        Optionally also resizes.\n        Note: for color images returns interlaced.\n        :param transparent: if True - sets alpha channel for nodata pixels\n        :param thumbnail_size: if not None - resize to thumbnail size, e.g. 512\n        :param in_range: input intensity range\n        :param out_range: output intensity range\n        :param format : str, image format, default \"png\"\n        :param resampling: one of Resampling enums\n\n        :return bytes\n        \"\"\"",
        "code": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n                 format=\"png\"):\n        \"\"\"\n        Convert to selected format (discarding geo).\n\n        Optionally also resizes.\n        Note: for color images returns interlaced.\n        :param transparent: if True - sets alpha channel for nodata pixels\n        :param thumbnail_size: if not None - resize to thumbnail size, e.g. 512\n        :param in_range: input intensity range\n        :param out_range: output intensity range\n        :param format : str, image format, default \"png\"\n        :param resampling: one of Resampling enums\n\n        :return bytes\n        \"\"\"\n        resampling = resampling if resampling is not None else Resampling.cubic\n\n        if self.num_bands < 3:\n            warnings.warn(\"Deprecation: to_png of less then three bands raster will be not be supported in next \\\nrelease, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n\n        if self.num_bands > 3:\n            warnings.warn(\"Limiting %d bands raster to first three bands to generate png\" % self.num_bands,\n                          GeoRaster2Warning)\n            three_first_bands = self.band_names[:3]\n            raster = self.limit_to_bands(three_first_bands)\n        elif self.num_bands == 2:\n            warnings.warn(\"Limiting two bands raster to use the first band to generate png\",\n                          GeoRaster2Warning)\n            first_band = self.band_names[:1]\n            raster = self.limit_to_bands(first_band)\n        else:\n            raster = self\n\n        if raster.image.dtype != np.uint8:\n            warnings.warn(\"downscaling dtype to 'uint8' to convert to png\",\n                          GeoRaster2Warning)\n            thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range)\n        else:\n            thumbnail = raster.copy_with()\n\n        if thumbnail_size:\n            if thumbnail.width > thumbnail.height:\n                thumbnail = thumbnail.resize(dest_width=thumbnail_size, resampling=resampling)\n            else:\n                thumbnail = thumbnail.resize(dest_height=thumbnail_size, resampling=resampling)\n\n        img, mask = thumbnail.to_pillow_image(return_mask=True)\n\n        if transparent:\n            mask = np.array(mask)[:, :, np.newaxis]\n            mask = 255 - 255 * mask  # inverse\n\n            if thumbnail.num_bands == 1:\n                img = np.stack([img, img, img], axis=2)  # make grayscale into rgb. bypass, as mode=LA isn't supported\n\n            img = np.stack(tuple(np.split(np.asarray(img), 3, axis=2) + [mask]), axis=2)  # re-arrange into RGBA\n            img = img[:, :, :, 0]\n\n        f = io.BytesIO()\n        imageio.imwrite(f, img, format)\n        image_data = f.getvalue()\n        return image_data",
        "writer": "human",
        "rewrite": [
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling if resampling is not None else Resampling.cubic\n\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n\n    if self.num_bands > 3:\n        warnings.warn(f\"Limiting {self.num_bands} bands raster to first three bands to generate png\", GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:3])\n    elif self.num_bands == 2:\n        warnings.warn(\"Limiting two bands raster to use the first band to generate png\", GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:1])\n    else:\n        raster = self\n\n    if raster.image.dtype != np.uint8:\n        warnings.warn(\"Downscaling dtype to 'uint8' to convert to png\", GeoRaster2Warning)\n        thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range)\n    else:\n        thumbnail = raster.copy_with()\n\n    if thumbnail_size:\n        if thumbnail.width > thumbnail.height:\n            thumbnail = thumbnail.resize(dest_width=thumbnail_size, resampling=resampling)\n        else:\n            thumbnail = thumbnail.resize(dest_height=thumbnail_size, resampling=resampling)\n\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n\n    if transparent:\n        mask = np.array(mask)[:, :, np.newaxis]\n        mask = 255 - 255 * mask\n\n        if thumbnail.num_bands == 1:\n            img = np.stack([img] * 3, axis=2)\n\n        img = np.stack(tuple(np.split(np.asarray(img), 3, axis=2) + [mask]), axis=2)[:, :, :, 0]\n\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling if resampling is not None else Resampling.cubic\n\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n\n    if self.num_bands > 3:\n        warnings.warn(f\"Limiting {self.num_bands} bands raster to first three bands to generate png\", GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:3])\n    elif self.num_bands == 2:\n        warnings.warn(\"Limiting two bands raster to use the first band to generate png\", GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:1])\n    else:\n        raster = self\n\n    if raster.image.dtype != np.uint8:\n        warnings.warn(\"Downscaling dtype to 'uint8' to convert to png\", GeoRaster2Warning)\n        thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range)\n    else:\n        thumbnail = raster.copy_with()\n\n    if thumbnail_size:\n        thumbnail = thumbnail.resize(dest_width=thumbnail_size, resampling=resampling) if thumbnail.width > thumbnail.height else thumbnail.resize(dest_height=thumbnail_size, resampling=resampling)\n\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n\n    if transparent:\n        mask = np.array(mask)[:, :, np.newaxis]\n        mask = 255 - 255 * mask\n        img = np.stack([img] * 3, axis=2) if thumbnail.num_bands == 1 else img\n        img = np.stack(tuple(np.split(np.asarray(img), 3, axis=2) + [mask]), axis=2)[:, :, :, 0]\n\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n             format=\"png\"):\n    resampling = resampling if resampling is not None else Resampling.cubic\n\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will be not supported in next \"\n                      \"release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n\n    if self.num_bands > 3:\n        warnings.warn(\"Limiting %d bands raster to first three bands to generate png\" % self.num_bands,\n                      GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:3])\n    elif self.num_bands == 2:\n        warnings.warn(\"Limiting two bands raster to use the first band to generate png\", GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:1])\n    else:\n        raster = self\n\n    if raster.image.dtype != np.uint8:\n        warnings.warn(\"downscaling dtype to 'uint8' to convert to png\", GeoRaster2Warning)\n        thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range)\n    else:\n        thumbnail = raster.copy_with()\n\n    if thumbnail_size:\n        if thumbnail.width > thumbnail.height:\n            thumbnail = thumbnail.resize(dest_width=thumbnail_size, resampling=resampling)\n        else:\n            thumbnail = thumbnail.resize(dest_height=thumbnail_size, resampling=resampling)\n\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n\n    if transparent:\n        mask = np.array(mask)[:, :, np.newaxis]\n        mask = 255 - 255 * mask\n\n        if thumbnail.num_bands == 1:\n            img = np.stack([img] * 3, axis=2)\n\n        img = np.stack((*np.split(np.asarray(img), 3, axis=2), mask), axis=2)[:, :, :, 0]\n\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()"
        ]
    },
    {
        "id": 54,
        "prompt": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"",
        "code": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The list_nodes_min function must be called with -f or --function.'\n        )\n\n    ret = {}\n    nodes = _get_nodes()\n\n    for node in nodes:\n        ret[node['instance_id']] = {\n            'state': node['status']\n        }\n\n    return ret",
        "writer": "machine",
        "rewrite": [
            "def list_nodes_min(call=None):\n    if call == 'action':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n\n    instances = _get_nodes()\n    return {node['instance_id']: {'state': node['status']} for node in instances}",
            "def list_nodes_min(call=None):\n    if call == 'action':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n\n    return {node['instance_id']: {'state': node['status']} for node in _get_nodes()}",
            "def list_nodes_min(call=None):\n    if call == 'action':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n\n    return {node['instance_id']: {'state': node['status']} for node in _get_nodes()}"
        ]
    },
    {
        "id": 61,
        "prompt": "def next(self):\n        \"\"\" allow us to iterate over the output of our command \"\"\"",
        "code": "def next(self):\n        \"\"\" allow us to iterate over the output of our command \"\"\"\n\n        if self._stopped_iteration:\n            raise StopIteration()\n\n        # we do this because if get blocks, we can't catch a KeyboardInterrupt\n        # so the slight timeout allows for that.\n        while True:\n            try:\n                chunk = self.process._pipe_queue.get(True, 0.001)\n            except Empty:\n                if self.call_args[\"iter_noblock\"]:\n                    return errno.EWOULDBLOCK\n            else:\n                if chunk is None:\n                    self.wait()\n                    self._stopped_iteration = True\n                    raise StopIteration()\n                try:\n                    return chunk.decode(self.call_args[\"encoding\"],\n                        self.call_args[\"decode_errors\"])\n                except UnicodeDecodeError:\n                    return chunk",
        "writer": "human",
        "rewrite": [
            "def next(self):\n    if self._stopped_iteration:\n        raise StopIteration()\n\n    while True:\n        try:\n            chunk = self.process._pipe_queue.get(True, 0.001)\n        except Empty:\n            if self.call_args[\"iter_noblock\"]:\n                return errno.EWOULDBLOCK\n        else:\n            if chunk is None:\n                self.wait()\n                self._stopped_iteration = True\n                raise StopIteration()\n            try:\n                return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n            except UnicodeDecodeError:\n                return chunk",
            "def next(self):\n    if self._stopped_iteration:\n        raise StopIteration()\n\n    while True:\n        try:\n            chunk = self.process._pipe_queue.get(True, 0.001)\n        except Empty:\n            if self.call_args[\"iter_noblock\"]:\n                return errno.EWOULDBLOCK\n        else:\n            if chunk is None:\n                self.wait()\n                self._stopped_iteration = True\n                raise StopIteration()\n            try:\n                return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n            except UnicodeDecodeError:\n                return chunk",
            "def next(self):\n    if self._stopped_iteration:\n        raise StopIteration()\n\n    while True:\n        try:\n            chunk = self.process._pipe_queue.get(timeout=0.001)\n        except Empty:\n            if self.call_args[\"iter_noblock\"]:\n                return errno.EWOULDBLOCK\n        else:\n            if chunk is None:\n                self.wait()\n                self._stopped_iteration = True\n                raise StopIteration()\n            try:\n                return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n            except UnicodeDecodeError:\n                return chunk"
        ]
    },
    {
        "id": 59,
        "prompt": "def _validate_condition_keys(self, field, value, error):\n        \"\"\"\n        Validates that all of the keys in one of the sets of keys are defined\n        as keys of ``value``.\n        \"\"\"",
        "code": "def _validate_condition_keys(self, field, value, error):\n        \"\"\"\n        Validates that all of the keys in one of the sets of keys are defined\n        as keys of ``value``.\n        \"\"\"\n        if 'field' in value:\n            operators = self.nonscalar_conditions + self.scalar_conditions\n            matches = sum(1 for k in operators if k in value)\n            if matches == 0:\n                error(field, 'Must contain one of {}'.format(operators))\n                return False\n            elif matches > 1:\n                error(\n                    field,\n                    'Must contain no more than one of {}'.format(operators)\n                )\n                return False\n            return True\n        elif 'and' in value:\n            for condition in value['and']:\n                self._validate_condition_keys(field, condition, error)\n        elif 'or' in value:\n            for condition in value['or']:\n                self._validate_condition_keys(field, condition, error)\n        else:\n            error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n            return False",
        "writer": "human",
        "rewrite": [
            "def _validate_condition_keys(self, field, value, error):\n    if 'field' in value:\n        operators = self.nonscalar_conditions + self.scalar_conditions\n        matches = sum(1 for k in operators if k in value)\n        if matches == 0:\n            error(field, 'Must contain one of {}'.format(operators))\n            return False\n        elif matches > 1:\n            error(field, 'Must contain no more than one of {}'.format(operators))\n            return False\n        return True\n    elif 'and' in value:\n        for condition in value['and']:\n            if not self._validate_condition_keys(field, condition, error):\n                return False\n    elif 'or' in value:\n        for condition in value['or']:\n            if self._validate_condition_keys(field, condition, error):\n                return True\n        return False\n    else:\n        error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n        return False",
            "def _validate_condition_keys(self, field, value, error):\n    if 'field' in value:\n        operators = self.nonscalar_conditions + self.scalar_conditions\n        matches = sum(1 for k in operators if k in value)\n        if matches == 0:\n            error(field, 'Must contain one of {}'.format(operators))\n            return False\n        elif matches > 1:\n            error(field, 'Must contain no more than one of {}'.format(operators))\n            return False\n        return True\n    for key in ['and', 'or']:\n        if key in value:\n            for condition in value[key]:\n                self._validate_condition_keys(field, condition, error)\n                return True\n    error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n    return False",
            "def _validate_condition_keys(self, field, value, error):\n    if 'field' in value:\n        operators = self.nonscalar_conditions + self.scalar_conditions\n        matches = sum(1 for k in operators if k in value)\n        if matches == 0:\n            error(field, 'Must contain one of {}'.format(operators))\n            return False\n        if matches > 1:\n            error(field, 'Must contain no more than one of {}'.format(operators))\n            return False\n        return True\n    for key in ['and', 'or']:\n        if key in value:\n            for condition in value[key]:\n                if not self._validate_condition_keys(field, condition, error):\n                    return False\n    error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n    return False"
        ]
    },
    {
        "id": 64,
        "prompt": "def delete(self):\n        \"\"\"Remove myself from my :class:`Character`.\n\n        For symmetry with :class:`Thing` and :class`Place`.\n\n        \"\"\"",
        "code": "def delete(self):\n    if hasattr(self, 'character'):\n        self.character.remove_avatar(self)\n        self.character = None",
        "writer": "machine",
        "rewrite": [
            "def remove_avatar(self):\n    if hasattr(self, 'character'):\n        if self.character:\n            self.character.remove_avatar(self)\n            self.character = None",
            "def delete(self):\n    if hasattr(self, 'character'):\n        self.character.remove_avatar(self)\n        del self.character",
            "def remove_character(self):\n    if hasattr(self, 'character'):\n        self.character.detach_avatar(self)\n        self.character = None"
        ]
    },
    {
        "id": 65,
        "prompt": "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization. Dependent upon the access\n    rights of the profile token.\n\n    .. versionadded:: 2016.11.0\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"",
        "code": "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization. Dependent upon the access\n    rights of the profile token.\n\n    .. versionadded:: 2016.11.0\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"\n    repos = []\n    for repo in _get_repos(profile):\n        if repo.private is True:\n            repos.append(repo.name)\n    return repos",
        "writer": "human",
        "rewrite": [
            "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization based on the profile's access rights.\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"\n    return [repo.name for repo in _get_repos(profile) if repo.private]",
            "def list_private_repos(profile='github'):\n    repos = [repo.name for repo in _get_repos(profile) if repo.private]\n    return repos",
            "def list_private_repos(profile='github'):\n    repos = [repo.name for repo in _get_repos(profile) if repo.private]\n    return repos"
        ]
    },
    {
        "id": 62,
        "prompt": "def close(self):\n        \"\"\"\n        Close the stream. Assumes stream has 'close' method.\n        \"\"\"",
        "code": "def close(self):\n    \"\"\"\n    Close the stream. Assumes stream has 'close' method.\n    \"\"\"\n    self.stream.close()",
        "writer": "machine",
        "rewrite": [
            "def close_stream(stream):\n    \"\"\"\n    Close the given stream.\n    \"\"\"\n    stream.close()",
            "def close_stream(self):\n    \"\"\"Terminate the stream. Assumes the stream has a 'close' method.\"\"\"\n    if hasattr(self.stream, 'close'):\n        self.stream.close()",
            "def close_stream(self):\n    \"\"\"Closes the stream by calling its 'close' method.\"\"\"\n    if hasattr(self.stream, 'close'):\n        self.stream.close()"
        ]
    },
    {
        "id": 53,
        "prompt": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"",
        "code": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"\n    if self._logger.isEnabledFor(logging.INFO):\n      service_name = operation.binding.wsdl.services.keys()[0]\n      self._logger.info(_REQUEST_LOG_LINE, service_name, operation.name,\n                        binding_options['address'])\n\n    if self._logger.isEnabledFor(logging.DEBUG):\n      http_headers_safe = http_headers.copy()\n      if self._AUTHORIZATION_HEADER in http_headers_safe:\n        http_headers_safe[self._AUTHORIZATION_HEADER] = self._REDACTED\n\n      request_string = etree.tostring(envelope, pretty_print=True)\n      safe_request = self._DEVELOPER_TOKEN_SUB.sub(\n          self._REDACTED, request_string.decode('utf-8'))\n      self._logger.debug(\n          _REQUEST_XML_LOG_LINE, http_headers_safe, safe_request)\n\n    return envelope, http_headers",
        "writer": "human",
        "rewrite": [
            "def egress(self, envelope, http_headers, operation, binding_options):\n    if self._logger.isEnabledFor(logging.INFO):\n        service_name = next(iter(operation.binding.wsdl.services.keys()))\n        self._logger.info(_REQUEST_LOG_LINE, service_name, operation.name,\n                          binding_options['address'])\n\n    if self._logger.isEnabledFor(logging.DEBUG):\n        http_headers_safe = http_headers.copy()\n        http_headers_safe[self._AUTHORIZATION_HEADER] = self._REDACTED if self._AUTHORIZATION_HEADER in http_headers_safe else http_headers_safe.get(self._AUTHORIZATION_HEADER)\n\n        request_string = etree.tostring(envelope, pretty_print=True)\n        safe_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request_string.decode('utf-8'))\n        self._logger.debug(_REQUEST_XML_LOG_LINE, http_headers_safe, safe_request)\n\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    if self._logger.isEnabledFor(logging.INFO):\n        service_name = list(operation.binding.wsdl.services.keys())[0]\n        self._logger.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options['address'])\n\n    if self._logger.isEnabledFor(logging.DEBUG):\n        http_headers_safe = {key: (self._REDACTED if key == self._AUTHORIZATION_HEADER else value) for key, value in http_headers.items()}\n        request_string = etree.tostring(envelope, pretty_print=True)\n        safe_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request_string.decode('utf-8'))\n        self._logger.debug(_REQUEST_XML_LOG_LINE, http_headers_safe, safe_request)\n\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function for request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"\n    if self._logger.isEnabledFor(logging.INFO):\n        service_name = next(iter(operation.binding.wsdl.services.keys()))\n        self._logger.info(_REQUEST_LOG_LINE, service_name, operation.name,\n                          binding_options['address'])\n\n    if self._logger.isEnabledFor(logging.DEBUG):\n        http_headers_safe = {k: (self._REDACTED if k == self._AUTHORIZATION_HEADER else v) for k, v in http_headers.items()}\n        request_string = etree.tostring(envelope, pretty_print=True)\n        safe_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request_string.decode('utf-8'))\n        self._logger.debug(_REQUEST_XML_LOG_LINE, http_headers_safe, safe_request)\n\n    return envelope, http_headers"
        ]
    },
    {
        "id": 69,
        "prompt": "def reload(self, schedule):\n        \"\"\"\n        Reload the schedule from saved schedule file.\n        \"\"\"",
        "code": "def reload(self, schedule):\n    \"\"\"\n    Reload the schedule from saved schedule file.\n    \"\"\"\n    with open(schedule, 'r') as file:\n        self.schedule = json.load(file)",
        "writer": "machine",
        "rewrite": [
            "def reload(self, schedule):\n    with open(schedule, 'r') as file:\n        self.schedule = json.load(file)",
            "def reload(self, schedule):\n    with open(schedule) as file:\n        self.schedule = json.load(file)",
            "def reload(self, schedule):\n    with open(schedule, 'r') as file:\n        self.schedule = json.load(file)"
        ]
    },
    {
        "id": 65,
        "prompt": "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization. Dependent upon the access\n    rights of the profile token.\n\n    .. versionadded:: 2016.11.0\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"",
        "code": "def list_private_repos(profile='github'):\n    import requests\n    import salt.utils.github\n\n    gh_api = salt.utils.github.get_api(profile)\n    headers = {'Authorization': f'token {gh_api.token}'}\n    url = f'{gh_api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    \n    private_repos = []\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        private_repos.extend(repo['name'] for repo in response.json() if repo['private'])\n        url = response.links.get('next', {}).get('url')\n    \n    return private_repos",
        "writer": "machine",
        "rewrite": [
            "def list_private_repositories(profile='github'):\n    import requests\n    import salt.utils.github\n\n    github_api = salt.utils.github.get_api(profile)\n    headers = {'Authorization': f'token {github_api.token}'}\n    api_url = f'{github_api.base_url}/user/repos'\n    query_params = {'visibility': 'private', 'per_page': 100}\n    \n    private_repositories = []\n    while api_url:\n        response = requests.get(api_url, headers=headers, params=query_params)\n        response.raise_for_status()\n        private_repositories.extend(repo['name'] for repo in response.json() if repo['private'])\n        api_url = response.links.get('next', {}).get('url')\n    \n    return private_repositories",
            "def list_private_repos(profile='github'):\n    import requests\n    import salt.utils.github\n\n    gh_api = salt.utils.github.get_api(profile)\n    headers = {'Authorization': f'token {gh_api.token}'}\n    url = f'{gh_api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    \n    private_repos = []\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        private_repos += [repo['name'] for repo in response.json() if repo.get('private')]\n        url = response.links.get('next', {}).get('url')\n    \n    return private_repos",
            "def list_private_repos(profile='github'):\n    import requests\n    import salt.utils.github\n\n    gh_api = salt.utils.github.get_api(profile)\n    headers = {'Authorization': f'token {gh_api.token}'}\n    url = f'{gh_api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    \n    private_repos = []\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        private_repos += [repo['name'] for repo in response.json() if repo['private']]\n        url = response.links.get('next', {}).get('url')\n    \n    return private_repos"
        ]
    },
    {
        "id": 67,
        "prompt": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"",
        "code": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"\n    lst = []\n    for file in os.listdir(path):\n        hidden_file = FileSystem(file).is_hidden()\n        if (hidden_file and include_hidden) or (not hidden_file):\n            lst.append(os.path.join(path, file))\n    return list(set(lst))",
        "writer": "human",
        "rewrite": [
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"\n    return [os.path.join(path, file) for file in os.listdir(path) \n            if include_hidden or not FileSystem(file).is_hidden()]",
            "import os\n\ndef list_directory_contents(directory, include_hidden_files=False):\n    \"\"\"Retrieves the contents of a specified directory.\n\n    :param directory: The directory from which to list files and folders.\n    :param include_hidden_files: Flag indicating whether to include hidden files.\n    :return: A list of paths for the items in the specified directory.\n    \"\"\"\n    items = []\n    for item in os.listdir(directory):\n        if (item.startswith('.') and include_hidden_files) or (not item.startswith('.')):\n            items.append(os.path.join(directory, item))\n    return list(set(items))",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"\n    return [os.path.join(path, file) for file in os.listdir(path) \n            if include_hidden or not FileSystem(file).is_hidden()]"
        ]
    },
    {
        "id": 67,
        "prompt": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"",
        "code": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"\n    import os\n    content = os.listdir(path)\n    if not include_hidden:\n        content = [item for item in content if not item.startswith('.')]\n    return [os.path.join(path, item) for item in content]",
        "writer": "machine",
        "rewrite": [
            "def list_directory_contents(directory, include_hidden_files=False):\n    \"\"\"Retrieves the contents of a specified directory.\n\n    :param directory: path of the directory to list files and folders from\n    :param include_hidden_files: flag to include hidden files in the list\n    :return: List of complete paths in the specified directory\n    \"\"\"\n    import os\n    items = os.listdir(directory)\n    if not include_hidden_files:\n        items = [item for item in items if not item.startswith('.')]\n    return [os.path.join(directory, item) for item in items]",
            "def list_directory_contents(directory, show_hidden=False):\n    \"\"\"Retrieve contents of a directory\n\n    :param directory: path to the target directory\n    :param show_hidden: True to include hidden files in the output\n    :return: List of full paths of files and directories\n    \"\"\"\n    import os\n    items = os.listdir(directory)\n    if not show_hidden:\n        items = [item for item in items if not item.startswith('.')]\n    return [os.path.join(directory, item) for item in items]",
            "def list_directory(directory, show_hidden=False):\n    \"\"\"Retrieves content of a specified directory\n\n    :param directory: directory to obtain list of files and folders\n    :param show_hidden: True iff show hidden files in list\n    :return: List of paths in the specified directory\n    \"\"\"\n    import os\n    items = os.listdir(directory)\n    if not show_hidden:\n        items = [item for item in items if not item.startswith('.')]\n    return [os.path.join(directory, item) for item in items]"
        ]
    },
    {
        "id": 69,
        "prompt": "def reload(self, schedule):\n        \"\"\"\n        Reload the schedule from saved schedule file.\n        \"\"\"",
        "code": "def reload(self, schedule):\n        \"\"\"\n        Reload the schedule from saved schedule file.\n        \"\"\"\n        # Remove all jobs from self.intervals\n        self.intervals = {}\n\n        if 'schedule' in schedule:\n            schedule = schedule['schedule']\n        self.opts.setdefault('schedule', {}).update(schedule)",
        "writer": "human",
        "rewrite": [
            "def reload(self, schedule):\n    self.intervals.clear()\n    \n    if 'schedule' in schedule:\n        schedule = schedule['schedule']\n    self.opts['schedule'] = {**self.opts.get('schedule', {}), **schedule}",
            "def reload(self, schedule):\n    self.intervals.clear()\n    if 'schedule' in schedule:\n        schedule = schedule['schedule']\n    self.opts.setdefault('schedule', {}).update(schedule)",
            "def reload(self, schedule):\n    self.intervals.clear()\n    if 'schedule' in schedule:\n        schedule = schedule['schedule']\n    self.opts.setdefault('schedule', {}).update(schedule)"
        ]
    },
    {
        "id": 68,
        "prompt": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    \"\"\"\n    Construct final target url.\n\n    :param endpoint_url: Target endpoint url where request is served to.\n    :param bucket_name: Bucket component for the target url.\n    :param object_name: Object component for the target url.\n    :param bucket_region: Bucket region for the target url.\n    :param query: Query parameters as a *dict* for the target url.\n    :return: Returns final target url as *str*.\n    \"\"\"",
        "code": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/')\n    if bucket_name:\n        url += f'/{bucket_name}'\n    if object_name:\n        url += f'/{object_name}'\n    if bucket_region != 'us-east-1':\n        url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com')\n    if query:\n        query_string = '&'.join([f'{k}={v}' for k, v in query.items()])\n        url += f'?{query_string}'\n    return url",
        "writer": "machine",
        "rewrite": [
            "def build_target_url(base_url, bucket=None, object_key=None, region='us-east-1', params=None):\n    url = base_url.rstrip('/')\n    if bucket:\n        url += f'/{bucket}'\n    if object_key:\n        url += f'/{object_key}'\n    if region != 'us-east-1':\n        url = url.replace('s3.amazonaws.com', f's3.{region}.amazonaws.com')\n    if params:\n        query_string = '&'.join([f'{key}={value}' for key, value in params.items()])\n        url += f'?{query_string}'\n    return url",
            "def create_target_url(endpoint, bucket=None, obj=None, region='us-east-1', params=None):\n    target_url = endpoint.rstrip('/')\n    if bucket:\n        target_url += f'/{bucket}'\n    if obj:\n        target_url += f'/{obj}'\n    if region != 'us-east-1':\n        target_url = target_url.replace('s3.amazonaws.com', f's3.{region}.amazonaws.com')\n    if params:\n        query_string = '&'.join([f'{key}={value}' for key, value in params.items()])\n        target_url += f'?{query_string}'\n    return target_url",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/')\n    if bucket_name:\n        url += f'/{bucket_name}'\n    if object_name:\n        url += f'/{object_name}'\n    if bucket_region != 'us-east-1':\n        url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com')\n    if query:\n        url += '?' + '&'.join(f'{k}={v}' for k, v in query.items())\n    return url"
        ]
    },
    {
        "id": 64,
        "prompt": "def delete(self):\n        \"\"\"Remove myself from my :class:`Character`.\n\n        For symmetry with :class:`Thing` and :class`Place`.\n\n        \"\"\"",
        "code": "def delete(self):\n        \"\"\"Remove myself from my :class:`Character`.\n\n        For symmetry with :class:`Thing` and :class`Place`.\n\n        \"\"\"\n        branch, turn, tick = self.engine._nbtt()\n        self.engine._edges_cache.store(\n            self.character.name,\n            self.origin.name,\n            self.destination.name,\n            0,\n            branch,\n            turn,\n            tick,\n            None\n        )\n        self.engine.query.exist_edge(\n            self.character.name,\n            self.origin.name,\n            self.destination.name,\n            branch, turn, tick, False\n        )\n        try:\n            del self.engine._edge_objs[\n                (self.graph.name, self.orig, self.dest)\n            ]\n        except KeyError:\n            pass\n        self.character.portal[self.origin.name].send(\n            self.character.portal[self.origin.name],\n            key='dest', val=None\n        )",
        "writer": "human",
        "rewrite": [
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(\n        self.character.name,\n        self.origin.name,\n        self.destination.name,\n        0,\n        branch,\n        turn,\n        tick,\n        None\n    )\n    self.engine.query.exist_edge(\n        self.character.name,\n        self.origin.name,\n        self.destination.name,\n        branch, turn, tick, False\n    )\n    self.engine._edge_objs.pop((self.graph.name, self.orig, self.dest), None)\n    self.character.portal[self.origin.name].send(\n        self.character.portal[self.origin.name],\n        key='dest', val=None\n    )",
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(\n        self.character.name,\n        self.origin.name,\n        self.destination.name,\n        0,\n        branch,\n        turn,\n        tick,\n        None\n    )\n    self.engine.query.exist_edge(\n        self.character.name,\n        self.origin.name,\n        self.destination.name,\n        branch, turn, tick, False\n    )\n    self.engine._edge_objs.pop(\n        (self.graph.name, self.orig, self.dest),\n        None\n    )\n    self.character.portal[self.origin.name].send(\n        self.character.portal[self.origin.name],\n        key='dest', val=None\n    )",
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(\n        self.character.name,\n        self.origin.name,\n        self.destination.name,\n        0,\n        branch,\n        turn,\n        tick,\n        None\n    )\n    self.engine.query.exist_edge(\n        self.character.name,\n        self.origin.name,\n        self.destination.name,\n        branch, turn, tick, False\n    )\n    \n    self.engine._edge_objs.pop((self.graph.name, self.orig, self.dest), None)\n\n    self.character.portal[self.origin.name].send(\n        self.character.portal[self.origin.name],\n        key='dest', val=None\n    )"
        ]
    },
    {
        "id": 68,
        "prompt": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    \"\"\"\n    Construct final target url.\n\n    :param endpoint_url: Target endpoint url where request is served to.\n    :param bucket_name: Bucket component for the target url.\n    :param object_name: Object component for the target url.\n    :param bucket_region: Bucket region for the target url.\n    :param query: Query parameters as a *dict* for the target url.\n    :return: Returns final target url as *str*.\n    \"\"\"",
        "code": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    \"\"\"\n    Construct final target url.\n\n    :param endpoint_url: Target endpoint url where request is served to.\n    :param bucket_name: Bucket component for the target url.\n    :param object_name: Object component for the target url.\n    :param bucket_region: Bucket region for the target url.\n    :param query: Query parameters as a *dict* for the target url.\n    :return: Returns final target url as *str*.\n    \"\"\"\n    # New url\n    url = None\n\n    # Parse url\n    parsed_url = urlsplit(endpoint_url)\n\n    # Get new host, scheme.\n    scheme = parsed_url.scheme\n    host = parsed_url.netloc\n\n    # Strip 80/443 ports since curl & browsers do not\n    # send them in Host header.\n    if (scheme == 'http' and parsed_url.port == 80) or\\\n       (scheme == 'https' and parsed_url.port == 443):\n        host = parsed_url.hostname\n\n    if 's3.amazonaws.com' in host:\n        host = get_s3_endpoint(bucket_region)\n\n    url = scheme + '://' + host\n    if bucket_name:\n        # Save if target url will have buckets which suppport\n        # virtual host.\n        is_virtual_host_style = is_virtual_host(endpoint_url,\n                                                bucket_name)\n        if is_virtual_host_style:\n            url = (scheme + '://' + bucket_name + '.' + host)\n        else:\n            url = (scheme + '://' + host + '/' + bucket_name)\n\n    url_components = [url]\n    url_components.append('/')\n\n    if object_name:\n        object_name = encode_object_name(object_name)\n        url_components.append(object_name)\n\n    if query:\n        ordered_query = collections.OrderedDict(sorted(query.items()))\n        query_components = []\n        for component_key in ordered_query:\n            if isinstance(ordered_query[component_key], list):\n                for value in ordered_query[component_key]:\n                    query_components.append(component_key+'='+\n                                            queryencode(value))\n            else:\n                query_components.append(\n                    component_key+'='+\n                    queryencode(ordered_query.get(component_key, '')))\n\n        query_string = '&'.join(query_components)\n        if query_string:\n            url_components.append('?')\n            url_components.append(query_string)\n\n    return ''.join(url_components)",
        "writer": "human",
        "rewrite": [
            "import collections\nfrom urllib.parse import urlsplit, urlencode as queryencode\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed_url = urlsplit(endpoint_url)\n    scheme = parsed_url.scheme\n    host = parsed_url.netloc\n\n    if (scheme == 'http' and parsed_url.port == 80) or (scheme == 'https' and parsed_url.port == 443):\n        host = parsed_url.hostname\n\n    if 's3.amazonaws.com' in host:\n        host = get_s3_endpoint(bucket_region)\n\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        is_virtual_host_style = is_virtual_host(endpoint_url, bucket_name)\n        if is_virtual_host_style:\n            url = f\"{scheme}://{bucket_name}.{host}\"\n        else:\n            url = f\"{scheme}://{host}/{bucket_name}\"\n\n    url_components = [url, '/']\n\n    if object_name:\n        object_name = encode_object_name(object_name)\n        url_components.append(object_name)\n\n    if query:\n        ordered_query = collections.OrderedDict(sorted(query.items()))\n        query_components = [f\"{key}={queryencode(value)}\" if not isinstance(value, list) else f\"{key}={queryencode(v)}\" for key, values in ordered_query.items() for v in (values if isinstance(values, list) else [values])]\n        query_string = '&'.join(query_components)\n        if query_string:\n            url_components.append(f\"?{query_string}\")\n\n    return ''.join(url_components)",
            "def construct_target_url(endpoint_url, bucket_name=None, object_name=None,\n                         bucket_region='us-east-1', query=None):\n    parsed_url = urlsplit(endpoint_url)\n    scheme = parsed_url.scheme\n    host = parsed_url.netloc\n\n    if (scheme == 'http' and parsed_url.port == 80) or\\\n       (scheme == 'https' and parsed_url.port == 443):\n        host = parsed_url.hostname\n\n    if 's3.amazonaws.com' in host:\n        host = get_s3_endpoint(bucket_region)\n\n    url = f\"{scheme}://{host}\"\n\n    if bucket_name:\n        if is_virtual_host(endpoint_url, bucket_name):\n            url = f\"{scheme}://{bucket_name}.{host}\"\n        else:\n            url = f\"{url}/{bucket_name}\"\n\n    url_components = [url, '/']\n\n    if object_name:\n        object_name = encode_object_name(object_name)\n        url_components.append(object_name)\n\n    if query:\n        ordered_query = collections.OrderedDict(sorted(query.items()))\n        query_components = [\n            f\"{key}={queryencode(value)}\" if not isinstance(value, list) \n            else f\"{key}={queryencode(v)}\" for key, v in ordered_query.items() \n            for value in ([v] if not isinstance(v, list) else v)\n        ]\n        \n        if query_components:\n            url_components.append('?')\n            url_components.append('&'.join(query_components))\n\n    return ''.join(url_components)",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    from urllib.parse import urlsplit, urlencode\n    from collections import OrderedDict\n    \n    parsed_url = urlsplit(endpoint_url)\n\n    scheme = parsed_url.scheme\n    host = parsed_url.netloc\n    if (scheme == 'http' and parsed_url.port == 80) or\\\n       (scheme == 'https' and parsed_url.port == 443):\n        host = parsed_url.hostname\n\n    if 's3.amazonaws.com' in host:\n        host = get_s3_endpoint(bucket_region)\n\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        url += f\"{'/' + bucket_name if not is_virtual_host(endpoint_url, bucket_name) else f'.{bucket_name}'}\"\n    \n    url_components = [url, '/']\n    \n    if object_name:\n        url_components.append(encode_object_name(object_name))\n\n    if query:\n        ordered_query = OrderedDict(sorted(query.items()))\n        query_string = '&'.join(\n            f\"{key}={urlencode(value) if isinstance(value, list) else value}\"\n            for key, value in ordered_query.items()\n        )\n        if query_string:\n            url_components.append(f\"?{query_string}\")\n\n    return ''.join(url_components)"
        ]
    }
]