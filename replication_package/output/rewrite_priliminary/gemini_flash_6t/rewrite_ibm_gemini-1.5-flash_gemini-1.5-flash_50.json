[
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "def digit_number(a, b):\n  return len(str(a + b))",
        "writer": "machine",
        "rewrite": [
            "def digit_number(a, b):\n  return len(str(a + b))",
            "def digit_number(a, b):\n  sum_ab = a + b\n  return len(str(sum_ab))",
            "def digit_number(a,b):\n    c = a + b\n    return len(str(c))",
            "def digit_number(a, b):\n    s = a + b\n    return len(str(s))",
            "def digit_number(a, b):\n  return len(f\"{a+b}\")",
            "def digit_number(a, b):\n    total = a + b\n    return len(str(total))"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "import sys\n#from me.io import dup_file_stdin\n\n#@dup_file_stdin\ndef solve():\n    m=[]\n    for line in sys.stdin:\n        m.append(int(line))\n    m.sort(reverse=True)\n    for h in m[0:3]:\n        print(h)\nsolve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    m = sorted([int(line) for line in sys.stdin], reverse=True)\n    print(*m[:3], sep='\\n')\n\nsolve()",
            "import sys\n\ndef solve():\n    print(*sorted([int(line) for line in sys.stdin], reverse=True)[:3], sep='\\n')\n\nsolve()",
            "import sys\nprint(*sorted([int(x) for x in sys.stdin], reverse=True)[:3], sep='\\n')",
            "import sys\nprint('\\n'.join(map(str,sorted([int(i) for i in sys.stdin],reverse=True)[:3])))",
            "import sys\n[print(i) for i in sorted([int(x) for x in sys.stdin], reverse=True)[:3]]",
            "import sys\nprint(*sorted((int(x) for x in sys.stdin),reverse=True)[:3],sep='\\n')"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_hills():\n  heights = []\n  for i in range(10):\n    height = int(input())\n    heights.append(height)\n  heights.sort(reverse=True)\n  print(heights[0])\n  print(heights[1])\n  print(heights[2])",
        "writer": "machine",
        "rewrite": [
            "def top_three_hills():\n  heights = sorted([int(input()) for _ in range(10)], reverse=True)\n  print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n    heights = sorted([int(input()) for _ in range(10)], reverse=True)\n    print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n  print(*(sorted([int(input()) for _ in range(10)], reverse=True)[:3]), sep='\\n')",
            "def top_three_hills():\n  heights = [int(input()) for _ in range(10)]\n  heights.sort(reverse=True)\n  for i in range(3):\n    print(heights[i])",
            "def top_three_hills():\n    heights = sorted([int(input()) for _ in range(10)], reverse=True)\n    for i in range(3):\n        print(heights[i])",
            "def top_three_hills():\n  print('\\n'.join(map(str,sorted([int(input()) for i in range(10)],reverse=True)[:3])))"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_hills():\n  heights = []\n  for i in range(10):\n    height = int(input())\n    heights.append(height)\n  heights.sort(reverse=True)\n  print(heights[0])\n  print(heights[1])\n  print(heights[2])",
        "writer": "machine",
        "rewrite": [
            "def top_three_hills():\n  heights = sorted([int(input()) for _ in range(10)], reverse=True)\n  print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n    heights = sorted([int(input()) for _ in range(10)], reverse=True)\n    print(*heights[:3], sep='\\n')",
            "def top_three_hills():\n  print(*sorted([int(input()) for _ in range(10)], reverse=True)[:3], sep='\\n')",
            "def top_three_hills():\n    heights = [int(input()) for _ in range(10)]\n    for h in sorted(heights, reverse=True)[:3]:\n        print(h)",
            "def top_three_hills():\n    print('\\n'.join(map(str,sorted([int(input()) for i in range(10)],reverse=True)[:3])))",
            "def top_three_hills():\n  heights = sorted([int(input()) for _ in range(10)], reverse=True)\n  for height in heights[:3]:\n    print(height)"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = []\n\tfor i in range(10):\n\t\tmountains.append(int(input()))\n\t\n\tmountains = sorted(mountains, reverse = True)\n\n\tfor i in range(3):\n\t\tprint(mountains[i])\n\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    mountains = sorted([int(input()) for _ in range(10)], reverse=True)\n    print(*mountains[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(*sorted([int(input()) for _ in range(10)], reverse=True)[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    mountains = [int(input()) for _ in range(10)]\n    mountains.sort(reverse=True)\n    for mountain in mountains[:3]:\n        print(mountain)\n\nif __name__ == '__main__':\n    main()",
            "if __name__ == \"__main__\":\n    print(\"\\n\".join(map(str, sorted([int(input()) for i in range(10)], reverse=True)[:3])))",
            "if __name__ == \"__main__\":\n    mountains = sorted([int(input()) for _ in range(10)], reverse=True)\n    for i in range(3):\n        print(mountains[i])",
            "if __name__ == \"__main__\":\n    print('\\n'.join(map(str,sorted([int(x) for x in [input() for i in range(10)]],reverse=True)[:3])))"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")",
        "writer": "machine",
        "rewrite": [
            "def print_multiplication_table():\n    for i in range(1,11):\n        print(*[f\"{i}x{j}={i*j}\" for j in range(1,11)],sep='\\n')",
            "def print_multiplication_table():\n  print('\\n'.join([' '.join([f'{i}x{j}={i*j}' for j in range(1,10)]) for i in range(1,10)]))",
            "def print_multiplication_table():\n    table = [[f\"{i}x{j}={i*j}\" for j in range(1, 10)] for i in range(1, 10)]\n    for row in table:\n        print(*row, sep='\\n')",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        print('\\n'.join([f'{i}x{j}={i*j}' for j in range(1, 10)]))",
            "def print_multiplication_table():\n    print(\"\\n\".join([\" \".join([str(i*j) for j in range(1,10)]) for i in range(1,10)]))",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        print(*(f\"{i}x{j}={i*j}\" for j in range(1, 10)), sep='\\n')"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def __main():\n    x = 1;\n    while x <= 9 :\n        y = 1;\n        while y <= 9 :\n             z = x * y;\n             print(str(x) + \"x\" + str(y)  + \"=\" + str(z) )\n             y = y + 1\n        x = x + 1\n        \n        \n__main()\n\n",
        "writer": "human",
        "rewrite": [
            "def multiplication_table():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            print(f\"{x}x{y}={x * y}\")\n\nmultiplication_table()",
            "def multiplication_table():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            print(f\"{x}x{y}={x*y}\")\n\nmultiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} x {j} = {i * j}\")\n\nprint_multiplication_table()",
            "def multiplication_table():\n  for i in range(1, 10):\n    for j in range(1, 10):\n      print(f\"{i} x {j} = {i * j}\")\n\nmultiplication_table()",
            "def generate_table():\n    for i in range(1,10):\n        for j in range(1,10):\n            print(f\"{i}*{j}={i*j}\")\n\ngenerate_table()",
            "def print_table():\n    for x in range(1,10):\n        for y in range(1,10):\n            print(f\"{x} x {y} = {x*y}\")\n\nprint_table()"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def main():\n    for a in range(1,10):\n        for b in range(1,10):\n            print(\"{}x{}={}\".format(a,b,a*b))\n    return None\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    [print(f\"{a}x{b}={a*b}\") for a in range(1, 10) for b in range(1, 10)]\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    print('\\n'.join([f\"{a}x{b}={a*b}\" for a in range(1,10) for b in range(1,10)]))\n\nif __name__ == \"__main__\":\n    main()",
            "if __name__ == \"__main__\":\n    print('\\n'.join(f\"{a}x{b}={a*b}\" for a in range(1,10) for b in range(1,10)))",
            "if __name__ == \"__main__\":\n    for a in range(1, 10):\n        print('\\n'.join([f'{a}x{b}={a*b}' for b in range(1, 10)]))",
            "if __name__ == \"__main__\":\n    print(\"\\n\".join(f\"{a}x{b}={a*b}\" for a in range(1,10) for b in range(1,10)))"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")",
        "writer": "machine",
        "rewrite": [
            "def print_multiplication_table():\n    for i in range(1,11):\n        print(*[f\"{i}x{j}={i*j}\" for j in range(1,11)], sep='\\n')",
            "def print_multiplication_table():\n    print('\\n'.join([' '.join([f\"{i}x{j}={i*j}\" for j in range(1, 11)]) for i in range(1, 11)]))",
            "def print_multiplication_table():\n    [print(f\"{i}x{j}={i*j}\") for i in range(1,10) for j in range(1,10)]",
            "def print_multiplication_table():\n    rows = []\n    for i in range(1, 10):\n        row = []\n        for j in range(1, 10):\n            row.append(f\"{i}x{j}={i*j}\")\n        rows.append(\" \".join(row))\n    print(\"\\n\".join(rows))",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        print(*(f\"{i}x{j}={i*j}\" for j in range(1, 10)), sep='\\n')",
            "def print_multiplication_table():\n    print(\"\\n\".join([\" \".join([f\"{i}x{j}={i*j}\" for j in range(1, 10)]) for i in range(1, 10)]))"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "def digit_number():\n  while True:\n    try:\n      a, b = map(int, input().split())\n      print(len(str(a + b)))\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def digit_number():\n    while True:\n        try:\n            a, b = map(int, input().split())\n            print(len(str(a + b)))\n        except EOFError:\n            break",
            "def digit_number():\n    while True:\n        try:\n            line = input()\n            if not line:\n                break\n            a, b = map(int, line.split())\n            print(len(str(a + b)))\n        except ValueError:\n            break",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))",
            "def digit_number():\n    while True:\n        try:\n            line = input()\n            if not line:\n                break\n            a, b = map(int, line.split())\n            print(len(str(a+b)))\n        except (ValueError, EOFError):\n            break",
            "def digit_number():\n  try:\n    while True:\n      a, b = map(int, input().split())\n      print(len(str(a + b)))\n  except EOFError:\n    pass\n  except ValueError:\n    pass",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin:\n        try:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))\n        except ValueError:\n            pass"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n\n        c = a + b\n\n        if c == 0:\n            print(1)\n        else:\n            ans = 0\n\n            while c > 0:\n                ans += 1\n                c //= 10\n\n            print(ans)\n\nif __name__ == '__main__':\n    solve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)) if a + b else 1)\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)) if a + b else 1)\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a+b)) if a+b else 1)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a,b = map(int,line.split())\n        print(len(str(a+b)) if a+b else 1)\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)) if (a + b) else 1)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        s = str(a + b)\n        print(len(s) if s else 1)\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef main():\n    \"\"\" ????????? \"\"\"\n    istr = sys.stdin.read()\n    wi = istr.splitlines()\n    for i in wi:\n        a = list(map(int,i.split()))\n        b = str(a[0] + a[1])\n        print(len(b))\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    istr = sys.stdin.read()\n    lines = istr.splitlines()\n    for line in lines:\n        nums = list(map(int, line.split()))\n        sum_nums = nums[0] + nums[1]\n        print(len(str(sum_nums)))\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        nums = line.split()\n        print(len(str(int(nums[0]) + int(nums[1]))))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        try:\n            nums = line.split()\n            sum_nums = int(nums[0]) + int(nums[1])\n            print(len(str(sum_nums)))\n        except (ValueError, IndexError):\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        try:\n            x, y = map(int, line.split())\n            print(len(str(x + y)))\n        except:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        try:\n          numbers = line.split()\n          sum_of_numbers = sum(int(num) for num in numbers)\n          print(len(str(sum_of_numbers)))\n        except:\n          pass\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def triangle(dataset):\n    a, b, c = dataset\n    if a*a + b*b == c*c:\n        return 1\n    return 0\n\nN = int(input())\nfor _ in range(N):\n    dataset = sorted(map(int, input().split()))\n    flag = triangle(dataset)\n    print([\"NO\", \"YES\"][flag])\n",
        "writer": "human",
        "rewrite": [
            "def triangle(dataset):\n    a, b, c = dataset\n    return 1 if a*a + b*b == c*c else 0\n\nN = int(input())\nfor _ in range(N):\n    dataset = sorted(map(int, input().split()))\n    print(\"YES\" if triangle(dataset) else \"NO\")",
            "def is_right_triangle(sides):\n    a, b, c = sorted(sides)\n    return c*c == a*a + b*b\n\nn = int(input())\nfor _ in range(n):\n    sides = list(map(int, input().split()))\n    print(\"YES\" if is_right_triangle(sides) else \"NO\")",
            "def is_right_angled(sides):\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    sides = list(map(int, input().split()))\n    result = \"YES\" if is_right_angled(sides) else \"NO\"\n    print(result)",
            "def check_triangle(sides):\n  sides.sort()\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\nn = int(input())\nfor _ in range(n):\n  sides = list(map(int, input().split()))\n  print(\"YES\" if check_triangle(sides) else \"NO\")",
            "def is_right_triangle(sides):\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    sides = list(map(int, input().split()))\n    print(\"YES\" if is_right_triangle(sides) else \"NO\")",
            "def is_right_triangle(sides):\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\nn = int(input())\nfor _ in range(n):\n    sides = sorted(map(int, input().split()))\n    print(\"YES\" if is_right_triangle(sides) else \"NO\")"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "# coding:utf-8\n\ndef main():\n    N = int(input().rstrip())\n\n    for i in range(N):\n        ls = list(map(int, input().split(' ')))\n        ls.sort()\n\n        if(ls[0]**2 + ls[1]**2 == ls[2]**2):\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    N = int(input())\n    for _ in range(N):\n        a, b, c = map(int, input().split())\n        sides = sorted([a, b, c])\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = sorted(map(int, input().split()))\n        print(\"YES\" if a*a + b*b == c*c else \"NO\")\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef check_pythagorean_triplet():\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        a, b, c = map(int, sys.stdin.readline().split())\n        sides = sorted([a, b, c])\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == \"__main__\":\n    check_pythagorean_triplet()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        nums = list(map(int, input().split()))\n        nums.sort()\n        print(\"YES\" if nums[0]**2 + nums[1]**2 == nums[2]**2 else \"NO\")\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().split())\n    print('YES' if sorted([a, b, c])[0]**2 + sorted([a, b, c])[1]**2 == sorted([a, b, c])[2]**2 else 'NO')",
            "import sys\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    x = list(map(int, sys.stdin.readline().split()))\n    x.sort()\n    print(['NO', 'YES'][x[0]**2 + x[1]**2 == x[2]**2])"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle(a, b, c):\n  \"\"\"\n  Checks if three sides form a right triangle.\n\n  Args:\n    a: Length of the first side.\n    b: Length of the second side.\n    c: Length of the third side.\n\n  Returns:\n    True if the sides form a right triangle, False otherwise.\n  \"\"\"\n  sides = sorted([a, b, c])\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n  \"\"\"\n  Reads input and determines if each set of sides forms a right triangle.\n  \"\"\"\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    if is_right_triangle(a, b, c):\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nif __name__ == \"__main__\":\n  main()",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle(a, b, c):\n  sides = sorted([a, b, c])\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n  main()",
            "def is_right_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return abs(sides[0]**2 + sides[1]**2 - sides[2]**2) < 1e-6\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(float, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[2]**2 - (sides[0]**2 + sides[1]**2) < 1e-9\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(float, input().split())\n        print(\"YES\" if is_right_triangle(a,b,c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef is_right_triangle(a, b, c):\n  sides = sorted([a, b, c])\n  return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2, rel_tol=1e-9)\n\ndef main():\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(float, input().split())\n    print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n  main()",
            "def is_right_triangle(a, b, c):\n  sides = sorted([a, b, c])\n  return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2)\n\ndef main():\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(float, input().split())\n    print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n  main()\n\nimport math"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle(a, b, c):\n  \"\"\"Checks if a triangle with sides a, b, and c is a right triangle.\"\"\"\n  sides = sorted([a, b, c])\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n  \"\"\"Main function to read input and determine if triangles are right triangles.\"\"\"\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    if is_right_triangle(a, b, c):\n      print(\"YES\")\n    else:\n      print(\"NO\")\n\nif __name__ == \"__main__\":\n  main()",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle(a, b, c):\n  sides = sorted([a, b, c])\n  return sides[2]**2 == sides[0]**2 + sides[1]**2\n\ndef main():\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n  main()",
            "def is_right_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef is_right_triangle(a, b, c):\n  sides = sorted([a, b, c])\n  return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2)\n\ndef main():\n  n = int(input())\n  for _ in range(n):\n    a, b, c = map(int, input().split())\n    print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n  main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return abs(sides[2]**2 - (sides[0]**2 + sides[1]**2)) < 1e-6\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0] * sides[0] + sides[1] * sides[1] == sides[2] * sides[2]\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a, b, c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()",
            "def is_right_triangle(a, b, c):\n    return (a**2 + b**2 == c**2) or (a**2 + c**2 == b**2) or (b**2 + c**2 == a**2)\n\ndef main():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if is_right_triangle(a,b,c) else \"NO\")\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(str):\n  return str[::-1]",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(str):\n  return \"\".join(reversed(str))",
            "def reverse_string(s):\n    new_string = \"\"\n    for i in range(len(s) -1, -1, -1):\n        new_string += s[i]\n    return new_string",
            "def reverse_string(s):\n    return s.reverse()",
            "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) - 1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string",
            "def reverse_string(string):\n  return \"\".join(reversed(string))",
            "def reverse_string(string):\n    return string[-1::-1]"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def rev(str):\n    revstr=''\n    for i in range(len(str)-1,-1,-1):\n        revstr=revstr + str[i]\n    return revstr\nstr=input(\"\")\nprint(rev(str))",
        "writer": "human",
        "rewrite": [
            "def rev(str):\n    return str[::-1]\n\nstr = input(\"\")\nprint(rev(str))",
            "def rev(s):\n  return s[::-1]\n\ns = input()\nprint(rev(s))",
            "def rev(s):\n    return \"\".join(reversed(s))\n\ns = input()\nprint(rev(s))",
            "def rev(string):\n    return string[::-1]\n\ninput_string = input()\nprint(rev(input_string))",
            "def rev(s):\n    return \"\".join(reversed(s))\n\nstring = input()\nprint(rev(string))",
            "def rev(string):\n    return string[::-1]\n\ninput_string = input()\nprint(rev(input_string))"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def main():\n    str = input()\n    str = str[::-1]\n    print(str)\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    print(input()[::-1])\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input()[::-1])\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    string = input()\n    reversed_string = string[::-1]\n    print(reversed_string)\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    print(input()[::-1])\n\nif __name__ == \"__main__\":\n    main()",
            "def reversed_string():\n  print(input()[::-1])\n\nif __name__ == \"__main__\":\n  reversed_string()",
            "def reverse_string():\n    string = input()\n    reversed_string = string[::-1]\n    print(reversed_string)\n\nif __name__ == \"__main__\":\n    reverse_string()"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd_lcm(a, b):\n  \"\"\"\n  Calculates the greatest common divisor (GCD) and the least common multiple (LCM) of two integers.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    A tuple containing the GCD and LCM of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  gcd = a\n  lcm = (a * b) // gcd\n  return gcd, lcm",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef gcd_lcm(a, b):\n  gcd = math.gcd(a, b)\n  lcm = (a * b) // gcd\n  return gcd, lcm",
            "def gcd_lcm(a, b):\n    if b == 0:\n        return a, a\n    return gcd_lcm(b, a % b)",
            "def gcd_lcm(a, b):\n    from math import gcd\n    return gcd(a, b), a * b // gcd(a, b)",
            "def gcd_lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return gcd(a,b), (a*b)//gcd(a,b)",
            "def gcd_lcm(a, b):\n    if a == 0:\n        return b, 0\n    if b == 0:\n        return a, 0\n    return gcd_lcm(b, a % b) if b > a else gcd_lcm(a, b % a)",
            "def gcd_lcm(a, b):\n    g = a\n    l = b\n    while(l):\n        g, l = l, g%l\n    return g, (a*b)//g"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(str):\n  return str[::-1]",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(str):\n  return \"\".join(reversed(str))",
            "def reverse_string(s):\n    new_string = \"\"\n    for i in range(len(s)-1, -1, -1):\n        new_string += s[i]\n    return new_string",
            "def reverse_string(string):\n    reversed_string = \"\"\n    for i in range(len(string) -1, -1, -1):\n        reversed_string += string[i]\n    return reversed_string",
            "def reverse_string(s):\n    return s.reverse()",
            "def reverse_string(string):\n    return \"\".join(reversed(string))",
            "def reverse_string(input_string):\n    list_of_chars = list(input_string)\n    list_of_chars.reverse()\n    return \"\".join(list_of_chars)"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd_lcm(a, b):\n  \"\"\"Computes the greatest common divisor (GCD) and the least common multiple (LCM) of two integers.\n\n  Args:\n    a: The first integer.\n    b: The second integer.\n\n  Returns:\n    A tuple containing the GCD and LCM of a and b.\n  \"\"\"\n  while b:\n    a, b = b, a % b\n  gcd = a\n  lcm = (a * b) // gcd\n  return gcd, lcm",
        "writer": "machine",
        "rewrite": [
            "def gcd_lcm(a, b):\n  if b == 0:\n    return a, a\n  return gcd_lcm(b, a % b)",
            "import math\ndef gcd_lcm(a, b):\n    return math.gcd(a, b), (a * b) // math.gcd(a, b)",
            "def gcd_lcm(a, b):\n    if a == 0:\n        return b, 0\n    if b == 0:\n        return a, 0\n    \n    while(b):\n        a, b = b, a % b\n    \n    return a, (a * (a // b))",
            "def gcd_lcm(a, b):\n    if b == 0:\n        return a, 0\n    return gcd_lcm(b, a % b)",
            "def gcd_lcm(a, b):\n    g = a\n    while b:\n        g, b = b, g%b\n    return g, a*b//g",
            "def gcd_lcm(a, b):\n    gcd = a\n    while b:\n        a, b = b, a % b\n    return gcd, (a * b) // gcd"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\ndef gcd(a, b):\n    for i in range(1, a+1):\n        if a % i == 0:\n            t = a // i\n            if b % t == 0:\n                return t\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
        "writer": "human",
        "rewrite": [
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a,b), a * b // math.gcd(a,b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd(a, b) :\n    if a % b == 0 :\n        return b\n    else :\n        return gcd(b, a % b)\n\nwhile True :\n    try :\n        a, b = map(int, input().split())\n    except EOFError :\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)\n",
        "writer": "human",
        "rewrite": [
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(gcd(a, b), a * b // gcd(a, b))\n    except EOFError:\n        break",
            "import math\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(math.gcd(a, b), a * b // math.gcd(a, b))\n    except EOFError:\n        break",
            "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        g = gcd(max(a, b), min(a, b))\n        print(g, a * b // g)\n    except EOFError:\n        break",
            "import math\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        g = math.gcd(a, b)\n        print(g, a * b // g)\n    except EOFError:\n        break",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        g = gcd(a, b)\n        print(g, (a * b) // g)\n    except EOFError:\n        break",
            "import math\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(math.gcd(a,b), a*b//math.gcd(a,b))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt = debt * 1.05\n    debt = (debt // 1000 + 1) * 1000\n  return debt",
        "writer": "machine",
        "rewrite": [
            "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt = ((debt * 1.05) // 1000 + 1) * 1000\n  return debt",
            "def debt_hell(n):\n    debt = 100000\n    for i in range(n):\n        debt = ((debt * 1.05) // 1000 + 1) * 1000\n    return debt",
            "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt = math.ceil(debt * 1.05 / 1000) * 1000\n  return debt\nimport math",
            "def debt_hell(n):\n    debt = 100000\n    for i in range(n):\n        debt = int(1000 * math.ceil(debt * 1.05 / 1000))\n    return debt\nimport math",
            "import numpy as np\n\ndef debt_hell(n):\n  debt = 100000\n  debt = np.ceil(debt * 1.05**n / 1000) * 1000\n  return int(debt)",
            "def debt_hell(n):\n    debt = 100000\n    debt = int(1000 * np.ceil(debt * (1.05**n) / 1000))\n    return debt\nimport numpy as np"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "def solve_simultaneous_equations():\n  while True:\n    try:\n      a, b, c, d, e, f = map(float, input().split())\n      x = ((c * e) - (b * f)) / ((a * e) - (b * d))\n      y = ((a * f) - (c * d)) / ((a * e) - (b * d))\n      print(\"{:.3f} {:.3f}\".format(x, y))\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = (a * e) - (b * d)\n            if denominator == 0:\n                print(\"No unique solution\")\n                continue\n            x = ((c * e) - (b * f)) / denominator\n            y = ((a * f) - (c * d)) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid input\")",
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = a * e - b * d\n            if denominator == 0:\n                continue\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break\n        except ValueError:\n            pass",
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            det = a * e - b * d\n            if det == 0:\n                continue\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(\"{:.3f} {:.3f}\".format(x, y))\n        except EOFError:\n            break\n        except ValueError:\n            pass",
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denom = a * e - b * d\n            if denom == 0:\n                continue\n            x = (c * e - b * f) / denom\n            y = (a * f - c * d) / denom\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break\n        except ValueError:\n            pass",
            "def solve_simultaneous_equations():\n  while True:\n    try:\n      a,b,c,d,e,f = map(float,input().split())\n      den = a*e - b*d\n      if den == 0:\n        continue\n      x = (c*e - b*f) / den\n      y = (a*f - c*d) / den\n      print(f\"{x:.3f} {y:.3f}\")\n    except EOFError:\n      break\n    except ValueError:\n      pass",
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            det = a * e - b * d\n            if det == 0:\n                continue\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break\n        except ValueError:\n            pass"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "def solve_simultaneous_equation():\n  while True:\n    try:\n      a, b, c, d, e, f = map(float, input().split())\n      x = (c * e - b * f) / (a * e - b * d)\n      y = (a * f - c * d) / (a * e - b * d)\n      print(f\"{x:.3f} {y:.3f}\")\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def solve_simultaneous_equation():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = a * e - b * d\n            if denominator == 0:\n                print(\"No unique solution\")\n                continue\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid input\")",
            "def solve_simultaneous_equations():\n    try:\n        while True:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = a * e - b * d\n            if denominator == 0:\n                raise ValueError(\"No unique solution exists.\")\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n    except EOFError:\n        pass\n    except ValueError as e:\n        print(e)",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        try:\n            a, b, c, d, e, f = map(float, line.split())\n            denom = a * e - b * d\n            if denom == 0:\n                continue\n            x = (c * e - b * f) / denom\n            y = (a * f - c * d) / denom\n            print(f\"{x:.3f} {y:.3f}\")\n        except ValueError:\n            pass",
            "def solve_simultaneous_equations():\n    while True:\n        try:\n            line = input()\n            a, b, c, d, e, f = map(float, line.split())\n            det = a * e - b * d\n            if det == 0:\n                raise ValueError(\"Singular matrix\")\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except (ValueError, EOFError):\n            break",
            "def solve_system():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            det = a * e - b * d\n            if det == 0:\n                print(\"No unique solution\")\n                continue\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except (ValueError, EOFError):\n            break",
            "def solve_equations():\n    while True:\n        try:\n            a, b, c, d, e, f = map(float, input().split())\n            denominator = a * e - b * d\n            if denominator == 0:\n                print(\"Infinite solutions or no solution\")\n                continue\n            x = (c * e - b * f) / denominator\n            y = (a * f - c * d) / denominator\n            print(f\"{x:.3f} {y:.3f}\")\n        except (EOFError, ValueError):\n            break"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt *= 1.05\n    debt = ((debt // 1000) + 1) * 1000\n  return debt",
        "writer": "machine",
        "rewrite": [
            "def debt_hell(n):\n  debt = 100000\n  for _ in range(n):\n    debt = ((int(debt * 1.05 // 1000) + 1) * 1000)\n  return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(debt * 1.05 / 1000 + 1) * 1000\n    return debt",
            "def debt_hell(n):\n  debt = 100000\n  for i in range(n):\n    debt = (int(debt * 1.05 / 1000) + 1) * 1000\n  return debt",
            "def debt_hell(n):\n    debt = 100000\n    for _ in range(n):\n        debt = 1000 * (debt * 1.05 // 1000 + 1)\n    return debt",
            "def debt_hell(n):\n    debt = 100000\n    for i in range(n):\n        debt = math.ceil(debt * 1.05 / 1000) * 1000\n    return int(debt)\nimport math",
            "import numpy as np\n\ndef debt_hell(n):\n  debt = 100000\n  debt = np.ceil(debt * 1.05**n / 1000) * 1000\n  return int(debt)"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import math\ndef saidai(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n\n    return saidai(x, y % x)\n\ndef saisyo(x, y):\n    spam = saidai(x, y)\n    return spam * (x / spam) * (y / spam)\n\n# a,b,c,d,e,f  = list(map(int,'1 2 3 4 5 6'.split()))\ntry:\n    while 1:\n\n        a,b,c,d,e,f  = list(map(int,input().split()))\n        s = saidai(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1*c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b*y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef gcd(x, y):\n    x, y = abs(x), abs(y)\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return abs(x*y) // gcd(x,y)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a,d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "# ????????\u00a3???????\u00a8????????\u00a7\u00a3???????????\u00b0??????\n# ax + by = c\n# dx + ey = f\nimport sys\n\ndef inverse(a, b, d, e):\n    deta = a * e - b * d\n    return (deta, e, -b, -d, a)\n\nwhile True:\n    data = sys.stdin.readline()\n    if data is None or data.strip() == '':\n        break\n    data = data.strip().split(' ')\n    a, b, c, d, e, f = [float(i) for i in data]\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0] + 0\n    y = (inv[3] * c + inv[4] * f) / inv[0] + 0\n\n    print('%.3f %.3f' % (x, y))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    while True:\n        try:\n            line = sys.stdin.readline().strip()\n            if not line:\n                break\n            a, b, c, d, e, f = map(float, line.split())\n            det = a * e - b * d\n            if det == 0:\n                print(\"No unique solution\")\n                continue\n            x = (e * c - b * f) / det\n            y = (-d * c + a * f) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except EOFError:\n            break\n\nsolve()",
            "import sys\n\ndef solve_linear_system(a, b, c, d, e, f):\n    determinant = a * e - b * d\n    if determinant == 0:\n        return None  # No unique solution\n    x = (e * c - b * f) / determinant\n    y = (a * f - d * c) / determinant\n    return x, y\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line:\n        break\n    try:\n        a, b, c, d, e, f = map(float, line.strip().split())\n        solution = solve_linear_system(a, b, c, d, e, f)\n        if solution:\n            x, y = solution\n            print(f\"{x:.3f} {y:.3f}\")\n        else:\n            print(\"No unique solution\")\n    except ValueError:\n        pass",
            "import sys\n\ndef solve():\n    while True:\n        try:\n            line = sys.stdin.readline().strip()\n            if not line:\n                break\n            a, b, c, d, e, f = map(float, line.split())\n            det = a * e - b * d\n            if det == 0:\n                print(\"No unique solution\")\n                continue\n            x = (e * c - b * f) / det\n            y = (a * f - d * c) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except ValueError:\n            pass\n        except EOFError:\n            break\n\nsolve()",
            "import sys\n\ndef solve_system(a, b, c, d, e, f):\n    det = a * e - b * d\n    if det == 0:\n        return \"No unique solution\"\n    x = (c * e - b * f) / det\n    y = (a * f - c * d) / det\n    return f\"{x:.3f} {y:.3f}\"\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line:\n        break\n    try:\n        a, b, c, d, e, f = map(float, line.split())\n        result = solve_system(a, b, c, d, e, f)\n        print(result)\n    except ValueError:\n        pass",
            "import sys\n\ndef solve():\n    while True:\n        try:\n            line = sys.stdin.readline().strip()\n            if not line:\n                break\n            a, b, c, d, e, f = map(float, line.split())\n            det = a * e - b * d\n            if det == 0:\n                print(\"No unique solution\")\n                continue\n            x = (e * c - b * f) / det\n            y = (a * f - d * c) / det\n            print(\"{:.3f} {:.3f}\".format(x, y))\n        except ValueError:\n            pass\n        except EOFError:\n            break\n\nsolve()",
            "import sys\n\nwhile True:\n    try:\n        line = sys.stdin.readline().strip()\n        if not line:\n            break\n        a, b, c, d, e, f = map(float, line.split())\n        det = a * e - b * d\n        if det == 0:\n            print(\"No unique solution\")\n            continue\n        x = (e * c - b * f) / det\n        y = (a * f - d * c) / det\n        print(f\"{x:.3f} {y:.3f}\")\n    except ValueError:\n        pass\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import sys\n\ndef compoundInterest(x, i, n):\n    if n == 0:\n        return x\n\n    ans = int(x * (1 + i))\n    hasu = ans % 1000\n    if hasu != 0:\n        ans -= hasu\n        ans += 1000\n    return compoundInterest(ans, i, n-1)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print (ans)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef compoundInterest(x, i, n):\n    for _ in range(n):\n        x = int(x * (1 + i))\n        x -= x % 1000\n        x += 1000\n    return x\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print(ans)",
            "import sys\n\ndef compoundInterest(principal, interest_rate, num_years):\n    amount = principal\n    for _ in range(num_years):\n        amount = amount * (1 + interest_rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print(ans)",
            "import sys\n\ndef compoundInterest(principal, interest_rate, years):\n    amount = principal\n    for _ in range(years):\n        amount *= (1 + interest_rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compoundInterest(100000, 0.05, years)\n    print(result)",
            "import sys\n\ndef compoundInterest(principal, rate, years):\n    amount = principal\n    for _ in range(years):\n        amount = amount * (1 + rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compoundInterest(100000, 0.05, years)\n    print(result)",
            "import sys\n\ndef compound_interest(principal, rate, years):\n    amount = principal\n    for _ in range(years):\n        amount = amount * (1 + rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)",
            "import sys\n\ndef compound_interest(principal, rate, years):\n    amount = principal\n    for year in range(years):\n        amount *= (1 + rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compound_interest(100000, 0.05, years)\n    print(result)"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def count_combinations(n):\n  count = 0\n  for a in range(10):\n    for b in range(10):\n      for c in range(10):\n        for d in range(10):\n          if a + b + c + d == n:\n            count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_combinations(n):\n  return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "from itertools import product\n\ndef count_combinations(n):\n  return sum(1 for combo in product(range(10), repeat=4) if sum(combo) == n)",
            "def count_combinations(n):\n    count = 0\n    for a in range(n + 1):\n        for b in range(n - a + 1):\n            for c in range(n - a - b + 1):\n                d = n - a - b - c\n                if 0 <= d < 10:\n                    count += 1\n    return count",
            "def count_combinations(n):\n    return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if sum((a,b,c,d)) == n)",
            "def count_combinations(n):\n    from itertools import combinations_with_replacement\n    return sum(1 for x in combinations_with_replacement(range(10),4) if sum(x) == n)",
            "def count_combinations(n):\n  return len([ (a,b,c,d) for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a+b+c+d == n])"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import math\ndef int_ceil(src, range):\n    return int(math.ceil(src/float(range)) * range)\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        debt = math.ceil((debt * 1.05) / 1000) * 1000\n    print(int(debt))\n\nif __name__ == \"__main__\":\n    main()",
            "import math\n\ndef main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = math.ceil((debt * 1.05) / 1000) * 1000\n    print(int(debt))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = -(-(debt * 1.05) // 1000) * 1000\n    print(int(debt))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n  weeks = int(input())\n  debt = 100000\n  for _ in range(weeks):\n    debt = (debt * 1.05 + 999) // 1000 * 1000\n  print(debt)\n\nif __name__ == \"__main__\":\n  main()",
            "def main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = 1000 * ((debt * 1.05 + 999) // 1000)\n    print(debt)\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def sum_of_4_integers(n):\n  count = 0\n  for a in range(10):\n    for b in range(10):\n      for c in range(10):\n        for d in range(10):\n          if a + b + c + d == n:\n            count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def sum_of_4_integers(n):\n  return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a + b + c + d == n)",
            "def sum_of_4_integers(n):\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a + b + c + d == n:\n                        count += 1\n    return count",
            "def sum_of_4_integers(n):\n  return sum(1 for a in range(10) for b in range(10) for c in range(10) for d in range(10) if a+b+c+d == n)",
            "from itertools import product\n\ndef sum_of_4_integers(n):\n  return sum(1 for a, b, c, d in product(range(10), repeat=4) if a + b + c + d == n)",
            "def sum_of_4_integers(n):\n    return sum(sum(sum(sum(1 for d in range(10) if a + b + c + d == n) for c in range(10)) for b in range(10)) for a in range(10))",
            "def sum_of_4_integers(n):\n    count = 0\n    for i in range(10000):\n        a = i // 1000\n        b = (i % 1000) // 100\n        c = (i % 100) // 10\n        d = i % 10\n        if a + b + c + d == n:\n            count += 1\n    return count"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(n):\n  \"\"\"Counts the number of prime numbers less than or equal to n.\"\"\"\n  count = 0\n  for num in range(2, n + 1):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_primes(n):\n  return sum(1 for i in range(2,n+1) if all(i%j for j in range(2,int(i**0.5)+1)))",
            "def count_primes(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return sum(primes)",
            "def count_primes(n):\n    c = 0\n    for i in range(2, n + 1):\n        if all(i % j for j in range(2, int(i**0.5) + 1)):\n            c += 1\n    return c",
            "def count_primes(n):\n    count = 0\n    for num in range(2, n + 1):\n        if not any(num % i == 0 for i in range(2, int(num**0.5) + 1)):\n            count += 1\n    return count",
            "def count_primes(n):\n    return sum(1 for i in range(2, n+1) if all(i % j for j in range(2, int(i**0.5) + 1)))",
            "def count_primes(n):\n  count = 0\n  for i in range(2, n + 1):\n    if all(i % j for j in range(2, int(i**0.5) + 1)):\n        count += 1\n  return count"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\n\ndef ans(num):\n    ans = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a+b+c+d == num:\n                        ans += 1\n\n    return ans\n\n\ndef main():\n    a = []\n\n    for line in sys.stdin:\n        a.append(int(line))\n\n    for line in a:\n        print(ans(line))\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom itertools import product\n\ndef ans(num):\n    return sum(1 for a, b, c, d in product(range(10), repeat=4) if a + b + c + d == num)\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef ans(n):\n    count = 0\n    for combo in combinations_with_replacement(range(10), 4):\n        if sum(combo) == n:\n            count += 1\n    return count\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef ans(num):\n    count = 0\n    for a in range(num + 1):\n        for b in range(num - a + 1):\n            for c in range(num - a - b + 1):\n                d = num - a - b - c\n                if 0 <= d < 10:\n                    count += 1\n    return count\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef ans(n):\n    return sum(1 for i in range(n + 1) for j in range(n - i + 1) for k in range(n - i - j + 1) if 0 <= n - i - j - k < 10)\n\ndef main():\n    for num in map(int, sys.stdin):\n        print(ans(num))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef ans(n):\n    c = 0\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                d = n - a - b - c\n                if 0 <= d < 10:\n                    c += 1\n    return c\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nfrom itertools import product\n\ndef ans(num):\n  return sum(1 for x in product(range(10), repeat=4) if sum(x) == num)\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(n):\n  \"\"\"Counts the number of prime numbers less than or equal to n.\"\"\"\n  count = 0\n  for num in range(2, n + 1):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count",
        "writer": "machine",
        "rewrite": [
            "def count_primes(n):\n  count = 0\n  primes = [True] * (n+1)\n  primes[0] = primes[1] = False\n  for p in range(2, int(n**0.5) + 1):\n    if primes[p]:\n      for i in range(p*p, n+1, p):\n        primes[i] = False\n  for p in range(2, n+1):\n    if primes[p]:\n      count += 1\n  return count",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    count = 0\n    for p in range(2, n + 1):\n        if prime[p]:\n            count += 1\n    return count",
            "import sympy\n\ndef count_primes(n):\n  return sympy.primepi(n)",
            "def count_primes(n):\n    count = 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if sieve[i]:\n            for j in range(i*i, n + 1, i):\n                sieve[j] = False\n    for i in range(2, n + 1):\n        if sieve[i]:\n            count += 1\n    return count",
            "def count_primes(n):\n    c = 0\n    p = [1] * (n + 1)\n    p[0] = p[1] = 0\n    for i in range(2, int(n**0.5) + 1):\n        if p[i]:\n            for j in range(i * i, n + 1, i):\n                p[j] = 0\n    for i in range(2, n + 1):\n        if p[i]:\n            c += 1\n    return c",
            "def count_primes(n):\n    c = 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n + 1, i):\n                primes[j] = False\n    for i in range(2, n + 1):\n        if primes[i]:\n            c += 1\n    return c"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    N = [1 for _ in range(n)]\n    a = sum(N[:pos[0]])\n    b = sum(N[pos[0]:pos[1]])\n    c = sum(N[pos[1]:pos[2]])\n    d = sum(N[pos[2]:])\n    if a > 9 or b > 9 or c > 9 or d > 9:\n        return None\n    return (a,b,c,d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        probs = [get_nums(n, p) for p in comb(range(n+1), 3)]\n        probs = [p for p in probs if p != None]\n        print(len(probs))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        count = 0\n        for p in comb(range(n + 1), 3):\n            a = sum(1 for _ in range(p[0]))\n            b = sum(1 for _ in range(p[1] - p[0]))\n            c = sum(1 for _ in range(p[2] - p[1]))\n            d = sum(1 for _ in range(n - p[2]))\n            if a <= 9 and b <= 9 and c <= 9 and d <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for i, j, k in comb(range(n + 1), 3):\n            a = i\n            b = j - i\n            c = k - j\n            d = n - k\n            if 0 <= a <= 9 and 0 <= b <= 9 and 0 <= c <= 9 and 0 <= d <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for p1, p2, p3 in combinations_with_replacement(range(n + 1), 3):\n            a = p1\n            b = p2 - p1\n            c = p3 - p2\n            d = n - p3\n            if all(0 <= x <= 9 for x in (a, b, c, d)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for i, j, k in combinations_with_replacement(range(n + 1), 3):\n            a = i\n            b = j - i\n            c = k - j\n            d = n - k\n            if all(0 <= x <= 9 for x in (a, b, c, d)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for a, b, c in combinations_with_replacement(range(10), 3):\n            d = n - a - b - c\n            if 0 <= d <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for i, j, k in combinations_with_replacement(range(n + 1), 3):\n            a = i\n            b = j - i\n            c = k - j\n            d = n - k\n            if 0 <= a <= 9 and 0 <= b <= 9 and 0 <= c <= 9 and 0 <= d <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = [i for i in range(w+1)]\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n\n        xs[a], xs[b] = xs[b], xs[a]\n\n    for i in range(1, w+1):\n        print(xs[i])\n\nif __name__ == \"__main__\": main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    w = int(input())\n    n = int(input())\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        xs[a], xs[b] = xs[b], xs[a]\n    print('\\n'.join(map(str, xs[1:])))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    w = int(input())\n    n = int(input())\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        xs[a], xs[b] = xs[b], xs[a]\n    print('\\n'.join(map(str, xs[1:])))\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n    w = int(input())\n    n = int(input())\n    arr = list(range(1, w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a - 1], arr[b - 1] = arr[b - 1], arr[a - 1]\n    print(*arr, sep='\\n')\n\nsolve()",
            "def main():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a], arr[b] = arr[b], arr[a]\n    print(*arr[1:], sep='\\n')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a], arr[b] = arr[b], arr[a]\n    print('\\n'.join(map(str, arr[1:])))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a], arr[b] = arr[b], arr[a]\n    for x in arr[1:]:\n        print(x)\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji(w, n, lines):\n  \"\"\"\n  Solves the Amidakuji puzzle.\n\n  Args:\n    w: The number of vertical lines.\n    n: The number of horizontal lines.\n    lines: A list of tuples representing the horizontal lines, where each tuple\n      contains two integers representing the vertical lines connected by the\n      horizontal line.\n\n  Returns:\n    A list of integers representing the final state of the Amidakuji, where each\n    integer represents the number at the bottom of the corresponding vertical\n    line.\n  \"\"\"\n  numbers = list(range(1, w + 1))\n  for a, b in lines:\n    numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n  return numbers",
        "writer": "machine",
        "rewrite": [
            "def amidakuji(w, n, lines):\n  numbers = list(range(1, w + 1))\n  for a, b in lines:\n    numbers[a-1], numbers[b-1] = numbers[b-1], numbers[a-1]\n  return numbers",
            "def amidakuji(w, n, lines):\n    result = list(range(1, w + 1))\n    for line in lines:\n        result[line[0]-1], result[line[1]-1] = result[line[1]-1], result[line[0]-1]\n    return result",
            "def amidakuji(w, n, lines):\n    ans = list(range(1, w + 1))\n    for i, j in lines:\n        ans[i-1], ans[j-1] = ans[j-1], ans[i-1]\n    return ans",
            "def amidakuji(w, n, lines):\n    cols = list(range(1, w + 1))\n    for a, b in lines:\n        cols[a - 1], cols[b - 1] = cols[b - 1], cols[a - 1]\n    return cols",
            "def amidakuji(w, n, lines):\n    ans = list(range(1, w+1))\n    for i,j in lines:\n        ans[i-1], ans[j-1] = ans[j-1], ans[i-1]\n    return ans",
            "def amidakuji(w, n, lines):\n    res = list(range(1, w + 1))\n    for p, q in lines:\n        res[p-1], res[q-1] = res[q-1], res[p-1]\n    return res"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "w = int(input())\nn = int(input())\nlst = [i + 1 for i in range(w)]\ndef swap(t):\n  a,b = t\n  temp = lst[a-1]\n  lst[a-1] = lst[b-1]\n  lst[b-1] = temp\nfor i in range(n):\n  swap(tuple(map(int,input().split(\",\"))))\nfor i in range(w):\n  print(lst[i])\n",
        "writer": "human",
        "rewrite": [
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\nfor x in lst:\n    print(x)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\nprint(*lst, sep='\\n')",
            "w = int(input())\nn = int(input())\nl = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    l[a - 1], l[b - 1] = l[b - 1], l[a - 1]\nprint('\\n'.join(map(str, l)))",
            "w = int(input())\nn = int(input())\narr = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    arr[a - 1], arr[b - 1] = arr[b - 1], arr[a - 1]\nfor num in arr:\n    print(num)",
            "w = int(input())\nn = int(input())\nl = list(range(1, w + 1))\nfor _ in range(n):\n    i, j = map(int, input().split(','))\n    l[i-1], l[j-1] = l[j-1], l[i-1]\nprint(*l, sep='\\n')",
            "w = int(input())\nn = int(input())\narr = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    arr[a - 1], arr[b - 1] = arr[b - 1], arr[a - 1]\nprint('\\n'.join(map(str, arr)))"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji():\n  w = int(input())\n  n = int(input())\n  lines = []\n  for _ in range(n):\n    a, b = map(int, input().split(\",\"))\n    lines.append((a, b))\n  numbers = list(range(1, w + 1))\n  for a, b in lines:\n    numbers[a - 1], numbers[b - 1] = numbers[b - 1], numbers[a - 1]\n  for number in numbers:\n    print(number)",
        "writer": "machine",
        "rewrite": [
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    l = [list(map(int, input().split(','))) for i in range(n)]\n    a = list(range(1,w+1))\n    for i in l:\n        a[i[0]-1],a[i[1]-1] = a[i[1]-1],a[i[0]-1]\n    print('\\n'.join(map(str,a)))",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [tuple(map(int, input().split(','))) for _ in range(n)]\n    ans = list(range(1, w + 1))\n    for a, b in lines:\n        ans[a - 1], ans[b - 1] = ans[b - 1], ans[a - 1]\n    print(*ans, sep='\\n')",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    lines = [list(map(int, input().split(','))) for _ in range(n)]\n    nums = list(range(1, w + 1))\n    for i in lines:\n        nums[i[0]-1], nums[i[1]-1] = nums[i[1]-1], nums[i[0]-1]\n    print(*nums, sep='\\n')",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    a = [list(map(int, input().split(','))) for _ in range(n)]\n    b = list(range(1, w + 1))\n    for i in a:\n        b[i[0]-1], b[i[1]-1] = b[i[1]-1], b[i[0]-1]\n    print(*b, sep='\\n')",
            "def amidakuji():\n    w, n = map(int, [input(), input()])\n    l = [list(map(int, input().split(','))) for _ in range(n)]\n    r = list(range(1, w + 1))\n    for i in l:\n        r[i[0]-1], r[i[1]-1] = r[i[1]-1], r[i[0]-1]\n    print('\\n'.join(map(str, r)))",
            "def amidakuji():\n    w = int(input())\n    n = int(input())\n    l = [tuple(map(int, x.split(','))) for x in [input() for _ in range(n)]]\n    a = list(range(1, w+1))\n    for x, y in l:\n        a[x-1], a[y-1] = a[y-1], a[x-1]\n    print(*a, sep='\\n')"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x,d):\n    return d*func(x)\n\narray = []\nfor i in sys.stdin:\n    array.append(int(i))\n\nfor i in range(len(array)):\n    d = array[i]\n    k = int(600/d)\n    result = 0\n    for j in range(k):\n        result += rec(j*d,d)\n\n    print(result)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef func(x):\n    return x**2\n\ndef rec(x,d):\n    return d*func(x)\n\narray = [int(i) for i in sys.stdin]\n\nfor d in array:\n    k = int(600/d)\n    result = sum(rec(j*d,d) for j in range(k))\n    print(result)",
            "import sys\n\ndef calculate_sum(d):\n    k = 600 // d\n    return sum(d * (j * d) ** 2 for j in range(k))\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    print(calculate_sum(d))",
            "import sys\n\narray = [int(i) for i in sys.stdin]\nfor d in array:\n    k = 600 // d\n    result = sum(d * (j * d) ** 2 for j in range(k))\n    print(result)",
            "import sys\n\ndef compute_result(d):\n    k = 600 // d\n    return sum(d * (j * d)**2 for j in range(k))\n\nfor d in map(int, sys.stdin):\n    print(compute_result(d))",
            "import sys\n\nfor d in map(int, sys.stdin):\n    print(sum(d * (j * d)**2 for j in range(600 // d)))",
            "import sys\n\nfor d in map(int, sys.stdin):\n  print(sum(d * (j*d)**2 for j in range(600//d)))"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switching_railroad_cars():\n  cars = []\n  while True:\n    try:\n      car = int(input())\n      if car == 0:\n        if cars:\n          print(cars.pop(0))\n        else:\n          continue\n      else:\n        cars.append(car)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                \n            else:\n                cars.append(car)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            line = input()\n            if not line:\n                break\n            car = int(line)\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n            else:\n                cars.append(car)\n        except ValueError:\n            pass",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0 and cars:\n                print(cars.pop(0))\n            elif car !=0:\n                cars.append(car)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                continue\n            cars.append(car)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car > 0:\n                cars.append(car)\n            elif cars:\n                print(cars.pop(0))\n\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            num = int(input())\n            if num == 0:\n                if cars:\n                    print(cars.pop(0))\n            else:\n                cars.append(num)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "MAX = 1000000\nSQRT = 1000     # sqrt(MAX)\n \nprime = [0] * MAX\n \ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n \nsieve()\ncnt = [0] * (MAX+1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1;\n    cnt[i] = cnt[i+1] = f\n     \nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break\n",
        "writer": "human",
        "rewrite": [
            "MAX = 1000000\nSQRT = 1000\n\nprime = [1] * MAX\nprime[0] = prime[1] = 0\nfor i in range(2, SQRT + 1):\n    if prime[i]:\n        for j in range(i * i, MAX, i):\n            prime[j] = 0\n\ncnt = [0] * (MAX + 1)\nc = 0\nfor i in range(MAX + 1):\n    if prime[i]:\n        c += 1\n    cnt[i] = c\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "MAX = 1000000\nprime = [True] * (MAX + 1)\nprime[0] = prime[1] = False\nfor p in range(2, int(MAX**0.5) + 1):\n    if prime[p]:\n        for i in range(p * p, MAX + 1, p):\n            prime[i] = False\n\ncnt = [0] * (MAX + 1)\nc = 0\nfor i in range(2, MAX + 1):\n    if prime[i]:\n        c += 1\n    cnt[i] = c\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "import math\n\nMAX = 1000000\nprime = [True] * (MAX + 1)\nprime[0] = prime[1] = False\nfor i in range(2, int(math.sqrt(MAX)) + 1):\n    if prime[i]:\n        for j in range(i * i, MAX + 1, i):\n            prime[j] = False\n\ncount = 0\ncnt = [0] * (MAX + 1)\nfor i in range(2, MAX + 1):\n    if prime[i]:\n        count += 1\n    cnt[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "import math\n\nMAX = 1000000\nprimes = [True] * (MAX + 1)\nprimes[0] = primes[1] = False\nfor i in range(2, int(math.sqrt(MAX)) + 1):\n    if primes[i]:\n        for j in range(i * i, MAX + 1, i):\n            primes[j] = False\n\ncount = 0\ncnt = [0] * (MAX + 1)\nfor i in range(2, MAX + 1):\n    if primes[i]:\n        count += 1\n    cnt[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "import math\n\nMAX = 1000000\nis_prime = [True] * (MAX + 1)\nis_prime[0] = is_prime[1] = False\nfor p in range(2, int(math.sqrt(MAX)) + 1):\n    if is_prime[p]:\n        for i in range(p * p, MAX + 1, p):\n            is_prime[i] = False\n\ncnt = [0] * (MAX + 1)\nc = 0\nfor i in range(2, MAX + 1):\n    if is_prime[i]:\n        c += 1\n    cnt[i] = c\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "import math\n\nMAX = 1000000\nis_prime = [True] * (MAX + 1)\nis_prime[0] = is_prime[1] = False\nfor i in range(2, int(math.sqrt(MAX)) + 1):\n    if is_prime[i]:\n        for j in range(i * i, MAX + 1, i):\n            is_prime[j] = False\n\ncount = 0\ncnt = [0] * (MAX + 1)\nfor i in range(1, MAX + 1):\n    if is_prime[i]:\n        count +=1\n    cnt[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "import sys\nimport math as mas\n\ndef sieve(n):\n\tp=[True for i in range(n+1)]\n\tp[0]=p[1]=False\n\tend=int(n**0.5)\n\tfor i in range(2,end+1):\n\t\tif p[i]:\n\t\t\tfor j in range(i*i,n+1,i):\n\t\t\t\tp[j]=False\n\treturn p\n\t\nsosu=sieve(1000010)\nfor i in sys.stdin:\n\tt=int(i)\n\tif t<2:print(0)\n\telif t==2:print(1)\n\telse:print(1+sum(sosu[t] for t in range(3,int(i)+1,2)))\n\n#\ta,b=map(int,i.split())\n#\tprint(gcd(a,b),lcm(a,b))",
        "writer": "human",
        "rewrite": [
            "import sys\nimport math\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\n\nprimes = sieve(1000010)\nfor line in sys.stdin:\n    n = int(line)\n    if n < 2:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        print(1 + sum(primes[i] for i in range(3, n + 1, 2)))",
            "import sys\nimport math\n\ndef count_odd_primes(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return 1 + sum(primes[i] for i in range(3, n + 1, 2))\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_odd_primes(n))",
            "import sys\nimport math\n\ndef count_odd_primes_upto(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for multiple in range(i * i, limit + 1, i):\n                primes[multiple] = False\n    return sum(1 for i in range(3, limit + 1, 2) if primes[i]) + (1 if limit >=2 else 0)\n\n\nfor num_str in sys.stdin:\n    n = int(num_str)\n    print(count_odd_primes_upto(n))",
            "import sys\nimport math\n\ndef count_odd_primes(n):\n    if n < 2: return 0\n    if n == 2: return 1\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for p in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[p]:\n            for i in range(p * p, n + 1, p):\n                is_prime[i] = False\n    return 1 + sum(is_prime[i] for i in range(3, n + 1, 2))\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_odd_primes(n))",
            "import sys\nimport math\n\ndef count_odd_primes(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i * i, limit + 1, i):\n                primes[j] = False\n    return sum(1 for i in range(3, limit + 1, 2) if primes[i]) + (1 if limit >= 2 else 0)\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_odd_primes(n))",
            "import sys\nimport math\n\ndef count_primes(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for p in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[p]:\n            for i in range(p * p, n + 1, p):\n                is_prime[i] = False\n    return sum(1 for i in range(2, n + 1) if is_prime[i])\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_primes(n))"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "import sys\n\n\ndef main():\n    stack = []\n    for x in sys.stdin:\n        x = int(x)\n        if x:\n            stack.append(x)\n        else:\n            print(stack.pop())\n\n\nif __name__ == '__main__':\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            x = int(line)\n            if x:\n                stack.append(x)\n            else:\n                if stack:\n                    print(stack.pop())\n                else:\n                    pass\n\n        except ValueError:\n            pass\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            num = int(line.strip())\n            if num > 0:\n                stack.append(num)\n            elif stack:\n                print(stack.pop())\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            n = int(line)\n            if n:\n                stack.append(n)\n            else:\n                if stack:\n                    print(stack.pop())\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            num = int(line)\n            if num != 0:\n                stack.append(num)\n            else:\n                if stack:\n                    print(stack.pop())\n        except ValueError:\n            continue\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            num = int(line)\n            if num:\n                stack.append(num)\n            elif stack:\n                print(stack.pop())\n        except ValueError:\n            pass\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            value = int(line)\n            if value:\n                stack.append(value)\n            else:\n                if stack:\n                    print(stack.pop())\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switching_railroad_cars():\n  cars = []\n  while True:\n    try:\n      car = int(input())\n      if car == 0:\n        if cars:\n          print(cars.pop(0))\n        else:\n          break\n      else:\n        cars.append(car)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            car = int(input())\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except ValueError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            line = input()\n            car = int(line)\n            if car == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    break\n            else:\n                cars.append(car)\n        except ValueError:\n            break\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    cars = []\n    while True:\n        try:\n            num = int(input())\n            if num == 0:\n                if cars:\n                    print(cars.pop(0))\n                else:\n                    return\n            else:\n                cars.append(num)\n        except ValueError:\n            return\n        except EOFError:\n            return",
            "def switching_railroad_cars():\n    q = []\n    while True:\n        try:\n            n = int(input())\n            if n == 0:\n                if q:\n                    print(q.pop(0))\n                else:\n                    break\n            else:\n                q.append(n)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    queue = []\n    while True:\n        try:\n            car_id = int(input())\n            if car_id == 0:\n                if queue:\n                    print(queue.pop(0))\n                else:\n                    break\n            else:\n                queue.append(car_id)\n        except EOFError:\n            break",
            "def switching_railroad_cars():\n    car_queue = []\n    while True:\n        try:\n            next_car = int(input())\n            if next_car == 0:\n                if car_queue:\n                    print(car_queue.pop(0))\n                else:\n                    break\n            else:\n                car_queue.append(next_car)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "#!/usr/bin/env python\nimport sys\n\ndef function(x):\n    return x*x\n\ndef calculate(d, max):\n    val = d\n    result = 0\n    while val < max:\n        result += function(val) * d\n        val += d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef calculate(d, max_val):\n    result = 0\n    for val in range(d, max_val, d):\n        result += val**2 * d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "import sys\n\ndef calculate(d, max_val):\n  result = sum(val**2 * d for val in range(d, max_val, d))\n  return result\n\nif __name__ == '__main__':\n  for line in sys.stdin:\n    print(calculate(int(line), 600))",
            "import sys\n\ndef calculate(d, max_val):\n    result = 0\n    i = 1\n    while d * i < max_val:\n        result += (d * i) ** 2 * d\n        i += 1\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "import sys\n\ndef calculate(d, max_val):\n    return sum(d * (i * d) ** 2 for i in range(1, max_val // d))\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "import sys\n\ndef calculate(d, max_val):\n    results = [d * (i * d)**2 for i in range(1, max_val // d + 1)]\n    return sum(results)\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "import sys\n\ndef calculate(d, max_val):\n    return sum(d * (i * d)**2 for i in range(1, (max_val + d - 1) // d))\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(d):\n  \"\"\"\n  Computes the approximate area of the shape defined by the lines y = x^2, y = 0, and x = 600 using rectangles of width d.\n\n  Args:\n    d: The width of the rectangles.\n\n  Returns:\n    The approximate area of the shape.\n  \"\"\"\n  s = 0\n  for i in range(1, 600 // d):\n    s += d * (i * d)**2\n  return s\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
        "writer": "machine",
        "rewrite": [
            "def compute_area(d):\n    return sum(d * (i * d)**2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (x**2) for x in range(d, 601, d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return d * sum(x**2 for x in range(d, 601, d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n  n = 600 // d\n  return d * sum( (i*d)**2 for i in range(1, n))\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
            "def compute_area(d):\n    n = 600 // d\n    return d * sum(i**2 * d**2 for i in range(1, n))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    num_rectangles = 600 // d\n    return d**3 * sum(i**2 for i in range(1, num_rectangles))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(d):\n  s = 0\n  for i in range(1, 600 // d):\n    s += d * (i * d) ** 2\n  return s\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
        "writer": "machine",
        "rewrite": [
            "def compute_area(d):\n  return sum(d * (i * d) ** 2 for i in range(1, 600 // d))\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
            "def compute_area(d):\n    return sum(d * (i * d)**2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n  return sum(d * (i * d)**2 for i in range(1, 600//d))\n\nwhile True:\n  try:\n    d = int(input())\n    if d <= 0 or 600 % d != 0:\n      raise ValueError\n    print(compute_area(d))\n  except ValueError:\n    break",
            "def compute_area(d):\n    return sum(d * (i * d)**2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    total_area = 0\n    for i in range(1, 600 // d):\n        total_area += d * (i * d)**2\n    return total_area\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break",
            "def compute_area(d):\n    return sum(d * (i * d)**2 for i in range(1, 600 // d))\n\nwhile True:\n    try:\n        d = int(input())\n        if d <= 0 or 600 % d != 0:\n            raise ValueError\n        print(compute_area(d))\n    except ValueError:\n        break"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def digits(n):\n    if n < 10: return 1\n    c = 0\n    while n > 0:\n        c += 1\n        n = n // 10\n\n    return c\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if (digits(u) > 80 or digits(v) > 80 or digits(s) > 80):\n        print(\"overflow\")\n    else:\n        print(s)",
        "writer": "human",
        "rewrite": [
            "def digits(n):\n    return len(str(n))\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if digits(u) > 80 or digits(v) > 80 or digits(s) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n  return len(str(n)) if n >= 0 else len(str(n)) + 1\n\nn = int(input())\nfor _ in range(n):\n  u = int(input())\n  v = int(input())\n  s = u + v\n  if max(len(str(u)), len(str(v)), len(str(s))) > 80:\n    print(\"overflow\")\n  else:\n    print(s)",
            "def digits(n):\n    return len(str(abs(n)))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if any(len(str(x)) > 80 for x in [u, v, s]):\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n    return len(str(n)) if n >= 0 else len(str(n)) + 1\n\nn = int(input())\nfor _ in range(n):\n    u, v = map(int, [input(), input()])\n    s = u + v\n    if max(len(str(u)), len(str(v)), len(str(s))) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n    return len(str(abs(n)))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if len(str(u)) > 80 or len(str(v)) > 80 or len(str(s)) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if max(len(str(u)), len(str(v)), len(str(s))) > 80:\n        print(\"overflow\")\n    else:\n        print(s)"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    for i in range(int(input())):\n        a=int(input())+int(input())\n        if a>=10**80:\n            print(\"overflow\")\n        else:\n            print(a)\n            \n    \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    for i in range(int(input())):\n        a,b = int(input()),int(input())\n        if a+b >= 10**80:\n            print(\"overflow\")\n        else:\n            print(a+b)\n\nif __name__ == '__main__':\n    main()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = int(input())\n        b = int(input())\n        s = a + b\n        if s >= 10**80:\n            print(\"overflow\")\n        else:\n            print(s)\n\nif __name__ == \"__main__\":\n    solve()",
            "def main():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        y = int(input())\n        sum_xy = x + y\n        if sum_xy >= 10**80:\n            print(\"overflow\")\n        else:\n            print(sum_xy)\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n  t = int(input())\n  for _ in range(t):\n    a = int(input())\n    b = int(input())\n    s = a + b\n    if s >= 10**80:\n      print(\"overflow\")\n    else:\n      print(s)\n\nif __name__ == \"__main__\":\n  solve()",
            "def main():\n    num_tests = int(input())\n    for _ in range(num_tests):\n        num1 = int(input())\n        num2 = int(input())\n        total = num1 + num2\n        if total >= 10**80:\n            print(\"overflow\")\n        else:\n            print(total)\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        y = int(input())\n        if x + y >= 10**80:\n            print(\"overflow\")\n        else:\n            print(x + y)\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "# coding: utf-8\n\nclass Stack(object):\n\tmaxnum = 100\n\tarray = []\n\tfor i in range(100):\n\t\tarray.append(0)\n\tindex = 0\n\tdef push(self, data):\n\t\tself.array[self.index] = data\n\t\tself.index += 1\n\tdef pop(self):\n\t\tprint(self.array[self.index-1])\n\t\tself.index -= 1\n\nroad = Stack()\nwhile True:\n\ttry:\n\t\tnum = int(raw_input())\n\t\tif num != 0:\n\t\t\troad.push(num)\n\t\telse:\n\t\t\troad.pop()\n\texcept EOFError:\n\t\tbreak\n",
        "writer": "human",
        "rewrite": [
            "class Stack:\n    def __init__(self, maxsize=100):\n        self.maxsize = maxsize\n        self.array = [0] * maxsize\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxsize:\n            self.array[self.index] = data\n            self.index += 1\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxsize=100):\n        self.maxsize = maxsize\n        self.list = [0] * maxsize\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.maxsize -1:\n            self.top += 1\n            self.list[self.top] = item\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            item = self.list[self.top]\n            self.top -= 1\n            return item\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped_item = road.pop()\n            if popped_item is not None:\n                print(popped_item)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.items = [0] * capacity\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.capacity - 1:\n            self.top += 1\n            self.items[self.top] = item\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            item = self.items[self.top]\n            self.top -= 1\n            return item\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.data = [0] * capacity\n        self.size = 0\n\n    def push(self, value):\n        if self.size < self.capacity:\n            self.data[self.size] = value\n            self.size += 1\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.size > 0:\n            self.size -= 1\n            return self.data[self.size]\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.stack = [None] * capacity\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.capacity - 1:\n            self.top += 1\n            self.stack[self.top] = item\n        else:\n            print(\"Stack is full\")\n\n    def pop(self):\n        if self.top >= 0:\n            item = self.stack[self.top]\n            self.top -= 1\n            return item\n        else:\n            print(\"Stack is empty\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.elements = [None] * capacity\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.capacity - 1:\n            self.top += 1\n            self.elements[self.top] = item\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            value = self.elements[self.top]\n            self.top -= 1\n            return value\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers():\n  numbers = list(map(int, input().split()))\n  numbers.sort(reverse=True)\n  print(*numbers)",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def sum_of_integers():\n  n = int(input())\n  for _ in range(n):\n    a = input()\n    b = input()\n    if len(a) > 80 or len(b) > 80:\n      print(\"overflow\")\n    else:\n      sum = str(int(a) + int(b))\n      if len(sum) > 80:\n        print(\"overflow\")\n      else:\n        print(sum)",
        "writer": "machine",
        "rewrite": [
            "def sum_of_integers():\n  n = int(input())\n  for _ in range(n):\n    a, b = input(), input()\n    try:\n      sum = str(int(a) + int(b))\n      if len(a) > 80 or len(b) > 80 or len(sum) > 80:\n        print(\"overflow\")\n      else:\n        print(sum)\n    except ValueError:\n      print(\"overflow\")",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        try:\n            a = int(input())\n            b = int(input())\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                print(\"overflow\")\n            else:\n                s = a + b\n                if len(str(s)) > 80:\n                    print(\"overflow\")\n                else:\n                    print(s)\n        except ValueError:\n            print(\"overflow\")",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        try:\n            if len(a) > 80 or len(b) > 80:\n                print(\"overflow\")\n            else:\n                result = int(a) + int(b)\n                if len(str(result)) > 80:\n                    print(\"overflow\")\n                else:\n                    print(result)\n        except ValueError:\n            print(\"overflow\")",
            "def sum_of_integers():\n  n = int(input())\n  for _ in range(n):\n    try:\n      a = int(input())\n      b = int(input())\n      if len(str(a)) > 80 or len(str(b)) > 80:\n        print('overflow')\n      else:\n        s = a + b\n        if len(str(s)) > 80:\n          print('overflow')\n        else:\n          print(s)\n    except ValueError:\n      print('overflow')",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        try:\n            a = int(input())\n            b = int(input())\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                print(\"overflow\")\n            else:\n                result = a + b\n                if len(str(result)) > 80:\n                    print(\"overflow\")\n                else:\n                    print(result)\n        except ValueError:\n            print(\"overflow\")",
            "def sum_of_integers():\n    n = int(input())\n    for _ in range(n):\n        try:\n            a, b = map(int, [input(), input()])\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                print(\"overflow\")\n            else:\n                s = a + b\n                if len(str(s)) > 80:\n                    print(\"overflow\")\n                else:\n                    print(s)\n        except ValueError:\n            print(\"overflow\")"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def solve():\n  n = int(input())\n  for _ in range(n):\n    a = input()\n    b = input()\n    if len(a) > 80 or len(b) > 80:\n      print(\"overflow\")\n    else:\n      sum = str(int(a) + int(b))\n      if len(sum) > 80:\n        print(\"overflow\")\n      else:\n        print(sum)\nsolve()",
        "writer": "machine",
        "rewrite": [
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        try:\n            sum_ab = str(int(a) + int(b))\n            if len(a) > 80 or len(b) > 80 or len(sum_ab) > 80:\n                print(\"overflow\")\n            else:\n                print(sum_ab)\n        except ValueError:\n            print(\"overflow\")\n\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        try:\n            a, b = int(input()), int(input())\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                print(\"overflow\")\n            else:\n                s = a + b\n                if len(str(s)) > 80:\n                    print(\"overflow\")\n                else:\n                    print(s)\n        except ValueError:\n            print(\"overflow\")\n\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = input()\n        b = input()\n        try:\n            if len(a) > 80 or len(b) > 80:\n                raise ValueError\n            result = int(a) + int(b)\n            if len(str(result)) > 80:\n                raise ValueError\n            print(result)\n        except ValueError:\n            print(\"overflow\")\n\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        try:\n            a = int(input())\n            b = int(input())\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                print('overflow')\n                continue\n            res = a + b\n            if len(str(res)) > 80:\n                print('overflow')\n            else:\n                print(res)\n\n        except ValueError:\n            print('overflow')\n\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        try:\n            a = int(input())\n            b = int(input())\n            if 10**80 <= a or 10**80 <=b or 10**80 <= a+b:\n                print(\"overflow\")\n            else:\n                print(a+b)\n        except ValueError:\n            print(\"overflow\")\nsolve()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a, b = input(), input()\n        try:\n            if len(a) > 80 or len(b) > 80: raise ValueError\n            res = str(int(a) + int(b))\n            if len(res) > 80: raise ValueError\n            print(res)\n        except ValueError:\n            print(\"overflow\")\nsolve()"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "def treasure_hunt():\n  x = 0\n  y = 0\n  while True:\n    d, t = map(int, input().split(\",\"))\n    if d == 0 and t == 0:\n      break\n    angle = t * 3.141592653589793 / 180\n    x += d * round(cos(angle), 3)\n    y += d * round(sin(angle), 3)\n  print(int(x), int(y))",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef treasure_hunt():\n  x = 0\n  y = 0\n  while True:\n    d, t = map(int, input().split(\",\"))\n    if d == 0 and t == 0:\n      break\n    angle = math.radians(t)\n    x += d * round(math.cos(angle), 3)\n    y += d * round(math.sin(angle), 3)\n  print(int(round(x)), int(round(y)))",
            "import math\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        d, t = map(int, input().split(','))\n        if d == 0 == t:\n            break\n        rad = math.radians(t)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n    print(round(x), round(y))",
            "import math\n\ndef treasure_hunt():\n    x = y = 0\n    while True:\n        line = input()\n        if line == '0,0':\n            break\n        d, t = map(int, line.split(','))\n        x += d * math.cos(math.radians(t))\n        y += d * math.sin(math.radians(t))\n    print(round(x), round(y))",
            "import cmath\n\ndef treasure_hunt():\n    x = y = 0\n    while True:\n        d, t = map(int, input().split(','))\n        if d == t == 0:\n            break\n        z = cmath.rect(d, math.radians(t))\n        x += z.real\n        y += z.imag\n    print(round(x), round(y))",
            "import math\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        try:\n            d, t = map(int, input().split(','))\n            if d == 0 and t == 0:\n                break\n            angle = math.radians(t)\n            x += d * math.cos(angle)\n            y += d * math.sin(angle)\n        except ValueError:\n            break\n    print(round(x), round(y))",
            "import math\n\ndef treasure_hunt():\n  x = y = 0\n  while True:\n    try:\n      d, t = map(int, input().split(','))\n      if not d and not t:\n        break\n      x += d * math.cos(math.radians(t))\n      y += d * math.sin(math.radians(t))\n    except ValueError:\n      break\n  print(round(x), round(y))"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "def treasure_hunt():\n  x = 0\n  y = 0\n  while True:\n    d, t = map(int, input().split(\",\"))\n    if d == 0 and t == 0:\n      break\n    radians = t * 3.141592653589793 / 180\n    x += int(d *  cos(radians))\n    y += int(d * sin(radians))\n  print(x)\n  print(y)",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef treasure_hunt():\n    x = 0\n    y = 0\n    while True:\n        d, t = map(int, input().split(','))\n        if d == 0 and t == 0:\n            break\n        radians = math.radians(t)\n        x += int(d * math.cos(radians))\n        y += int(d * math.sin(radians))\n    print(x)\n    print(y)",
            "import math\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        try:\n            d, t = map(int, input().split(','))\n            if d == 0 == t:\n                break\n            x += int(d * math.cos(math.radians(t)))\n            y += int(d * math.sin(math.radians(t)))\n        except ValueError:\n            break\n    print(x, y)",
            "import math\n\ndef treasure_hunt():\n    x = y = 0\n    while True:\n        line = input()\n        if line == '0,0':\n            break\n        d, t = map(int, line.split(','))\n        rad = math.radians(t)\n        x += int(d * math.cos(rad))\n        y += int(d * math.sin(rad))\n    print(x)\n    print(y)",
            "import math\n\ndef treasure_hunt():\n    x, y = 0, 0\n    while True:\n        try:\n            d, t = map(int, input().split(','))\n            if d == t == 0:\n                break\n            x += round(d * math.cos(math.radians(t)))\n            y += round(d * math.sin(math.radians(t)))\n\n        except ValueError:\n            break\n    print(x)\n    print(y)",
            "import math\n\ndef treasure_hunt():\n    x = 0\n    y = 0\n    while True:\n        try:\n            d, t = map(int, input().split(','))\n            if not d and not t:\n                break\n            r = math.radians(t)\n            x += int(d * math.cos(r))\n            y += int(d * math.sin(r))\n        except ValueError:\n            break\n    print(x,y)",
            "import math\n\ndef treasure_hunt():\n    x = y = 0\n    while True:\n        try:\n            d, t = map(int, input().split(\",\"))\n            if all([d==0, t==0]):\n                break\n            ang = math.radians(t)\n            x += int(d * math.cos(ang))\n            y += int(d * math.sin(ang))\n        except ValueError:\n            break\n    print(x)\n    print(y)"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        num=list(map(int,line.split()))\n        \n        num.sort()\n        num.reverse()\n        print(' '.join(map(str,num)))\n        \n            \n                \n    \nSortingFiveNumbers()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef sort_five_numbers():\n    for line in sys.stdin:\n        numbers = sorted(map(int, line.split()), reverse=True)\n        print(*numbers)\n\nsort_five_numbers()",
            "import sys\n\ndef sort_five_numbers():\n    for line in sys.stdin:\n        print(*sorted(map(int, line.split()), reverse=True))\n\nsort_five_numbers()",
            "import sys\n\ndef sort_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(*numbers)\n\nsort_numbers()",
            "import sys\n\ndef sort_numbers():\n    for line in sys.stdin:\n        print(*sorted(map(int, line.split()), reverse=True))\n\nsort_numbers()",
            "import sys\n\ndef sort_numbers():\n  for line in sys.stdin:\n    numbers = sorted(map(int, line.split()), reverse=True)\n    print(' '.join(map(str, numbers)))\n\nsort_numbers()",
            "import sys\n\ndef sort_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(*numbers)\n\nsort_numbers()"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "from math import *\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
        "writer": "human",
        "rewrite": [
            "from math import *\n\ndef rad(n):\n    return radians(n)\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(round(x)))\n        print(int(round(y)))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "import math\n\nx, y = 0, 0\nna = math.radians(90)\nwhile True:\n    d, a = map(int, input().split(','))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += math.cos(na) * d\n    y += math.sin(na) * d\n    na -= math.radians(a)",
            "import math\n\nx, y = 0, 0\nna = 90\nwhile True:\n    line = input()\n    if line == \"0,0\":\n        print(int(x))\n        print(int(y))\n        break\n    d, a = map(int, line.split(\",\"))\n    ang = math.radians(na)\n    x += math.cos(ang) * d\n    y += math.sin(ang) * d\n    na -= a",
            "import math\n\nx = y = 0\nna = math.radians(90)\nwhile True:\n    d, a = map(int, input().split(','))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += math.cos(na) * d\n    y += math.sin(na) * d\n    na -= math.radians(a)",
            "import math\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(','))\n    if not d and not a:\n        print(round(x))\n        print(round(y))\n        break\n    rad_na = math.radians(na)\n    x += math.cos(rad_na) * d\n    y += math.sin(rad_na) * d\n    na -= a",
            "import math\n\nx = y = 0\nna = math.radians(90)\nwhile True:\n    d, a = map(int, input().split(','))\n    if d == 0 and a == 0:\n        print(round(x))\n        print(round(y))\n        break\n    x += math.cos(na) * d\n    y += math.sin(na) * d\n    na -= math.radians(a)"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    x = math.cos(rad)\n    y = math.sin(rad)\n    return x,y\n\ndef run():\n    x, y = 0,0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        _x, _y = move(dig)\n        dig -= d\n        x += r * _x\n        y += r * _y\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        rad = math.radians(angle)\n        x += r * math.cos(rad)\n        y += r * math.sin(rad)\n        angle -= d\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = math.radians(90)\n    while True:\n        line = input()\n        if line == '0,0':\n            break\n        r, d = map(int, line.split(','))\n        x += r * math.cos(angle)\n        y += r * math.sin(angle)\n        angle -= math.radians(d)\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        angle -= d\n        x += r * math.cos(math.radians(angle))\n        y += r * math.sin(math.radians(angle))\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    direction = 90\n    while True:\n        r, delta_direction = map(int, input().split(','))\n        if r == 0 and delta_direction == 0:\n            break\n        direction -= delta_direction\n        x += r * math.cos(math.radians(direction))\n        y += r * math.sin(math.radians(direction))\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, delta_angle = map(int, input().split(','))\n        if r == 0 and delta_angle == 0:\n            break\n        angle += delta_angle\n        x += r * math.cos(math.radians(angle))\n        y += r * math.sin(math.radians(angle))\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort(num):\n   l = len(num)\n   for i in range(0,l):\n        for j in range(0,l-i-1):\n            if num[j] < num[j+1]:\n               temp = num[j]\n               num[j] = num[j+1]\n               num[j+1]=temp\n   print(num[0],end='')\n   for i in range(1,len(num)-1):\n       print('',num[i],end='')\n   print('',num[i+1])\n\na , b , c , d , e = map(int,input().split())\nnum = []\nnum.append(a)\nnum.append(b)\nnum.append(c)\nnum.append(d)\nnum.append(e)\nsort(num)",
        "writer": "human",
        "rewrite": [
            "def sort(num):\n    num.sort(reverse=True)\n    print(*num)\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort(num):\n    num.sort(reverse=True)\n    print(*num, sep=' ')\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort_and_print(numbers):\n    numbers.sort(reverse=True)\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_and_print(numbers)",
            "def sort_and_print(nums):\n  nums.sort(reverse=True)\n  print(*nums, sep=' ')\n\na, b, c, d, e = map(int, input().split())\nnums = [a, b, c, d, e]\nsort_and_print(nums)",
            "def sort_and_print(numbers):\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_and_print(numbers)",
            "def sort_and_print(nums):\n    nums.sort(reverse=True)\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnums = [a, b, c, d, e]\nsort_and_print(nums)"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers():\n  a, b, c, d, e = map(int, input().split())\n  numbers = [a, b, c, d, e]\n  numbers.sort(reverse=True)\n  print(*numbers)",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers():\n  numbers = sorted(map(int, input().split()), reverse=True)\n  print(*numbers)",
            "def sort_five_numbers():\n    print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n    numbers = list(map(int, input().split()))\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))",
            "def sort_five_numbers():\n  print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n    nums = list(map(int, input().split()))\n    nums.sort(reverse=True)\n    print(*nums)",
            "def sort_five_numbers():\n    print(*sorted(map(int,input().split()), reverse=True))"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decoder(text):\n  \"\"\"\n  Decodes a text encrypted by Caesar cipher.\n  \"\"\"\n  for shift in range(1, 26):\n    decoded_text = ''.join([chr((ord(char) - shift - 97) % 26 + 97) if char.isalpha() else char for char in text])\n    if \"the\" in decoded_text or \"this\" in decoded_text or \"that\" in decoded_text:\n      return decoded_text\n  return text",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decoder(text):\n  for shift in range(1,26):\n    decoded_text = \"\".join([chr(((ord(c)-97-shift)%26)+97) if c.isalpha() else c for c in text])\n    if \"the\" in decoded_text.lower() or \"this\" in decoded_text.lower() or \"that\" in decoded_text.lower():\n      return decoded_text\n  return text",
            "def caesar_cipher_decoder(text):\n    result = \"\"\n    for char in text:\n        if 'a' <= char <= 'z':\n            result += chr(((ord(char) - ord('a')) % 26) + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr(((ord(char) - ord('A')) % 26) + ord('A'))\n        else:\n            result += char\n    return result",
            "def caesar_cipher_decoder(text):\n    for shift in range(1, 26):\n        decoded_text = \"\"\n        for char in text:\n            if 'a' <= char <= 'z':\n                decoded_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n            elif 'A' <= char <= 'Z':\n                decoded_char = chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))\n            else:\n                decoded_char = char\n            decoded_text += decoded_char\n        if \"the\" in decoded_text.lower() or \"this\" in decoded_text.lower() or \"that\" in decoded_text.lower():\n            return decoded_text\n    return text",
            "def caesar_cipher_decoder(text):\n    result = \"\"\n    for char in text:\n        if 'a' <= char <= 'z':\n            for shift in range(1, 26):\n                decoded_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n                if decoded_char in \"thethisthat\":\n                    result += decoded_char\n                    break\n            else:\n                result += char\n        elif 'A' <= char <= 'Z':\n             for shift in range(1, 26):\n                decoded_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n                if decoded_char.lower() in \"thethisthat\":\n                    result += decoded_char\n                    break\n             else:\n                result += char\n\n        else:\n            result += char\n    return result",
            "def caesar_cipher_decoder(text):\n  for s in range(1, 26):\n    decoded = \"\"\n    for c in text:\n      if c.isalpha():\n        start = ord('a') if c.islower() else ord('A')\n        decoded += chr((ord(c) - start - s) % 26 + start)\n      else:\n        decoded += c\n    if any(word in decoded.lower() for word in [\"the\", \"this\", \"that\"]):\n      return decoded\n  return text",
            "def caesar_cipher_decoder(text):\n    decoded_texts = [\"\".join([chr(((ord(c) - 97 - s) % 26 + 97) if c.isalpha() and 'a' <= c <= 'z' else (chr(((ord(c) - 65 - s) % 26 + 65) if c.isalpha() and 'A' <= c <= 'Z' else c)) for c in text]) for s in range(1,26)]\n    for decoded_text in decoded_texts:\n        if \"the\" in decoded_text.lower() or \"this\" in decoded_text.lower() or \"that\" in decoded_text.lower():\n            return decoded_text\n    return text"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decode(text):\n  \"\"\"\n  Decodes a text encrypted by Caesar cipher.\n  \"\"\"\n  for shift in range(1, 26):\n    decoded_text = ''.join([chr((ord(char) - shift - 97) % 26 + 97) if char.isalpha() else char for char in text])\n    if 'the' in decoded_text or 'this' in decoded_text or 'that' in decoded_text:\n      return decoded_text\n  return \"No valid decoding found.\"",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decode(text):\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start) % 26 + start)\n            result += shifted_char\n        else:\n            result += char\n    return result",
            "def caesar_cipher_decode(text):\n  for shift in range(1, 26):\n    decoded_text = \"\"\n    for char in text:\n      if 'a' <= char <= 'z':\n        decoded_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n      elif 'A' <= char <= 'Z':\n        decoded_char = chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))\n      else:\n        decoded_char = char\n      decoded_text += decoded_char\n    if any(word in decoded_text for word in [\"the\", \"this\", \"that\"]):\n      return decoded_text\n  return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    decoded_texts = [''.join([chr((ord(c) - shift - 97) % 26 + 97) if c.isalpha() else c for c in text]) for shift in range(1, 26)]\n    for decoded_text in decoded_texts:\n        if any(word in decoded_text for word in [\"the\", \"this\", \"that\"]):\n            return decoded_text\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    for shift in range(1, 26):\n        decoded = \"\"\n        for char in text:\n            if 'a' <= char <= 'z':\n                decoded += chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n            elif 'A' <= char <= 'Z':\n                decoded += chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))\n            else:\n                decoded += char\n        if any(x in decoded for x in (\"the\", \"this\", \"that\")):\n            return decoded\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n    results = []\n    for shift in range(1, 26):\n        decoded = \"\"\n        for char in text:\n            if char.isalpha():\n                start = ord('a') if char.islower() else ord('A')\n                decoded += chr((ord(char) - start - shift) % 26 + start)\n            else:\n                decoded += char\n        results.append(decoded)\n\n    for res in results:\n        if any(word in res for word in [\"the\", \"this\", \"that\"]):\n            return res\n    return \"No valid decoding found.\"",
            "def caesar_cipher_decode(text):\n  for s in range(1,26):\n    decoded = \"\"\n    for c in text:\n      if c.isalpha():\n        start = ord('a') if c.islower() else ord('A')\n        decoded += chr((ord(c) - start - s) % 26 + start)\n      else:\n        decoded += c\n    if any(w in decoded for w in [\"the\", \"this\", \"that\"]):\n      return decoded\n  return \"No valid decoding found.\""
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=input()\nprint(factorial(int(n)))",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "import math\nn = int(input())\nprint(math.factorial(n))",
            "def factorial(n):\n    res = 1\n    while n > 1:\n        res *= n\n        n -= 1\n    return res\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    return 1 if n <=1 else n * factorial(n-1)\n\nn = int(input())\nprint(factorial(n))",
            "from functools import reduce\nimport operator\n\ndef factorial(n):\n  return reduce(operator.mul, range(1, n + 1), 1)\n\nn = int(input())\nprint(factorial(n))"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "ca = ord('a')\ndef convert(s, d):\n    res = []\n    for c in s:\n        if c not in ' .':\n            c = chr(((ord(c) - ca + d) % 26) + ca)\n        res.append(c)\n    return \"\".join(res)\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if \"the\" in s0 or \"this\" in s0 or \"that\" in s0:\n            print(s0)\n            break\n\n",
        "writer": "human",
        "rewrite": [
            "ca = ord('a')\ndef convert(s, d):\n    return ''.join([chr(((ord(c) - ca + d) % 26) + ca) if c not in ' .' else c for c in s])\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s,d)\n        if any(x in s0 for x in [\"the\", \"this\", \"that\"]):\n            print(s0)\n            break",
            "import string\n\ndef caesar_cipher(text, shift):\n    result = ''\n    for char in text:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + shift) % 26 + start)\n        elif char.isspace():\n            shifted_char = ' '\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result\n\nkeywords = [\"the\", \"this\", \"that\"]\nfor line in open(0):\n    text = line.strip()\n    for shift in range(26):\n        decrypted_text = caesar_cipher(text, shift)\n        if any(keyword in decrypted_text for keyword in keywords):\n            print(decrypted_text)\n            break",
            "def decipher(text):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for key in range(26):\n        decrypted = \"\"\n        for char in text:\n            if 'a' <= char <= 'z':\n                decrypted += alphabet[(alphabet.index(char) - key) % 26]\n            elif 'A' <= char <= 'Z':\n                decrypted += alphabet[(alphabet.index(char.lower()) - key) % 26].upper()\n            else:\n                decrypted += char\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n    return None\n\nfor line in open(0):\n  text = line.strip()\n  result = decipher(text)\n  if result:\n    print(result)",
            "def caesar_crack(ciphertext):\n    alphabet = string.ascii_lowercase\n    for key in range(26):\n        plaintext = ''.join([alphabet[(alphabet.find(c) - key) % 26] if c.isalpha() and c.islower() else c for c in ciphertext])\n        if any(word in plaintext for word in [\"the\", \"this\", \"that\"]):\n            return plaintext\n    return None\n\nimport string\nfor line in open(0):\n    encrypted_line = line.strip()\n    decrypted_line = caesar_crack(encrypted_line)\n    if decrypted_line:\n        print(decrypted_line)",
            "import string\n\ndef decrypt(text):\n    for shift in range(26):\n        decrypted = \"\"\n        for char in text:\n            if char.isalpha():\n                start = ord('a') if char.islower() else ord('A')\n                decrypted += chr((ord(char) - start - shift) % 26 + start)\n            else:\n                decrypted += char\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n    return None\n\nfor line in open(0):\n    print(decrypt(line.strip()))",
            "def solve():\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for line in open(0):\n        s = line.strip()\n        for i in range(26):\n            t = \"\"\n            for c in s:\n                if 'a' <= c <= 'z':\n                    t += alpha[(alpha.index(c) - i) % 26]\n                elif 'A' <= c <= 'Z':\n                    t += alpha[(alpha.index(c.lower()) - i) % 26].upper()\n                else:\n                    t += c\n            if any(x in t for x in [\"the\", \"this\", \"that\"]):\n                print(t)\n                break\nsolve()"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial():\n  n = int(input())\n  fact = 1\n  for i in range(1, n + 1):\n    fact *= i\n  print(fact)\nfactorial()",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nn = int(input())\nprint(factorial(n))",
            "import math\n\nn = int(input())\nprint(math.factorial(n))",
            "def factorial(n):\n    if n < 0:\n        return None\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nnumber = int(input())\nresult = factorial(number)\nif result is None:\n    print(\"Factorial is not defined for negative numbers.\")\nelse:\n    print(result)",
            "from functools import reduce\nimport operator\n\nn = int(input())\nprint(reduce(operator.mul, range(1, n + 1), 1))",
            "def factorial_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n\nn = int(input())\nprint(factorial_recursive(n))",
            "n = int(input())\nfact = 1\ni = 1\nwhile i <= n:\n    fact *= i\n    i += 1\nprint(fact)"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def Factorial(n):\n    if n <= 1: return 1\n    return n*Factorial(n-1)\nprint(Factorial(int(input())))\n",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n  result = 1\n  for i in range(1, n + 1):\n    result *= i\n  return result\n\nprint(factorial(int(input())))",
            "import math\nprint(math.factorial(int(input())))",
            "def factorial(n):\n    res = 1\n    while n > 1:\n        res *= n\n        n -= 1\n    return res\n\nprint(factorial(int(input())))",
            "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    product = 1\n    for i in range(1, n + 1):\n      product *= i\n    return product\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "from functools import reduce\nimport operator\n\ndef factorial(n):\n    return reduce(operator.mul, range(1, n + 1), 1)\n\nprint(factorial(int(input())))"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    IN=input()\n    IN.upper()\n\n    print(IN.upper())\n        \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "'''\nCreated on Mar 22, 2013\n\n@author: wukc\n'''\nfrom sys import stdin\n\ndef toupper(x):\n    return chr(ord(x)-32) if x.islower() else x \n\ns=stdin.readline()\nprint(\"\".join(map(toupper,s)[:-1]))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef toupper(x):\n  return x.upper()\n\ns = sys.stdin.readline()\nprint(\"\".join(map(toupper, s))[:-1])",
            "import sys\n\nprint(sys.stdin.readline().upper()[:-1])",
            "import sys\n\nprint(sys.stdin.readline().rstrip().upper())",
            "import sys\n\nprint(sys.stdin.readline().strip().upper())",
            "import sys\n\nprint(sys.stdin.readline().upper().rstrip())",
            "import sys\n\nprint(sys.stdin.readline().strip().upper())"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize(text):\n  result = ''\n  for char in text:\n    if char.islower():\n      result += char.upper()\n    else:\n      result += char\n  return result",
        "writer": "machine",
        "rewrite": [
            "def capitalize(text):\n  return text.upper()",
            "def capitalize(text):\n  return \"\".join(c.upper() if c.islower() else c for c in text)",
            "def capitalize(text):\n    return ''.join(c.upper() if c.islower() else c for c in text)",
            "def capitalize(text):\n    return \"\".join(map(str.upper, filter(str.islower, text)))",
            "def capitalize(text):\n    result = \"\"\n    for c in text:\n        result += c.upper() if c.islower() else c\n    return result",
            "def capitalize(text):\n  return \"\".join([c.upper() if c.islower() else c for c in text])"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial():\n  n = int(input())\n  fact = 1\n  for i in range(1, n+1):\n    fact = fact * i\n  print(fact)\nfactorial()",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nn = int(input())\nprint(factorial(n))",
            "import math\n\nn = int(input())\nprint(math.factorial(n))",
            "def factorial(n):\n    fact = 1\n    for i in range(1, n + 1):\n        fact *= i\n    return fact\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    result = 1\n    for i in range(1, n + 1):\n      result *= i\n    return result\n\nnumber = int(input())\nprint(factorial(number))",
            "import operator\nfrom functools import reduce\n\nn = int(input())\nprint(reduce(operator.mul, range(1, n + 1), 1))",
            "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        result = 1\n        while(num > 0):\n            result *= num\n            num -= 1\n        return result\n\nnumber = int(input())\nprint(factorial(number))"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def chg(s,n):\n    res=\"\"\n    for i in s:\n        o=ord(i)\n        if 97<=o<=122:\n            if o+n<=122:\n                res+=chr(o+n)\n            else:\n                res+=chr(o+n-26)\n        else:\n            res+=i\n    return res\n\nwhile True:\n    try:\n        s=input()\n        for i in range(25,-1,-1):\n            c=chg(s,i)\n            e=c.split()\n            if \"the\" in e or \"this\" in e or \"that\" in e:\n                print(c)\n                break\n    except:\n        break",
        "writer": "human",
        "rewrite": [
            "def chg(s,n):\n    return ''.join([chr(((ord(i) - 97 + n) % 26) + 97) if 'a' <= i <= 'z' else i for i in s])\n\nwhile True:\n    try:\n        s = input()\n        for i in range(25, -1, -1):\n            c = chg(s, i)\n            if any(x in c.split() for x in [\"the\", \"this\", \"that\"]):\n                print(c)\n                break\n    except EOFError:\n        break",
            "import string\n\ndef caesar_cipher(text, shift):\n    result = ''\n    for char in text:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + shift) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result\n\nwhile True:\n    try:\n        text = input()\n        for shift in range(25, -1, -1):\n            decrypted_text = caesar_cipher(text, -shift)\n            words = decrypted_text.split()\n            if any(word in words for word in [\"the\", \"this\", \"that\"]):\n                print(decrypted_text)\n                break\n    except EOFError:\n        break",
            "def decrypt(text, shift):\n    result = ''\n    for char in text:\n        if 'a' <= char <= 'z':\n            decrypted_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n        elif 'A' <= char <= 'Z':\n            decrypted_char = chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))\n        else:\n            decrypted_char = char\n        result += decrypted_char\n    return result\n\nwhile True:\n    try:\n        text = input()\n        for shift in range(26):\n            decrypted = decrypt(text, shift)\n            if any(word in decrypted.lower().split() for word in [\"the\", \"this\", \"that\"]):\n                print(decrypted)\n                break\n    except EOFError:\n        break",
            "def caesar(text, shift):\n    result = ''\n    for char in text:\n        if 'a' <= char <= 'z':\n            result += chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        text = input()\n        for shift in range(26):\n            decrypted = caesar(text, -shift)\n            if any(word in decrypted.lower().split() for word in [\"the\", \"this\", \"that\"]):\n                print(decrypted)\n                break\n    except EOFError:\n        break",
            "def shift_chars(text, shift):\n    result = \"\"\n    for char in text:\n        if 'a' <= char <= 'z':\n            shifted_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n        elif 'A' <= char <= 'Z':\n            shifted_char = chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result\n\nwhile True:\n    try:\n        cipher = input()\n        for i in range(26):\n            plain = shift_chars(cipher, -i)\n            if any(word in plain.split() for word in [\"the\", \"this\", \"that\"]):\n                print(plain)\n                break\n    except EOFError:\n        break",
            "def caesar_decrypt(text, shift):\n    result = \"\"\n    for char in text:\n        if 'a' <= char <= 'z':\n            result += chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        ciphertext = input()\n        for shift in range(26):\n            plaintext = caesar_decrypt(ciphertext, shift)\n            if any(word in plaintext.lower().split() for word in [\"the\", \"this\", \"that\"]):\n                print(plaintext)\n                break\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize(text):\n  result = \"\"\n  for char in text:\n    if char.islower():\n      result += char.upper()\n    else:\n      result += char\n  return result",
        "writer": "machine",
        "rewrite": [
            "def capitalize(text):\n  return \"\".join(char.upper() if char.islower() else char for char in text)",
            "def capitalize(text):\n    return ''.join(c.upper() if c.islower() else c for c in text)",
            "def capitalize(text):\n  return \"\".join(c.upper() if c.islower() else c for c in text)",
            "def capitalize(text):\n    return \"\".join([c.upper() if c.islower() else c for c in text])",
            "def capitalize(text):\n    return \"\".join(map(lambda x: x.upper() if x.islower() else x, text))",
            "def capitalize(text):\n    return text.upper()"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def crack_ball(v):\n  t = v / 9.8\n  y = 4.9 * t**2\n  floor = (y + 5) // 5\n  return floor",
        "writer": "machine",
        "rewrite": [
            "def crack_ball(v):\n  return (v**2 / 19.6 + 5) // 5",
            "def crack_ball(v):\n    return (v**2 / 19.6 + 1) // 1",
            "def crack_ball(v):\n  return (v**2 / 19.6 + 5) // 5",
            "def crack_ball(v):\n    return (v**2 / 19.6 + 5) // 5",
            "def crack_ball(v):\n  return (v**2 / 19.6 + 1) // 1",
            "def crack_ball(v):\n  return (v**2 / 19.6 + 5) // 5"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def crack_ball():\n  while True:\n    try:\n      v = float(input())\n      t = v / 9.8\n      y = 4.9 * t**2\n      floor = (y + 5) / 5\n      print(int(floor))\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            print(int((v**2/(2*9.8)+5)//5))\n        except EOFError:\n            break",
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            print(int((v**2 / 19.6 + 1) // 1))\n        except EOFError:\n            break",
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            height = v**2 / (2 * 9.8)\n            floor = (height + 5) // 5\n            print(floor)\n        except EOFError:\n            break",
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            floor = int((v**2 / 19.6 + 1))\n            print(floor)\n\n        except EOFError:\n            break",
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            print(int((v**2 / 19.6 + 1) // 1))\n        except EOFError:\n            break",
            "def crack_ball():\n    while True:\n        try:\n            v = float(input())\n            height = v**2 / (2 * 9.8)\n            floor = (height + 5) // 5\n            print(floor)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def check_parallelism():\n  n = int(input())\n  for _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n    slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n    if slope1 == slope2:\n      print(\"YES\")\n    else:\n      print(\"NO\")",
        "writer": "machine",
        "rewrite": [
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        try:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            if abs(slope1 - slope2) < 1e-6:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        except ZeroDivisionError:\n            if x2 == x1 and x4 == x3:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        try:\n            if (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        except ZeroDivisionError:\n            if x1 == x2 and x3 == x4:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (y2 - y1) * (x4 - x3):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def check_parallelism():\n  n = int(input())\n  for _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    slope1 = (y2 - y1) / (x2 - x1) if x2 != x1 else float('inf')\n    slope2 = (y4 - y3) / (x4 - x3) if x4 != x3 else float('inf')\n    if slope1 == slope2:\n      print(\"YES\")\n    else:\n      print(\"NO\")",
        "writer": "machine",
        "rewrite": [
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        try:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            if abs(slope1 - slope2) < 1e-6:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        except ZeroDivisionError:\n            if x2 == x1 and x4 == x3:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (y2 - y1) * (x4 - x3) == (y4 - y3) * (x2 - x1):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        try:\n            if (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        except ZeroDivisionError:\n            if x1 == x2 and x3 == x4:\n                print(\"YES\")\n            else:\n                print(\"NO\")",
            "def check_parallelism():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n        if (x2 == x1 and x4 == x3) or (x2 != x1 and x4 != x3 and (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3)):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def cross(x, y):\n    return (x.conjugate() * y).imag\n\ndef is_parallel(x, y):\n    if abs(cross(x, y)) < 1e-10:\n        return True\n    return False\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2, y2) - complex(x1, y1)\n    b = complex(x4, y4) - complex(x3, y3)    \n    if is_parallel(a, b):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "def cross(x, y):\n    return (x.conjugate() * y).imag\n\ndef is_parallel(x, y):\n    return abs(cross(x, y)) < 1e-10\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2 - x1, y2 - y1)\n    b = complex(x4 - x3, y4 - y3)\n    print('YES' if is_parallel(a, b) else 'NO')",
            "def is_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    return abs((x2 - x1) * (y4 - y3) - (x4 - x3) * (y2 - y1)) < 1e-10\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    print('YES' if is_parallel(x1, y1, x2, y2, x3, y3, x4, y4) else 'NO')",
            "def is_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    dx1 = x2 - x1\n    dy1 = y2 - y1\n    dx2 = x4 - x3\n    dy2 = y4 - y3\n    return abs(dx1 * dy2 - dy1 * dx2) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    print(\"YES\" if is_parallel(x1, y1, x2, y2, x3, y3, x4, y4) else \"NO\")",
            "def is_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    return abs((x2 - x1) * (y4 - y3) - (y2 - y1) * (x4 - x3)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    print(\"YES\" if is_parallel(x1, y1, x2, y2, x3, y3, x4, y4) else \"NO\")",
            "def are_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    return abs((x2 - x1)*(y4 - y3) - (x4 - x3)*(y2 - y1)) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    print('YES' if are_parallel(x1, y1, x2, y2, x3, y3, x4, y4) else 'NO')",
            "def is_parallel(a, b):\n  return abs(a.real * b.imag - a.imag * b.real) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n  x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n  a = complex(x2 - x1, y2 - y1)\n  b = complex(x4 - x3, y4 - y3)\n  print(\"YES\" if is_parallel(a, b) else \"NO\")"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n  while True:\n    n = int(input())\n    if n == 0:\n      break\n    nums = [int(input()) for _ in range(n)]\n    max_so_far = nums[0]\n    current_max = nums[0]\n    for i in range(1, n):\n      current_max = max(nums[i], current_max + nums[i])\n      max_so_far = max(max_so_far, current_max)\n    print(max_so_far)\n\nmax_sum_sequence()",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = list(map(int, [input() for _ in range(n)]))\n        max_so_far = nums[0]\n        current_max = nums[0]\n        for i in range(1,n):\n            current_max = max(nums[i], current_max + nums[i])\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n\nmax_sum_sequence()",
            "def max_subarray_sum():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        arr = [int(x) for x in input().split()]\n        max_so_far = arr[0]\n        curr_max = arr[0]\n        for i in range(1, n):\n            curr_max = max(arr[i], curr_max + arr[i])\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)\n\nmax_subarray_sum()",
            "def max_sum_subsequence():\n    while True:\n        try:\n            n = int(input())\n            if n == 0:\n                break\n            numbers = [int(input()) for _ in range(n)]\n            max_sum = numbers[0]\n            current_sum = numbers[0]\n            for number in numbers[1:]:\n                current_sum = max(number, current_sum + number)\n                max_sum = max(max_sum, current_sum)\n            print(max_sum)\n        except EOFError:\n            break\n\nmax_sum_subsequence()",
            "def find_max_subarray_sum():\n    while True:\n        try:\n            n = int(input())\n            if n == 0:\n                break\n            numbers = [int(input()) for _ in range(n)]\n            max_so_far = numbers[0]\n            current_max = numbers[0]\n            for x in numbers[1:]:\n                current_max = max(x, current_max + x)\n                max_so_far = max(max_so_far, current_max)\n            print(max_so_far)\n        except EOFError:\n            break\n\nfind_max_subarray_sum()",
            "def max_subarray_sum():\n    while True:\n        try:\n            n = int(input())\n            if n == 0:\n                break\n            a = [int(input()) for _ in range(n)]\n            max_ending_here = a[0]\n            max_so_far = a[0]\n            for i in range(1, n):\n                max_ending_here = max(a[i], max_ending_here + a[i])\n                max_so_far = max(max_so_far, max_ending_here)\n            print(max_so_far)\n        except EOFError:\n            break\n\nmax_subarray_sum()",
            "def findMaxSubarraySum():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        arr = [int(input()) for _ in range(n)]\n        max_ending_here = arr[0]\n        max_so_far = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        print(max_so_far)\n\nfindMaxSubarraySum()"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N, v = 1, 0.0\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            else:\n                N += 1\n\nif __name__ == \"__main__\":\n    solve()\n",
        "writer": "human",
        "rewrite": [
            "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin.readlines()]\n    for v0 in vs:\n        l,r = 1,10**9\n        while l<=r:\n            mid = (l+r)//2\n            v = math.sqrt(2*9.8*(5*mid-5))\n            if v>v0:\n                r = mid -1\n            else:\n                l = mid + 1\n        print(l)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.readlines()):\n        n = math.ceil((v0**2)/(2*9.8*5) + 1)\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.readlines()):\n        n = 1\n        while math.sqrt(2 * 9.8 * (5 * n - 5)) <= v0:\n            n += 1\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.readlines()):\n        l, r = 1, 10**7\n        while l < r:\n            m = (l + r) // 2\n            if math.sqrt(2 * 9.8 * (5 * m - 5)) > v0:\n                r = m\n            else:\n                l = m + 1\n        print(l)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.readlines()):\n        n = int((v0**2)/(98) + 1) +1\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.readlines()):\n        low = 1\n        high = 10**9\n        while low <= high:\n            mid = (low + high) // 2\n            v = math.sqrt(2 * 9.8 * (5 * mid - 5))\n            if v > v0:\n                high = mid - 1\n            else:\n                low = mid + 1\n        print(low)\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import sys\n\ndef solve(numbers):\n    max = -sys.maxsize\n    for i in range(0, len(numbers)):\n        sum = 0\n        for j in range(i, len(numbers)):\n            sum += numbers[j]\n            if sum > max:\n                max = sum\n    return max\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = []\n    for i in range(0, n):\n        numbers.append(int(input()))\n\n    print(solve(numbers))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve(numbers):\n    max_so_far = -sys.maxsize -1\n    current_max = 0\n    for x in numbers:\n        current_max += x\n        if max_so_far < current_max:\n            max_so_far = current_max\n        if current_max < 0:\n            current_max = 0\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(nums):\n    max_so_far = -sys.maxsize -1\n    current_max = 0\n    for num in nums:\n        current_max += num\n        if max_so_far < current_max:\n            max_so_far = current_max\n        if current_max < 0:\n            current_max = 0\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize - 1\n    current_sum = 0\n    for number in numbers:\n        current_sum += number\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(nums):\n    max_so_far = -sys.maxsize -1\n    for i in range(len(nums)):\n        current_max = 0\n        for j in range(i, len(nums)):\n            current_max += nums[j]\n            max_so_far = max(max_so_far, current_max)\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_so_far = -sys.maxsize - 1\n    for i in range(len(numbers)):\n        current_sum = 0\n        for j in range(i, len(numbers)):\n            current_sum += numbers[j]\n            max_so_far = max(max_so_far, current_sum)\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_so_far = -sys.maxsize - 1\n    for i in range(len(numbers)):\n        current_max = 0\n        for j in range(i, len(numbers)):\n            current_max += numbers[j]\n            max_so_far = max(max_so_far, current_max)\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(x) for x in sys.stdin.read().splitlines()[:n]]\n    print(solve(numbers))"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 - x2 == 0.0:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in xrange(int(stdin.readline())):\n    p = [float(s) for s in stdin.readline().split()]\n    if gradient(*p[:4]) == gradient(*p[4:]):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "from sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    if gradient(p[0], p[1], p[2], p[3]) == gradient(p[4], p[5], p[6], p[7]):\n        print('YES')\n    else:\n        print('NO')",
            "import sys\n\ndef gradient(x1, y1, x2, y2):\n  if x1 == x2:\n    return float('inf')\n  return (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(sys.stdin.readline())):\n  x1, y1, x2, y2, x3, y3, x4, y4 = map(float, sys.stdin.readline().split())\n  if gradient(x1, y1, x2, y2) == gradient(x3, y3, x4, y4):\n    print('YES')\n  else:\n    print('NO')",
            "import sys\n\ndef check_parallel(points):\n    x1, y1, x2, y2, x3, y3, x4, y4 = points\n    if x1 == x2 and x3 == x4:\n        return x1 == x3\n    if x1 == x2 or x3 == x4:\n        return False\n    return (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3)\n\nfor _ in range(int(sys.stdin.readline())):\n    points = list(map(float, sys.stdin.readline().split()))\n    if check_parallel(points):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
            "import sys\n\ndef are_lines_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    if x1 == x2 and x3 == x4:\n        return x1 == x3\n    if x1 == x2 or x3 == x4:\n        return False\n    return (y2 - y1) * (x4 - x3) == (y4 - y3) * (x2 - x1)\n\nnum_lines = int(sys.stdin.readline())\nfor _ in range(num_lines):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, sys.stdin.readline().split())\n    if are_lines_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
            "import sys\n\ndef parallel(points):\n    x1, y1, x2, y2, x3, y3, x4, y4 = points\n    if x1 == x2 and x3 == x4: return x1 == x3\n    if x1 == x2 or x3 == x4: return False\n    return (y2 - y1) * (x4 - x3) == (y4 - y3) * (x2 - x1)\n\nfor _ in range(int(sys.stdin.readline())):\n    print('YES' if parallel(map(float, sys.stdin.readline().split())) else 'NO')",
            "import sys\n\ndef check_parallel(line1, line2):\n    x1, y1, x2, y2 = line1\n    x3, y3, x4, y4 = line2\n    if x1 == x2 and x3 == x4:\n        return x1 == x3\n    if x1 == x2 or x3 == x4:\n        return False\n    return (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3)\n\nfor _ in range(int(sys.stdin.readline())):\n    points = list(map(float, sys.stdin.readline().split()))\n    if check_parallel(points[:4], points[4:]):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n  while True:\n    n = int(input())\n    if n == 0:\n      break\n    a = [int(input()) for _ in range(n)]\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, n):\n      current_max = max(a[i], current_max + a[i])\n      max_so_far = max(max_so_far, current_max)\n    print(max_so_far)",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        a = list(map(int, [input() for _ in range(n)]))\n        max_so_far = a[0]\n        current_max = a[0]\n        for x in a[1:]:\n            current_max = max(x, current_max + x)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def max_sum_subarray():\n    while True:\n        try:\n            n = int(input())\n            if n == 0:\n                break\n            arr = [int(x) for x in input().split()]\n            max_so_far = arr[0]\n            curr_max = arr[0]\n            for i in range(1,n):\n                curr_max = max(arr[i], curr_max + arr[i])\n                max_so_far = max(max_so_far, curr_max)\n            print(max_so_far)\n        except EOFError:\n            break",
            "def max_subarray_sum():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        nums = [int(input()) for _ in range(n)]\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for num in nums[1:]:\n            curr_max = max(num, curr_max + num)\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)",
            "def max_contiguous_subarray_sum():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        arr = [int(input()) for _ in range(n)]\n        max_so_far = arr[0]\n        curr_max = arr[0]\n        for x in arr[1:]:\n            curr_max = max(x, curr_max + x)\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)",
            "def find_maximum_subarray_sum():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        arr = [int(input()) for _ in range(n)]\n        max_sum = arr[0]\n        current_sum = arr[0]\n        for i in range(1, len(arr)):\n            current_sum = max(arr[i], current_sum + arr[i])\n            max_sum = max(max_sum, current_sum)\n        print(max_sum)",
            "def findMaxSumSubarray():\n    while True:\n        try:\n            n = int(input())\n            if n==0:\n                break\n            nums = [int(input()) for i in range(n)]\n            max_so_far = nums[0]\n            max_ending_here = 0\n            for i in range(n):\n                max_ending_here = max_ending_here + nums[i]\n                if max_so_far < max_ending_here:\n                    max_so_far = max_ending_here\n                if max_ending_here < 0:\n                    max_ending_here = 0\n            print(max_so_far)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import math\n\ndef sign(x):\n    if x >= 0:\n        return True\n    else:\n        return False\n\nn = int(input())\nwhile n != 0:\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    b = []\n    b.append(a[0])\n    for i in range(1,len(a)):\n        if b[len(b)-1] > 0 and a[i] > 0:\n            b[len(b)-1] = b[len(b)-1] + a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i,len(b)):\n            S = S + b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for i in range(n)]\n    b = []\n    current_sum = a[0]\n    b.append(current_sum)\n    for i in range(1, len(a)):\n        if sign(current_sum) and sign(a[i]):\n            current_sum += a[i]\n            b[-1] = current_sum\n        else:\n            current_sum = a[i]\n            b.append(current_sum)\n    ans = max(sum(b[i:]) for i in range(len(b)))\n    print(ans)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = []\n    current_sum = a[0]\n    b.append(current_sum)\n    for x in a[1:]:\n        if sign(current_sum) and sign(x):\n            current_sum += x\n            b[-1] = current_sum\n        else:\n            current_sum = x\n            b.append(current_sum)\n    print(max(sum(b[i:]) for i in range(len(b))))\n    n = int(input())",
            "import math\n\ndef sign(x):\n  return x >= 0\n\nn = int(input())\nwhile n:\n  a = [int(input()) for _ in range(n)]\n  b = []\n  cur_sum = a[0]\n  b.append(cur_sum)\n  for i in range(1, len(a)):\n    if sign(cur_sum) and sign(a[i]):\n      cur_sum += a[i]\n      b[-1] = cur_sum\n    else:\n      cur_sum = a[i]\n      b.append(cur_sum)\n  print(max(sum(b[i:]) for i in range(len(b))))\n  n = int(input())",
            "def sign(x): return x >= 0\n\nn = int(input())\nwhile n:\n    a = [int(input()) for _ in range(n)]\n    b = []\n    cur_sum = a[0]\n    b.append(cur_sum)\n    for x in a[1:]:\n        if sign(cur_sum) and sign(x):\n            cur_sum += x\n            b[-1] = cur_sum\n        else:\n            cur_sum = x\n            b.append(cur_sum)\n    print(max(sum(b[i:]) for i in range(len(b))))\n    n = int(input())",
            "def sign(x):\n  return x >= 0\n\nwhile True:\n  try:\n    n = int(input())\n    if n == 0:\n      break\n    a = [int(input()) for _ in range(n)]\n    b = [a[0]]\n    for i in range(1, n):\n      if b[-1] > 0 and a[i] > 0:\n        b[-1] += a[i]\n      else:\n        b.append(a[i])\n    ans = 0\n    for i in range(len(b)):\n      s = sum(b[i:])\n      ans = max(ans, s)\n    print(ans)\n  except EOFError:\n    break",
            "def sign(x): return x >= 0\n\nwhile True:\n    try:\n        n = int(input())\n        if n == 0: break\n        nums = [int(input()) for _ in range(n)]\n        res = [nums[0]]\n        cur = nums[0]\n        for num in nums[1:]:\n            if sign(cur) and sign(num):\n                cur += num\n                res[-1] = cur\n            else:\n                cur = num\n                res.append(cur)\n        max_so_far = 0\n        for i in range(len(res)):\n            max_so_far = max(max_so_far, sum(res[i:]))\n        print(max_so_far)\n\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "import math\ndef aux(v):\n    [xa,ya,ra,xb,yb,rb] = v\n    ab = math.sqrt((xb-xa)**2 + (yb-ya)**2)\n    if ab > ra + rb:\n        rst = 0\n    elif ab + rb < ra:\n        rst = 2\n    elif ab + ra < rb:\n        rst = -2\n    else:\n        rst = 1      \n    return(rst)    \n\nif __name__ == \"__main__\": \n    n = int(input())\n    for i in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef aux(v):\n    xa, ya, ra, xb, yb, rb = v\n    d = math.sqrt((xb - xa)**2 + (yb - ya)**2)\n    if d > ra + rb:\n        return 0\n    if d < abs(ra - rb):\n        return 2 if ra > rb else -2\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
            "import math\n\ndef aux(v):\n    xa, ya, ra, xb, yb, rb = v\n    dist = math.dist((xa, ya), (xb, yb))\n    if dist > ra + rb:\n        return 0\n    elif dist < abs(ra - rb):\n        return 2 if ra > rb else -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
            "import math\n\ndef aux(v):\n  xa, ya, ra, xb, yb, rb = v\n  d = math.hypot(xb - xa, yb - ya)\n  if d > ra + rb: return 0\n  if d < abs(ra - rb): return 2 if ra > rb else -2\n  return 1\n\nif __name__ == \"__main__\":\n  n = int(input())\n  for _ in range(n):\n    print(aux(list(map(float, input().split()))))",
            "import math\n\ndef aux(v):\n    x1, y1, r1, x2, y2, r2 = v\n    distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    if distance > r1 + r2:\n        return 0\n    elif distance < abs(r1 - r2):\n        return 2 if r1 > r2 else -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(aux(list(map(float, input().split()))))",
            "import math\n\ndef aux(v):\n    x1, y1, r1, x2, y2, r2 = v\n    d = math.dist((x1, y1), (x2, y2))\n    if d > r1 + r2: return 0\n    if d < abs(r1 - r2): return 2 if r1 > r2 else -2\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(aux(list(map(float, input().split()))))",
            "import math\n\ndef aux(v):\n    x1, y1, r1, x2, y2, r2 = v\n    d = math.hypot(x2 - x1, y2 - y1)\n    if d > r1 + r2: return 0\n    if d < abs(r1 - r2): return 1 if r1 > r2 else -1\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(aux(list(map(float, input().split()))))"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n  n = int(input())\n  for _ in range(n):\n    xa, ya, ra, xb, yb, rb = map(float, input().split())\n    distance = ((xa - xb)**2 + (ya - yb)**2)**0.5\n    if distance + rb <= ra:\n      print(2)\n    elif distance + ra <= rb:\n      print(-2)\n    elif abs(distance - ra) <= rb or abs(distance - rb) <= ra:\n      print(1)\n    else:\n      print(0)",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n  n = int(input())\n  for _ in range(n):\n    xa, ya, ra, xb, yb, rb = map(float, input().split())\n    d = ((xa - xb)**2 + (ya - yb)**2)**0.5\n    if d + rb <= ra:\n      print(2)\n    elif d + ra <= rb:\n      print(-2)\n    elif d <= ra + rb and d >= abs(ra - rb):\n      print(1)\n    else:\n      print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        dist = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if dist <= abs(r1 - r2):\n            print(1 if r1 > r2 else -1 if r1 < r2 else 0)\n        elif dist <= r1 + r2:\n            print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n  n = int(input())\n  for _ in range(n):\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n    if d <= abs(r1 - r2):\n        print(1 if r1 > r2 else -1 if r1 < r2 else 0)\n    elif d <= r1 + r2:\n        print(1)\n    else:\n        print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if d < r1 + r2:\n            if d + r2 <= r1:\n                print(2)\n            elif d + r1 <= r2:\n                print(-2)\n            else:\n                print(1)\n        else:\n            print(0)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if r1 + r2 < d:\n            print(0)\n        elif abs(r1 - r2) > d:\n            print(2 if r1 > r2 else -2)\n        else:\n            print(1)",
            "def circles_intersection():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if d <= r1 - r2:\n            print(2)\n        elif d <= r2 - r1:\n            print(-2)\n        elif d <= r1 + r2:\n            print(1)\n        else:\n            print(0)"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def f():\n    ax,ay,ar,bx,by,br=map(float,input().split())\n    d=(ax-bx)**2+(ay-by)**2\n    r1=(ar+br)*(ar+br)\n    r2=(ar-br)*(ar-br)\n    if d<=r1 and d>=r2:return 1;\n    elif d<r2 and ar>=br:return 2\n    elif d < r2 and ar <= br:return -2\n    else:return 0\n\nfor _ in range(int(input())):print(f())",
        "writer": "human",
        "rewrite": [
            "def f():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    d = (ax - bx)**2 + (ay - by)**2\n    if (ar + br)**2 >= d >= (ar - br)**2:\n        return 1\n    elif d < (ar - br)**2:\n        return 2 if ar >= br else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(f())",
            "def f():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    dist_sq = (x1 - x2)**2 + (y1 - y2)**2\n    if (r1 + r2)**2 >= dist_sq >= (r1 - r2)**2:\n        return 1\n    elif dist_sq < (r1 - r2)**2:\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(f())",
            "def solve():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    distance_squared = (x1 - x2)**2 + (y1 - y2)**2\n    sum_radii_squared = (r1 + r2)**2\n    diff_radii_squared = (r1 - r2)**2\n    if diff_radii_squared <= distance_squared <= sum_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared:\n        return 2 if r1 >= r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(solve())",
            "import math\n\ndef check_circles():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    distance = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    if abs(r1 - r2) <= distance <= r1 + r2:\n        return 1\n    elif distance < abs(r1 - r2):\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "def solve():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    dist_sq = (x1 - x2)**2 + (y1 - y2)**2\n    if (r1 + r2)**2 >= dist_sq >= (r1 - r2)**2:\n        return 1\n    elif dist_sq < (r1 - r2)**2:\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\nT = int(input())\nfor _ in range(T):\n    print(solve())",
            "import math\n\ndef relationship():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    distance = math.hypot(x1 - x2, y1 - y2)\n    if abs(r1 - r2) <= distance <= r1 + r2:\n        return 1\n    elif distance < abs(r1 - r2):\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\ntest_cases = int(input())\nfor _ in range(test_cases):\n    print(relationship())"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5*n-5\n        v_ex = 2*4.9*(y/k)**0.5\n        if v_ex >= v:\n            return n\n            break\n        else:\n            n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
        "writer": "human",
        "rewrite": [
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        if y < 0:\n            return 1\n        v_ex = 2 * 4.9 * (y / k)**0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    k = 4.9\n    n = max(1, int((v**2 * k / (100)) + 1))\n    return n\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 0\n    k = 4.9\n    while (2 * k * ((5 * (n + 1) - 5) / k)**0.5) < v:\n        n += 1\n    return n + 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "import math\n\ndef experiment(v):\n    k = 4.9\n    left, right = 0, 10**9\n    while left <= right:\n        mid = (left + right) // 2\n        v_ex = 2 * k * ((5 * mid - 5) / k)**0.5 if mid > 0 else 0\n        if v_ex >= v:\n            right = mid -1\n        else:\n            left = mid + 1\n    return left\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n  k = 4.9\n  n = 0\n  while True:\n    n += 1\n    y = 5 * n - 5\n    if y < 0:\n      return 1\n    if 2 * k * math.sqrt(y / k) >= v:\n      return n\n\nwhile True:\n  try:\n    v = float(input())\n    print(experiment(v))\n  except EOFError:\n    break",
            "import math\n\ndef experiment(v):\n    k = 4.9\n    low = 0\n    high = 10**7  # Adjust upper bound as needed\n    while low <= high:\n        mid = (low + high) // 2\n        v_ex = 2 * k * math.sqrt(max(0, 5 * mid - 5) / k)\n        if v_ex >= v:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n  N = int(input())\n  for i in range(N):\n    xa, ya, ra, xb, yb, rb = map(float, input().split())\n    distance = ((xa - xb) ** 2 + (ya - yb) ** 2) ** 0.5\n    if distance + rb <= ra:\n      print(2)\n    elif distance + ra <= rb:\n      print(-2)\n    elif abs(ra - rb) < distance < ra + rb:\n      print(1)\n    else:\n      print(0)",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n    N = int(input())\n    for i in range(N):\n        xa, ya, ra, xb, yb, rb = map(float, input().split())\n        d = ((xa - xb)**2 + (ya - yb)**2)**0.5\n        if d + rb <= ra:\n            print(2)\n        elif d + ra <= rb:\n            print(-2)\n        elif abs(ra - rb) < d < ra + rb:\n            print(1)\n        else:\n            print(0)",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        dist = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if dist + r2 <= r1:\n            print(2)\n        elif dist + r1 <= r2:\n            print(-2)\n        elif abs(r1 - r2) < dist < r1 + r2:\n            print(1)\n        else:\n            print(0)",
            "def intersecting_circles():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if d <= abs(r1 - r2):\n            print(0)\n        elif d > r1 + r2:\n            print(0)\n        elif d == r1 + r2:\n            print(1)\n        elif d == abs(r1 - r2):\n            print(1)\n        elif abs(r1 - r2) < d < r1 + r2:\n            print(1)\n        elif r2 + d <= r1:\n            print(2)\n        elif r1 + d <= r2:\n            print(-2)",
            "def check_intersection(n):\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if d <= abs(r1 - r2):\n            print(0)\n        elif d > r1 + r2:\n            print(0)\n        elif r1 + d <= r2:\n            print(-2)\n        elif r2 + d <= r1:\n            print(2)\n        else:\n            print(1)",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if d <= abs(r1 - r2):\n            print(0)\n        elif d > r1 + r2:\n            print(0)\n        elif d < r1 + r2 and d > abs(r1 - r2):\n            print(1)\n        elif r1 >= d + r2:\n            print(2)\n        else:\n            print(-2)",
            "def circle_analysis(num_tests):\n    for _ in range(num_tests):\n        x1, y1, r1, x2, y2, r2 = map(float, input().split())\n        distance = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if distance > r1 + r2 or distance <= abs(r1 - r2):\n            print(0)\n        elif distance == r1 + r2 or distance == abs(r1 - r2):\n            print(1)\n        elif distance < r1 + r2 and distance > abs(r1-r2):\n            print(1)\n        elif r1 > distance + r2:\n            print(2)\n        else:\n            print(-2)"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def process(A, B):\n    hit, blow = 0, 0\n    for a, b in zip(A, B):\n        if a == b:\n            hit += 1\n        elif a in B:\n            blow += 1\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except: break\n    hit, blow = process(A, B)\n    print(hit, blow)\n",
        "writer": "human",
        "rewrite": [
            "def process(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a, b in zip(A, B) if a != b and a in B)\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        if len(A) != len(B):\n            print(\"Input lists must be of the same length.\")\n            continue\n        hit, blow = process(A, B)\n        print(hit, blow)\n    except EOFError:\n        break\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        break",
            "def process(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a, b in zip(A, B) if a != b and B.count(a) > 0)\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        hit, blow = process(A, B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "def process(A,B):\n  hit=0\n  blow=0\n  for i in range(len(A)):\n    if A[i]==B[i]:\n      hit+=1\n    elif A[i] in B:\n      blow+=1\n  return hit,blow\nwhile True:\n  try:\n    A=input().split()\n    B=input().split()\n    hit,blow=process(A,B)\n    print(hit,blow)\n  except EOFError:\n    break",
            "def process(A, B):\n    hit = sum(1 for i in range(len(A)) if A[i] == B[i])\n    blow = sum(1 for i in range(len(A)) if A[i] != B[i] and A[i] in B)\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        if len(A) != len(B):\n            continue\n        hit, blow = process(A, B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "def process(A, B):\n    hit = 0\n    blow = 0\n    for i in range(len(A)):\n        if A[i] == B[i]:\n            hit += 1\n        elif A[i] in B:\n            blow += 1\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        hit, blow = process(A, B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "def process(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a != b and a in B for a, b in zip(A, B))\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        hit, blow = process(A, B)\n        print(hit, blow)\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "import datetime\nimport calendar\n\ndef trans(month, day, year=2004):\n    past = datetime.date(year, month, day)\n    result = calendar.day_name[past.weekday()]\n    return result\n    \nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(trans(month, day))\n    \n",
        "writer": "human",
        "rewrite": [
            "import calendar\n\ndef trans(month, day, year=2004):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0:\n        break\n    print(trans(month, day))",
            "import calendar\n\ndef trans(month, day, year=2004):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0:\n        break\n    print(trans(month, day))",
            "import calendar\n\ndef trans(m, d, y=2004):\n  return calendar.day_name[calendar.weekday(y, m, d)]\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == d == 0:\n    break\n  print(trans(m, d))",
            "import calendar\n\ndef trans(month, day, year=2004):\n  return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n  month, day = map(int, input().split())\n  if month == 0 and day == 0:\n    break\n  print(trans(month, day))",
            "import calendar\n\ndef trans(m, d, y=2004):\n    return calendar.day_name[calendar.weekday(y, m, d)]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(trans(m, d))",
            "import calendar\n\ndef trans(month, day, year=2004):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n    month, day = map(int, input().split())\n    if all(x == 0 for x in (month, day)):\n        break\n    print(trans(month, day))"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n  while True:\n    try:\n      a = list(map(int, input().split()))\n      b = list(map(int, input().split()))\n      hit = 0\n      blow = 0\n      for i in range(4):\n        if a[i] == b[i]:\n          hit += 1\n        elif b[i] in a:\n          blow += 1\n      print(hit, blow)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n  while True:\n    try:\n      a = list(map(int, input().split()))\n      b = list(map(int, input().split()))\n      hit = sum(1 for i in range(4) if a[i] == b[i])\n      blow = sum(1 for i in range(4) if a[i] != b[i] and a[i] in b)\n      print(hit, blow)\n    except EOFError:\n      break",
            "def hit_and_blow():\n    while True:\n        try:\n            secret, guess = input(), input()\n            secret, guess = list(map(int, secret.split())), list(map(int, guess.split()))\n            hit = sum(1 for i in range(4) if secret[i] == guess[i])\n            blow = sum(1 for i in range(4) if secret[i] != guess[i] and secret[i] in guess)\n            print(hit, blow)\n\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid input\")",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(len(a)) if a[i] == b[i])\n            blow = sum(1 for i in range(len(a)) if a[i] != b[i] and a[i] in b)\n            print(hit, blow)\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid input\")",
            "def hit_and_blow():\n    while True:\n        try:\n            secret_code = list(map(int, input().split()))\n            guess = list(map(int, input().split()))\n            hits = sum(1 for i in range(4) if secret_code[i] == guess[i])\n            blows = sum(1 for i in range(4) if secret_code[i] != guess[i] and secret_code[i] in guess)\n            print(hits, blows)\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid Input\")",
            "def hit_and_blow():\n    while True:\n        try:\n            secret = list(map(int, input().split()))\n            guess = list(map(int, input().split()))\n            hit = sum(1 for s, g in zip(secret, guess) if s == g)\n            blow = sum(1 for s in secret if s in guess and secret.index(s) != guess.index(s))\n            print(hit, blow)\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid input\")",
            "def hit_and_blow():\n    while True:\n        try:\n            code, guess = input(), input()\n            code, guess = map(int, code.split()), map(int, guess.split())\n            hit = sum(1 for c, g in zip(code, guess) if c == g)\n            blow = sum(1 for i, c in enumerate(code) if c in guess and i != guess.index(c))\n            print(hit, blow)\n        except EOFError:\n            break\n        except ValueError:\n            print(\"Invalid Input\")"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    LIST=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    while True:\n        try:\n            count=3\n            M,D=map(int,input().split())\n            if M==0:\n                break\n\n            if M in [1,4,7]:\n                pass\n            elif M in [10]:\n                count+=1\n            elif M in [5]:\n                count+=2\n            elif M in [2,8]:\n                count+=3\n            elif M in [3,11]:\n                count+=4\n            elif M in [6]:\n                count+=5\n            elif M in [9,12]:\n                count+=6\n\n            count+=D%7\n\n            print(LIST[count%7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    LIST=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n    while True:\n        try:\n            M,D=map(int,input().split())\n            if M==0:\n                break\n            day_offset = {1:0, 4:0, 7:0, 10:1, 5:2, 2:3, 8:3, 3:4, 11:4, 6:5, 9:6, 12:6}\n            count = 3 + day_offset[M] + (D % 7)\n            print(LIST[count % 7])\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "import datetime\n\ndef get_day(month, day):\n    try:\n        date = datetime.date(2024, month, day)\n        return date.strftime(\"%A\")\n    except ValueError:\n        return None\n\nwhile True:\n    try:\n        month, day = map(int, input().split())\n        if month == 0:\n            break\n        day_name = get_day(month, day)\n        if day_name:\n            print(day_name)\n    except ValueError:\n        break",
            "import calendar\n\ndef get_weekday(month, day):\n    try:\n        return calendar.day_name[(calendar.weekday(2024, month, day))]\n    except ValueError:\n        return None\n\nwhile True:\n    try:\n        month, day = map(int, input().split())\n        if month == 0:\n            break\n        weekday = get_weekday(month, day)\n        if weekday:\n            print(weekday)\n    except ValueError:\n        break",
            "import datetime\n\nwhile True:\n    try:\n        m, d = map(int, input().split())\n        if m == 0:\n            break\n        date = datetime.date(2000, m, d)\n        print(date.strftime(\"%A\"))\n    except ValueError:\n        break",
            "import calendar\n\nwhile True:\n    try:\n        m, d = map(int, input().split())\n        if m == 0:\n            break\n        print(calendar.day_name[(calendar.weekday(2024, m, d))])\n    except ValueError:\n        break",
            "import datetime\n\ndays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\nwhile True:\n    try:\n        m, d = map(int, input().split())\n        if m == 0:\n            break\n        date = datetime.date(2024, m, d)\n        print(days[date.weekday()])\n    except ValueError:\n        break"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n  while True:\n    try:\n      a = list(map(int, input().split()))\n      b = list(map(int, input().split()))\n      hit = 0\n      blow = 0\n      for i in range(4):\n        if a[i] == b[i]:\n          hit += 1\n        elif b[i] in a:\n          blow += 1\n      print(hit, blow)\n    except EOFError:\n      break",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hit = sum(1 for i in range(4) if a[i] == b[i])\n            blow = sum(1 for i in range(4) if a[i] != b[i] and a[i] in b)\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            secret, guess = map(list, [map(int, input().split()), map(int, input().split())])\n            hit = sum(1 for i in range(4) if secret[i] == guess[i])\n            blow = sum(1 for i in range(4) if secret[i] != guess[i] and guess[i] in secret)\n            print(hit, blow)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            secret_code = list(map(int, input().split()))\n            guess = list(map(int, input().split()))\n            hits = sum(1 for i in range(4) if secret_code[i] == guess[i])\n            blows = sum(1 for i in range(4) if secret_code[i] != guess[i] and guess[i] in secret_code)\n            print(hits, blows)\n        except EOFError:\n            break",
            "def hit_and_blow():\n  while True:\n    try:\n      secret, guess = [list(map(int, input().split())) for _ in range(2)]\n      hit = sum(1 for s, g in zip(secret, guess) if s == g)\n      blow = sum(1 for g in guess if g in secret and secret.index(g) != guess.index(g))\n      print(hit, blow)\n    except EOFError:\n      break",
            "def hit_and_blow():\n    while True:\n        try:\n            a = list(map(int, input().split()))\n            b = list(map(int, input().split()))\n            hits = sum(1 for i in range(len(a)) if a[i] == b[i])\n            blows = sum(1 for i in range(len(a)) if a[i] != b[i] and b[i] in a)\n            print(hits, blows)\n        except EOFError:\n            break",
            "def hit_and_blow():\n    while True:\n        try:\n            secret_code, guess = [list(map(int, input().split())) for _ in range(2)]\n            hits = sum(1 for i in range(4) if secret_code[i] == guess[i])\n            blows = sum(1 for i in range(4) if secret_code[i] != guess[i] and guess[i] in secret_code)\n            print(hits, blows)\n        except EOFError:\n            break"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "# Aizu Problem 0025: Hit and Blow\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef hit_and_blow(A, B):\n    hit, blow = 0, 0\n    for k in range(4):\n        if A[k] == B[k]:\n            hit += 1\n        elif A[k] in B:\n            blow += 1\n    return hit, blow\n\n\nwhile True:\n    try:\n        A = [int(_) for _ in input().split()]\n    except EOFError:\n        break\n    B = [int(_) for _ in input().split()]\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B and a != B[A.index(a)])\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, sys.stdin.readline().split()))\n        B = list(map(int, sys.stdin.readline().split()))\n        hit, blow = hit_and_blow(A,B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n    hit = sum(1 for s, g in zip(secret, guess) if s == g)\n    blow = sum(1 for digit in guess if digit in secret and digit not in [secret[i] for i, g in enumerate(guess) if g == digit])\n    return hit, blow\n\nwhile True:\n    try:\n        secret = list(map(int, sys.stdin.readline().split()))\n        guess = list(map(int, sys.stdin.readline().split()))\n        hit, blow = hit_and_blow(secret, guess)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n    hit = sum(a == b for a, b in zip(secret, guess))\n    blow = sum(a in guess for a in secret) - hit\n    return hit, blow\n\nwhile True:\n    try:\n        secret = list(map(int, sys.stdin.readline().split()))\n        guess = list(map(int, sys.stdin.readline().split()))\n        print(*hit_and_blow(secret, guess))\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n  hit = sum(1 for i in range(4) if secret[i] == guess[i])\n  blow = sum(1 for i in range(4) if secret[i] in guess and secret[i] != guess[i])\n  return hit, blow\n\nwhile True:\n  try:\n    secret = list(map(int, sys.stdin.readline().split()))\n    guess = list(map(int, sys.stdin.readline().split()))\n    print(hit_and_blow(secret, guess)[0], hit_and_blow(secret, guess)[1])\n  except EOFError:\n    break",
            "import sys\n\ndef hit_and_blow(a, b):\n    hit = sum(x == y for x, y in zip(a, b))\n    blow = sum(x in b and x != y for x, y in zip(a, b))\n    return hit, blow\n\nwhile True:\n    try:\n        a = list(map(int, sys.stdin.readline().split()))\n        b = list(map(int, sys.stdin.readline().split()))\n        print(*hit_and_blow(a, b))\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n    hit = sum(s == g for s, g in zip(secret, guess))\n    blow = sum(s in guess and s != g for s, g in zip(secret, guess))\n    return hit, blow\n\nwhile True:\n    try:\n        secret = list(map(int, sys.stdin.readline().split()))\n        guess = list(map(int, sys.stdin.readline().split()))\n        print(*hit_and_blow(secret, guess))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month - 1]) + day\n    return days[total_days % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))",
        "writer": "machine",
        "rewrite": [
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [0,31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    total_days = sum(days_in_month[:month]) + day\n    return days[(total_days-1) % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m,d))",
            "import datetime\n\ndef get_day(month, day):\n    date = datetime.date(2000, month, day)\n    return date.strftime(\"%A\")\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))",
            "import calendar\n\ndef get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return days[calendar.weekday(2000, month, day)]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))",
            "def get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    days_in_month = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]\n    total_days = days_in_month[month -1] + day\n    return days[(total_days) % 7]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))",
            "import datetime\n\ndef get_day(m, d):\n  return datetime.date(2000, m, d).strftime(\"%A\")\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == 0 and d == 0:\n    break\n  print(get_day(m, d))",
            "import calendar\n\ndef get_day(month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    return days[calendar.weekday(2000, month, day)]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day(m, d))"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def get_day_of_week(month, day):\n  days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  total_days = sum(days_in_month[:month - 1]) + day\n  days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n  return days_of_week[total_days % 7]\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == 0 and d == 0:\n    break\n  print(get_day_of_week(m, d))",
        "writer": "machine",
        "rewrite": [
            "def get_day_of_week(month, day):\n  days_in_month = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n  total_days = sum(days_in_month[:month]) + day\n  days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n  return days_of_week[(total_days -1) % 7]\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == 0 and d == 0:\n    break\n  print(get_day_of_week(m, d))",
            "import datetime\n\ndef get_day_of_week(month, day):\n    try:\n        date = datetime.date(2024, month, day)  #Using a leap year to handle February 29th correctly\n        return date.strftime(\"%A\")\n    except ValueError:\n        return \"Invalid Date\"\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day_of_week(m, d))",
            "import datetime\n\ndef get_day_of_week(month, day):\n    date = datetime.date(2024, month, day)\n    return date.strftime(\"%A\")\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    try:\n        print(get_day_of_week(m, d))\n    except ValueError:\n        print(\"Invalid date\")",
            "import calendar\n\ndef get_day_of_week(month, day):\n    return calendar.day_name[calendar.weekday(2024, month, day)]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    try:\n        print(get_day_of_week(m, d))\n    except ValueError:\n        print(\"Invalid date\")",
            "import datetime\n\ndef get_day_of_week(month, day):\n    try:\n        return datetime.date(2000, month, day).strftime(\"%A\")\n    except ValueError:\n        return \"Invalid date\"\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_day_of_week(m,d))",
            "import calendar\n\ndef get_day_of_week(month, day):\n    return calendar.day_name[(calendar.weekday(2000, month, day))]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    try:\n        print(get_day_of_week(m, d))\n    except ValueError:\n        print(\"Invalid date\")"
        ]
    }
]