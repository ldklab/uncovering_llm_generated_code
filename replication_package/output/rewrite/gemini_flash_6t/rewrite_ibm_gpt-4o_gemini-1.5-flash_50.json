[
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_mountains(heights):\n    top_three = sorted(heights, reverse=True)[:3]\n    return top_three\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_mountains(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_mountains(heights))",
        "writer": "machine",
        "rewrite": [
            "def top_three_mountains(heights):\n    return sorted(heights, reverse=True)[:3]",
            "def top_three_mountains(heights):\n    return heapq.nlargest(3, heights)\n\nimport heapq",
            "def top_three_mountains(heights):\n    top_three = []\n    for height in heights:\n        if len(top_three) < 3:\n            top_three.append(height)\n            top_three.sort(reverse=True)\n        elif height > top_three[-1]:\n            top_three[-1] = height\n            top_three.sort(reverse=True)\n    return top_three",
            "def top_three_mountains(heights):\n    return sorted(heights, reverse=True)[:3]",
            "def top_three_mountains(heights):\n    return list(reversed(sorted(heights)[-3:]))",
            "def top_three_mountains(heights):\n    top_three = sorted(heights, reverse=True)[:3]\n    return top_three"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "def top_three_hills(heights):\n    heights.sort(reverse=True)\n    return heights[:3]\n\n# Example usage:\nheights = [1819, 2003, 876, 2840, 1723, 1673, 3776, 2848, 1592, 922]\nprint(top_three_hills(heights))\n\nheights = [100, 200, 300, 400, 500, 600, 700, 800, 900, 900]\nprint(top_three_hills(heights))",
        "writer": "machine",
        "rewrite": [
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]",
            "def top_three_hills(heights):\n    return heapq.nlargest(3, heights)\n\nimport heapq",
            "def top_three_hills(heights):\n    return sorted(heights, reverse=True)[:3]",
            "import heapq\ndef top_three_hills(heights):\n  return heapq.nlargest(3, heights)",
            "def top_three_hills(heights):\n    top_three = []\n    for height in heights:\n        if len(top_three) < 3:\n            top_three.append(height)\n            top_three.sort(reverse=True)\n        elif height > top_three[-1]:\n            top_three[-1] = height\n            top_three.sort(reverse=True)\n    return top_three"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "def digit_number():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
        "writer": "machine",
        "rewrite": [
            "def digit_number():\n    import sys\n    data = sys.stdin.read().strip().split('\\n')\n    for line in data:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin.read().strip().splitlines():\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\ndef digit_number():\n    for line in sys.stdin.readlines():\n        try:\n            a,b = map(int,line.split())\n            print(len(str(a+b)))\n        except:\n            pass",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin.read().splitlines():\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    for line in filter(None, sys.stdin.read().splitlines()):\n        a, b = map(int, line.split())\n        print(len(str(a + b)))"
        ]
    },
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef digit_number():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
        "writer": "machine",
        "rewrite": [
            "import sys\n\ndef digit_number():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        if line:\n            a,b = map(int,line.split())\n            print(len(str(a+b)))",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin.readlines():\n        line = line.strip()\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    for line in filter(None, sys.stdin.read().splitlines()):\n        a, b = map(int, line.split())\n        print(len(str(a + b)))",
            "import sys\n\ndef digit_number():\n    for line in sys.stdin:\n        line = line.strip()\n        if line:\n            a, b = map(int, line.split())\n            print(len(str(a + b)))"
        ]
    },
    {
        "id": 4,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "import sys\n#from me.io import dup_file_stdin\n\n#@dup_file_stdin\ndef solve():\n    m=[]\n    for line in sys.stdin:\n        m.append(int(line))\n    m.sort(reverse=True)\n    for h in m[0:3]:\n        print(h)\nsolve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    m = sorted([int(line) for line in sys.stdin], reverse=True)\n    print(*m[:3], sep='\\n')\n\nsolve()",
            "import sys\n\ndef solve():\n    print(*sorted([int(line) for line in sys.stdin], reverse=True)[:3], sep='\\n')\n\nsolve()",
            "import sys\n\ndef solve():\n    nums = []\n    for line in sys.stdin:\n        try:\n            nums.append(int(line))\n        except ValueError:\n            pass\n    nums.sort(reverse=True)\n    for num in nums[:3]:\n        print(num)\n\nsolve()",
            "import sys\n\ndef solve():\n    m = sorted(int(line) for line in sys.stdin if line.strip().isdigit() , reverse=True)\n    print('\\n'.join(map(str, m[:3])))\n\nsolve()",
            "import sys\n\ndef solve():\n    try:\n        print(\"\\n\".join(sorted( [int(x) for x in sys.stdin], reverse=True)[:3]))\n    except ValueError:\n        pass\n\nsolve()",
            "import sys\n\ndef solve():\n    numbers = [int(line) for line in sys.stdin]\n    numbers.sort(reverse=True)\n    for number in numbers[:3]:\n        print(number)\n\nsolve()"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")\n\nprint_multiplication_table()",
        "writer": "machine",
        "rewrite": [
            "def print_multiplication_table():\n    for i in range(1,11):\n        print(*[f\"{i}x{j}={i*j}\" for j in range(1,11)], sep='\\n')\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    print('\\n'.join([f\"{i}x{j}={i*j}\" for i in range(1, 10) for j in range(1, 10)]))\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        print(*(f\"{i}x{j}={i*j}\" for j in range(1, 10)), sep=\"\\n\")\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n  rows = [' '.join([f\"{i}x{j}={i*j}\" for j in range(1, 10)]) for i in range(1, 10)]\n  print('\\n'.join(rows))\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    print(\"\\n\".join([\" \".join([f\"{i}x{j}={i*j}\" for j in range(1, 11)]) for i in range(1, 11)]))\n\nprint_multiplication_table()",
            "def print_multiplication_table():\n    for i in range(1, 10):\n        print('\\n'.join(f\"{i}x{j}={i*j}\" for j in range(1, 10)))\n\nprint_multiplication_table()"
        ]
    },
    {
        "id": 3,
        "prompt_id": "p00001",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n List of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n80of Top 3 Hills\nThere is a data which provides heights (in meter) of mountains. The data is only for ten mountains.\nWrite a program which prints heights of the top three mountains in descending order.\nInput\nHeight of mountain 1\nHeight of mountain 2\nHeight of mountain 3\n .\n .\nHeight of mountain 10\nConstraints\n0 \u2264 height of mountain (integer) \u2264 10,000\nOutput\nHeight of the 1st mountain\nHeight of the 2nd mountain\nHeight of the 3rd mountain\nSample Input 1\n1819\n2003\n876\n2840\n1723\n1673\n3776\n2848\n1592\n922\nOutput for the Sample Input 1\n3776\n2848\n2840\nSample Input 2\n100\n200\n300\n400\n500\n600\n700\n800\n900\n900\nOutput for the Sample Input 2\n900\n900\n800",
        "code": "#! /usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef main():\n\tmountains = []\n\tfor i in range(10):\n\t\tmountains.append(int(input()))\n\t\n\tmountains = sorted(mountains, reverse = True)\n\n\tfor i in range(3):\n\t\tprint(mountains[i])\n\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    mountains = sorted([int(input()) for _ in range(10)], reverse=True)\n    print(*mountains[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(*sorted([int(input()) for _ in range(10)], reverse=True)[:3], sep='\\n')\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print('\\n'.join(map(str,sorted([int(x) for x in [input() for i in range(10)]],reverse=True)[:3])))\nif __name__ == '__main__':\n    main()",
            "def main():\n    m = []\n    for i in range(10):\n        m.append(int(input()))\n    m.sort(reverse=True)\n    for i in range(3):\n        print(m[i])\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    mountains = sorted([int(input()) for _ in range(10)], reverse=True)\n    print(mountains[0])\n    print(mountains[1])\n    print(mountains[2])\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    m = [int(input()) for _ in range(10)]\n    m.sort(reverse=True)\n    print(m[0], m[1], m[2], sep='\\n')\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def __main():\n    x = 1;\n    while x <= 9 :\n        y = 1;\n        while y <= 9 :\n             z = x * y;\n             print(str(x) + \"x\" + str(y)  + \"=\" + str(z) )\n             y = y + 1\n        x = x + 1\n        \n        \n__main()\n\n",
        "writer": "human",
        "rewrite": [
            "def multiplication_table():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            print(f\"{x}x{y}={x*y}\")\n\nmultiplication_table()",
            "def multiplication_table():\n    for x in range(1, 10):\n        for y in range(1, 10):\n            print(f\"{x}x{y}={x*y}\")\n\nmultiplication_table()",
            "def multiplication_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} x {j} = {i * j}\")\n\nmultiplication_table()",
            "def print_multiplication_table():\n  for i in range(1, 10):\n    for j in range(1, 10):\n      print(f\"{i} x {j} = {i*j}\")\n\nprint_multiplication_table()",
            "def multiplication_table():\n    for i in range(1,10):\n        for j in range(1,10):\n            print(f\"{i} x {j} = {i*j}\")\n\nmultiplication_table()",
            "def generate_table():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i} * {j} = {i * j}\")\n\ngenerate_table()"
        ]
    },
    {
        "id": 6,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef main():\n    \"\"\" ????????? \"\"\"\n    istr = sys.stdin.read()\n    wi = istr.splitlines()\n    for i in wi:\n        a = list(map(int,i.split()))\n        b = str(a[0] + a[1])\n        print(len(b))\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    istr = sys.stdin.read()\n    lines = istr.splitlines()\n    for line in lines:\n        nums = list(map(int, line.split()))\n        sum_nums = nums[0] + nums[1]\n        print(len(str(sum_nums)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        nums = [int(x) for x in line.split()]\n        print(len(str(sum(nums))))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        nums = list(map(int, line.split()))\n        print(len(str(sum(nums))))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        x, y = map(int, line.split())\n        print(len(str(x + y)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        numbers = line.split()\n        sum_of_numbers = sum(int(num) for num in numbers)\n        print(len(str(sum_of_numbers)))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 1,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def main():\n    for a in range(1,10):\n        for b in range(1,10):\n            print(\"{}x{}={}\".format(a,b,a*b))\n    return None\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    for a in range(1, 10):\n        for b in range(1, 10):\n            print(f\"{a}x{b}={a*b}\")\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    [print(f\"{a}x{b}={a*b}\") for a in range(1, 10) for b in range(1, 10)]\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    for i in range(1, 100):\n      a = i // 10 + 1\n      b = i % 10 +1\n      print(f\"{a}x{b}={a*b}\")\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    print('\\n'.join([f\"{a}x{b}={a*b}\" for a in range(1,10) for b in range(1,10)]))\n\nif __name__ == \"__main__\":\n    main()",
            "if __name__ == \"__main__\":\n    print('\\n'.join(f'{a}x{b}={a*b}' for a in range(1,10) for b in range(1,10)))",
            "if __name__ == \"__main__\":\n    for a in range(1, 10):\n        print('\\n'.join([f\"{a}x{b}={a*b}\" for b in range(1,10)]))"
        ]
    },
    {
        "id": 5,
        "prompt_id": "p00002",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Digit Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n Number\nWrite a program which computes the digit number of sum of two integers\na\nand\nb\n.\nInput\nThere are several test cases. Each test case consists of two non-negative integers\na\nand\nb\nwhich are separeted by a space in a line. The input terminates with EOF.\nConstraints\n0 \u2264\na\n,\nb\n\u2264 1,000,000\nThe number of datasets \u2264 200\nOutput\nPrint the number of digits of\na\n+\nb\nfor each data set.\nSample Input\n5 7\n1 99\n1000 999\nOutput for the Sample Input\n2\n3\n4",
        "code": "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n\n        c = a + b\n\n        if c == 0:\n            print(1)\n        else:\n            ans = 0\n\n            while c > 0:\n                ans += 1\n                c //= 10\n\n            print(ans)\n\nif __name__ == '__main__':\n    solve()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)) if a + b else 1)\n\nif __name__ == '__main__':\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a + b)) if (a + b) else 1)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(len(str(a+b)) or 1)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        print(len(str(sum(map(int, line.split())))) or 1)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        s = sum(map(int, line.split()))\n        print(len(str(s)) if s else 1)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        c = sum(map(int, line.split()))\n        print(len(str(c)) if c else 1)\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 2,
        "prompt_id": "p00000",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n QQ\nWrite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\nite a program which prints multiplication tables in the following format:\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nInput\nNo input.\nOutput\n1x1=1\n1x2=2\n.\n.\n9x8=72\n9x9=81\nTemplate for C\n#include<stdio.h>\n\nint main(){\n\n    return 0;\n}\nTemplate for C++\n#include<iostream>\nusing namespace std;\n\nint main(){\n\n    return 0;\n}\nTemplate for Java\nclass Main{\n    public static void main(String[] a){\n\n    }\n}",
        "code": "def print_multiplication_tables():\n    for i in range(1, 10):\n        for j in range(1, 10):\n            print(f\"{i}x{j}={i*j}\")\n\nprint_multiplication_tables()",
        "writer": "machine",
        "rewrite": [
            "def print_multiplication_tables():\n    for i in range(1,11):\n        print(f\"Multiplication table of {i}:\")\n        for j in range(1,11):\n            print(f\"{i} x {j} = {i*j}\")\n\nprint_multiplication_tables()",
            "def print_multiplication_tables(n=10):\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            print(f\"{i} x {j} = {i * j}\")\n\nprint_multiplication_tables()",
            "def print_multiplication_tables(num_tables=9):\n    for i in range(1, num_tables + 1):\n        for j in range(1, num_tables + 1):\n            print(f\"{i} x {j} = {i * j}\")\n\nprint_multiplication_tables()",
            "def print_multiplication_tables(start=1, end=9):\n    for i in range(start, end + 1):\n        for j in range(start, end + 1):\n            print(f\"{i} x {j} = {i * j}\")\n\nprint_multiplication_tables()",
            "def print_multiplication_tables(limit=9):\n  for i in range(1, limit + 1):\n    line = \"\"\n    for j in range(1, limit + 1):\n      line += f\"{i}x{j}={i*j} \"\n    print(line)\n\nprint_multiplication_tables()",
            "def print_multiplication_tables(n=10):\n    for i in range(1,n+1):\n        table = [f\"{i}x{j}={i*j}\" for j in range(1,n+1)]\n        print(\" \".join(table))\n\nprint_multiplication_tables()"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().splitlines()\n    \n    N = int(data[0])\n    results = []\n    \n    for i in range(1, N + 1):\n        a, b, c = sorted(map(int, data[i].split()))\n        if a**2 + b**2 == c**2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle():\n    N = int(input())\n    for _ in range(N):\n        a, b, c = sorted(map(int, input().split()))\n        print(\"YES\" if a**2 + b**2 == c**2 else \"NO\")",
            "def is_right_triangle():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = sorted(map(int, input().split()))\n        print('YES' if a*a + b*b == c*c else 'NO')",
            "def is_right_triangle():\n    n = int(input())\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        if a*a + b*b == c*c or a*a + c*c == b*b or b*b + c*c == a*a:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def is_right_triangle():\n    n = int(input())\n    for _ in range(n):\n        sides = list(map(int, input().split()))\n        sides.sort()\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def is_right_triangle():\n    n = int(input())\n    for _ in range(n):\n        sides = sorted(map(int, input().split()))\n        print(\"YES\" if sides[0]**2 + sides[1]**2 == sides[2]**2 else \"NO\")",
            "def is_right_triangle():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = sorted(map(int, input().split()))\n        print(\"YES\" if (a**2 + b**2) == c**2 else \"NO\")"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def is_right_triangle():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    results = []\n    \n    index = 1\n    for _ in range(N):\n        a, b, c = sorted(map(int, data[index:index+3]))\n        if a**2 + b**2 == c**2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n        index += 3\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def is_right_triangle():\n    import sys\n    lines = sys.stdin.read().splitlines()\n    for line in lines[1:]:\n        a, b, c = sorted(map(int, line.split()))\n        print(\"YES\" if a**2 + b**2 == c**2 else \"NO\")",
            "import sys\n\ndef is_right_triangle():\n    lines = sys.stdin.readlines()\n    for line in lines[1:]:\n        a, b, c = map(int, line.split())\n        sides = sorted([a, b, c])\n        print(\"YES\" if sides[0]**2 + sides[1]**2 == sides[2]**2 else \"NO\")",
            "import sys\n\ndef is_right_triangle():\n    n = int(sys.stdin.readline())\n    for _ in range(n):\n        a, b, c = map(int, sys.stdin.readline().split())\n        sides = sorted((a, b, c))\n        print('YES' if sides[0]**2 + sides[1]**2 == sides[2]**2 else 'NO')",
            "import sys\n\ndef is_right_triangle():\n    n = int(sys.stdin.readline().split()[0])\n    for _ in range(n):\n        a, b, c = sorted(map(int, sys.stdin.readline().split()))\n        print(\"YES\" if a*a + b*b == c*c else \"NO\")",
            "import sys\n\ndef is_right_triangle():\n    lines = sys.stdin.read().splitlines()[1:]\n    for line in lines:\n        a, b, c = sorted(map(int, line.split()))\n        print(\"YES\" if a**2 + b**2 == c**2 else \"NO\")",
            "import sys\n\ndef is_right_triangle():\n    n = int(sys.stdin.readline().split()[0])\n    for _ in range(n):\n        a,b,c = sorted(map(int, sys.stdin.readline().split()))\n        print(\"YES\" if a**2 + b**2 == c**2 else \"NO\")"
        ]
    },
    {
        "id": 8,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "def triangle(dataset):\n    a, b, c = dataset\n    if a*a + b*b == c*c:\n        return 1\n    return 0\n\nN = int(input())\nfor _ in range(N):\n    dataset = sorted(map(int, input().split()))\n    flag = triangle(dataset)\n    print([\"NO\", \"YES\"][flag])\n",
        "writer": "human",
        "rewrite": [
            "def triangle(dataset):\n    a, b, c = dataset\n    return 1 if a*a + b*b == c*c else 0\n\nN = int(input())\nfor _ in range(N):\n    dataset = sorted(map(int, input().split()))\n    print(\"YES\" if triangle(dataset) else \"NO\")",
            "def is_right_triangle(sides):\n    a, b, c = sorted(sides)\n    return c**2 == a**2 + b**2\n\nN = int(input())\nfor _ in range(N):\n    sides = list(map(int, input().split()))\n    result = \"YES\" if is_right_triangle(sides) else \"NO\"\n    print(result)",
            "def is_right_angled(sides):\n  a, b, c = sorted(sides)\n  return (a**2 + b**2) == c**2\n\nn = int(input())\nfor _ in range(n):\n  sides = list(map(int, input().split()))\n  print(\"YES\" if is_right_angled(sides) else \"NO\")",
            "def is_right_triangle(sides):\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\nnum_tests = int(input())\nfor _ in range(num_tests):\n    sides = list(map(int, input().split()))\n    print(\"YES\" if is_right_triangle(sides) else \"NO\")",
            "def check_right_triangle(sides):\n    sides.sort()\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n\nn = int(input())\nfor _ in range(n):\n    sides = list(map(int, input().split()))\n    print(\"YES\" if check_right_triangle(sides) else \"NO\")",
            "def is_right_triangle(sides):\n    a, b, c = sorted(sides)\n    return a**2 + b**2 == c**2\n\nn = int(input())\nfor _ in range(n):\n    sides = list(map(int, input().split()))\n    print(\"YES\" if is_right_triangle(sides) else \"NO\")"
        ]
    },
    {
        "id": 7,
        "prompt_id": "p00003",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Is it a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nN a Right Triangle?\nWrite a program which judges wheather given length of three side form a right triangle. Print \"\nYES\n\" if the given sides (integers) form a right triangle, \"\nNO\n\" if not so.\nInput\nInput consists of several data sets. In the first line, the number of data set,\nN\nis given. Then,\nN\nlines follow, each line corresponds to a data set. A data set consists of three integers separated by a single space.\nConstraints\n1 \u2264 length of the side \u2264 1,000\nN\n\u2264 1,000\nOutput\nFor each data set, print \"\nYES\n\" or \"\nNO\n\".\nSample Input\n3\n4 3 5\n4 3 6\n8 8 8\nOutput for the Sample Input\nYES\nNO\nNO",
        "code": "# coding:utf-8\n\ndef main():\n    N = int(input().rstrip())\n\n    for i in range(N):\n        ls = list(map(int, input().split(' ')))\n        ls.sort()\n\n        if(ls[0]**2 + ls[1]**2 == ls[2]**2):\n            print('YES')\n        else:\n            print('NO')\n            \nif __name__ == \"__main__\":\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    N = int(input())\n    for i in range(N):\n        a, b, c = map(int, input().split())\n        sides = sorted([a, b, c])\n        if sides[0]**2 + sides[1]**2 == sides[2]**2:\n            print('YES')\n        else:\n            print('NO')\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        print(\"YES\" if sorted([a, b, c])[0]**2 + sorted([a, b, c])[1]**2 == sorted([a, b, c])[2]**2 else \"NO\")\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef is_pythagorean_triplet(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().split())\n    print(\"YES\" if is_pythagorean_triplet(a, b, c) else \"NO\")",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        nums = sorted(map(int, input().split()))\n        print(\"YES\" if nums[0]**2 + nums[1]**2 == nums[2]**2 else \"NO\")\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    a, b, c = map(int, sys.stdin.readline().split())\n    print(['NO', 'YES'][sorted([a,b,c])[0]**2 + sorted([a,b,c])[1]**2 == sorted([a,b,c])[2]**2])",
            "n = int(input())\nfor _ in range(n):\n    x, y, z = sorted(map(int, input().split()))\n    print('YES' if x*x + y*y == z*z else 'NO')"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(s):\n    return s[::-1]",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(s):\n    return \"\".join(reversed(s))",
            "def reverse_string(s):\n    new_string = \"\"\n    for i in range(len(s) -1, -1, -1):\n        new_string += s[i]\n    return new_string",
            "def reverse_string(s):\n    return \"\".join(reversed(s))",
            "def reverse_string(s):\n    new_string = \"\"\n    for char in s:\n        new_string = char + new_string\n    return new_string",
            "def reverse_string(s):\n    return s.reverse()",
            "def reverse_string(s):\n    l = list(s)\n    l.reverse()\n    return \"\".join(l)"
        ]
    },
    {
        "id": 13,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def rev(str):\n    revstr=''\n    for i in range(len(str)-1,-1,-1):\n        revstr=revstr + str[i]\n    return revstr\nstr=input(\"\")\nprint(rev(str))",
        "writer": "human",
        "rewrite": [
            "def rev(str):\n    return str[::-1]\n\nstr = input(\"\")\nprint(rev(str))",
            "def rev(s):\n    return s[::-1]\n\ns = input()\nprint(rev(s))",
            "def rev(string):\n  return \"\".join(reversed(string))\n\nstring = input()\nprint(rev(string))",
            "def rev(s):\n    return \"\".join(reversed(s))\n\ns = input()\nprint(rev(s))",
            "def rev(s):\n    return s[::-1]\n\nstring = input()\nprint(rev(string))",
            "def reverse_string(input_string):\n    return input_string[::-1]\n\ninput_string = input()\nprint(reverse_string(input_string))"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def main():\n    str = input()\n    str = str[::-1]\n    print(str)\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    print(input()[::-1])\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input()[::-1])\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n  print(input()[::-1])\n\nif __name__ == \"__main__\":\n  main()",
            "def main():\n    string = input()\n    reversed_string = string[::-1]\n    print(reversed_string)\n\nif __name__ == \"__main__\":\n    main()",
            "def reversed_string():\n    return input()[::-1]\n\nprint(reversed_string())",
            "print(input()[::-1])"
        ]
    },
    {
        "id": 14,
        "prompt_id": "p00006",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Reverse Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23se Sequence\nWrite a program which reverses a given string\nstr\n.\nInput\nstr\n(the size of\nstr\n\u2264 20) is given in a line.\nOutput\nPrint the reversed\nstr\nin a line.\nSample Input\nw32nimda\nOutput for the Sample Input\nadmin23w",
        "code": "def reverse_string(s: str) -> str:\n    return s[::-1]\n\n# Example usage:\ninput_str = \"w32nimda\"\nprint(reverse_string(input_str))  # Output: admin23w",
        "writer": "machine",
        "rewrite": [
            "def reverse_string(s: str) -> str:\n    return \"\".join(reversed(s))",
            "def reverse_string(s: str) -> str:\n    reversed_string = \"\"\n    for i in range(len(s) - 1, -1, -1):\n        reversed_string += s[i]\n    return reversed_string",
            "def reverse_string(s: str) -> str:\n    return \"\".join(reversed(list(s)))",
            "def reverse_string(s: str) -> str:\n    new_string = \"\"\n    for char in s:\n        new_string = char + new_string\n    return new_string",
            "def reverse_string(s: str) -> str:\n    l = list(s)\n    l.reverse()\n    return \"\".join(l)",
            "def reverse_string(s:str) -> str:\n    return s[-1::-1]"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\ndef gcd(a, b):\n    for i in range(1, a+1):\n        if a % i == 0:\n            t = a // i\n            if b % t == 0:\n                return t\nfor line in sys.stdin:\n    a, b = sorted(map(int, line.split()))\n    gcdab = gcd(a, b)\n    print(gcdab, a // gcdab * b)",
        "writer": "human",
        "rewrite": [
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a,b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    g = math.gcd(a, b)\n    print(g, a * b // g)",
            "import sys\nimport math\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    g = math.gcd(a, b)\n    print(g, a * b // g)",
            "import math\nimport sys\n\nfor line in sys.stdin:\n    a, b = map(int, line.split())\n    print(math.gcd(a, b), a * b // math.gcd(a, b))"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "def gcd(a, b) :\n    if a % b == 0 :\n        return b\n    else :\n        return gcd(b, a % b)\n\nwhile True :\n    try :\n        a, b = map(int, input().split())\n    except EOFError :\n        break\n    \n    a, b = max(a, b), min(a, b)\n    x = gcd(a, b)\n    print(x, a * b // x)\n",
        "writer": "human",
        "rewrite": [
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(gcd(a, b), a * b // gcd(a, b))\n    except EOFError:\n        break",
            "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(gcd(a,b), a * b // gcd(a,b))\n    except EOFError:\n        break",
            "import math\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(math.gcd(a, b), a * b // math.gcd(a, b))\n    except EOFError:\n        break",
            "import math\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        g = math.gcd(a, b)\n        print(g, a * b // g)\n    except EOFError:\n        break",
            "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        print(gcd(a, b), a * b // gcd(a, b))\n    except EOFError:\n        break",
            "import math\n\nwhile True:\n    try:\n        a, b = map(int, input().split())\n        g = math.gcd(a,b)\n        print(g, a*b//g)\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 12,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        if line:\n            a, b = map(int, line.split())\n            gcd = math.gcd(a, b)\n            lcm = (a * b) // gcd\n            print(gcd, lcm)\n\ncompute_gcd_lcm()",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            print(math.gcd(a,b), (a*b)//math.gcd(a,b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().splitlines():\n        if line:\n            a, b = map(int, line.split())\n            print(math.gcd(a, b), (a * b) // math.gcd(a, b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in filter(None, sys.stdin.read().splitlines()):\n        a, b = map(int, line.split())\n        print(math.gcd(a, b), a * b // math.gcd(a, b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    lines = sys.stdin.read().strip().split('\\n')\n    for line in lines:\n        if line:\n            a, b = map(int, line.split())\n            print(math.gcd(a, b), math.lcm(a, b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().splitlines():\n        if line:\n            a,b = map(int, line.split())\n            print(math.gcd(a,b), (a*b)//math.gcd(a,b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().splitlines():\n        try:\n            a, b = map(int, line.split())\n            print(math.gcd(a, b), math.lcm(a, b))\n        except ValueError:\n            pass\n\ncompute_gcd_lcm()"
        ]
    },
    {
        "id": 11,
        "prompt_id": "p00005",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n GCD and LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 15000000nd LCM\nWrite a program which computes the greatest common divisor (GCD) and the least common multiple (LCM) of given\na\nand\nb\n.\nInput\nInput consists of several data sets. Each data set contains\na\nand\nb\nseparated by a single space in a line. The input terminates with EOF.\nConstraints\n0 <\na, b\n\u2264 2,000,000,000\nLCM(\na, b\n) \u2264 2,000,000,000\nThe number of data sets \u2264 50\nOutput\nFor each data set, print GCD and LCM separated by a single space in a line.\nSample Input\n8 6\n50000000 30000000\nOutput for the Sample Input\n2 24\n10000000 150000000",
        "code": "import sys\nimport math\n\ndef compute_gcd_lcm():\n    input_data = sys.stdin.read().strip().split('\\n')\n    results = []\n    for line in input_data:\n        a, b = map(int, line.split())\n        gcd = math.gcd(a, b)\n        lcm = a * b // gcd\n        results.append(f\"{gcd} {lcm}\")\n    for result in results:\n        print(result)\n\ncompute_gcd_lcm()",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().strip().split('\\n'):\n        a, b = map(int, line.split())\n        print(math.gcd(a,b), a*b//math.gcd(a,b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().splitlines():\n        a, b = map(int, line.split())\n        print(math.gcd(a, b), a * b // math.gcd(a, b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(math.gcd(a, b), a * b // math.gcd(a, b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().splitlines():\n        a, b = map(int, line.split())\n        print(math.gcd(a,b), a*b//math.gcd(a,b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin:\n        a, b = map(int, line.split())\n        print(math.gcd(a, b), a * b // math.gcd(a, b))\n\ncompute_gcd_lcm()",
            "import sys\nimport math\n\ndef compute_gcd_lcm():\n    for line in sys.stdin.read().splitlines():\n        a,b = map(int, line.split())\n        print(f\"{math.gcd(a,b)} {a*b//math.gcd(a,b)}\")\n\ncompute_gcd_lcm()"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import math\ndef int_ceil(src, range):\n    return int(math.ceil(src/float(range)) * range)\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        risi = debt * 0.05\n        debt = int_ceil(debt + risi, 1000)\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        debt = math.ceil((debt * 1.05) / 1000) * 1000\n    print(int(debt))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    week = int(input())\n    debt = 100000\n    for _ in range(week):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = ((debt * 1.05) + 999) // 1000 * 1000\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n  weeks = int(input())\n  debt = 100000\n  for _ in range(weeks):\n    debt = -(-(debt * 1.05) // 1000) * 1000\n  print(debt)\n\nif __name__ == \"__main__\":\n  main()",
            "def main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(debt)\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    weeks = int(input())\n    debt = 100000\n    for _ in range(weeks):\n        debt = math.ceil(debt * 1.05 / 1000) * 1000\n    print(int(debt))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 16,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = ((debt * 1.05 + 999) // 1000) * 1000\n    print(int(debt))\n\n# Example usage:\n# n = int(input())\n# compute_debt(n)",
        "writer": "machine",
        "rewrite": [
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = round((debt * 1.05 + 999) / 1000) * 1000\n    return int(debt)",
            "def compute_debt(n):\n  debt = 100000\n  for i in range(n):\n    debt = int(round((debt * 1.05 + 999) / 1000) * 1000)\n  return debt",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(round(debt * 1.05 + 999) / 1000) * 1000\n    return debt",
            "def compute_debt(n):\n    debt = 100000\n    for i in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    return debt",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(1000 * round(debt * 1.05 / 1000 + 0.999))\n    return debt",
            "def compute_debt(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(1000 * round((debt * 1.05 + 999) / 1000))\n    return debt"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import sys\n\ndef solve_simultaneous_equations():\n    input = sys.stdin.read().strip().split('\\n')\n    for line in input:\n        a, b, c, d, e, f = map(int, line.split())\n        denominator = a * e - b * d\n        x = (c * e - b * f) / denominator\n        y = (a * f - c * d) / denominator\n        print(f\"{x:.3f} {y:.3f}\")",
        "writer": "machine",
        "rewrite": [
            "import sys\n\ndef solve_simultaneous_equations():\n    lines = sys.stdin.readlines()\n    for line in lines:\n        a, b, c, d, e, f = map(float, line.strip().split())\n        x = (c * e - b * f) / (a * e - b * d)\n        y = (a * f - c * d) / (a * e - b * d)\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        det = a * e - b * d\n        if det == 0:\n            print(\"No unique solution\")\n            continue\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        print(f\"{x:.3f} {y:.3f}\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        a, b, c, d, e, f = map(float, line.split())\n        try:\n            x = (c*e - b*f) / (a*e - b*d)\n            y = (a*f - c*d) / (a*e - b*d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"No unique solution\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a,b,c,d,e,f = map(float,line.split())\n        try:\n            x=(c*e-b*f)/(a*e-b*d)\n            y=(a*f-c*d)/(a*e-b*d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"Error: No unique solution exists.\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        try:\n            a, b, c, d, e, f = map(float, line.split())\n            det = a * e - b * d\n            if det == 0:\n                raise ZeroDivisionError\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except ValueError:\n            print(\"Invalid input\")\n        except ZeroDivisionError:\n            print(\"No unique solution\")",
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        try:\n            a, b, c, d, e, f = map(float, line.split())\n            determinant = a * e - b * d\n            if determinant == 0:\n                print(\"Singular matrix, no unique solution.\")\n                continue\n            x = (c * e - b * f) / determinant\n            y = (a * f - c * d) / determinant\n            print(f\"{x:.3f} {y:.3f}\")\n        except ValueError:\n            pass"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) // 1000 * 1000\n    print(int(debt))\n\n# Example usage:\nn = int(input().strip())\ndebt_in_n_weeks(n)",
        "writer": "machine",
        "rewrite": [
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(round(debt * 1.05 + 999, -3))\n    print(debt)\n\nn = int(input().strip())\ndebt_in_n_weeks(n)",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(1000 * round((debt * 1.05 + 999) / 1000))\n    print(debt)\n\nn = int(input())\ndebt_in_n_weeks(n)",
            "def debt_in_n_weeks(n):\n  debt = 100000\n  for _ in range(n):\n    debt = int(round(debt * 1.05 + 999, -3))\n  print(debt)\n\nn = int(input().strip())\ndebt_in_n_weeks(n)",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for i in range(n):\n        debt = int(debt * 1.05 + 999) - int(int(debt * 1.05 + 999) % 1000)\n    print(debt)\n\nn = int(input().strip())\ndebt_in_n_weeks(n)",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = (debt * 1.05 + 999) / 1000 * 1000\n        debt = int(debt)\n    print(debt)\n\nn = int(input().strip())\ndebt_in_n_weeks(n)",
            "def debt_in_n_weeks(n):\n    debt = 100000\n    for _ in range(n):\n        debt = int(round((debt * 1.05 + 999)/1000,0)*1000)\n    print(debt)\n\nn = int(input().strip())\ndebt_in_n_weeks(n)"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(int, line.split())\n        # Calculate the determinant\n        det = a * e - b * d\n        # Calculate x and y using Cramer's rule\n        x = (c * e - b * f) / det\n        y = (a * f - c * d) / det\n        # Print the solutions rounded to three decimal places\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
        "writer": "machine",
        "rewrite": [
            "import sys\n\ndef solve_simultaneous_equations():\n    for line in sys.stdin:\n        a,b,c,d,e,f = map(float,line.split())\n        x = (c*e - b*f)/(a*e - b*d)\n        y = (a*f - c*d)/(a*e - b*d)\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve_simultaneous_equations()",
            "import sys\n\ndef solve_equations():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        try:\n            x = (c * e - b * f) / (a * e - b * d)\n            y = (a * f - c * d) / (a * e - b * d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"No unique solution\")\n\nif __name__ == \"__main__\":\n    solve_equations()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a,b,c,d,e,f = map(float,line.split())\n        try:\n            x=(c*e-b*f)/(a*e-b*d)\n            y=(a*f-c*d)/(a*e-b*d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"No unique solution exists\")\n\nif __name__==\"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        determinant = a * e - b * d\n        if determinant == 0:\n            print(\"Infinite solutions or no solution\")\n            continue\n        x = (c * e - b * f) / determinant\n        y = (a * f - c * d) / determinant\n        print(f\"{x:.3f} {y:.3f}\")\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a,b,c,d,e,f = [float(x) for x in line.split()]\n        try:\n            x = (c*e - b*f) / (a*e - b*d)\n            y = (a*f - c*d) / (a*e - b*d)\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"No unique solution\")\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\n\ndef solve():\n    for line in sys.stdin:\n        a, b, c, d, e, f = map(float, line.split())\n        try:\n            det = a * e - b * d\n            x = (c * e - b * f) / det\n            y = (a * f - c * d) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except ZeroDivisionError:\n            print(\"Singular matrix\")\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 15,
        "prompt_id": "p00007",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Debt Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n13000Hell\nYour friend who lives in undisclosed country is involved in debt. He is borrowing 100,000-yen from a loan shark. The loan shark adds 5% interest of the debt and rounds it to the nearest 1,000 above week by week.\nWrite a program which computes the amount of the debt in\nn\nweeks.\nInput\nAn integer\nn\n(0 \u2264\nn\n\u2264 100) is given in a line.\nOutput\nPrint the amout of the debt in a line.\nSample Input\n5\nOutput for the Sample Input\n130000",
        "code": "import sys\n\ndef compoundInterest(x, i, n):\n    if n == 0:\n        return x\n\n    ans = int(x * (1 + i))\n    hasu = ans % 1000\n    if hasu != 0:\n        ans -= hasu\n        ans += 1000\n    return compoundInterest(ans, i, n-1)\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print (ans)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef compoundInterest(x, i, n):\n    for _ in range(n):\n        x = int(x * (1 + i))\n        x -= x % 1000\n        x += 1000\n    return x\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print(ans)",
            "import sys\n\ndef compoundInterest(principal, interest_rate, num_years):\n    amount = principal\n    for _ in range(num_years):\n        amount = amount * (1 + interest_rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    num_years = int(input())\n    result = compoundInterest(100000, 0.05, num_years)\n    print(result)",
            "import sys\n\ndef compoundInterest(principal, interest_rate, num_years):\n    amount = principal\n    for _ in range(num_years):\n        amount *= (1 + interest_rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    num_years = int(input())\n    result = compoundInterest(100000, 0.05, num_years)\n    print(result)",
            "import sys\n\ndef compoundInterest(x, i, n):\n    for _ in range(n):\n        x = int(x * (1 + i))\n        x = (x // 1000) * 1000 + 1000\n    return x\n\nif __name__ == \"__main__\":\n    n = int(input())\n    ans = compoundInterest(100000, 0.05, n)\n    print(ans)",
            "import sys\n\ndef compoundInterest(principal, rate, years):\n    amount = principal\n    for _ in range(years):\n        amount = amount * (1 + rate)\n        amount = (amount // 1000) * 1000 + 1000\n    return int(amount)\n\nif __name__ == \"__main__\":\n    years = int(input())\n    result = compoundInterest(100000, 0.05, years)\n    print(result)",
            "import sys\n\ndef compoundInterest(principal, interest_rate, years):\n  amount = principal\n  for _ in range(years):\n    amount = amount * (1 + interest_rate)\n    amount = (amount // 1000) * 1000 + 1000\n  return int(amount)\n\nif __name__ == \"__main__\":\n  years = int(input())\n  result = compoundInterest(100000, 0.05, years)\n  print(result)"
        ]
    },
    {
        "id": 9,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "import math\ndef saidai(x, y):\n    x, y = math.fabs(x), math.fabs(y)\n    y, x = max(x, y), min(x, y)\n    if x == 0:\n        return y\n\n    return saidai(x, y % x)\n\ndef saisyo(x, y):\n    spam = saidai(x, y)\n    return spam * (x / spam) * (y / spam)\n\n# a,b,c,d,e,f  = list(map(int,'1 2 3 4 5 6'.split()))\ntry:\n    while 1:\n\n        a,b,c,d,e,f  = list(map(int,input().split()))\n        s = saidai(a, d)\n\n        k1 = d / s * -1\n        k2 = a / s\n\n        y = (k1*c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b*y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept Exception:\n    pass",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef gcd(x, y):\n    x, y = abs(x), abs(y)\n    while y:\n        x, y = y, x % y\n    return x\n\ndef lcm(x, y):\n    return abs(x*y) // gcd(x,y)\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a,d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(\"{:.3f} {:.3f}\".format(x, y))\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass",
            "import math\n\ndef gcd(a, b):\n    a = abs(a)\n    b = abs(b)\n    while b:\n        a, b = b, a % b\n    return a\n\ntry:\n    while True:\n        a, b, c, d, e, f = map(int, input().split())\n        g = gcd(a, d)\n        k1 = -d // g\n        k2 = a // g\n        y = (k1 * c + k2 * f) / (k1 * b + k2 * e)\n        x = (c - b * y) / a\n        print(f\"{x:.3f} {y:.3f}\")\nexcept EOFError:\n    pass"
        ]
    },
    {
        "id": 10,
        "prompt_id": "p00004",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Simultaneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.00taneous Equation\nWrite a program which solve a simultaneous equation:\nax + by = c\ndx + ey = f\nThe program should print\nx\nand\ny\nfor given\na\n,\nb\n,\nc\n,\nd\n,\ne\nand\nf\n(-1,000 \u2264\na, b, c, d, e, f\n\u2264 1,000). You can suppose that given equation has a unique solution.\nInput\nThe input consists of several data sets, 1 line for each data set. In a data set, there will be\na, b, c, d, e, f\nseparated by a single space. The input terminates with EOF.\nOutput\nFor each data set, print\nx\nand\ny\nseparated by a single space. Print the solution to three places of decimals. Round off the solution to three decimal places.\nSample Input 1\n1 2 3 4 5 6\n2 -1 -2 -1 -1 -5\nOutput for the Sample Input 1\n-1.000 2.000\n1.000 4.000\nSample Input 2\n2 -1 -3 1 -1 -3\n2 -1 -3 -9 9 27\nOutput for the Sample Input 2\n0.000 3.000\n0.000 3.000",
        "code": "# ????????\u00a3???????\u00a8????????\u00a7\u00a3???????????\u00b0??????\n# ax + by = c\n# dx + ey = f\nimport sys\n\ndef inverse(a, b, d, e):\n    deta = a * e - b * d\n    return (deta, e, -b, -d, a)\n\nwhile True:\n    data = sys.stdin.readline()\n    if data is None or data.strip() == '':\n        break\n    data = data.strip().split(' ')\n    a, b, c, d, e, f = [float(i) for i in data]\n\n    inv = inverse(a, b, d, e)\n    x = (inv[1] * c + inv[2] * f) / inv[0] + 0\n    y = (inv[3] * c + inv[4] * f) / inv[0] + 0\n\n    print('%.3f %.3f' % (x, y))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve():\n    while True:\n        try:\n            line = sys.stdin.readline().strip()\n            if not line:\n                break\n            a, b, c, d, e, f = map(float, line.split())\n            det = a * e - b * d\n            if det == 0:\n                print(\"No unique solution\")\n                continue\n            x = (e * c - b * f) / det\n            y = (-d * c + a * f) / det\n            print(f\"{x:.3f} {y:.3f}\")\n        except ValueError:\n            print(\"Invalid input\")\n\nsolve()",
            "import sys\n\ndef solve_linear_system(a, b, c, d, e, f):\n    determinant = a * e - b * d\n    if determinant == 0:\n        return None  # No unique solution\n    x = (e * c - b * f) / determinant\n    y = (a * f - d * c) / determinant\n    return x, y\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line:\n        break\n    try:\n        a, b, c, d, e, f = map(float, line.strip().split())\n        solution = solve_linear_system(a, b, c, d, e, f)\n        if solution:\n            x, y = solution\n            print(f\"{x:.3f} {y:.3f}\")\n        else:\n            print(\"No unique solution\")\n    except ValueError:\n        print(\"Invalid input\")",
            "import sys\n\ndef solve_system(a, b, c, d, e, f):\n    det = a * e - b * d\n    if det == 0:\n        return \"No unique solution\"\n    x = (e * c - b * f) / det\n    y = (a * f - d * c) / det\n    return f\"{x:.3f} {y:.3f}\"\n\nwhile True:\n    line = sys.stdin.readline()\n    if not line:\n        break\n    try:\n        a, b, c, d, e, f = map(float, line.split())\n        result = solve_system(a, b, c, d, e, f)\n        print(result)\n    except ValueError:\n        pass",
            "import sys\n\ndef solve(a, b, c, d, e, f):\n    det = a * e - b * d\n    if det == 0:\n        return \"No unique solution\"\n    x = (e * c - b * f) / det\n    y = (a * f - d * c) / det\n    return f\"{x:.3f} {y:.3f}\"\n\nwhile True:\n    try:\n        line = sys.stdin.readline().strip()\n        if not line:\n            break\n        a, b, c, d, e, f = map(float, line.split())\n        print(solve(a, b, c, d, e, f))\n    except ValueError:\n        pass",
            "import sys\n\ndef solve_linear_equations(a, b, c, d, e, f):\n    determinant = a * e - b * d\n    if determinant == 0:\n        return \"No unique solution\"\n    x = (c * e - b * f) / determinant\n    y = (a * f - c * d) / determinant\n    return \"{:.3f} {:.3f}\".format(x, y)\n\nwhile True:\n    try:\n        line = sys.stdin.readline().strip()\n        if not line:\n            break\n        a, b, c, d, e, f = map(float, line.split())\n        result = solve_linear_equations(a, b, c, d, e, f)\n        print(result)\n    except ValueError:\n        pass",
            "import sys\n\ndef solve(a, b, c, d, e, f):\n    det = a * e - b * d\n    if det == 0: return \"No unique solution\"\n    x = (e * c - b * f) / det\n    y = (a * f - d * c) / det\n    return f\"{x:.3f} {y:.3f}\"\n\nwhile True:\n    try:\n        line = sys.stdin.readline().strip()\n        if not line: break\n        a, b, c, d, e, f = map(float, line.split())\n        print(solve(a, b, c, d, e, f))\n    except ValueError: pass"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(10):\n            for b in range(10):\n                for c in range(10):\n                    for d in range(10):\n                        if a + b + c + d == n:\n                            count += 1\n        results.append(count)\n    return results\n\n# Sample usage\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
        "writer": "machine",
        "rewrite": [
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(n + 1):\n            for b in range(n - a + 1):\n                for c in range(n - a - b + 1):\n                    d = n - a - b - c\n                    if 0 <= d < 10:\n                        count += 1\n        results.append(count)\n    return results",
            "from itertools import product\n\ndef sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a, b, c, d in product(range(10), repeat=4):\n            if a + b + c + d == n:\n                count += 1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n  return [sum(1 for a,b,c,d in product(range(10),repeat=4) if a+b+c+d==n) for n in datasets]\nfrom itertools import product",
            "from itertools import combinations_with_replacement\n\ndef sum_of_4_integers(datasets):\n    results = []\n    for target_sum in datasets:\n        count = 0\n        for combo in combinations_with_replacement(range(10), 4):\n            if sum(combo) == target_sum:\n                count += 1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(min(n + 1, 10)):\n            for b in range(min(n - a + 1, 10)):\n                for c in range(min(n - a - b + 1, 10)):\n                    d = n - a - b - c\n                    if 0 <= d < 10:\n                        count += 1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n    return [sum(1 for i in range(10**4) if sum(map(int,str(i).zfill(4)))==n) for n in datasets]"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\n\ndef ans(num):\n    ans = 0\n\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                for d in range(10):\n                    if a+b+c+d == num:\n                        ans += 1\n\n    return ans\n\n\ndef main():\n    a = []\n\n    for line in sys.stdin:\n        a.append(int(line))\n\n    for line in a:\n        print(ans(line))\n\nif __name__ == \"__main__\":\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom itertools import product\n\ndef ans(num):\n    return sum(1 for a,b,c,d in product(range(10), repeat=4) if a+b+c+d == num)\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef ans(n):\n    count = 0\n    for combo in combinations_with_replacement(range(10), 4):\n        if sum(combo) == n:\n            count += 1\n    return count\n\ndef main():\n    for num in map(int, sys.stdin):\n        print(ans(num))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef ans(n):\n    return sum(1 for a in range(n + 1) for b in range(n - a + 1) for c in range(n - a - b + 1) if 0 <= n - a - b - c < 10)\n\n\ndef main():\n    for num in map(int, sys.stdin):\n        print(ans(num))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef ans(n):\n  count = 0\n  for a in range(10):\n    for b in range(10):\n      for c in range(10):\n        d = n - a - b - c\n        if 0 <= d < 10:\n          count += 1\n  return count\n\ndef main():\n  for line in sys.stdin:\n    print(ans(int(line)))\n\nif __name__ == \"__main__\":\n  main()",
            "import sys\n\ndef ans(num):\n    count = 0\n    for a in range(10):\n        for b in range(10):\n            for c in range(10):\n                d = num - a - b - c\n                if 0 <= d < 10:\n                    count += 1\n    return count\n\ndef main():\n    for line in sys.stdin:\n        print(ans(int(line)))\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef ans(n):\n    c = 0\n    for a in range(min(n,10)):\n        for b in range(min(n-a,10)):\n            for c in range(min(n-a-b,10)):\n                d = n - a - b -c\n                if 0 <= d < 10:\n                    c += 1\n    return c\n\ndef main():\n    for x in map(int,sys.stdin):\n        print(ans(x))\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 18,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(10):\n            for b in range(10):\n                for c in range(10):\n                    for d in range(10):\n                        if a + b + c + d == n:\n                            count += 1\n        results.append(count)\n    return results\n\n# Example usage:\ndatasets = [35, 1]\nprint(sum_of_4_integers(datasets))  # Output: [4, 4]",
        "writer": "machine",
        "rewrite": [
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(n + 1):\n            for b in range(n - a + 1):\n                for c in range(n - a - b + 1):\n                    d = n - a - b - c\n                    if 0 <=d < 10:\n                        count +=1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n    from itertools import product\n    results = []\n    for n in datasets:\n        count = 0\n        for a, b, c, d in product(range(10), repeat=4):\n            if a + b + c + d == n:\n                count += 1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n  return [sum(1 for a,b,c,d in product(range(10),repeat=4) if a+b+c+d==n) for n in datasets]\nfrom itertools import product",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(min(n,10)):\n            for b in range(min(n-a,10)):\n                for c in range(min(n-a-b,10)):\n                    d = n - a - b - c\n                    if 0 <= d < 10:\n                        count += 1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n    from itertools import combinations_with_replacement\n    results = []\n    for n in datasets:\n        count = 0\n        for combo in combinations_with_replacement(range(10), 4):\n            if sum(combo) == n:\n                count += 1\n        results.append(count)\n    return results",
            "def sum_of_4_integers(datasets):\n    results = []\n    for n in datasets:\n        count = 0\n        for a in range(10):\n            for b in range(10):\n                for c in range(10):\n                    d = n - a - b - c\n                    if 0 <= d < 10:\n                        count += 1\n        results.append(count)\n    return results"
        ]
    },
    {
        "id": 17,
        "prompt_id": "p00008",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sum of 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\nf 4 Integers\nWrite a program which reads an integer\nn\nand identifies the number of combinations of\na, b, c\nand\nd\n(0 \u2264\na, b, c, d\n\u2264 9) which meet the following equality:\na + b + c + d = n\nFor example, for\nn\n= 35, we have 4 different combinations of (\na, b, c, d\n): (\n8, 9, 9, 9\n), (\n9, 8, 9, 9\n), (\n9, 9, 8, 9\n), and (\n9, 9, 9, 8\n).\nInput\nThe input consists of several datasets. Each dataset consists of\nn\n(1 \u2264\nn\n\u2264 50) in a line. The number of datasets is less than or equal to 50.\nOutput\nPrint the number of combination in a line.\nSample Input\n35\n1\nOutput for the Sample Input\n4\n4",
        "code": "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef get_nums(n, pos):\n    N = [1 for _ in range(n)]\n    a = sum(N[:pos[0]])\n    b = sum(N[pos[0]:pos[1]])\n    c = sum(N[pos[1]:pos[2]])\n    d = sum(N[pos[2]:])\n    if a > 9 or b > 9 or c > 9 or d > 9:\n        return None\n    return (a,b,c,d)\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        probs = [get_nums(n, p) for p in comb(range(n+1), 3)]\n        probs = [p for p in probs if p != None]\n        print(len(probs))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef run():\n    for _n in sys.stdin:\n        n = int(_n)\n        count = 0\n        for p in comb(range(n + 1), 3):\n            a = sum(1 for _ in range(p[0]))\n            b = sum(1 for _ in range(p[1] - p[0]))\n            c = sum(1 for _ in range(p[2] - p[1]))\n            d = sum(1 for _ in range(n - p[2]))\n            if a <= 9 and b <= 9 and c <= 9 and d <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for i, j, k in comb(range(n + 1), 3):\n            a = i\n            b = j - i\n            c = k - j\n            d = n - k\n            if 0 <= a <= 9 and 0 <= b <= 9 and 0 <= c <= 9 and 0 <= d <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for p1, p2, p3 in comb(range(n + 1), 3):\n            if p1 <= 9 and p2 - p1 <= 9 and p3 - p2 <= 9 and n - p3 <= 9:\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement as comb\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for a, b, c in comb(range(n + 1), 3):\n            d = n - a - b - c\n            if all(0 <= x <= 9 for x in (a, b, c, d)):\n                count += 1\n        print(count)\n\nif __name__ == '__main__':\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for i, j, k in combinations_with_replacement(range(n + 1), 3):\n            if i <= 9 and j - i <= 9 and k - j <= 9 and n - k <= 9:\n                count += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    run()",
            "import sys\nfrom itertools import combinations_with_replacement\n\ndef run():\n    for line in sys.stdin:\n        n = int(line)\n        count = 0\n        for p1, p2, p3 in combinations_with_replacement(range(n + 1), 3):\n            a = p1\n            b = p2 - p1\n            c = p3 - p2\n            d = n - p3\n            if all(0 <= x <= 9 for x in (a, b, c, d)):\n                count += 1\n        print(count)\n\nif __name__ == \"__main__\":\n    run()"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji(w, n, operations):\n    vertical_lines = list(range(1, w + 1))\n    for a, b in operations:\n        vertical_lines[a - 1], vertical_lines[b - 1] = vertical_lines[b - 1], vertical_lines[a - 1]\n    return vertical_lines\n\n# Example usage:\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
        "writer": "machine",
        "rewrite": [
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a-1], lines[b-1] = lines[b-1], lines[a-1]\n    return lines",
            "def amidakuji(w, n, ops):\n  lines = list(range(1, w + 1))\n  for i, j in ops:\n    lines[i - 1], lines[j - 1] = lines[j - 1], lines[i - 1]\n  return lines",
            "def amidakuji(width, num_ops, swaps):\n    lines = list(range(1, width + 1))\n    for i, j in swaps:\n        lines[i - 1], lines[j - 1] = lines[j - 1], lines[i - 1]\n    return lines",
            "def solve(width, num_operations, pairs):\n    cols = list(range(1, width + 1))\n    for a, b in pairs:\n        cols[a - 1], cols[b - 1] = cols[b - 1], cols[a - 1]\n    return cols",
            "def shuffle_lines(width, num_swaps, swap_list):\n    line_numbers = list(range(1, width + 1))\n    for i, j in swap_list:\n        line_numbers[i-1], line_numbers[j-1] = line_numbers[j-1], line_numbers[i-1]\n    return line_numbers",
            "def rearrange(width, num_swaps, swap_pairs):\n    lines = list(range(1, width + 1))\n    for p1, p2 in swap_pairs:\n        lines[p1-1], lines[p2-1] = lines[p2-1], lines[p1-1]\n    return lines"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for op in operations:\n        a, b = op\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines\n\n# Sample usage\nw = 5\nn = 4\noperations = [(2, 4), (3, 5), (1, 2), (3, 4)]\nresult = amidakuji(w, n, operations)\nfor num in result:\n    print(num)",
        "writer": "machine",
        "rewrite": [
            "def amidakuji(w, n, operations):\n    lines = list(range(1, w + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines",
            "def amidakuji(width, num_operations, operations):\n    lines = list(range(1, width + 1))\n    for a, b in operations:\n        lines[a - 1], lines[b - 1] = lines[b - 1], lines[a - 1]\n    return lines",
            "def amidakuji(width, _n, operations):\n  lines = list(range(1, width + 1))\n  for op in operations:\n    lines[op[0]-1], lines[op[1]-1] = lines[op[1]-1], lines[op[0]-1]\n  return lines",
            "def amidakuji(width, num_ops, swaps):\n    cols = list(range(1, width + 1))\n    for a, b in swaps:\n        cols[a - 1], cols[b - 1] = cols[b - 1], cols[a - 1]\n    return cols",
            "def solve_amidakuji(width, num_swaps, swaps):\n    ans = list(range(1, width + 1))\n    for i, j in swaps:\n        ans[i-1], ans[j-1] = ans[j-1], ans[i-1]\n    return ans",
            "def amidakuji_solver(num_lines, num_ops, operations):\n    lines = list(range(1, num_lines + 1))\n    for op in operations:\n        lines[op[0]-1], lines[op[1]-1] = lines[op[1]-1], lines[op[0]-1]\n    return lines"
        ]
    },
    {
        "id": 23,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n\n\ndef main():\n    w = int(input())\n    n = int(input())\n\n    xs = [i for i in range(w+1)]\n    for _ in range(n):\n        a, b = map(int, input().split(\",\"))\n\n        xs[a], xs[b] = xs[b], xs[a]\n\n    for i in range(1, w+1):\n        print(xs[i])\n\nif __name__ == \"__main__\": main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    w = int(input())\n    n = int(input())\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        xs[a], xs[b] = xs[b], xs[a]\n    print('\\n'.join(map(str, xs[1:])))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    w = int(input())\n    n = int(input())\n    xs = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        xs[a], xs[b] = xs[b], xs[a]\n    print('\\n'.join(map(str, xs[1:])))\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a], arr[b] = arr[b], arr[a]\n    print(*arr[1:])\n\nsolve()",
            "def main():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        i, j = map(int, input().split(','))\n        arr[i], arr[j] = arr[j], arr[i]\n    print(*arr[1:], sep='\\n')\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a], arr[b] = arr[b], arr[a]\n    print('\\n'.join(map(str, arr[1:])))\n\nif __name__ == \"__main__\":\n    main()",
            "def main():\n    w = int(input())\n    n = int(input())\n    arr = list(range(w + 1))\n    for _ in range(n):\n        a, b = map(int, input().split(','))\n        arr[a], arr[b] = arr[b], arr[a]\n    for x in arr[1:]:\n        print(x)\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 24,
        "prompt_id": "p00011",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Drawing Lots\nLet's play Amidakuji.\nIn the following example, there are five vertical lines and four horizontal lines. The horizontal lines can intersect (jump across) the vertical lines.\nIn the starting points (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n (top of the figure), numbers are assigned to vertical lines in ascending order from left to right. At the first step, 2 and 4 are swaped by the first horizontal line which connects second and fourth vertical lines (we call this operation (2, 4)). Likewise, we perform (3, 5), (1, 2) and (3, 4), then obtain \"4 1 2 5 3\" in the bottom.\nYour task is to write a program which reads the number of vertical lines\nw\nand configurations of horizontal lines and prints the final state of the Amidakuji. In the starting pints, numbers 1, 2, 3, ...,\nw\nare assigne to the vertical lines from left to right.\nInput\nw\nn\na\n1\n,\nb\n1\na\n2\n,\nb\n2\n.\n.\na\nn\n,\nb\nn\nw\n(\nw\n\u2264 30) is the number of vertical lines.\nn\n(\nn\n\u2264 30) is the number of horizontal lines. A pair of two integers\na\ni\nand\nb\ni\ndelimited by a comma represents the\ni\n-th horizontal line.\nOutput\nThe number which should be under the 1st (leftmost) vertical line\nThe number which should be under the 2nd vertical line\n:\nThe number which should be under the\nw\n-th vertical line\nSample Input\n5\n4\n2,4\n3,5\n1,2\n3,4\nOutput for the Sample Input\n4\n1\n2\n5\n3",
        "code": "w = int(input())\nn = int(input())\nlst = [i + 1 for i in range(w)]\ndef swap(t):\n  a,b = t\n  temp = lst[a-1]\n  lst[a-1] = lst[b-1]\n  lst[b-1] = temp\nfor i in range(n):\n  swap(tuple(map(int,input().split(\",\"))))\nfor i in range(w):\n  print(lst[i])\n",
        "writer": "human",
        "rewrite": [
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\nfor x in lst:\n    print(x)",
            "w = int(input())\nn = int(input())\nlst = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    lst[a - 1], lst[b - 1] = lst[b - 1], lst[a - 1]\nfor i in lst:\n    print(i)",
            "w = int(input())\nn = int(input())\nl = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    l[a - 1], l[b - 1] = l[b - 1], l[a - 1]\nprint(*l, sep='\\n')",
            "w = int(input())\nn = int(input())\narr = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    arr[a - 1], arr[b - 1] = arr[b - 1], arr[a - 1]\nprint('\\n'.join(map(str, arr)))",
            "w = int(input())\nn = int(input())\nl = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    l[a-1], l[b-1] = l[b-1], l[a-1]\nprint(*l, sep='\\n')",
            "w = int(input())\nn = int(input())\narr = list(range(1, w + 1))\nfor _ in range(n):\n    a, b = map(int, input().split(','))\n    arr[a-1], arr[b-1] = arr[b-1], arr[a-1]\nfor x in arr:\n    print(x)"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(datasets):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    \n    def sieve(n):\n        primes = [True] * (n + 1)\n        p = 2\n        while p * p <= n:\n            if primes[p]:\n                for i in range(p * p, n + 1, p):\n                    primes[i] = False\n            p += 1\n        return [p for p in range(2, n + 1) if primes[p]]\n    \n    results = []\n    max_n = max(datasets)\n    prime_list = sieve(max_n)\n    for n in datasets:\n        count = sum(1 for p in prime_list if p <= n)\n        results.append(count)\n    return results\n\n# Sample usage with the provided sample input",
        "writer": "machine",
        "rewrite": [
            "def count_primes(datasets):\n    max_n = max(datasets)\n    primes = [True] * (max_n + 1)\n    primes[0] = primes[1] = False\n    for p in range(2, int(max_n**0.5) + 1):\n        if primes[p]:\n            for i in range(p * p, max_n + 1, p):\n                primes[i] = False\n    prime_count = [0] * (max_n + 1)\n    for i in range(2, max_n + 1):\n        prime_count[i] = prime_count[i - 1] + primes[i]\n    return [prime_count[n] for n in datasets]",
            "def count_primes(datasets):\n    max_val = max(datasets)\n    primes = [True] * (max_val + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(max_val**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, max_val + 1, i):\n                primes[j] = False\n    result = [sum(primes[:n+1]) -1 for n in datasets]\n    return result",
            "def count_primes(datasets):\n    max_num = max(datasets)\n    primes = [True] * (max_num + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(max_num**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, max_num + 1, i):\n                primes[j] = False\n    counts = [sum(primes[:i+1]) -1 for i in datasets]\n    return counts",
            "def count_primes(datasets):\n    max_num = max(datasets)\n    prime = [True] * (max_num + 1)\n    prime[0] = prime[1] = False\n    for i in range(2, int(max_num**0.5) + 1):\n        if prime[i]:\n            for j in range(i*i, max_num + 1, i):\n                prime[j] = False\n    count = [sum(prime[:i+1]) - 1 for i in datasets]\n    return count",
            "def count_primes(datasets):\n    max_n = max(datasets)\n    primes = [True] * (max_n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(max_n**0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, max_n + 1, i):\n                primes[j] = False\n    result = [sum(primes[:n+1]) -1 for n in datasets]\n    return result",
            "def count_primes(datasets):\n    max_value = max(datasets)\n    is_prime = [True] * (max_value + 1)\n    is_prime[0] = is_prime[1] = False\n    for p in range(2, int(max_value**0.5) + 1):\n        if is_prime[p]:\n            for i in range(p * p, max_value + 1, p):\n                is_prime[i] = False\n    result = [sum(is_prime[:n+1]) -1 for n in datasets]\n    return result"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switch_railroad_cars():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    stack = []\n    result = []\n    \n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    \n    for car in result:\n        print(car)",
        "writer": "machine",
        "rewrite": [
            "def switch_railroad_cars():\n    import sys\n    data = sys.stdin.readline().split()\n    stack = []\n    result = []\n    for item in data:\n        if item == '0':\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(int(item))\n    print('\\n'.join(map(str,result)))",
            "def switch_railroad_cars():\n    import sys\n    data = sys.stdin.readline().strip().split()\n    stack = []\n    for car in data:\n        if car == '0':\n            if stack:\n                print(stack.pop())\n        else:\n            stack.append(car)",
            "def switch_railroad_cars():\n    import sys\n    data = sys.stdin.readline().split()\n    stack = []\n    for x in data:\n        if x == '0':\n            if stack:\n                print(stack.pop())\n        else:\n            stack.append(x)",
            "def switch_railroad_cars():\n    import sys\n    data = sys.stdin.readline().split()\n    stack = []\n    for x in reversed(data):\n        if x == '0':\n            if stack:\n                print(stack.pop())\n        else:\n            stack.append(x)",
            "def switch_railroad_cars():\n    import sys\n    data = sys.stdin.readline().split()\n    stack = []\n    for i in range(len(data) -1, -1, -1):\n        if data[i] == '0':\n            if stack:\n                print(stack.pop())\n        else:\n            stack.append(data[i])",
            "def switch_railroad_cars():\n    import sys\n    line = sys.stdin.readline().split()\n    stack = []\n    for item in reversed(line):\n        if item == '0':\n            if stack: print(stack.pop())\n        else: stack.append(item)"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "def count_primes(n):\n    if n < 2:\n        return 0\n    sieve = [True] * (n + 1)\n    sieve[0] = sieve[1] = False\n    p = 2\n    while p * p <= n:\n        if sieve[p]:\n            for i in range(p * p, n + 1, p):\n                sieve[i] = False\n        p += 1\n    return sum(sieve)\n\ndef main():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    numbers = [int(num) for num in data]\n    for n in numbers:\n        print(count_primes(n))\n\nif __name__ == \"__main__\":\n    main()",
        "writer": "machine",
        "rewrite": [
            "def count_primes(n):\n    if n < 2:\n        return 0\n    prime = [True] * (n + 1)\n    prime[0] = prime[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n    return sum(prime)\n\ndef main():\n    import sys\n    nums = list(map(int, sys.stdin.read().strip().split()))\n    for num in nums:\n        print(count_primes(num))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return sum(primes)\n\ndef main():\n    import sys\n    numbers = list(map(int, sys.stdin.readline().strip().split()))\n    for number in numbers:\n        print(count_primes(number))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2: return 0\n    prime = [True] * (n + 1)\n    prime[0] = prime[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if prime[p]:\n            for i in range(p*p, n+1, p):\n                prime[i] = False\n    return sum(prime)\n\ndef main():\n    import sys\n    nums = map(int, sys.stdin.readline().split())\n    for num in nums:\n        print(count_primes(num))\n\nif __name__ == \"__main__\":\n    main()",
            "def count_primes(n):\n    if n < 2:\n        return 0\n    prime = [True] * (n + 1)\n    prime[0] = prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if prime[i]:\n            for j in range(i*i, n+1, i):\n                prime[j] = False\n    return sum(prime)\n\nif __name__ == \"__main__\":\n    import sys\n    for num in map(int, sys.stdin.read().split()):\n        print(count_primes(num))",
            "def count_primes(n):\n    if n < 2: return 0\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for p in range(2, int(n**0.5) + 1):\n        if is_prime[p]:\n            for i in range(p*p, n+1, p):\n                is_prime[i] = False\n    return sum(is_prime)\n\nif __name__ == \"__main__\":\n    import sys\n    print('\\n'.join(map(str, [count_primes(int(x)) for x in sys.stdin.read().split()])))",
            "def count_primes(n):\n    if n < 2: return 0\n    primes = [True]*(n+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, n+1, i):\n                primes[j] = False\n    return sum(primes)\n\nif __name__ == \"__main__\":\n    import sys\n    print(*map(count_primes, map(int, sys.stdin.read().split())))"
        ]
    },
    {
        "id": 19,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "MAX = 1000000\nSQRT = 1000     # sqrt(MAX)\n \nprime = [0] * MAX\n \ndef sieve():\n    for i in range(3, MAX, 2):\n        prime[i] = 1\n    for i in range(3, SQRT, 2):\n        if prime[i] == 1:\n            for j in range(i*i, MAX, i):\n                prime[j] = 0\n \nsieve()\ncnt = [0] * (MAX+1)\ncnt[2] = f = 1\nfor i in range(3, MAX, 2):\n    if prime[i]:\n        f += 1;\n    cnt[i] = cnt[i+1] = f\n     \nwhile True:\n    try:\n        print(cnt[int(input())])\n    except EOFError:\n        break\n",
        "writer": "human",
        "rewrite": [
            "MAX = 1000000\nSQRT = 1000\n\nprime = [1] * MAX\nprime[0] = prime[1] = 0\nfor i in range(2, SQRT + 1):\n    if prime[i]:\n        for j in range(i * i, MAX, i):\n            prime[j] = 0\n\ncnt = [0] * (MAX + 1)\ncount = 0\nfor i in range(2, MAX + 1):\n    if prime[i]:\n        count += 1\n    cnt[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "MAX = 1000000\ncnt = [0] * (MAX + 1)\ncnt[2] = 1\np = [True] * (MAX + 1)\np[0] = p[1] = False\nfor i in range(2, int(MAX**0.5) + 1):\n    if p[i]:\n        for j in range(i * i, MAX + 1, i):\n            p[j] = False\nc = 1\nfor i in range(3, MAX + 1, 2):\n    if p[i]:\n        c += 1\n    cnt[i] = cnt[i - 1] + (1 if p[i] else 0)\n    \nwhile True:\n    try:\n        n = int(input())\n        print(cnt[n])\n    except EOFError:\n        break",
            "MAX = 1000000\nprimes = [True] * (MAX + 1)\nprimes[0] = primes[1] = False\nfor i in range(2, int(MAX**0.5) + 1):\n    if primes[i]:\n        for j in range(i * i, MAX + 1, i):\n            primes[j] = False\n\ncount = [0] * (MAX + 1)\nc = 0\nfor i in range(2, MAX + 1):\n    if primes[i]:\n        c += 1\n    count[i] = c\n\nwhile True:\n    try:\n        n = int(input())\n        print(count[n])\n    except EOFError:\n        break",
            "MAX = 1000000\nis_prime = [True] * (MAX + 1)\nis_prime[0] = is_prime[1] = False\nfor p in range(2, int(MAX**0.5) + 1):\n    if is_prime[p]:\n        for i in range(p * p, MAX + 1, p):\n            is_prime[i] = False\n\ncount = 0\nprime_count = [0] * (MAX + 1)\nfor i in range(2, MAX + 1):\n    if is_prime[i]:\n        count += 1\n    prime_count[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(prime_count[n])\n    except EOFError:\n        break",
            "MAX = 1000000\nis_prime = [True] * (MAX + 1)\nis_prime[0] = is_prime[1] = False\nfor p in range(2, int(MAX**0.5) + 1):\n    if is_prime[p]:\n        for i in range(p * p, MAX + 1, p):\n            is_prime[i] = False\n\ncount = 0\ncumulative_primes = [0] * (MAX + 1)\nfor i in range(2, MAX + 1):\n    if is_prime[i]:\n        count +=1\n    cumulative_primes[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(cumulative_primes[n])\n    except EOFError:\n        break",
            "MAX = 1000000\nprimes = [True] * (MAX + 1)\nprimes[0] = primes[1] = False\nfor i in range(2, int(MAX**0.5) + 1):\n    if primes[i]:\n        for j in range(i*i, MAX + 1, i):\n            primes[j] = False\n\ncount = 0\ncumulative_primes = [0] * (MAX + 1)\nfor i in range(2, MAX + 1):\n    if primes[i]:\n        count += 1\n    cumulative_primes[i] = count\n\nwhile True:\n    try:\n        n = int(input())\n        print(cumulative_primes[n])\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(datasets):\n    results = []\n    for d in datasets:\n        area = sum((i * d) ** 2 * d for i in range(1, 600 // d + 1))\n        results.append(area)\n    return results\n\n# Example usage:\ndatasets = [20, 10]\nareas = compute_area(datasets)\nfor area in areas:\n    print(area)",
        "writer": "machine",
        "rewrite": [
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]",
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 * d for i in range(1, 600 // d + 1)) for d in datasets]",
            "def compute_area(datasets):\n  return [sum(d * (i * d) ** 2 for i in range(1, 600 // d + 1)) for d in datasets]",
            "import numpy as np\n\ndef compute_area(datasets):\n    return [np.sum((np.arange(1, 600 // d + 1) * d) ** 2 * d) for d in datasets]",
            "def compute_area(datasets):\n    return [sum(d * (i * d)**2 for i in range(1, 600//d + 1)) for d in datasets]",
            "def compute_area(datasets):\n    return [sum(i**2 * d**3 for i in range(1, 600//d + 1)) for d in datasets]"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "import sys\n\n\ndef main():\n    stack = []\n    for x in sys.stdin:\n        x = int(x)\n        if x:\n            stack.append(x)\n        else:\n            print(stack.pop())\n\n\nif __name__ == '__main__':\n    main()\n",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            x = int(line)\n            if x:\n                stack.append(x)\n            else:\n                if stack:\n                    print(stack.pop())\n                else:\n                    pass\n        except ValueError:\n            pass\n\nif __name__ == '__main__':\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            num = int(line.strip())\n            if num > 0:\n                stack.append(num)\n            elif stack:\n                print(stack.pop())\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            num = int(line)\n            if num:\n                stack.append(num)\n            else:\n                if stack:\n                    print(stack.pop())\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            val = int(line)\n            if val != 0:\n                stack.append(val)\n            else:\n                if stack:\n                    print(stack.pop())\n        except ValueError:\n            continue\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            num = int(line)\n            if num:\n                stack.append(num)\n            elif stack:\n                print(stack.pop())\n\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef main():\n    stack = []\n    for line in sys.stdin:\n        try:\n            value = int(line)\n            if value:\n                stack.append(value)\n            else:\n                if stack:\n                  print(stack.pop())\n        except ValueError:\n            pass\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 28,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result\n\n# Sample Input\ncommands = [1, 6, 0, 8, 10, 0, 0, 0]\nprint(switch_railroad_cars(commands))  # Output: [6, 10, 8]",
        "writer": "machine",
        "rewrite": [
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for cmd in commands:\n        if cmd == 0:\n            if stack:\n                result.append(stack.pop())\n        else:\n            stack.append(cmd)\n    return result",
            "def switch_railroad_cars(commands):\n    stack = []\n    result = []\n    for command in commands:\n        if command == 0:\n            try:\n                result.append(stack.pop())\n            except IndexError:\n                pass  # Handle empty stack case\n        else:\n            stack.append(command)\n    return result",
            "def switch_railroad_cars(commands):\n    stack = []\n    output = []\n    for command in commands:\n        if command == 0:\n            if stack:\n                output.append(stack.pop())\n        else:\n            stack.append(command)\n    return output",
            "def switch_railroad_cars(commands):\n    res, stack = [], []\n    for cmd in commands:\n        if cmd == 0:\n            try: res.append(stack.pop())\n            except IndexError: pass\n        else: stack.append(cmd)\n    return res",
            "def switch_railroad_cars(commands):\n    s = []\n    r = []\n    for c in commands:\n        if c == 0:\n            if s: r.append(s.pop())\n        else: s.append(c)\n    return r",
            "def switch_railroad_cars(commands):\n    res=[]\n    st=[]\n    for i in commands:\n        if i==0:\n            try:\n                res.append(st.pop())\n            except:\n                pass\n        else:\n            st.append(i)\n    return res"
        ]
    },
    {
        "id": 20,
        "prompt_id": "p00009",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Prime Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n Number\nWrite a program which reads an integer\nn\nand prints the number of prime numbers which are less than or equal to\nn\n. A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\nInput\nInput consists of several datasets. Each dataset has an integer\nn\n(1 \u2264\nn\n\u2264 999,999) in a line.\nThe number of datasets is less than or equal to 30.\nOutput\nFor each dataset, prints the number of prime numbers.\nSample Input\n10\n3\n11\nOutput for the Sample Input\n4\n2\n5",
        "code": "import sys\nimport math as mas\n\ndef sieve(n):\n\tp=[True for i in range(n+1)]\n\tp[0]=p[1]=False\n\tend=int(n**0.5)\n\tfor i in range(2,end+1):\n\t\tif p[i]:\n\t\t\tfor j in range(i*i,n+1,i):\n\t\t\t\tp[j]=False\n\treturn p\n\t\nsosu=sieve(1000010)\nfor i in sys.stdin:\n\tt=int(i)\n\tif t<2:print(0)\n\telif t==2:print(1)\n\telse:print(1+sum(sosu[t] for t in range(3,int(i)+1,2)))\n\n#\ta,b=map(int,i.split())\n#\tprint(gcd(a,b),lcm(a,b))",
        "writer": "human",
        "rewrite": [
            "import sys\nimport math\n\ndef sieve(n):\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return primes\n\nprimes = sieve(1000010)\nfor line in sys.stdin:\n    n = int(line)\n    if n < 2:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        print(1 + sum(primes[i] for i in range(3, n + 1, 2)))",
            "import sys\nimport math\n\ndef count_odd_primes(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    return 1 + sum(primes[i] for i in range(3, n + 1, 2))\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_odd_primes(n))",
            "import sys\nimport math\n\ndef count_primes(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for multiple in range(i*i, limit + 1, i):\n                primes[multiple] = False\n    return sum(primes[2:])\n\nlimit = 1000010\nprecomputed_primes = count_primes(limit)\n\nfor line in sys.stdin:\n    n = int(line)\n    if n < 2:\n        print(0)\n    elif n == 2:\n        print(1)\n    else:\n        print(1 + sum(1 for i in range(3, n+1, 2) if precomputed_primes > 0))",
            "import sys\nimport math\n\ndef sieve_of_eratosthenes(limit):\n    primes = [True] * (limit + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(limit)) + 1):\n        if primes[i]:\n            for j in range(i * i, limit + 1, i):\n                primes[j] = False\n    return primes\n\nlimit = 1000010\nprimes = sieve_of_eratosthenes(limit)\n\nfor num_str in sys.stdin:\n    num = int(num_str)\n    if num < 2:\n        print(0)\n    elif num == 2:\n        print(1)\n    else:\n        count = 1 + sum(primes[i] for i in range(3, num + 1, 2))\n        print(count)",
            "import sys\nimport math\n\ndef count_odd_primes_upto(n):\n    if n < 2: return 0\n    if n == 2: return 1\n    \n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    \n    for p in range(2, int(math.sqrt(n)) + 1):\n        if is_prime[p]:\n            for i in range(p * p, n + 1, p):\n                is_prime[i] = False\n    \n    return 1 + sum(is_prime[i] for i in range(3, n + 1, 2))\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_odd_primes_upto(n))",
            "import sys\nimport math\n\ndef count_odd_primes(n):\n    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n                \n    return 1 + sum(primes[i] for i in range(3, n + 1, 2))\n\nfor line in sys.stdin:\n    n = int(line)\n    print(count_odd_primes(n))"
        ]
    },
    {
        "id": 29,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "# -*- coding:utf-8 -*-\n\nimport sys\n\ndef func(x):\n    return x**2\n\ndef rec(x,d):\n    return d*func(x)\n\narray = []\nfor i in sys.stdin:\n    array.append(int(i))\n\nfor i in range(len(array)):\n    d = array[i]\n    k = int(600/d)\n    result = 0\n    for j in range(k):\n        result += rec(j*d,d)\n\n    print(result)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef func(x):\n    return x**2\n\ndef rec(x,d):\n    return d*func(x)\n\narray = []\nfor i in sys.stdin:\n    try:\n        array.append(int(i))\n    except ValueError:\n        pass\n\nfor d in array:\n    k = int(600/d)\n    result = sum(rec(j*d,d) for j in range(k))\n    print(result)",
            "import sys\n\ndef calculate_sum(d):\n    k = int(600 / d)\n    return sum(d * (j * d) ** 2 for j in range(k))\n\narray = []\nfor line in sys.stdin:\n    try:\n        array.append(int(line))\n    except ValueError:\n        pass\n\nfor d in array:\n    print(calculate_sum(d))",
            "import sys\n\ndef compute_result(d):\n    k = 600 // d\n    return sum(d * (j * d) ** 2 for j in range(k))\n\nfor line in sys.stdin:\n    try:\n        d = int(line)\n        print(compute_result(d))\n    except ValueError:\n        pass",
            "import sys\n\ndef main():\n    for line in sys.stdin:\n        try:\n            d = int(line)\n            k = 600 // d\n            result = sum(d * (j * d) ** 2 for j in range(k))\n            print(result)\n        except ValueError:\n            pass\n\nif __name__ == \"__main__\":\n    main()",
            "import sys\n\ndef calculate(d):\n    return sum(d * (j * d)**2 for j in range(600 // d))\n\nfor line in sys.stdin:\n    try:\n        print(calculate(int(line)))\n    except ValueError:\n        pass",
            "import sys\n\nfor line in sys.stdin:\n    try:\n        d = int(line)\n        k = 600 // d\n        print(sum(d * (j * d)**2 for j in range(k)))\n    except ValueError:\n        pass"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "#!/usr/bin/env python\nimport sys\n\ndef function(x):\n    return x*x\n\ndef calculate(d, max):\n    val = d\n    result = 0\n    while val < max:\n        result += function(val) * d\n        val += d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
        "writer": "human",
        "rewrite": [
            "#!/usr/bin/env python\nimport sys\n\ndef calculate(d, max):\n    result = 0\n    for val in range(d, max, d):\n        result += val*val * d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef calculate(d, max_val):\n    return sum(val**2 * d for val in range(d, max_val, d))\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef calculate(d, max_val):\n    result = 0\n    for i in range(d, max_val, d):\n        result += i*i*d\n    return result\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef calculate(d, max):\n    return sum(i*i*d for i in range(d, max, d))\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef calculate(d, max_value):\n  result = 0\n  i = d\n  while i < max_value:\n    result += i*i*d\n    i += d\n  return result\n\nif __name__ == '__main__':\n  for line in sys.stdin:\n    print(calculate(int(line), 600))",
            "#!/usr/bin/env python\nimport sys\n\ndef calculate(d, max_val):\n    return sum(d * i**2 for i in range(d, max_val, d))\n\nif __name__ == '__main__':\n    for line in sys.stdin:\n        print(calculate(int(line), 600))"
        ]
    },
    {
        "id": 30,
        "prompt_id": "p00014",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Integral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n7021000ral\nWrite a program which computes the area of a shape represented by the following three lines:\n$y = x^2$\n$y = 0$\n$x = 600$\nIt is clear that the area is $72000000$, if you use an integral you learn in high school. On the other hand, we can obtain an approximative area of the shape by adding up areas of many rectangles in the shape as shown in the following figure:\n$f(x) = x^2$\nThe approximative area $s$ where the width of the rectangles is $d$ is:\narea of rectangle where its width is $d$ and height is $f(d)$ $+$\narea of rectangle where its width is $d$ and height is $f(2d)$ $+$\narea of rectangle where its width is $d$ and height is $f(3d)$ $+$\n...\narea of rectangle where its width is $d$ and height is $f(600 - d)$\nThe more we decrease $d$, the higer-precision value which is close to $72000000$ we could obtain. Your program should read the integer $d$ which is a divisor of $600$, and print the area $s$.\nInput\nThe input consists of several datasets. Each dataset consists of an integer $d$ in a line. The number of datasets is less than or equal to 20.\nOutput\nFor each dataset, print the area $s$ in a line.\nSample Input\n20\n10\nOutput for the Sample Input\n68440000\n70210000",
        "code": "def compute_area(datasets):\n    results = []\n    for d in datasets:\n        n = 600 // d\n        area = sum((i * d) ** 2 for i in range(1, n + 1)) * d\n        results.append(area)\n    return results\n\n# Example usage:\ndatasets = [20, 10]\nprint(compute_area(datasets))",
        "writer": "machine",
        "rewrite": [
            "def compute_area(datasets):\n    return [sum((i * d) ** 2 for i in range(1, 600 // d + 1)) * d for d in datasets]",
            "def compute_area(datasets):\n    return [sum(i**2 * d**3 for i in range(1, 600 // d + 1)) for d in datasets]",
            "import numpy as np\n\ndef compute_area(datasets):\n    return [np.sum((np.arange(1, 600 // d + 1) * d)**2) * d for d in datasets]",
            "def compute_area(datasets):\n    return [(d**3) * sum(i**2 for i in range(1, 600//d + 1)) for d in datasets]",
            "def compute_area(datasets):\n    return [d**3 * sum(i**2 for i in range(1, 600//d + 1)) for d in datasets]",
            "def compute_area(datasets):\n  return [sum( (i*d)**2 for i in range(1, 600//d + 1) ) * d for d in datasets]"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def digits(n):\n    if n < 10: return 1\n    c = 0\n    while n > 0:\n        c += 1\n        n = n // 10\n\n    return c\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if (digits(u) > 80 or digits(v) > 80 or digits(s) > 80):\n        print(\"overflow\")\n    else:\n        print(s)",
        "writer": "human",
        "rewrite": [
            "def digits(n):\n    return len(str(n))\n\nn = int(input())\nfor i in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if digits(u) > 80 or digits(v) > 80 or digits(s) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n  return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n  u = int(input())\n  v = int(input())\n  s = u + v\n  if len(str(u)) > 80 or len(str(v)) > 80 or len(str(s)) > 80:\n    print(\"overflow\")\n  else:\n    print(s)",
            "def digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if max(len(str(u)), len(str(v)), len(str(s))) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n  return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n  u, v = map(int, [input(), input()])\n  s = u + v\n  if any(len(str(x)) > 80 for x in [u, v, s]):\n    print(\"overflow\")\n  else:\n    print(s)",
            "def digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if len(str(u)) > 80 or len(str(v)) > 80 or len(str(s)) > 80:\n        print(\"overflow\")\n    else:\n        print(s)",
            "def digits(n):\n    return len(str(n))\n\nn = int(input())\nfor _ in range(n):\n    u = int(input())\n    v = int(input())\n    s = u + v\n    if (len(str(u)) > 80 or len(str(v)) > 80 or len(str(s)) > 80):\n        print(\"overflow\")\n    else:\n        print(s)"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    for i in range(int(input())):\n        a=int(input())+int(input())\n        if a>=10**80:\n            print(\"overflow\")\n        else:\n            print(a)\n            \n    \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    for i in range(int(input())):\n        a,b = map(int, [input(), input()])\n        if a + b >= 10**80:\n            print(\"overflow\")\n        else:\n            print(a+b)\n\nif __name__ == '__main__':\n    main()",
            "def solve():\n    n = int(input())\n    for _ in range(n):\n        a = int(input())\n        b = int(input())\n        if a + b >= 10**80:\n            print(\"overflow\")\n        else:\n            print(a + b)\n\nif __name__ == \"__main__\":\n    solve()",
            "def main():\n  t = int(input())\n  for _ in range(t):\n    a = int(input())\n    b = int(input())\n    s = a + b\n    if s >= 10**80:\n      print(\"overflow\")\n    else:\n      print(s)\n\nif __name__ == \"__main__\":\n  main()",
            "def main():\n    t = int(input())\n    for _ in range(t):\n        x = int(input())\n        y = int(input())\n        sum_xy = x + y\n        if sum_xy >= 10**80:\n            print(\"overflow\")\n        else:\n            print(sum_xy)\n\nif __name__ == \"__main__\":\n    main()",
            "def solve():\n    num_tests = int(input())\n    for _ in range(num_tests):\n        num1 = int(input())\n        num2 = int(input())\n        total = num1 + num2\n        if total >= 10**80:\n            print(\"overflow\")\n        else:\n            print(total)\n\nif __name__ == \"__main__\":\n    solve()",
            "def main():\n    t = int(input())\n    for _ in range(t):\n        num1 = int(input())\n        num2 = int(input())\n        if num1 + num2 >= 10**80:\n            print(\"overflow\")\n        else:\n            print(num1 + num2)\n\nif __name__ == \"__main__\":\n    main()"
        ]
    },
    {
        "id": 27,
        "prompt_id": "p00013",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Switching Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\nhing Railroad Cars\nThis figure shows railway tracks for reshuffling cars. The rail tracks end in the bottom and the top-left rail track is used for the entrace and the top-right rail track is used for the exit. Ten cars, which have numbers from 1 to 10 respectively, use the rail tracks.\nWe can simulate the movement (comings and goings) of the cars as follow:\nAn entry of a car is represented by its number.\nAn exit of a car is represented by 0\nFor example, a sequence\n1\n6\n0\n8\n10\ndemonstrates that car 1 and car 6 enter to the rail tracks in this order, car 6 exits from the rail tracks, and then car 8 and car 10 enter.\nWrite a program which simulates comings and goings of the cars which are represented by the sequence of car numbers. The program should read the sequence of car numbers and 0, and print numbers of cars which exit from the rail tracks in order. At the first, there are no cars on the rail tracks. You can assume that 0 will not be given when there is no car on the rail tracks.\nInput\ncar number\ncar number or 0\ncar number or 0\n  .\n  .\n  .\ncar number or 0\nThe number of input lines is less than or equal to 100.\nOutput\nFor each 0, print the car number.\nSample Input\n1\n6\n0\n8\n10\n0\n0\n0\nOutput for the Sample Input\n6\n10\n8\n1",
        "code": "# coding: utf-8\n\nclass Stack(object):\n\tmaxnum = 100\n\tarray = []\n\tfor i in range(100):\n\t\tarray.append(0)\n\tindex = 0\n\tdef push(self, data):\n\t\tself.array[self.index] = data\n\t\tself.index += 1\n\tdef pop(self):\n\t\tprint(self.array[self.index-1])\n\t\tself.index -= 1\n\nroad = Stack()\nwhile True:\n\ttry:\n\t\tnum = int(raw_input())\n\t\tif num != 0:\n\t\t\troad.push(num)\n\t\telse:\n\t\t\troad.pop()\n\texcept EOFError:\n\t\tbreak\n",
        "writer": "human",
        "rewrite": [
            "class Stack:\n    def __init__(self, maxsize=100):\n        self.maxsize = maxsize\n        self.array = [0] * maxsize\n        self.index = 0\n\n    def push(self, data):\n        if self.index < self.maxsize:\n            self.array[self.index] = data\n            self.index += 1\n\n    def pop(self):\n        if self.index > 0:\n            self.index -= 1\n            return self.array[self.index]\n        else:\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, maxsize=100):\n        self.maxsize = maxsize\n        self.array = [0] * maxsize\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.maxsize -1:\n            self.top += 1\n            self.array[self.top] = item\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            item = self.array[self.top]\n            self.top -= 1\n            return item\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nroad = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            road.push(num)\n        else:\n            popped = road.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.data = [0] * capacity\n        self.top = -1\n\n    def push(self, value):\n        if self.top < self.capacity -1:\n            self.top += 1\n            self.data[self.top] = value\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            value = self.data[self.top]\n            self.top -= 1\n            return value\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nstack = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            stack.push(num)\n        else:\n            popped = stack.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.stack = [0] * capacity\n        self.size = 0\n\n    def push(self, item):\n        if self.size < self.capacity:\n            self.stack[self.size] = item\n            self.size += 1\n        else:\n            print(\"Stack Overflow!\")\n\n    def pop(self):\n        if self.size > 0:\n            self.size -= 1\n            return self.stack[self.size]\n        else:\n            print(\"Stack Underflow!\")\n            return None\n\ns = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            s.push(num)\n        else:\n            popped = s.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.items = [None] * capacity\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.capacity - 1:\n            self.top += 1\n            self.items[self.top] = item\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            item = self.items[self.top]\n            self.top -= 1\n            return item\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nstack = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            stack.push(num)\n        else:\n            popped = stack.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break",
            "class Stack:\n    def __init__(self, capacity=100):\n        self.capacity = capacity\n        self.data = [None] * capacity\n        self.top = -1\n\n    def push(self, item):\n        if self.top < self.capacity - 1:\n            self.top += 1\n            self.data[self.top] = item\n        else:\n            print(\"Stack Overflow\")\n\n    def pop(self):\n        if self.top >= 0:\n            value = self.data[self.top]\n            self.top -= 1\n            return value\n        else:\n            print(\"Stack Underflow\")\n            return None\n\nstack = Stack()\nwhile True:\n    try:\n        num = int(input())\n        if num != 0:\n            stack.push(num)\n        else:\n            popped = stack.pop()\n            if popped is not None:\n                print(popped)\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        num=list(map(int,line.split()))\n        \n        num.sort()\n        num.reverse()\n        print(' '.join(map(str,num)))\n        \n            \n                \n    \nSortingFiveNumbers()",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        print(*sorted(map(int, line.split()), reverse=True))\n\nSortingFiveNumbers()",
            "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        print(' '.join(sorted(map(int, line.split()), reverse=True)))\n\nSortingFiveNumbers()",
            "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        nums = list(map(int, line.split()))\n        nums.sort(reverse=True)\n        print(*nums)\n\nSortingFiveNumbers()",
            "import sys\n\ndef SortingFiveNumbers():\n    for line in sys.stdin:\n        print(*sorted(map(int, line.split()), reverse=True))\n\nSortingFiveNumbers()",
            "import sys\n\ndef sort_numbers():\n    for line in sys.stdin:\n        numbers = list(map(int, line.split()))\n        numbers.sort(reverse=True)\n        print(*numbers)\n\nsort_numbers()",
            "import sys\n\ndef sort_numbers():\n    for line in sys.stdin:\n        print(*sorted(map(int, line.split()), reverse=True))\n\nsort_numbers()"
        ]
    },
    {
        "id": 37,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers_descending():\n    numbers = list(map(int, input().split()))\n    numbers.sort(reverse=True)\n    print(' '.join(map(str, numbers)))",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers_descending():\n    print(*sorted(map(int,input().split()),reverse=True))",
            "def sort_five_numbers_descending():\n    print(*sorted(input().split(), key=int, reverse=True))",
            "def sort_five_numbers_descending():\n    print(*[str(x) for x in sorted(map(int, input().split()), reverse=True)])",
            "def sort_five_numbers_descending():\n    print(' '.join(sorted(input().split(), key=int, reverse=True)))",
            "def sort_five_numbers_descending():\n    nums = list(map(int, input().split()))\n    nums.sort(reverse=True)\n    print(*nums)",
            "def sort_five_numbers_descending():\n  print(*sorted(map(int, input().split()), reverse=True))"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "from math import *\ndef rad(n):\n    return n * pi / 180\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
        "writer": "human",
        "rewrite": [
            "from math import *\ndef rad(n):\n    return radians(n)\n\nx, y = 0, 0\nna = 90\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(round(x)))\n        print(int(round(y)))\n        break\n    x += cos(rad(na)) * d\n    y += sin(rad(na)) * d\n    na -= a",
            "import math\n\nx, y = 0, 0\nna = math.radians(90)\nwhile True:\n    d, a = map(int, input().split(\",\"))\n    if d == 0 and a == 0:\n        print(int(x))\n        print(int(y))\n        break\n    x += math.cos(na) * d\n    y += math.sin(na) * d\n    na -= math.radians(a)",
            "import math\n\nx, y = 0, 0\nna = 90\nwhile True:\n    line = input()\n    if line == \"0,0\":\n        print(int(x))\n        print(int(y))\n        break\n    d, a = map(int, line.split(','))\n    ang = math.radians(na)\n    x += math.cos(ang) * d\n    y += math.sin(ang) * d\n    na -= a",
            "import math\n\nx, y = 0, 0\nna = math.radians(90)\n\nwhile True:\n    try:\n        d, a = map(int, input().split(','))\n        if d == 0 and a == 0:\n            break\n        x += math.cos(na) * d\n        y += math.sin(na) * d\n        na -= math.radians(a)\n    except ValueError:\n        break\n\nprint(int(x))\nprint(int(y))",
            "import math\n\nx = y = 0\nna = math.radians(90)\n\nwhile True:\n    try:\n        d, a = map(int, input().split(','))\n        if d == a == 0:\n            break\n        x += math.cos(na) * d\n        y += math.sin(na) * d\n        na -= math.radians(a)\n    except ValueError:\n        break\n\nprint(int(round(x)))\nprint(int(round(y)))",
            "import math\n\nx, y = 0, 0\nna = 90\n\nwhile True:\n    try:\n        line = input()\n        if line == \"0,0\":\n            break\n        d, a = map(int, line.split(','))\n        na_rad = math.radians(na)\n        x += math.cos(na_rad) * d\n        y += math.sin(na_rad) * d\n        na -= a\n    except ValueError:\n        break\n    except EOFError:\n        break\n\nprint(int(round(x)))\nprint(int(round(y)))"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef treasure_hunt():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    x, y = 0, 0\n    current_angle = 0\n    \n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        current_angle += t\n        radian_angle = math.radians(current_angle)\n        x += d * math.cos(radian_angle)\n        y += d * math.sin(radian_angle)\n    \n    print(int(round(x)))\n    print(int(round(y)))",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef treasure_hunt():\n    data = input().strip().split()\n    x, y = 0, 0\n    angle = 0\n    for pair in data:\n        d, t = map(int, pair.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    data = input().strip().split()\n    x, y = 0, 0\n    angle = 0\n    for i in data:\n        dist, turn = map(int, i.split(','))\n        if dist == 0 and turn == 0:\n            break\n        angle += turn\n        rad = math.radians(angle)\n        x += dist * math.cos(rad)\n        y += dist * math.sin(rad)\n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    line = input().split()\n    x, y = 0, 0\n    a = 0\n    for p in line:\n        d, t = map(int, p.split(','))\n        if d==0 and t==0: break\n        a += t\n        r = math.radians(a)\n        x += d*math.cos(r)\n        y += d*math.sin(r)\n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    pairs = input().strip().split()\n    x, y = 0, 0\n    angle = 0\n    for pair in pairs:\n        dist, turn = map(int, pair.split(','))\n        if dist == 0 and turn == 0:\n            break\n        angle += turn\n        rad = math.radians(angle)\n        x += dist * math.cos(rad)\n        y += dist * math.sin(rad)\n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    line = input().split()\n    x = y = angle = 0\n    for p in line:\n        d,t = map(int,p.split(','))\n        if d==0 and t==0:break\n        angle += t\n        rad = math.radians(angle)\n        x += d*math.cos(rad)\n        y += d*math.sin(rad)\n    print(round(x))\n    print(round(y))",
            "import math\n\ndef treasure_hunt():\n    data = input().split()\n    x = y = a = 0\n    for p in data:\n        d,t = map(int,p.split(','))\n        if d+t ==0: break\n        a += t\n        r = math.radians(a)\n        x += d*math.cos(r)\n        y += d*math.sin(r)\n    print(round(x))\n    print(round(y))"
        ]
    },
    {
        "id": 31,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    \n    results = []\n    for _ in range(N):\n        a = data[index]\n        b = data[index + 1]\n        index += 2\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n        else:\n            sum_ab = int(a) + int(b)\n            if len(str(sum_ab)) > 80:\n                results.append(\"overflow\")\n            else:\n                results.append(str(sum_ab))\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def national_budget():\n    data = input().split()\n    N = int(data[0])\n    results = []\n    for i in range(1, len(data), 2):\n        a, b = data[i], data[i+1]\n        try:\n            sum_ab = int(a) + int(b)\n            if len(str(sum_ab)) <= 80:\n                results.append(str(sum_ab))\n            else:\n                results.append(\"overflow\")\n        except (ValueError, IndexError):\n            results.append(\"overflow\")\n\n    print('\\n'.join(results))",
            "def national_budget():\n    data = input().split()\n    n = int(data[0])\n    results = [\"overflow\" if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80 else str(int(a) + int(b)) for a, b in zip(data[1::2], data[2::2])]\n    print('\\n'.join(results[:n]))",
            "def national_budget():\n    line = input().split()\n    n = int(line[0])\n    ans = []\n    for i in range(1, len(line), 2):\n        a, b = line[i], line[i+1]\n        try:\n            s = int(a) + int(b)\n            if len(str(s)) > 80:\n                ans.append(\"overflow\")\n            else:\n                ans.append(str(s))\n        except (ValueError, IndexError):\n            ans.append(\"overflow\")\n\n    print(\"\\n\".join(ans[:n]))",
            "def national_budget():\n    try:\n        lines = input().split()\n        n = int(lines[0])\n        results = []\n        for i in range(1, 2*n+1,2):\n            a,b = lines[i], lines[i+1]\n            if len(a)>80 or len(b)>80:\n                results.append(\"overflow\")\n            else:\n                try:\n                    s = int(a)+int(b)\n                    if len(str(s))>80: results.append(\"overflow\")\n                    else: results.append(str(s))\n                except: results.append(\"overflow\")\n\n        print(\"\\n\".join(results))\n    except:\n        pass",
            "def national_budget():\n    data = input().split()\n    n = int(data[0])\n    output = []\n    for i in range(1, len(data), 2):\n        try:\n            a, b = int(data[i]), int(data[i+1])\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                output.append(\"overflow\")\n            else:\n                s = a + b\n                if len(str(s)) > 80:\n                    output.append(\"overflow\")\n                else:\n                    output.append(str(s))\n        except (ValueError, IndexError):\n            output.append(\"overflow\")\n    print('\\n'.join(output[:n]))",
            "def national_budget():\n    lines = input().split()\n    n = int(lines[0])\n    ans = []\n    for i in range(1, len(lines), 2):\n        try:\n            a = int(lines[i])\n            b = int(lines[i+1])\n            if len(str(a)) > 80 or len(str(b)) > 80:\n                ans.append(\"overflow\")\n            else:\n                res = a + b\n                if len(str(res)) > 80:\n                    ans.append(\"overflow\")\n                else:\n                    ans.append(str(res))\n        except (ValueError, IndexError):\n            ans.append(\"overflow\")\n    print('\\n'.join(ans[:n]))"
        ]
    },
    {
        "id": 34,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n\n    for direction in directions:\n        d, t = map(int, direction.split(','))\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n\n    print(int(round(x)), int(round(y)))\n\n# Example usage\ndirections = [\n    \"56,65\",\n    \"97,54\",\n    \"64,-4\",\n    \"55,76\",\n    \"42,-27\",\n    \"43,80\",\n    \"87,-86\",\n    \"55,-6\",\n    \"89,34\",\n    \"95,5\",\n    \"0,0\"\n]\ntreasure_hunt(directions)",
        "writer": "machine",
        "rewrite": [
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n    for d, t in (map(int, direction.split(',')) for direction in directions):\n        if d == 0 and t == 0:\n            break\n        angle += t\n        rad = math.radians(angle)\n        x += d * math.cos(rad)\n        y += d * math.sin(rad)\n    print(round(x), round(y))",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    angle = 0\n    for direction in directions:\n        try:\n            d, t = map(int, direction.split(','))\n            if d == 0 and t == 0:\n                break\n            angle += t\n            rad = math.radians(angle)\n            x += d * math.cos(rad)\n            y += d * math.sin(rad)\n        except ValueError:\n            pass\n    print(round(x), round(y))",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    for d, t in [map(int, i.split(',')) for i in directions]:\n        if d==0 and t==0:\n            break\n        x += d * math.cos(math.radians(t))\n        y += d * math.sin(math.radians(t))\n    print(round(x),round(y))",
            "import cmath\n\ndef treasure_hunt(directions):\n    z = 0\n    for d,t in (map(int,direction.split(',')) for direction in directions):\n        if d==0 and t==0:\n            break\n        z += d*cmath.exp(1j*cmath.pi*t/180)\n    print(round(z.real),round(z.imag))",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    for direction in directions:\n        if direction == \"0,0\":\n            break\n        d, t = map(int, direction.split(','))\n        x += d * math.cos(math.radians(t))\n        y += d * math.sin(math.radians(t))\n    print(round(x), round(y))",
            "import math\n\ndef treasure_hunt(directions):\n    x, y = 0, 0\n    a = 0\n    for d, t in [tuple(map(int, i.split(','))) for i in directions]:\n        if d == 0 and t == 0:\n            break\n        a += t\n        x += d * math.cos(math.radians(a))\n        y += d * math.sin(math.radians(a))\n    print(round(x), round(y))"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort(num):\n   l = len(num)\n   for i in range(0,l):\n        for j in range(0,l-i-1):\n            if num[j] < num[j+1]:\n               temp = num[j]\n               num[j] = num[j+1]\n               num[j+1]=temp\n   print(num[0],end='')\n   for i in range(1,len(num)-1):\n       print('',num[i],end='')\n   print('',num[i+1])\n\na , b , c , d , e = map(int,input().split())\nnum = []\nnum.append(a)\nnum.append(b)\nnum.append(c)\nnum.append(d)\nnum.append(e)\nsort(num)",
        "writer": "human",
        "rewrite": [
            "def sort(num):\n    num.sort(reverse=True)\n    print(*num)\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort(num):\n    num.sort(reverse=True)\n    print(*num, sep=' ')\n\na, b, c, d, e = map(int, input().split())\nnum = [a, b, c, d, e]\nsort(num)",
            "def sort_descending(numbers):\n    numbers.sort(reverse=True)\n    print(*numbers)\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_descending(numbers)",
            "def sort_numbers(numbers):\n  numbers.sort(reverse=True)\n  print(' '.join(map(str, numbers)))\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_numbers(numbers)",
            "def sort_descending(nums):\n    nums.sort(reverse=True)\n    print(*nums)\n\na, b, c, d, e = map(int, input().split())\nnums = [a, b, c, d, e]\nsort_descending(nums)",
            "def sort_descending(numbers):\n    numbers.sort(reverse=True)\n    print(*numbers, sep=' ')\n\na, b, c, d, e = map(int, input().split())\nnumbers = [a, b, c, d, e]\nsort_descending(numbers)"
        ]
    },
    {
        "id": 33,
        "prompt_id": "p00016",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Treasure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-30ure Hunt\nWhen a boy was cleaning up after his grand father passing, he found an old paper:\nIn addition, other side of the paper says that \"go ahead a number of steps equivalent to the first integer, and turn clockwise by degrees equivalent to the second integer\".\nHis grand mother says that Sanbonmatsu was standing at the center of town. However, now buildings are crammed side by side and people can not walk along exactly what the paper says in. Your task is to write a program which hunts for the treature on the paper.\nFor simplicity, 1 step is equivalent to 1 meter. Input consists of several pairs of two integers\nd\n(the first integer) and\nt\n(the second integer) separated by a comma. Input ends with \"0, 0\". Your program should print the coordinate (\nx\n,\ny\n) of the end point. There is the treature where x meters to the east and y meters to the north from the center of town.\nYou can assume that\nd\n\u2264 100 and -180 \u2264\nt\n\u2264 180.\nInput\nA sequence of pairs of integers\nd\nand\nt\nwhich end with \"\n0,0\n\".\nOutput\nPrint the integer portion of\nx\nand\ny\nin a line respectively.\nSample Input\n56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0\nOutput for the Sample Input\n171\n-302",
        "code": "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    x = math.cos(rad)\n    y = math.sin(rad)\n    return x,y\n\ndef run():\n    x, y = 0,0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        d = -d\n        if r == 0 and d == 0:\n            break\n        _x, _y = move(dig)\n        dig += d\n        x += r * _x\n        y += r * _y\n\n    print(int(x))\n    print(int(y))\n\nif __name__ == '__main__':\n    run()\n\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef move(dig):\n    rad = math.radians(dig)\n    return math.cos(rad), math.sin(rad)\n\ndef run():\n    x, y = 0, 0\n    dig = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        _x, _y = move(dig)\n        dig -= d\n        x += r * _x\n        y += r * _y\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        r, d = map(int, input().split(','))\n        if r == 0 and d == 0:\n            break\n        rad = math.radians(angle)\n        x += r * math.cos(rad)\n        y += r * math.sin(rad)\n        angle -= d\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        line = input()\n        if line == '0,0':\n            break\n        r, d = map(int, line.split(','))\n        angle_rad = math.radians(angle)\n        x += r * math.cos(angle_rad)\n        y += r * math.sin(angle_rad)\n        angle -= d\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        try:\n            r, d = map(int, input().split(','))\n            if r == 0 and d == 0:\n                break\n            x += r * math.cos(math.radians(angle))\n            y += r * math.sin(math.radians(angle))\n            angle -= d\n        except ValueError:\n            break\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == '__main__':\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    angle = 90\n    while True:\n        try:\n            r, d = map(int, input().split(','))\n            if r == 0 and d == 0:\n                break\n            angle_rad = math.radians(angle)\n            x += r * math.cos(angle_rad)\n            y += r * math.sin(angle_rad)\n            angle += -d\n        except ValueError:\n            break\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == \"__main__\":\n    run()",
            "import math\n\ndef run():\n    x, y = 0, 0\n    direction = 90\n    while True:\n        try:\n            radius, delta_angle = map(int, input().split(','))\n            if radius == 0 and delta_angle == 0:\n                break\n            radians = math.radians(direction)\n            x += radius * math.cos(radians)\n            y += radius * math.sin(radians)\n            direction -= delta_angle\n        except ValueError:\n            break\n    print(int(round(x)))\n    print(int(round(y)))\n\nif __name__ == \"__main__\":\n    run()"
        ]
    },
    {
        "id": 38,
        "prompt_id": "p00018",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Sorting Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 ng Five Numbers\nWrite a program which reads five numbers and sorts them in descending order.\nInput\nInput consists of five numbers\na\n,\nb\n,\nc\n,\nd\nand\ne\n(-100000 \u2264\na\n,\nb\n,\nc\n,\nd\n,\ne\n\u2264 100000). The five numbers are separeted by a space.\nOutput\nPrint the ordered numbers in a line. Adjacent numbers should be separated by a space.\nSample Input\n3 6 9 7 5\nOutput for the Sample Input\n9 7 6 5 3",
        "code": "def sort_five_numbers():\n    numbers = list(map(int, input().split()))\n    sorted_numbers = sorted(numbers, reverse=True)\n    print(\" \".join(map(str, sorted_numbers)))",
        "writer": "machine",
        "rewrite": [
            "def sort_five_numbers():\n    print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n    print(*sorted(map(int,input().split()), reverse=True))",
            "def sort_five_numbers():\n    print(' '.join(map(str,sorted(map(int,input().split()),reverse=True))))",
            "def sort_five_numbers():\n    nums = list(map(int, input().split()))\n    nums.sort(reverse=True)\n    print(*nums)",
            "def sort_five_numbers():\n    print(*sorted(map(int, input().split()), reverse=True))",
            "def sort_five_numbers():\n    print(' '.join(str(x) for x in sorted(map(int, input().split()), reverse=True)))"
        ]
    },
    {
        "id": 32,
        "prompt_id": "p00015",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n National Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflonal Budget\nA country has a budget of more than 81 trillion yen. We want to process such data, but conventional integer type which uses signed 32 bit can represent up to 2,147,483,647.\nYour task is to write a program which reads two integers (more than or equal to zero), and prints a sum of these integers.\nIf given integers or the sum have more than 80 digits, print \"overflow\".\nInput\nInput consists of several datasets. In the first line, the number of datasets\nN\n(1 \u2264\nN\n\u2264 50) is given. Each dataset consists of 2 lines:\nThe first integer\nThe second integer\nThe integer has at most 100 digits.\nOutput\nFor each dataset, print the sum of given integers in a line.\nSample Input\n6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\nOutput for the Sample Input\n1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow",
        "code": "def national_budget():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    N = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(N):\n        a = data[index]\n        b = data[index + 1]\n        index += 2\n        \n        if len(a) > 80 or len(b) > 80:\n            results.append(\"overflow\")\n            continue\n        \n        sum_ab = int(a) + int(b)\n        if len(str(sum_ab)) > 80:\n            results.append(\"overflow\")\n        else:\n            results.append(str(sum_ab))\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def national_budget():\n    import sys\n    data = sys.stdin.read().strip().split()\n    N = int(data[0])\n    results = []\n    for i in range(1, len(data), 2):\n        a, b = data[i], data[i+1]\n        try:\n            sum_ab = int(a) + int(b)\n            if len(str(sum_ab)) > 80:\n                results.append(\"overflow\")\n            else:\n                results.append(str(sum_ab))\n        except (ValueError, IndexError):\n            results.append(\"overflow\")\n\n    print('\\n'.join(results))",
            "def national_budget():\n    import sys\n    lines = sys.stdin.read().splitlines()\n    n = int(lines[0])\n    results = []\n    for i in range(1, min(n*2+1, len(lines)), 2):\n        try:\n            a, b = lines[i], lines[i+1]\n            if len(a) > 80 or len(b) > 80:\n                results.append(\"overflow\")\n            else:\n                sum_ab = int(a) + int(b)\n                if len(str(sum_ab)) > 80:\n                    results.append(\"overflow\")\n                else:\n                    results.append(str(sum_ab))\n        except (ValueError, IndexError):\n            results.append(\"overflow\")\n\n    print(\"\\n\".join(results))",
            "def national_budget():\n    import sys\n    data = sys.stdin.read().strip().split()\n    n = int(data[0])\n    results = []\n    for i in range(1, 2 * n + 1, 2):\n        try:\n            a, b = data[i], data[i+1]\n            if len(a) > 80 or len(b) > 80:\n                results.append(\"overflow\")\n            else:\n                s = int(a) + int(b)\n                results.append(str(s) if len(str(s)) <= 80 else \"overflow\")\n        except (IndexError, ValueError):\n            results.append(\"overflow\")\n    print('\\n'.join(results))",
            "def national_budget():\n    import sys\n    try:\n        lines = sys.stdin.read().splitlines()\n        n = int(lines[0])\n        results = []\n        for i in range(1, 2 * n + 1, 2):\n            a, b = lines[i], lines[i+1]\n            if len(a) > 80 or len(b) > 80:\n                results.append(\"overflow\")\n            else:\n                try:\n                    sum_ab = int(a) + int(b)\n                    results.append(str(sum_ab) if len(str(sum_ab)) <= 80 else \"overflow\")\n                except ValueError:\n                    results.append(\"overflow\")\n\n        print('\\n'.join(results))\n    except (ValueError, IndexError):\n        print(\"overflow\")",
            "def national_budget():\n    import sys\n    try:\n        data = sys.stdin.read().strip().split()\n        n = int(data[0])\n        results = [\"overflow\" if len(a) > 80 or len(b) > 80 or len(str(int(a) + int(b))) > 80 else str(int(a) + int(b)) for a, b in zip(data[1::2], data[2::2])]\n        print('\\n'.join(results[:n]))\n    except (ValueError, IndexError):\n        print('overflow')",
            "def national_budget():\n    import sys\n    try:\n        lines = sys.stdin.read().splitlines()\n        n = int(lines[0])\n        ans = []\n        for i in range(1,len(lines),2):\n            try:\n                a,b = int(lines[i]),int(lines[i+1])\n                if len(str(a))>80 or len(str(b))>80 or len(str(a+b))>80:\n                    ans.append(\"overflow\")\n                else:\n                    ans.append(str(a+b))\n            except ValueError:\n                ans.append(\"overflow\")\n            except IndexError:\n                ans.append(\"overflow\")\n        print(\"\\n\".join(ans[:n]))\n    except ValueError:\n        print(\"overflow\")"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decrypt(text):\n    common_words = [\"the\", \"this\", \"that\"]\n    \n    def shift_text(text, shift):\n        decrypted_text = []\n        for char in text:\n            if 'a' <= char <= 'z':\n                new_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))\n                decrypted_text.append(new_char)\n            else:\n                decrypted_text.append(char)\n        return ''.join(decrypted_text)\n\n    for shift in range(26):\n        decrypted_text = shift_text(text, shift)\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\n# Example usage:\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decrypt(text):\n    common_words = [\"the\", \"this\", \"that\"]\n    for shift in range(26):\n        decrypted_text = ''.join([chr(((ord(char) - ord('a') - shift) % 26) + ord('a')) if 'a' <= char <= 'z' else char for char in text])\n        if any(word in decrypted_text for word in common_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "import sys\n\ndef caesar_cipher_decrypt(text):\n    common_words = [\"the\", \"this\", \"that\"]\n    for s in range(26):\n        decrypted = \"\".join([chr(((ord(c) - ord('a') - s) % 26) + ord('a')) if 'a' <= c <= 'z' else c for c in text])\n        if any(word in decrypted for word in common_words):\n            return decrypted\n\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "import sys\n\ndef caesar_cipher_decrypt(text):\n  for key in range(26):\n    decrypted = ''.join([chr(((ord(c)-ord('a')-key)%26)+ord('a')) if c.isalpha() and c.islower() else c for c in text])\n    if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n      return decrypted\n  return text\n\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "import sys\n\ndef caesar_cipher_decrypt(text):\n    for shift in range(26):\n        decrypted = \"\".join(chr(((ord(c) - ord('a') - shift) % 26) + ord('a')) if 'a' <= c <= 'z' else c for c in text)\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n    return text\n\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "import sys\n\ndef caesar_cipher_decrypt(text):\n    for key in range(26):\n        decrypted = \"\".join([chr((ord(c) - ord('a') - key) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in text])\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n    return text\n\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))",
            "import sys\n\ndef caesar_cipher_decrypt(text):\n    for shift in range(26):\n        decrypted = ''.join(chr((ord(c) - ord('a') - shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in text)\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n    return text\n\ninput_text = sys.stdin.read().strip()\nprint(caesar_cipher_decrypt(input_text))"
        ]
    },
    {
        "id": 36,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "ca = ord('a')\ndef convert(s, d):\n    res = []\n    for c in s:\n        if c not in ' .':\n            c = chr(((ord(c) - ca + d) % 26) + ca)\n        res.append(c)\n    return \"\".join(res)\nfor line in open(0).readlines():\n    s = line.strip()\n    for d in range(26):\n        s0 = convert(s, d)\n        if \"the\" in s0 or \"this\" in s0 or \"that\" in s0:\n            print(s0)\n            break\n\n",
        "writer": "human",
        "rewrite": [
            "ca = ord('a')\ndef convert(s, d):\n  return ''.join([chr(((ord(c) - ca + d) % 26) + ca) if c not in ' .' else c for c in s])\n\nfor line in open(0):\n  s = line.strip()\n  for d in range(26):\n    s0 = convert(s,d)\n    if any(x in s0 for x in [\"the\", \"this\", \"that\"]):\n      print(s0)\n      break",
            "import string\n\ndef caesar_cipher(text, shift):\n    result = ''\n    for char in text:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + shift) % 26 + start)\n        elif char.isspace():\n            shifted_char = ' '\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result\n\nwith open(0) as f:\n    for line in f:\n        text = line.strip()\n        for shift in range(26):\n            decrypted_text = caesar_cipher(text, shift)\n            if any(word in decrypted_text for word in ['the', 'this', 'that']):\n                print(decrypted_text)\n                break",
            "def decrypt(text):\n    for shift in range(26):\n        decrypted = ''.join(chr(((ord(c) - ord('a') - shift) % 26) + ord('a')) if c.isalpha() else c for c in text)\n        if any(word in decrypted for word in ['the', 'this', 'that']):\n            return decrypted\n    return None\n\nfor line in open(0):\n    result = decrypt(line.strip())\n    if result:\n        print(result)",
            "import string\n\ndef caesar_crack(ciphertext):\n    for key in range(26):\n        plaintext = ''.join([string.ascii_lowercase[(string.ascii_lowercase.index(c) - key) % 26] if c.isalpha() else c for c in ciphertext])\n        if any(keyword in plaintext for keyword in ['the', 'this', 'that']):\n            return plaintext\n    return None\n\nfor line in open(0):\n    decrypted = caesar_crack(line.strip())\n    if decrypted:\n        print(decrypted)",
            "def decipher(text):\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for shift in range(26):\n        decrypted = ''.join([alphabet[(alphabet.index(char.lower()) - shift) % 26] if char.isalpha() else char for char in text])\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n    return None\n\nfor line in open(0):\n    print(decipher(line.strip()))",
            "def crack_caesar(cipher):\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for key in range(26):\n        plain = \"\".join([alpha[(alpha.index(c) - key) % 26] if c.isalpha() else c for c in cipher])\n        if any(word in plain for word in [\"the\", \"this\", \"that\"]):\n            return plain\n    return None\n\nfor line in open(0):\n    print(crack_caesar(line.strip()))"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\nn=input()\nprint(factorial(int(n)))",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n  result = 1\n  for i in range(1, n + 1):\n    result *= i\n  return result\n\nn = int(input())\nprint(factorial(n))",
            "import math\n\nn = int(input())\nprint(math.factorial(n))",
            "def factorial(n):\n    res = 1\n    while n > 1:\n        res *= n\n        n -= 1\n    return res\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    return 1 if n <= 1 else n * factorial(n-1)\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    prod = 1\n    for i in range(1, n + 1):\n        prod *= i\n    return prod\n\nn = int(input())\nprint(factorial(n))"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def caesar_cipher_decode(encrypted_text):\n    def decrypt(text, shift):\n        decrypted = []\n        for char in text:\n            if 'a' <= char <= 'z':\n                decrypted.append(chr((ord(char) - ord('a') - shift) % 26 + ord('a')))\n            else:\n                decrypted.append(char)\n        return ''.join(decrypted)\n    \n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = decrypt(encrypted_text, shift)\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
        "writer": "machine",
        "rewrite": [
            "def caesar_cipher_decode(encrypted_text):\n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = ''.join([chr((ord(c) - ord('a') - shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in encrypted_text])\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\nimport sys\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "import sys\n\ndef caesar_cipher_decode(encrypted_text):\n    possible_words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decrypted_text = \"\".join([chr(((ord(c) - ord('a') - shift) % 26) + ord('a')) if 'a' <= c <= 'z' else c for c in encrypted_text])\n        if any(word in decrypted_text for word in possible_words):\n            return decrypted_text\n\ninput_text = sys.stdin.read().strip().split('\\n')\nfor line in input_text:\n    print(caesar_cipher_decode(line))",
            "import sys\n\ndef caesar_cipher_decode(text):\n    for shift in range(26):\n        decoded = ''.join(chr((ord(c) - ord('a') - shift) % 26 + ord('a')) if c.isalpha() and c.islower() else c for c in text)\n        if any(word in decoded for word in {\"the\", \"this\", \"that\"}):\n            return decoded\n\ninput = sys.stdin.read().strip().split('\\n')\nfor line in input:\n    print(caesar_cipher_decode(line))",
            "import sys\n\ndef caesar_cipher_decode(encrypted_text):\n    for s in range(26):\n        decrypted = \"\".join([chr((ord(c) - ord('a') - s) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in encrypted_text])\n        if any(word in decrypted for word in [\"the\", \"this\", \"that\"]):\n            return decrypted\n\nlines = sys.stdin.read().strip().split('\\n')\nfor line in lines:\n    print(caesar_cipher_decode(line))",
            "import sys\n\ndef caesar_cipher_decode(text):\n    words = {\"the\", \"this\", \"that\"}\n    for shift in range(26):\n        decoded = \"\".join(chr(((ord(c) - ord('a') - shift) % 26) + ord('a')) if 'a' <= c <= 'z' else c for c in text)\n        if any(word in decoded for word in words):\n            return decoded\n\nfor line in sys.stdin.read().strip().split('\\n'):\n    print(caesar_cipher_decode(line))",
            "import sys\n\ndef caesar_cipher_decode(encrypted_text):\n    for shift in range(26):\n        decrypted_text = \"\".join([chr((ord(c) - ord('a') - shift) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in encrypted_text])\n        if any(word in decrypted_text for word in [\"the\", \"this\", \"that\"]):\n            return decrypted_text\n\nfor line in sys.stdin.read().splitlines():\n    print(caesar_cipher_decode(line))"
        ]
    },
    {
        "id": 39,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nn = int(input())\nprint(factorial(n))",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n  res = 1\n  for i in range(1, n + 1):\n    res *= i\n  return res\n\nn = int(input())\nprint(factorial(n))",
            "import math\n\nn = int(input())\nprint(math.factorial(n))",
            "def factorial(n):\n    result = 1\n    while n > 1:\n        result *= n\n        n -= 1\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\nn = int(input())\nprint(factorial(n))",
            "def factorial(n):\n    try:\n        if n < 0:\n            raise ValueError(\"Factorial is not defined for negative numbers.\")\n        elif n == 0:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    except ValueError as e:\n        print(e)\n        return None\n\nn = int(input())\nresult = factorial(n)\nif result is not None:\n    print(result)"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def Factorial(n):\n    if n <= 1: return 1\n    return n*Factorial(n-1)\nprint(Factorial(int(input())))\n",
        "writer": "human",
        "rewrite": [
            "def factorial(n):\n  result = 1\n  for i in range(1, n + 1):\n    result *= i\n  return result\n\nprint(factorial(int(input())))",
            "import math\n\ndef factorial(n):\n  return math.factorial(n)\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    res = 1\n    while n > 1:\n        res *= n\n        n -= 1\n    return res\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        product = 1\n        for i in range(1, n + 1):\n            product *= i\n        return product\n\nprint(factorial(int(input())))",
            "def factorial(n):\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\nprint(factorial(int(input())))",
            "from functools import reduce\nimport operator\n\ndef factorial(n):\n  return reduce(operator.mul, range(1, n + 1), 1)\n\nprint(factorial(int(input())))"
        ]
    },
    {
        "id": 35,
        "prompt_id": "p00017",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Caesar Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the tripr Cipher\nIn cryptography, Caesar cipher is one of the simplest and most widely known encryption method. Caesar cipher is a type of substitution cipher in which each letter in the text is replaced by a letter some fixed number of positions down the alphabet. For example, with a shift of 1, 'a' would be replaced by 'b', 'b' would become 'c', 'y' would become 'z', 'z' would become 'a', and so on. In that case, a text:\nthis is a pen\nis would become:\nuijt jt b qfo\nWrite a program which reads a text encrypted by Caesar Chipher and prints the corresponding decoded text. The number of shift is secret and it depends on datasets, but you can assume that the decoded text includes any of the following words: \"the\", \"this\", or \"that\".\nInput\nInput consists of several datasets. Each dataset consists of texts in a line. Input ends with EOF. The text consists of lower-case letters, periods, space, and end-of-lines. Only the letters have been encrypted. A line consists of at most 80 characters.\nYou may assume that you can create one decoded text which includes any of \"the\", \"this\", or \"that\" from the given input text.\nThe number of datasets is less than or equal to 20.\nOutput\nPrint decoded texts in a line.\nSample Input\nxlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.\nOutput for the Sample Input\nthis is the picture that i took in the trip.",
        "code": "def chg(s,n):\n    res=\"\"\n    for i in s:\n        o=ord(i)\n        if 97<=o<=122:\n            if o+n<=122:\n                res+=chr(o+n)\n            else:\n                res+=chr(o+n-26)\n        else:\n            res+=i\n    return res\n\nwhile True:\n    try:\n        s=input()\n        for i in range(25,-1,-1):\n            c=chg(s,i)\n            e=c.split()\n            if \"the\" in e or \"this\" in e or \"that\" in e:\n                print(c)\n                break\n    except:\n        break",
        "writer": "human",
        "rewrite": [
            "def chg(s,n):\n    return ''.join([chr(((ord(i) - 97 + n) % 26) + 97) if 'a' <= i <= 'z' else i for i in s])\n\nwhile True:\n    try:\n        s = input()\n        for i in range(25, -1, -1):\n            c = chg(s, i)\n            if any(x in c.split() for x in [\"the\", \"this\", \"that\"]):\n                print(c)\n                break\n    except EOFError:\n        break",
            "def chg(s, n):\n  return ''.join(chr((ord(c) - ord('a') + n) % 26 + ord('a')) if 'a' <= c <= 'z' else c for c in s)\n\nwhile True:\n  try:\n    s = input()\n    for i in range(25, -1, -1):\n      decrypted = chg(s, i)\n      if any(word in decrypted.split() for word in [\"the\", \"this\", \"that\"]):\n        print(decrypted)\n        break\n  except EOFError:\n    break",
            "import string\n\ndef chg(s, n):\n    shifted = \"\"\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted += string.ascii_lowercase[(ord(char) - ord('a') + n) % 26]\n        else:\n            shifted += char\n    return shifted\n\nwhile True:\n    try:\n        s = input()\n        for i in range(25, -1, -1):\n            decrypted = chg(s, i)\n            if any(word in decrypted.split() for word in [\"the\", \"this\", \"that\"]):\n                print(decrypted)\n                break\n    except EOFError:\n        break",
            "def caesar_decrypt(text, shift):\n    result = ''\n    for char in text:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start - shift) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result\n\nwhile True:\n    try:\n        ciphertext = input()\n        for shift in range(26):\n            plaintext = caesar_decrypt(ciphertext, shift)\n            if any(word in plaintext.lower().split() for word in [\"the\", \"this\", \"that\"]):\n                print(plaintext)\n                break\n    except EOFError:\n        break",
            "def shift_chars(text, shift):\n    result = ''\n    for char in text:\n        if 'a' <= char <= 'z':\n            new_ord = (ord(char) - ord('a') + shift) % 26 + ord('a')\n            result += chr(new_ord)\n        elif 'A' <= char <= 'Z':\n            new_ord = (ord(char) - ord('A') + shift) % 26 + ord('A')\n            result += chr(new_ord)\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        line = input()\n        for shift in range(26):\n            decrypted = shift_chars(line, -shift)\n            words = decrypted.split()\n            if any(keyword in words for keyword in [\"the\", \"this\", \"that\"]):\n                print(decrypted)\n                break\n    except EOFError:\n        break",
            "def caesar(text, shift):\n    result = ''\n    for char in text:\n        if 'a' <= char <= 'z':\n            result += chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n        elif 'A' <= char <= 'Z':\n            result += chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            result += char\n    return result\n\nwhile True:\n    try:\n        text = input()\n        for shift in range(26):\n            decrypted = caesar(text, -shift)\n            if any(word in decrypted.lower().split() for word in [\"the\", \"this\", \"that\"]):\n                print(decrypted)\n                break\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    IN=input()\n    IN.upper()\n\n    print(IN.upper())\n        \nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()",
            "def main():\n    print(input().upper())\n\nif __name__ == '__main__':\n    main()"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "'''\nCreated on Mar 22, 2013\n\n@author: wukc\n'''\nfrom sys import stdin\n\ndef toupper(x):\n    return chr(ord(x)-32) if x.islower() else x \n\ns=stdin.readline()\nprint(\"\".join(map(toupper,s)[:-1]))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef toupper(x):\n  return x.upper()\n\ns = sys.stdin.readline()\nprint(\"\".join(map(toupper, s))[:-1])",
            "import sys\n\nprint(sys.stdin.readline().upper()[:-1])",
            "import sys\n\nprint(sys.stdin.readline().rstrip().upper())",
            "import sys\n\nprint(sys.stdin.readline().strip().upper())",
            "import sys\n\nprint(sys.stdin.readline().upper().rstrip())",
            "import sys\n\nprint(\"\".join(c.upper() for c in sys.stdin.readline()[:-1]))"
        ]
    },
    {
        "id": 41,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize_text(text):\n    return text.upper()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))  # Output: THIS IS A PEN.",
        "writer": "machine",
        "rewrite": [
            "def capitalize_text(text):\n    return text.upper()",
            "def capitalize_text(text):\n  return text.casefold().upper()",
            "def capitalize_text(text):\n    return ''.join(word[0].upper() + word[1:] for word in text.split())",
            "def capitalize_text(text):\n    words = text.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)",
            "def capitalize_text(text):\n    return text.title()",
            "def capitalize_text(text):\n    result = ''\n    for i, char in enumerate(text):\n        if i == 0 or text[i-1] == ' ':\n            result += char.upper()\n        else:\n            result += char\n    return result"
        ]
    },
    {
        "id": 42,
        "prompt_id": "p00020",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Capitalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PENalize\nWrite a program which replace all the lower-case letters of a given text with the corresponding captital letters.\nInput\nA text including lower-case letters, periods, and space is given in a line. The number of characters in the text is less than or equal to 200.\nOutput\nPrint the converted text.\nSample Input\nthis is a pen.\nOutput for the Sample Input\nTHIS IS A PEN.",
        "code": "def capitalize_text(text):\n    return text.upper()\n\n# Sample usage\ninput_text = \"this is a pen.\"\nprint(capitalize_text(input_text))",
        "writer": "machine",
        "rewrite": [
            "def capitalize_text(text):\n    return text.upper()",
            "def capitalize_text(text):\n  return text.casefold().upper()",
            "def capitalize_text(text):\n    return ''.join(word.capitalize() for word in text.split())",
            "def capitalize_text(text):\n    words = text.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return \" \".join(capitalized_words)",
            "def capitalize_text(text):\n    return text.title()",
            "def capitalize_text(text):\n    result = \"\"\n    for i, char in enumerate(text):\n        if i == 0 or text[i-1] == ' ':\n            result += char.upper()\n        else:\n            result += char\n    return result"
        ]
    },
    {
        "id": 40,
        "prompt_id": "p00019",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Factorial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n12rial\nWrite a program which reads an integer\nn\nand prints the factorial of\nn\n. You can assume that\nn\n\u2264 20.\nInput\nAn integer\nn\n(1 \u2264\nn\n\u2264 20) in a line.\nOutput\nPrint the factorial of\nn\nin a line.\nSample Input\n5\nOutput for the Sample Input\n120",
        "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nif __name__ == \"__main__\":\n    import sys\n    input = sys.stdin.read\n    n = int(input().strip())\n    print(factorial(n))",
        "writer": "machine",
        "rewrite": [
            "def factorial(n):\n  result = 1\n  for i in range(1, n + 1):\n    result *= i\n  return result\n\nif __name__ == \"__main__\":\n  import sys\n  n = int(sys.stdin.readline().strip())\n  print(factorial(n))",
            "import math\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.readline().strip())\n    print(math.factorial(n))",
            "def factorial(n):\n    result = 1\n    while n > 0:\n        result *= n\n        n -= 1\n    return result\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.readline().strip())\n    print(factorial(n))",
            "import operator\nimport functools\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.readline().strip())\n    print(functools.reduce(operator.mul, range(1, n + 1), 1))",
            "def factorial(n):\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n    return res\n\nif __name__ == \"__main__\":\n    import sys\n    n = int(sys.stdin.readline().strip())\n    print(factorial(n))",
            "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    product = 1\n    for i in range(1, n + 1):\n      product *= i\n    return product\n\nif __name__ == \"__main__\":\n  import sys\n  n = int(sys.stdin.readline().strip())\n  print(factorial(n))"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def cross(x, y):\n    return (x.conjugate() * y).imag\n\ndef is_parallel(x, y):\n    if abs(cross(x, y)) < 1e-10:\n        return True\n    return False\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2, y2) - complex(x1, y1)\n    b = complex(x4, y4) - complex(x3, y3)    \n    if is_parallel(a, b):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "def is_parallel(x, y):\n    return abs(x.conjugate() * y).imag < 1e-10\n\nn = int(input())\nfor i in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2 - x1, y2 - y1)\n    b = complex(x4 - x3, y4 - y3)\n    print('YES' if is_parallel(a, b) else 'NO')",
            "def is_parallel(x, y):\n    return abs((x.conjugate() * y).imag) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2 - x1, y2 - y1)\n    b = complex(x4 - x3, y4 - y3)\n    print(\"YES\" if is_parallel(a, b) else \"NO\")",
            "def is_parallel(a, b):\n    return abs(a.real * b.imag - a.imag * b.real) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2 - x1, y2 - y1)\n    b = complex(x4 - x3, y4 - y3)\n    print(\"YES\" if is_parallel(a, b) else \"NO\")",
            "def is_parallel(x, y):\n    return abs(x.real * y.imag - x.imag * y.real) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = complex(x2 - x1, y2 - y1)\n    b = complex(x4 - x3, y4 - y3)\n    print(\"YES\" if is_parallel(a,b) else \"NO\")",
            "def is_parallel(a, b):\n    return abs(a.real * b.imag - a.imag * b.real) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = (x2 - x1, y2 - y1)\n    b = (x4 - x3, y4 - y3)\n    print(\"YES\" if abs(a[0] * b[1] - a[1] * b[0]) < 1e-10 else \"NO\")",
            "def is_parallel(x, y):\n    return abs(x.real * y.imag - x.imag * y.real) < 1e-10\n\nn = int(input())\nfor _ in range(n):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, input().split())\n    a = (x2 - x1, y2 - y1)\n    b = (x4 - x3, y4 - y3)\n    print('YES' if abs(a[0] * b[1] - a[1] * b[0]) < 1e-10 else 'NO')"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef find_crack_floor():\n    input = sys.stdin.read()\n    data = input.split()\n    results = []\n    \n    for v in data:\n        v = float(v)\n        t = v / 9.8\n        y = 4.9 * t * t\n        N = math.ceil((y + 5) / 5)\n        results.append(N)\n    \n    for result in results:\n        print(result)\n\nfind_crack_floor()",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef find_crack_floor():\n    data = sys.stdin.read().split()\n    for v in data:\n        t = float(v) / 9.8\n        y = 4.9 * t**2\n        print(math.ceil((y + 5) / 5))\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    for v in sys.stdin.read().split():\n        t = float(v) / 9.8\n        y = 4.9 * t**2\n        print(math.ceil((y+5)/5))\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    [print(math.ceil((4.9 * (float(v)/9.8)**2 + 5)/5)) for v in sys.stdin.read().split()]\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    for v in map(float, sys.stdin.read().split()):\n        t = v / 9.8\n        y = 4.9 * t**2\n        print(math.ceil((y + 5) / 5))\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    print('\\n'.join(map(lambda v: str(math.ceil((4.9 * (float(v)/9.8)**2 + 5)/5)), sys.stdin.read().split())))\n\nfind_crack_floor()",
            "import sys\nimport math\n\ndef find_crack_floor():\n    for v in sys.stdin.read().split():\n        v = float(v)\n        print(math.ceil((4.9 * (v/9.8)**2 + 5) / 5))\n\nfind_crack_floor()"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef find_cracking_floor():\n    input = sys.stdin.read().strip().split()\n    results = []\n    \n    for line in input:\n        v = float(line)\n        t = v / 9.8\n        y = 4.9 * t ** 2\n        floor = math.ceil((y + 5) / 5)\n        results.append(floor)\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "import sys\nimport math\n\ndef find_cracking_floor():\n    lines = sys.stdin.readlines()\n    for line in lines:\n        v = float(line.strip())\n        t = v / 9.8\n        y = 4.9 * t**2\n        floor = math.ceil((y + 5) / 5)\n        print(int(floor))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    for line in sys.stdin:\n        v = float(line.strip())\n        t = v / 9.8\n        y = 4.9 * t**2\n        print(math.ceil((y + 5) / 5))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    for v in map(float, sys.stdin.read().strip().split()):\n        t = v / 9.8\n        y = 4.9 * t**2\n        print(math.ceil((y + 5) / 5))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    for velocity in map(float, sys.stdin.read().split()):\n        time = velocity / 9.8\n        distance = 4.9 * time**2\n        print(math.ceil((distance + 5) / 5))",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    [print(math.ceil((4.9 * (float(v) / 9.8)**2 + 5) / 5)) for v in sys.stdin.read().split()]",
            "import sys\nimport math\n\ndef find_cracking_floor():\n    for v in map(float, sys.stdin.read().strip().split()):\n        print(math.ceil((4.9 * (v / 9.8)**2 + 5) / 5))"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def are_lines_parallel():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(n):\n        x1, y1, x2, y2 = float(data[index]), float(data[index+1]), float(data[index+2]), float(data[index+3])\n        x3, y3, x4, y4 = float(data[index+4]), float(data[index+5]), float(data[index+6]), float(data[index+7])\n        index += 8\n        \n        # Calculate the direction vectors of AB and CD\n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        \n        # Check if the cross product of the direction vectors is zero\n        if dx1 * dy2 == dy1 * dx2:\n            results.append(\"YES\")\n        else:\n            results.append(\"NO\")\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def are_lines_parallel():\n    data = input().split()\n    n = int(data[0])\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, data[1+i*8:1+i*8+8])\n        dx1, dy1 = x2 - x1, y2 - y1\n        dx2, dy2 = x4 - x3, y4 - y3\n        print(\"YES\" if dx1 * dy2 == dy1 * dx2 else \"NO\")",
            "def are_lines_parallel():\n    data = input().split()\n    n = int(data[0])\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, data[1+8*i:9+8*i])\n        if (x2-x1)*(y4-y3) == (y2-y1)*(x4-x3):\n            print(\"YES\")\n        else:\n            print(\"NO\")",
            "def are_lines_parallel():\n    lines = input().split()\n    n = int(lines[0])\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, lines[1+8*i:1+8*(i+1)])\n        print(\"YES\" if (x2-x1)*(y4-y3) == (x4-x3)*(y2-y1) else \"NO\")",
            "def are_lines_parallel():\n    data = input().split()\n    n = int(data[0])\n    for i in range(n):\n        coords = list(map(float, data[1+8*i:1+8*(i+1)]))\n        x1, y1, x2, y2, x3, y3, x4, y4 = coords\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print('YES')\n        else:\n            print('NO')",
            "def are_lines_parallel():\n    lines = input().split()\n    n = int(lines[0])\n    for i in range(n):\n        x1,y1,x2,y2,x3,y3,x4,y4 = map(float,lines[8*i+1:8*i+9])\n        if (x2-x1)*(y4-y3) == (x4-x3)*(y2-y1): print(\"YES\")\n        else: print(\"NO\")",
            "def are_lines_parallel():\n    input_str = input()\n    data = input_str.split()\n    n = int(data[0])\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, data[1 + 8 * i:9 + 8 * i])\n        if (x2 - x1) * (y4 - y3) == (x4 - x3) * (y2 - y1):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
        ]
    },
    {
        "id": 49,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "import sys\nimport math\n\ndef solve():\n    vs = [float(s) for s in sys.stdin]\n    \n    for v0 in vs:\n        N, v = 1, 0.0\n        \n        while True:\n            y = 5 * N - 5\n            v = math.sqrt(2 * 9.8 * y)\n            if v > v0:\n                print(N)\n                break\n            else:\n                N += 1\n\nif __name__ == \"__main__\":\n    solve()\n",
        "writer": "human",
        "rewrite": [
            "import sys\nimport math\n\ndef solve():\n    vs = list(map(float, sys.stdin.read().split()))\n    for v0 in vs:\n        l,r = 1,10**9\n        while l<=r:\n            mid = (l+r)//2\n            v = math.sqrt(2*9.8*(5*mid-5))\n            if v>v0:\n                r = mid-1\n            else:\n                l = mid+1\n        print(l)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.readlines()):\n        n = (v0**2/(2*9.8) + 5 + 0.9999999)/5\n        print(math.ceil(n))\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.read().split()):\n        n = math.ceil((v0**2/(9.8*10)+1)/2)\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.read().split()):\n        n = math.ceil((v0**2 / (2 * 9.8) + 5) / 5)\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.read().split()):\n        n = (v0**2 / (10 * 9.8) + 1) // 1 +1\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()",
            "import sys\nimport math\n\ndef solve():\n    for v0 in map(float, sys.stdin.read().split()):\n        n = math.ceil((v0**2 + 98) / 98)\n        print(n)\n\nif __name__ == \"__main__\":\n    solve()"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import sys\n\ndef solve(numbers):\n    max = -sys.maxsize\n    for i in range(0, len(numbers)):\n        sum = 0\n        for j in range(i, len(numbers)):\n            sum += numbers[j]\n            if sum > max:\n                max = sum\n    return max\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = []\n    for i in range(0, n):\n        numbers.append(int(input()))\n\n    print(solve(numbers))",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef solve(numbers):\n    max_so_far = -sys.maxsize -1\n    current_max = 0\n    for x in numbers:\n        current_max += x\n        if max_so_far < current_max:\n            max_so_far = current_max\n        if current_max < 0:\n            current_max = 0\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_so_far = -sys.maxsize -1\n    current_max = 0\n    for x in numbers:\n        current_max += x\n        if max_so_far < current_max:\n            max_so_far = current_max\n        if current_max < 0:\n            current_max = 0\n    return max_so_far\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(nums):\n    max_so_far = -sys.maxsize -1\n    current_max = 0\n    for num in nums:\n        current_max += num\n        max_so_far = max(max_so_far, current_max)\n        current_max = max(0, current_max)\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_so_far = float('-inf')\n    current_max = 0\n    for number in numbers:\n        current_max += number\n        max_so_far = max(max_so_far, current_max)\n        current_max = max(0, current_max)\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(numbers):\n    max_sum = -sys.maxsize -1\n    current_sum = 0\n    for number in numbers:\n        current_sum += number\n        max_sum = max(max_sum, current_sum)\n        current_sum = max(0, current_sum)\n    return max_sum\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))",
            "import sys\n\ndef solve(nums):\n    max_so_far = -sys.maxsize -1\n    for i in range(len(nums)):\n        current_max = 0\n        for j in range(i, len(nums)):\n            current_max += nums[j]\n            max_so_far = max(max_so_far, current_max)\n    return max_so_far\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    numbers = [int(input()) for _ in range(n)]\n    print(solve(numbers))"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    i = 0\n    results = []\n    \n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        \n        max_sum = current_sum = numbers[0]\n        \n        for num in numbers[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        results.append(max_sum)\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    data = input().strip().split()\n    results = []\n    i = 0\n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        numbers = list(map(int, data[i:i+n]))\n        i += n\n        max_so_far = numbers[0]\n        current_max = numbers[0]\n        for x in numbers[1:]:\n            current_max = max(x, current_max + x)\n            max_so_far = max(max_so_far, current_max)\n        results.append(max_so_far)\n    for res in results:\n        print(res)",
            "def max_sum_subarray():\n    line = input()\n    while line:\n        nums = list(map(int, line.split()))\n        n = nums[0]\n        if n == 0:\n            break\n        nums = nums[1:]\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for i in range(1, n):\n            curr_max = max(nums[i], curr_max + nums[i])\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)\n        line = input()",
            "def max_sum_sequence():\n    data = input().split()\n    i = 0\n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        nums = [int(x) for x in data[i:i+n]]\n        i += n\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for x in nums[1:]:\n            curr_max = max(x, curr_max + x)\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)",
            "import sys\n\ndef max_sum_sequence():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        nums = list(map(int, line.split()))\n        if nums[0] == 0:\n            break\n        n = nums[0]\n        nums = nums[1:]\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for num in nums[1:]:\n            curr_max = max(num, curr_max + num)\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)",
            "def max_subarray_sum():\n    line = input()\n    while line:\n        nums = list(map(int, line.split()))\n        if nums[0] == 0:\n            break\n        n = nums[0]\n        nums = nums[1:]\n        max_so_far = nums[0]\n        curr_max = nums[0]\n        for i in range(1, n):\n            curr_max = max(nums[i], curr_max + nums[i])\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)\n        line = input()",
            "def max_sum_sequence():\n    data = input().split()\n    i = 0\n    while i < len(data):\n        n = int(data[i])\n        if n==0:\n            break\n        i+=1\n        arr = [int(x) for x in data[i:i+n]]\n        i+=n\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for j in range(1,len(arr)):\n            max_ending_here = max(arr[j],max_ending_here + arr[j])\n            max_so_far = max(max_so_far,max_ending_here)\n        print(max_so_far)"
        ]
    },
    {
        "id": 50,
        "prompt_id": "p00024",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Physical Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\ncal Experiments\nIgnoring the air resistance, velocity of a freely falling object $v$ after $t$ seconds and its drop $y$ in $t$ seconds are represented by the following formulas:\n$ v = 9.8 t $\n$ y = 4.9 t^2 $\nA person is trying to drop down a glass ball and check whether it will crack. Your task is to write a program to help this experiment.\nYou are given the  minimum velocity to crack the ball. Your program should print the lowest possible floor of a building to crack the ball. The height of the $N$ floor of the building is defined by $5 \\times N - 5$.\nInput\nThe input consists of multiple datasets. Each dataset, a line, consists of the minimum velocity\nv\n(0 <\nv\n< 200) to crack the ball. The value is given by a decimal fraction, with at most 4 digits after the decimal point. The input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the lowest possible floor where the ball cracks.\nSample Input\n25.4\n25.4\nOutput for the Sample Input\n8\n8",
        "code": "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5*n-5\n        v_ex = 2*4.9*(y/k)**0.5\n        if v_ex >= v:\n            return n\n            break\n        else:\n            n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
        "writer": "human",
        "rewrite": [
            "def experiment(v):\n    n = 1\n    k = 4.9\n    while True:\n        y = 5 * n - 5\n        if y < 0:\n            return 1\n        v_ex = 2 * 4.9 * (y / k)**0.5\n        if v_ex >= v:\n            return n\n        n += 1\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    k = 4.9\n    n = max(1, int((v**2 * k / (100)) + 5) // 5 +1)\n    return n\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "import math\n\ndef experiment(v):\n    k = 4.9\n    left, right = 1, 10**6  # Adjust upper bound as needed\n    while left <= right:\n        mid = (left + right) // 2\n        y = 5 * mid - 5\n        v_ex = 2 * k * math.sqrt(y / k) if y >=0 else 0\n        if v_ex >= v:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return left\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "import math\n\ndef experiment(v):\n  k = 4.9\n  n = (v**2 * k / 20 + 2.5) // 5 +1\n  return int(n)\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "def experiment(v):\n    n = 0\n    k = 4.9\n    while True:\n        n += 1\n        y = 5 * n - 5\n        if y < 0:\n            return 1\n        v_ex = 2 * k * (y / k)**0.5\n        if v_ex >= v:\n            return n\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break",
            "import math\n\ndef experiment(v):\n    k = 4.9\n    return math.ceil((v**2 * k / 100) + 1)\n\nwhile True:\n    try:\n        v = float(input())\n        print(experiment(v))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def f():\n    ax,ay,ar,bx,by,br=map(float,input().split())\n    d=(ax-bx)**2+(ay-by)**2\n    r1=(ar+br)*(ar+br)\n    r2=(ar-br)*(ar-br)\n    if d<=r1 and d>=r2:return 1;\n    elif d<r2 and ar>=br:return 2\n    elif d < r2 and ar <= br:return -2\n    else:return 0\n\nfor _ in range(int(input())):print(f())",
        "writer": "human",
        "rewrite": [
            "def f():\n    ax, ay, ar, bx, by, br = map(float, input().split())\n    d = (ax - bx)**2 + (ay - by)**2\n    if (ar + br)**2 >= d >= (ar - br)**2:\n        return 1\n    elif d < (ar - br)**2:\n        return 2 if ar >= br else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(f())",
            "def f():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    dist_sq = (x1 - x2)**2 + (y1 - y2)**2\n    if (r1 + r2)**2 >= dist_sq >= (r1 - r2)**2:\n        return 1\n    elif dist_sq < (r1 - r2)**2:\n        return 2 if r1 >= r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(f())",
            "def solve():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    distance_squared = (x1 - x2)**2 + (y1 - y2)**2\n    sum_radii_squared = (r1 + r2)**2\n    diff_radii_squared = (r1 - r2)**2\n\n    if diff_radii_squared <= distance_squared <= sum_radii_squared:\n        return 1\n    elif distance_squared < diff_radii_squared:\n        return 2 if r1 >= r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(solve())",
            "import math\n\ndef check_circles():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    distance = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n    if abs(r1 - r2) <= distance <= r1 + r2:\n        return 1\n    elif distance < abs(r1 - r2):\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(check_circles())",
            "import math\n\ndef circle_relation():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    dist = math.hypot(x1 - x2, y1 - y2)\n    if abs(r1 - r2) <= dist <= r1 + r2:\n        return 1\n    elif dist < abs(r1 - r2):\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(circle_relation())",
            "def solve():\n    x1, y1, r1, x2, y2, r2 = map(float, input().split())\n    distance_squared = (x1 - x2)**2 + (y1 - y2)**2\n    if (r1 + r2)**2 >= distance_squared >= (r1 - r2)**2:\n        return 1\n    elif distance_squared < (r1 - r2)**2:\n        return 2 if r1 > r2 else -2\n    else:\n        return 0\n\nfor _ in range(int(input())):\n    print(solve())"
        ]
    },
    {
        "id": 46,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "def max_sum_sequence():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    idx = 0\n    while idx < len(data):\n        n = int(data[idx])\n        if n == 0:\n            break\n        idx += 1\n        a = list(map(int, data[idx:idx+n]))\n        idx += n\n        \n        max_sum = current_sum = a[0]\n        for num in a[1:]:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        \n        print(max_sum)",
        "writer": "machine",
        "rewrite": [
            "def max_sum_sequence():\n    data = input().split()\n    i = 0\n    while i < len(data):\n        n = int(data[i])\n        if n == 0:\n            break\n        i += 1\n        a = list(map(int, data[i:i+n]))\n        i += n\n        max_so_far = a[0]\n        current_max = a[0]\n        for x in a[1:]:\n            current_max = max(x, current_max + x)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def max_sum_subarray():\n    line = input()\n    while line:\n        nums = list(map(int, line.split()))\n        n = nums[0]\n        if n == 0:\n            break\n        arr = nums[1:]\n        max_so_far = arr[0]\n        curr_max = arr[0]\n        for i in range(1, n):\n            curr_max = max(arr[i], curr_max + arr[i])\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)\n        line = input()",
            "def max_subarray_sum():\n    line = input()\n    while line:\n        nums = list(map(int, line.split()))\n        if nums[0] == 0:\n            break\n        n = nums[0]\n        arr = nums[1:]\n        max_so_far = arr[0]\n        current_max = arr[0]\n        for x in arr[1:]:\n            current_max = max(x, current_max + x)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)\n        line = input()",
            "def max_sum_subsequence():\n    while True:\n        try:\n            line = input()\n            nums = list(map(int, line.split()))\n            if nums[0] == 0:\n                break\n            n = nums[0]\n            arr = nums[1:]\n            max_so_far = arr[0]\n            curr_max = arr[0]\n            for x in arr[1:]:\n                curr_max = max(x, curr_max + x)\n                max_so_far = max(max_so_far, curr_max)\n            print(max_so_far)\n        except EOFError:\n            break",
            "import sys\n\ndef max_sum_subarray():\n    lines = sys.stdin.read().splitlines()\n    for line in lines:\n        nums = list(map(int, line.split()))\n        if nums[0] == 0:\n            break\n        n = nums[0]\n        arr = nums[1:]\n        max_so_far = arr[0]\n        current_max = arr[0]\n        for x in arr[1:]:\n            current_max = max(x, current_max + x)\n            max_so_far = max(max_so_far, current_max)\n        print(max_so_far)",
            "def solve():\n    line = input()\n    while line:\n        nums = list(map(int, line.split()))\n        if nums[0] == 0:\n            break\n        n = nums[0]\n        arr = nums[1:]\n        max_so_far = arr[0]\n        curr_max = arr[0]\n        for i in range(1, n):\n            curr_max = max(arr[i], curr_max + arr[i])\n            max_so_far = max(max_so_far, curr_max)\n        print(max_so_far)\n        line = input()"
        ]
    },
    {
        "id": 44,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "from __future__ import (absolute_import, division, print_function,\n                        unicode_literals)\nfrom sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 - x2 == 0.0:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in xrange(int(stdin.readline())):\n    p = [float(s) for s in stdin.readline().split()]\n    if gradient(*p[:4]) == gradient(*p[4:]):\n        print('YES')\n    else:\n        print('NO')",
        "writer": "human",
        "rewrite": [
            "from sys import stdin\n\ndef gradient(x1, y1, x2, y2):\n    if x1 == x2:\n        return float('inf')\n    return (y1 - y2) / (x1 - x2)\n\nfor n in range(int(stdin.readline())):\n    p = list(map(float, stdin.readline().split()))\n    if gradient(p[0], p[1], p[2], p[3]) == gradient(p[4], p[5], p[6], p[7]):\n        print('YES')\n    else:\n        print('NO')",
            "import sys\n\ndef gradient(x1, y1, x2, y2):\n  if x1 == x2:\n    return float('inf')\n  return (y1 - y2) / (x1 - x2)\n\nfor _ in range(int(sys.stdin.readline())):\n  x1, y1, x2, y2, x3, y3, x4, y4 = map(float, sys.stdin.readline().split())\n  if gradient(x1, y1, x2, y2) == gradient(x3, y3, x4, y4):\n    print('YES')\n  else:\n    print('NO')",
            "import sys\n\ndef check_parallel(points):\n    x1, y1, x2, y2, x3, y3, x4, y4 = points\n    if x1 == x2 and x3 == x4:\n        return x1 == x3\n    if x1 == x2 or x3 == x4:\n        return False\n    return (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3)\n\nfor _ in range(int(sys.stdin.readline())):\n    points = list(map(float, sys.stdin.readline().split()))\n    if check_parallel(points):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
            "import sys\n\ndef are_lines_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    if x1 == x2 and x3 == x4:\n        return x1 == x3\n    if x1 == x2 or x3 == x4:\n        return False\n    return (y2 - y1) * (x4 - x3) == (y4 - y3) * (x2 - x1)\n\nnum_lines = int(sys.stdin.readline())\nfor _ in range(num_lines):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, sys.stdin.readline().split())\n    if are_lines_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n        print(\"YES\")\n    else:\n        print(\"NO\")",
            "import sys\n\ndef parallel(points):\n    x1,y1,x2,y2,x3,y3,x4,y4 = points\n    if x1-x2 == 0 and x3-x4 == 0: return x1 == x3\n    if x1-x2 == 0 or x3-x4 == 0: return False\n    return (y2-y1)/(x2-x1) == (y4-y3)/(x4-x3)\n\nfor _ in range(int(sys.stdin.readline())):\n    points = list(map(float,sys.stdin.readline().split()))\n    print(\"YES\" if parallel(points) else \"NO\")",
            "import sys\n\ndef check_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n    if x1 == x2 and x3 == x4:\n        return x1 == x3\n    if x1 == x2 or x3 == x4:\n        return False\n    return (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3)\n\nlines = int(sys.stdin.readline())\nfor _ in range(lines):\n    x1, y1, x2, y2, x3, y3, x4, y4 = map(float, sys.stdin.readline().split())\n    if check_parallel(x1, y1, x2, y2, x3, y3, x4, y4):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
        ]
    },
    {
        "id": 43,
        "prompt_id": "p00021",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Parallelism\nThere are four points: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nN: $A(x_1, y_1)$, $B(x_2, y_2)$, $C(x_3, y_3)$, and $D(x_4, y_4)$. Write a program which determines whether the line $AB$ and the line $CD$ are parallel. If those two lines are parallel, your program should prints \"\nYES\n\" and if not prints \"\nNO\n\".\nInput\nInput consists of several datasets. In the first line, you are given the number of datasets $n$ ($n \\leq 100$). There will be $n$ lines where each line correspondgs to each dataset. Each dataset consists of eight real numbers:\n$x_1$ $y_1$ $x_2$ $y_2$ $x_3$ $y_3$ $x_4$ $y_4$\nYou can assume that $-100 \\leq x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 \\leq 100$.\nEach value is a real number with at most 5 digits after the decimal point.\nOutput\nFor each dataset, print \"\nYES\n\" or \"\nNO\n\" in a line.\nSample Input\n2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0\nOutput for the Sample Input\nYES\nNO",
        "code": "def check_parallelism():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    n = int(data[0])\n    index = 1\n    \n    results = []\n    for _ in range(n):\n        x1, y1, x2, y2 = float(data[index]), float(data[index+1]), float(data[index+2]), float(data[index+3])\n        x3, y3, x4, y4 = float(data[index+4]), float(data[index+5]), float(data[index+6]), float(data[index+7])\n        index += 8\n        \n        # Calculate slopes\n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            if slope1 == slope2:\n                results.append(\"YES\")\n            else:\n                results.append",
        "writer": "machine",
        "rewrite": [
            "def check_parallelism():\n    import sys\n    lines = sys.stdin.readlines()\n    n = int(lines[0])\n    results = []\n    for i in range(n):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, lines[i+1].split())\n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n    print('\\n'.join(results))",
            "def check_parallelism():\n    import sys\n    lines = sys.stdin.readlines()\n    n = int(lines[0])\n    results = []\n    for i in range(1, n + 1):\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, lines[i].split())\n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n    print('\\n'.join(results))",
            "def check_parallelism():\n    import sys\n    lines = sys.stdin.readlines()\n    n = int(lines[0])\n    results = []\n    for line in lines[1:]:\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, line.split())\n        if (x2 - x1) == 0 and (x4 - x3) == 0:\n            results.append(\"YES\")\n        elif (x2 - x1) == 0 or (x4 - x3) == 0:\n            results.append(\"NO\")\n        else:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n    print('\\n'.join(results))",
            "def check_parallelism():\n    import sys\n    lines = sys.stdin.readlines()[1:]\n    results = []\n    for line in lines:\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, line.split())\n        try:\n            slope1 = (y2 - y1) / (x2 - x1)\n            slope2 = (y4 - y3) / (x4 - x3)\n            results.append(\"YES\" if slope1 == slope2 else \"NO\")\n        except ZeroDivisionError:\n            results.append(\"YES\" if (x2 - x1) == 0 and (x4 - x3) == 0 else \"NO\")\n\n    print('\\n'.join(results))",
            "def check_parallelism():\n    import sys\n    lines = sys.stdin.readlines()[1:]\n    results = []\n    for line in lines:\n        x1, y1, x2, y2, x3, y3, x4, y4 = map(float, line.split())\n        try:\n            results.append(\"YES\" if (y2 - y1) / (x2 - x1) == (y4 - y3) / (x4 - x3) else \"NO\")\n        except ZeroDivisionError:\n            results.append(\"YES\" if (x2 - x1) == 0 and (x4 - x3) == 0 else \"NO\")\n    print('\\n'.join(results))",
            "def check_parallelism():\n    import sys\n    lines = sys.stdin.readlines()[1:]\n    results = []\n    for line in lines:\n        try:\n            x1, y1, x2, y2, x3, y3, x4, y4 = map(float, line.split())\n            if (x2-x1)*(y4-y3) == (x4-x3)*(y2-y1):\n                results.append(\"YES\")\n            else:\n                results.append(\"NO\")\n        except ValueError:\n            pass\n    print('\\n'.join(results))"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "import math\ndef aux(v):\n    [xa,ya,ra,xb,yb,rb] = v\n    ab = math.sqrt((xb-xa)**2 + (yb-ya)**2)\n    if ab > ra + rb:\n        rst = 0\n    elif ab + rb < ra:\n        rst = 2\n    elif ab + ra < rb:\n        rst = -2\n    else:\n        rst = 1      \n    return(rst)    \n\nif __name__ == \"__main__\": \n    n = int(input())\n    for i in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef aux(v):\n    xa, ya, ra, xb, yb, rb = v\n    ab = math.sqrt((xb - xa)**2 + (yb - ya)**2)\n    if ab > ra + rb:\n        return 0\n    if ab + rb < ra:\n        return 2\n    if ab + ra < rb:\n        return -2\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for i in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
            "import math\n\ndef aux(v):\n    xa, ya, ra, xb, yb, rb = v\n    d = math.dist((xa, ya), (xb, yb))\n    if d > ra + rb:\n        return 0\n    if d < abs(ra - rb):\n        return 2 if ra > rb else -2\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        v = list(map(float, input().split()))\n        print(aux(v))",
            "import math\n\ndef aux(v):\n  xa, ya, ra, xb, yb, rb = v\n  dist = math.hypot(xb - xa, yb - ya)\n  if dist > ra + rb: return 0\n  if dist < abs(ra - rb): return 2 if ra > rb else -2\n  return 1\n\nif __name__ == \"__main__\":\n  n = int(input())\n  for _ in range(n):\n    print(aux(list(map(float, input().split()))))",
            "import math\n\ndef aux(v):\n    xa, ya, ra, xb, yb, rb = v\n    distance = math.sqrt((xb - xa)**2 + (yb - ya)**2)\n    if distance > ra + rb:\n        return 0\n    elif distance < abs(ra - rb):\n        return 2 if ra > rb else -2\n    else:\n        return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(aux(list(map(float, input().split()))))",
            "import math\n\ndef aux(v):\n    x1, y1, r1, x2, y2, r2 = v\n    d = math.dist((x1, y1), (x2, y2))\n    if d > r1 + r2: return 0\n    if d < abs(r1 - r2): return 2 if r1 > r2 else -2\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(aux(list(map(float, input().split()))))",
            "import math\n\ndef aux(v):\n    x1, y1, r1, x2, y2, r2 = v\n    d = math.hypot(x2 - x1, y2 - y1)\n    if d > r1 + r2: return 0\n    if r1 > r2 and d < r1 - r2: return 2\n    if r2 > r1 and d < r2 - r1: return -2\n    return 1\n\nif __name__ == \"__main__\":\n    n = int(input())\n    for _ in range(n):\n        print(aux(list(map(float, input().split()))))"
        ]
    },
    {
        "id": 45,
        "prompt_id": "p00022",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Maximum Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n100um Sum Sequence\nGiven a sequence of numbers\na\n1\n,\na\n2\n,\na\n3\n, ...,\na\nn\n, find the maximum sum of a contiguous subsequence of those numbers. Note that, a subsequence of one element is also a\ncontiquous\nsubsequence.\nInput\nThe input consists of multiple datasets. Each data set consists of:\nn\na\n1\na\n2\n.\n.\na\nn\nYou can assume that 1 \u2264\nn\n\u2264 5000 and -100000 \u2264\na\ni\n\u2264 100000.\nThe input end with a line consisting of a single 0.\nOutput\nFor each dataset, print the maximum sum in a line.\nSample Input\n7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0\nOutput for the Sample Input\n19\n14\n1001",
        "code": "import math\n\ndef sign(x):\n    if x >= 0:\n        return True\n    else:\n        return False\n\nn = int(input())\nwhile n != 0:\n    a = []\n    for i in range(n):\n        a.append(int(input()))\n    b = []\n    b.append(a[0])\n    for i in range(1,len(a)):\n        if b[len(b)-1] > 0 and a[i] > 0:\n            b[len(b)-1] = b[len(b)-1] + a[i]\n        else:\n            b.append(a[i])\n\n    ans = b[0]\n    for i in range(len(b)):\n        S = 0\n        for j in range(i,len(b)):\n            S = S + b[j]\n            ans = max(S, ans)\n    print(ans)\n    n = int(input())\n\n",
        "writer": "human",
        "rewrite": [
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for i in range(n)]\n    b = []\n    current_sum = a[0]\n    b.append(current_sum)\n    for i in range(1, len(a)):\n        if sign(current_sum) and sign(a[i]):\n            current_sum += a[i]\n            b[-1] = current_sum\n        else:\n            current_sum = a[i]\n            b.append(current_sum)\n\n    max_so_far = b[0]\n    current_max = 0\n    for x in b:\n        current_max += x\n        if current_max > max_so_far:\n            max_so_far = current_max\n        elif current_max < 0:\n            current_max = 0\n\n    print(max_so_far)\n    n = int(input())",
            "import math\n\ndef sign(x):\n  return x >= 0\n\nn = int(input())\nwhile n != 0:\n  a = [int(input()) for _ in range(n)]\n  b = []\n  current_sum = a[0]\n  b.append(current_sum)\n  for x in a[1:]:\n    if sign(current_sum) and sign(x):\n      current_sum += x\n      b[-1] = current_sum\n    else:\n      current_sum = x\n      b.append(current_sum)\n  max_sum = max(sum(b[i:]) for i in range(len(b)))\n  print(max_sum)\n  n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n:\n    a = [int(input()) for _ in range(n)]\n    b = []\n    cur_sum = a[0]\n    b.append(cur_sum)\n    for i in range(1,len(a)):\n        if sign(cur_sum) and sign(a[i]):\n            cur_sum += a[i]\n            b[-1] = cur_sum\n        else:\n            cur_sum = a[i]\n            b.append(cur_sum)\n    print(max(sum(b[i:]) for i in range(len(b))))\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n != 0:\n    a = [int(input()) for _ in range(n)]\n    b = []\n    cur_sum = a[0]\n    b.append(cur_sum)\n    for x in a[1:]:\n        if sign(cur_sum) and sign(x):\n            cur_sum += x\n            b[-1] = cur_sum\n        else:\n            cur_sum = x\n            b.append(cur_sum)\n    max_sum = 0\n    cur_sum = 0\n    for x in b:\n        cur_sum += x\n        max_sum = max(max_sum, cur_sum)\n        if cur_sum < 0:\n            cur_sum = 0\n    print(max_sum)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n:\n    a = [int(input()) for _ in range(n)]\n    b = []\n    cur_sum = 0\n    for num in a:\n        if sign(cur_sum) and sign(num):\n            cur_sum += num\n        else:\n            if b:\n                b[-1] += cur_sum\n            b.append(num)\n            cur_sum = num\n    if b:\n        b[-1] += cur_sum\n    \n    max_so_far = b[0]\n    current_max = 0\n    for x in b:\n        current_max += x\n        max_so_far = max(max_so_far, current_max)\n        if current_max < 0:\n            current_max = 0\n    print(max_so_far)\n    n = int(input())",
            "import math\n\ndef sign(x):\n    return x >= 0\n\nn = int(input())\nwhile n:\n    a = [int(input()) for _ in range(n)]\n    b = []\n    cur_sum = a[0]\n    b.append(cur_sum)\n    for i in range(1, len(a)):\n        if sign(cur_sum) and sign(a[i]):\n            cur_sum += a[i]\n            b[-1] = cur_sum\n        else:\n            b.append(a[i])\n            cur_sum = a[i]\n    max_sum = 0\n    current_sum = 0\n    for num in b:\n        current_sum += num\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    print(max_sum)\n    n = int(input())"
        ]
    },
    {
        "id": 47,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n    import math\n    import sys\n    input = sys.stdin.read\n    \n    data = input().split()\n    N = int(data[0])\n    index = 1\n    results = []\n\n    for _ in range(N):\n        x_a = float(data[index])\n        y_a = float(data[index + 1])\n        r_a = float(data[index + 2])\n        x_b = float(data[index + 3])\n        y_b = float(data[index + 4])\n        r_b = float(data[index + 5])\n        index += 6\n\n        distance = math.sqrt((x_b - x_a) ** 2 + (y_b - y_a) ** 2)\n\n        if distance + r_b < r_a:\n            results.append(2)\n        elif distance + r_a < r_b:\n            results.append(-2)\n        elif distance < r_a + r_b:\n            results.append(1)\n        else:\n            results.append(0)\n    \n    for result in results:\n        print(result)\n\ncircles_intersection()",
        "writer": "machine",
        "rewrite": [
            "import math\nimport sys\n\ndef circles_intersection():\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    results = []\n    for i in range(1, len(data), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, data[i:i+6])\n        dist = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n        if dist + r2 < r1:\n            results.append(2)\n        elif dist + r1 < r2:\n            results.append(-2)\n        elif dist < r1 + r2:\n            results.append(1)\n        else:\n            results.append(0)\n    print('\\n'.join(map(str, results)))\n\ncircles_intersection()",
            "import math\nimport sys\n\ndef circles_intersection():\n    lines = sys.stdin.read().splitlines()\n    n = int(lines[0])\n    results = []\n    for i in range(1, n + 1):\n        x1, y1, r1, x2, y2, r2 = map(float, lines[i].split())\n        d = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n        if d + r2 < r1:\n            results.append(2)\n        elif d + r1 < r2:\n            results.append(-2)\n        elif d < r1 + r2:\n            results.append(1)\n        else:\n            results.append(0)\n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "import math\nimport sys\n\ndef circles_intersection():\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    results = []\n    for i in range(1, len(data), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, data[i:i+6])\n        d = math.dist((x1, y1), (x2, y2))\n        if d + r2 < r1: results.append(2)\n        elif d + r1 < r2: results.append(-2)\n        elif d < r1 + r2: results.append(1)\n        else: results.append(0)\n    print('\\n'.join(map(str, results)))\n\ncircles_intersection()",
            "import math\nimport sys\n\ndef circles_intersection():\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    print('\\n'.join(map(str, [\n        2 if math.dist((float(data[i]),float(data[i+1])),(float(data[i+3]),float(data[i+4]))) + float(data[i+5]) < float(data[i+2]) else\n        -2 if math.dist((float(data[i]),float(data[i+1])),(float(data[i+3]),float(data[i+4]))) + float(data[i+2]) < float(data[i+5]) else\n        1 if math.dist((float(data[i]),float(data[i+1])),(float(data[i+3]),float(data[i+4]))) < float(data[i+2]) + float(data[i+5]) else 0\n        for i in range(1, len(data), 6)\n    ])))\n\ncircles_intersection()",
            "import math\nimport sys\n\ndef circles_intersection():\n    lines = sys.stdin.read().splitlines()[1:]\n    results = []\n    for line in lines:\n        x1, y1, r1, x2, y2, r2 = map(float, line.split())\n        d = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n        if d + r2 < r1: results.append(2)\n        elif d + r1 < r2: results.append(-2)\n        elif d < r1 + r2: results.append(1)\n        else: results.append(0)\n    print(*results, sep='\\n')\n\ncircles_intersection()",
            "import math\nimport sys\n\ndef circles_intersection():\n    data = sys.stdin.read().split()\n    n = int(data[0])\n    for i in range(n):\n        x1, y1, r1, x2, y2, r2 = map(float, data[1+i*6:7+i*6])\n        d = math.dist((x1, y1), (x2, y2))\n        print(2 if d + r2 < r1 else -2 if d + r1 < r2 else 1 if d < r1 + r2 else 0)\n\ncircles_intersection()"
        ]
    },
    {
        "id": 48,
        "prompt_id": "p00023",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Circles Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\nes Intersection\nYou are given circle $A$ with radius $r_a$ and with central coordinate $(x_a, y_a)$ and circle $B$ with radius $r_b$ and with central coordinate $(x_b, y_b)$.\nWrite a program which prints:\n\"2\" if $B$ is in $A$,\n\"-2\" if $A$ is in $B$,\n\"1\" if circumference of $A$ and $B$ intersect, and\n\"0\" if $A$ and $B$ do not overlap.\nYou may assume that $A$ and $B$ are not identical.\nInput\nThe input consists of multiple datasets. The first line consists of an integer $N$ ($N \\leq 50$), the number of datasets. There will be $N$ lines where each line represents each dataset. Each data set consists of real numbers:\n$x_a$ $y_a$ $r_a$ $x_b$ $y_b$ $r_b$\nOutput\nFor each dataset, print 2, -2, 1, or 0 in a line.\nSample Input\n2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0\nOutput for the Sample Input\n2\n0",
        "code": "def circles_intersection():\n    import sys\n    input = sys.stdin.read\n    data = input().split()\n    \n    N = int(data[0])\n    index = 1\n    results = []\n    \n    for _ in range(N):\n        x_a = float(data[index])\n        y_a = float(data[index + 1])\n        r_a = float(data[index + 2])\n        x_b = float(data[index + 3])\n        y_b = float(data[index + 4])\n        r_b = float(data[index + 5])\n        index += 6\n        \n        distance_sq = (x_a - x_b) ** 2 + (y_a - y_b) ** 2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        \n        if distance_sq < diff_r ** 2:\n            if r_a > r_b:\n                results.append(\"2\")\n            else:\n                results.append(\"-2\")\n        elif distance_sq > sum_r ** 2:\n            results.append(\"0\")\n        else:\n            results.append(\"1\")\n    \n    for result in results:\n        print(result)\n\n# To use this function, redirect the input to sys.stdin in your environment",
        "writer": "machine",
        "rewrite": [
            "def circles_intersection():\n    data = input().split()\n    N = int(data[0])\n    results = []\n    index = 1\n    for _ in range(N):\n        x_a, y_a, r_a, x_b, y_b, r_b = map(float, data[index:index+6])\n        index += 6\n        dist_sq = (x_a - x_b)**2 + (y_a - y_b)**2\n        sum_r = r_a + r_b\n        diff_r = abs(r_a - r_b)\n        if dist_sq < diff_r**2:\n            results.append(2 if r_a > r_b else -2)\n        elif dist_sq > sum_r**2:\n            results.append(0)\n        else:\n            results.append(1)\n    print(*results, sep='\\n')",
            "def circles_intersection():\n    data = input().split()\n    n = int(data[0])\n    results = []\n    for i in range(1, len(data), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, data[i:i+6])\n        d2 = (x1 - x2)**2 + (y1 - y2)**2\n        r_sum = r1 + r2\n        r_diff = abs(r1 - r2)\n        if d2 < r_diff**2:\n            results.append(2 if r1 > r2 else -2)\n        elif d2 > r_sum**2:\n            results.append(0)\n        else:\n            results.append(1)\n    print('\\n'.join(map(str, results)))",
            "def circles_intersection():\n    line = input().split()\n    n = int(line[0])\n    ans = []\n    for i in range(1, len(line), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, line[i:i+6])\n        d = ((x1-x2)**2 + (y1-y2)**2)**0.5\n        if d < abs(r1-r2):\n            ans.append(2 if r1>r2 else -2)\n        elif d > r1+r2:\n            ans.append(0)\n        else:\n            ans.append(1)\n    print('\\n'.join(map(str,ans)))",
            "def circles_intersection():\n    data = input().split()\n    n = int(data[0])\n    results = []\n    for i in range(1, len(data), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, data[i:i+6])\n        d = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n        if d < abs(r1 - r2):\n            results.append(2 if r1 > r2 else -2)\n        elif d > r1 + r2:\n            results.append(0)\n        else:\n            results.append(1)\n    print(*results, sep='\\n')",
            "def circles_intersection():\n    line = input().split()\n    n = int(line[0])\n    for i in range(1, len(line), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, line[i:i+6])\n        d2 = (x1 - x2)**2 + (y1 - y2)**2\n        if d2 < (abs(r1 - r2))**2:\n            print(2 if r1 > r2 else -2)\n        elif d2 > (r1 + r2)**2:\n            print(0)\n        else:\n            print(1)",
            "def circles_intersection():\n    data = input().split()\n    n = int(data[0])\n    for i in range(1, len(data), 6):\n        x1, y1, r1, x2, y2, r2 = map(float, data[i:i+6])\n        dist_sq = (x1 - x2)**2 + (y1 - y2)**2\n        if dist_sq < (abs(r1 - r2))**2:\n            print(2 if r1 > r2 else -2)\n        elif dist_sq > (r1 + r2)**2:\n            print(0)\n        else:\n            print(1)"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def process(A, B):\n    hit, blow = 0, 0\n    for a, b in zip(A, B):\n        if a == b:\n            hit += 1\n        elif a in B:\n            blow += 1\n    return (hit, blow)\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n    except: break\n    hit, blow = process(A, B)\n    print(hit, blow)\n",
        "writer": "human",
        "rewrite": [
            "def process(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a, b in zip(A, B) if a != b and a in B)\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        if not all(x.isdigit() for x in A) or not all(x.isdigit() for x in B):\n            raise ValueError\n        A = [int(x) for x in A]\n        B = [int(x) for x in B]\n        hit, blow = process(A,B)\n        print(hit,blow)\n\n    except (ValueError,EOFError):\n        break",
            "def process(A, B):\n  hit = sum(1 for i, a in enumerate(A) if a == B[i])\n  blow = sum(1 for i, a in enumerate(A) if a in B and a != B[i])\n  return hit, blow\n\nwhile True:\n  try:\n    A = input().split()\n    B = input().split()\n    print(process(A, B)[0],process(A, B)[1])\n  except EOFError:\n    break",
            "def process(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a != b and a in B for a, b in zip(A, B))\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        print(*process(A, B))\n    except EOFError:\n        break",
            "def process(A, B):\n    hit = sum(a == b for a, b in zip(A, B))\n    blow = sum(a != b and B.count(a) > 0 for a, b in zip(A, B))\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        print(*process(A, B))\n    except EOFError:\n        break",
            "def process(A, B):\n    hit = sum(1 for x, y in zip(A, B) if x == y)\n    blow = sum(1 for x, y in zip(A, B) if x != y and x in B)\n    return hit, blow\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        print(*process(A,B))\n    except EOFError:\n        break",
            "def process(A, B):\n    return sum(a == b for a, b in zip(A, B)), sum(a != b and a in B for a, b in zip(A, B))\n\nwhile True:\n    try:\n        A = input().split()\n        B = input().split()\n        print(*process(A, B))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "import datetime\nimport calendar\n\ndef trans(month, day, year=2004):\n    past = datetime.date(year, month, day)\n    result = calendar.day_name[past.weekday()]\n    return result\n    \nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0: break\n    print(trans(month, day))\n    \n",
        "writer": "human",
        "rewrite": [
            "import calendar\n\ndef trans(month, day, year=2004):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0:\n        break\n    print(trans(month, day))",
            "import calendar\n\ndef trans(month, day, year=2004):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n    month, day = map(int, input().split())\n    if month == day == 0:\n        break\n    print(trans(month, day))",
            "import calendar\n\ndef trans(m, d, y=2004):\n  return calendar.day_name[calendar.weekday(y, m, d)]\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == d == 0:\n    break\n  print(trans(m, d))",
            "import calendar\n\ndef get_day(month, day, year=2004):\n  return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n  month, day = map(int, input().split())\n  if month == 0 and day == 0:\n    break\n  print(get_day(month, day))",
            "import calendar\n\ndef day_of_week(month, day, year=2004):\n  return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n  m, d = map(int, input().split())\n  if m == 0 and d == 0:\n    break\n  print(day_of_week(m, d))",
            "import calendar\n\ndef get_weekday(month, day, year=2004):\n    return calendar.day_name[calendar.weekday(year, month, day)]\n\nwhile True:\n    m, d = map(int, input().split())\n    if m == 0 and d == 0:\n        break\n    print(get_weekday(m, d))"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        \n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = sum(1 for j in range(4) if b[j] in a) - hits\n        \n        print(hits, blows)",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    import sys\n    lines = sys.stdin.read().strip().splitlines()\n    for i in range(0,len(lines),2):\n        a = list(map(int,lines[i].split()))\n        b = list(map(int,lines[i+1].split()))\n        hits = sum(1 for x,y in zip(a,b) if x==y)\n        blows = sum(1 for x in b if x in a) - hits\n        print(hits,blows)",
            "def hit_and_blow():\n    import sys\n    lines = sys.stdin.readlines()\n    for i in range(0, len(lines), 2):\n        a = list(map(int, lines[i].strip().split()))\n        b = list(map(int, lines[i+1].strip().split()))\n        hits = sum(1 for x, y in zip(a, b) if x == y)\n        blows = sum(1 for x in b if x in a) - hits\n        print(hits, blows)",
            "def hit_and_blow():\n    import sys\n    data = sys.stdin.read().strip().split('\\n')\n    for i in range(0, len(data), 2):\n        a = list(map(int, data[i].split()))\n        b = list(map(int, data[i+1].split()))\n        hits = sum(a[i] == b[i] for i in range(4))\n        blows = sum(x in a for x in b) - hits\n        print(hits, blows)",
            "def hit_and_blow():\n    import sys\n    lines = sys.stdin.read().splitlines()\n    for i in range(0, len(lines), 2):\n        a = [int(x) for x in lines[i].split()]\n        b = [int(x) for x in lines[i+1].split()]\n        hits = sum(1 for j in range(4) if a[j] == b[j])\n        blows = sum(1 for x in b if x in a) - hits\n        print(hits, blows)",
            "def hit_and_blow():\n    import sys\n    data = sys.stdin.read().strip().split('\\n')\n    for i in range(0, len(data), 2):\n        a = [int(x) for x in data[i].split()]\n        b = [int(x) for x in data[i+1].split()]\n        hits = sum(1 for j in range(len(a)) if a[j] == b[j])\n        blows = sum(1 for j in range(len(b)) if b[j] in a) - hits\n        print(hits, blows)",
            "def hit_and_blow():\n    import sys\n    lines = sys.stdin.read().splitlines()\n    for i in range(0, len(lines), 2):\n        a = list(map(int, lines[i].split()))\n        b = list(map(int, lines[i+1].split()))\n        hits = sum(x == y for x, y in zip(a, b))\n        blows = sum(a.count(x) for x in b) - hits\n        print(hits, blows)"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "# -*- coding:utf-8 -*-\n\ndef main():\n    LIST=[\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"]\n\n    while True:\n        try:\n            count=3\n            M,D=map(int,input().split())\n            if M==0:\n                break\n\n            if M in [1,4,7]:\n                pass\n            elif M in [10]:\n                count+=1\n            elif M in [5]:\n                count+=2\n            elif M in [2,8]:\n                count+=3\n            elif M in [3,11]:\n                count+=4\n            elif M in [6]:\n                count+=5\n            elif M in [9,12]:\n                count+=6\n\n            count+=D%7\n\n            print(LIST[count%7])\n\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
        "writer": "human",
        "rewrite": [
            "def main():\n    LIST = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    while True:\n        try:\n            M, D = map(int, input().split())\n            if M == 0:\n                break\n            day_offset = {1: 0, 4: 0, 7: 0, 10: 1, 5: 2, 2: 3, 8: 3, 3: 4, 11: 4, 6: 5, 9: 6, 12: 6}\n            count = 3 + day_offset[M] + (D % 7)\n            print(LIST[count % 7])\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "import datetime\n\ndef main():\n    while True:\n        try:\n            m, d = map(int, input().split())\n            if m == 0:\n                break\n            date = datetime.date(2000, m, d)  #Using 2000 as a reference year since it's not leap\n            print(date.strftime(\"%A\"))\n        except:\n            break\n\nif __name__ == '__main__':\n    main()",
            "import calendar\n\ndef get_day(month, day):\n    c = calendar.Calendar(firstweekday=6)  #Sunday as first weekday\n    monthcal = c.monthdayscalendar(2000, month) #Using 2000 as a reference year.  Adjust as needed for leap year accuracy.\n    for week in monthcal:\n        if day in week:\n            day_index = week.index(day)\n            return calendar.day_name[day_index]\n\nwhile True:\n    try:\n        m, d = map(int, input().split())\n        if m == 0:\n            break\n        print(get_day(m,d))\n    except:\n        break",
            "import datetime\n\ndays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\nwhile True:\n    try:\n        month, day = map(int, input().split())\n        if month == 0:\n            break\n        date = datetime.date(2000, month, day)\n        print(days[date.weekday()])\n    except ValueError:\n        break",
            "import calendar\n\ndays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\nwhile True:\n    try:\n        month, day = map(int, input().split())\n        if month == 0:\n            break\n        day_of_week = calendar.weekday(2000, month, day) # Using 2000 as a reference year.  Adjust as needed for leap year accuracy.\n        print(days[day_of_week])\n    except ValueError:\n        break",
            "import datetime\n\ndays = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n\nwhile True:\n    try:\n        month, day = map(int, input().split())\n        if month == 0:\n            break\n        day_num = datetime.date(2024, month, day).weekday() #Using 2024 to handle leap years correctly\n        print(days[day_num])\n    except ValueError:\n        break"
        ]
    },
    {
        "id": 51,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "def hit_and_blow():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split()\n    \n    results = []\n    for i in range(0, len(data), 8):\n        A = data[i:i+4]\n        B = data[i+4:i+8]\n        \n        hits = sum(1 for j in range(4) if A[j] == B[j])\n        blows = sum(1 for j in range(4) if A[j] in B and A[j] != B[j])\n        \n        results.append(f\"{hits} {blows}\")\n    \n    for result in results:\n        print(result)",
        "writer": "machine",
        "rewrite": [
            "def hit_and_blow():\n    import sys\n    lines = sys.stdin.readlines()\n    for line in lines:\n        data = line.strip().split()\n        if len(data) != 8:\n            continue\n        A = data[:4]\n        B = data[4:]\n        hits = sum(1 for a, b in zip(A, B) if a == b)\n        blows = sum(1 for a in A if a in B and a not in [b for a,b in zip(A,B) if a==b])\n        print(f\"{hits} {blows}\")",
            "def hit_and_blow():\n    import sys\n    lines = sys.stdin.readlines()\n    for line in lines:\n        try:\n            A, B = line.strip().split(), line.strip().split()\n            if len(A) !=4 or len(B) !=4:\n                continue\n            hits = sum(1 for a, b in zip(A, B) if a == b)\n            blows = sum(1 for a in A if a in B and a not in [b for a,b in zip(A,B) if a==b])\n            print(f\"{hits} {blows}\")\n        except ValueError:\n            pass",
            "import sys\n\ndef hit_and_blow():\n    data = sys.stdin.read().strip().split()\n    for i in range(0, len(data), 8):\n        a = data[i:i+4]\n        b = data[i+4:i+8]\n        hits = sum(1 for x, y in zip(a, b) if x == y)\n        blows = sum(1 for x in a if x in b and x not in [y for x,y in zip(a,b) if x==y])\n        print(hits, blows)",
            "import sys\n\ndef hit_and_blow():\n    input_string = sys.stdin.read().strip()\n    pairs = input_string.split()\n    for i in range(0, len(pairs), 8):\n        a = pairs[i:i+4]\n        b = pairs[i+4:i+8]\n        hits = sum(1 for x, y in zip(a, b) if x == y)\n        blows = sum(1 for x in set(a) if x in b and x != b[a.index(x)]) if len(a) == len(b) else 0\n        print(hits, blows)",
            "import sys\n\ndef hit_and_blow():\n    lines = sys.stdin.readlines()\n    for line in lines:\n        try:\n            a, b = line.split()\n            a, b = list(a), list(b)\n            if len(a) != 4 or len(b) != 4:\n                continue\n            hits = sum(1 for x, y in zip(a, b) if x == y)\n            blows = sum(1 for x in a if x in b and x not in [y for x, y in zip(a, b) if x == y])\n            print(hits, blows)\n        except ValueError:\n            pass",
            "import sys\n\ndef hit_and_blow():\n    data = sys.stdin.read().strip().split()\n    for i in range(0, len(data), 8):\n        try:\n            a, b = data[i:i+4], data[i+4:i+8]\n            hits = sum(a[i] == b[i] for i in range(4))\n            blows = sum(a[i] in b and a[i] != b[i] for i in range(4))\n            print(hits, blows)\n        except IndexError:\n            pass"
        ]
    },
    {
        "id": 52,
        "prompt_id": "p00025",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n Hit and Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 nd Blow\nLet's play Hit and Blow game.\nA\nimagines four numbers and\nB\nguesses the numbers. After\nB\npicks out four numbers,\nA\nanswers:\nThe number of numbers which have the same place with numbers\nA\nimagined (Hit)\nThe number of numbers included (but different place) in the numbers\nA\nimagined (Blow)\nFor example, if\nA\nimagined numbers:\n9 1 8 2\nand\nB\nchose:\n4 1 5 9\nA\nshould say 1 Hit and 1 Blow.\nWrite a program which reads four numbers\nA\nimagined and four numbers\nB\nchose and prints the number of Hit and Blow respectively. You may assume that the four numbers are all different and within from 0 to 9.\nInput\nThe input consists of multiple datasets. Each dataset set consists of:\na\n1\na\n2\na\n3\na\n4\nb\n1\nb\n2\nb\n3\nb\n4\n, where\na\ni\n(0 \u2264\na\ni\n\u2264 9) is\ni\n-th number\nA\nimagined and\nb\ni\n(0 \u2264\nb\ni\n\u2264 9) is\ni\n-th number\nB\nchose.\nThe input ends with EOF. The number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the number of Hit and Blow in a line. These two numbers should be separated by a space.\nSample Input\n9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2\nOutput for the Sample Input\n1 1\n3 0",
        "code": "# Aizu Problem 0025: Hit and Blow\n#\nimport sys, math, os\n\n# read input:\nPYDEV = os.environ.get('PYDEV')\nif PYDEV==\"True\":\n    sys.stdin = open(\"sample-input.txt\", \"rt\")\n\n\ndef hit_and_blow(A, B):\n    hit, blow = 0, 0\n    for k in range(4):\n        if A[k] == B[k]:\n            hit += 1\n        elif A[k] in B:\n            blow += 1\n    return hit, blow\n\n\nwhile True:\n    try:\n        A = [int(_) for _ in input().split()]\n    except EOFError:\n        break\n    B = [int(_) for _ in input().split()]\n    hit, blow = hit_and_blow(A, B)\n    print(hit, blow)",
        "writer": "human",
        "rewrite": [
            "import sys\n\ndef hit_and_blow(A, B):\n    hit = sum(1 for a, b in zip(A, B) if a == b)\n    blow = sum(1 for a in A if a in B and a != B[A.index(a)])\n    return hit, blow\n\nwhile True:\n    try:\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        hit, blow = hit_and_blow(A,B)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n    hit = sum(1 for s, g in zip(secret, guess) if s == g)\n    blow = sum(1 for digit in guess if digit in secret and guess.count(digit) > secret.count(digit))\n    return hit, blow\n\nwhile True:\n    try:\n        secret = list(map(int, input().split()))\n        guess = list(map(int, input().split()))\n        hit, blow = hit_and_blow(secret, guess)\n        print(hit, blow)\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n  hit = sum(1 for i in range(4) if secret[i] == guess[i])\n  blow = sum(1 for i in range(4) if secret[i] in guess and secret[i] != guess[i])\n  return hit, blow\n\nwhile True:\n  try:\n    secret = list(map(int, sys.stdin.readline().split()))\n    guess = list(map(int, sys.stdin.readline().split()))\n    hit, blow = hit_and_blow(secret, guess)\n    print(hit, blow)\n  except EOFError:\n    break",
            "import sys\n\ndef hit_and_blow(a, b):\n    hit = sum(1 for i in range(4) if a[i] == b[i])\n    blow = sum(1 for i in range(4) if a[i] in b and a[i] != b[i])\n    return hit, blow\n\nwhile True:\n    try:\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        print(*hit_and_blow(a, b))\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(a, b):\n    hits = sum(1 for x, y in zip(a, b) if x == y)\n    blows = sum(1 for x in a if x in b and x != b[a.index(x)])\n    return hits, blows\n\nwhile True:\n    try:\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        print(*hit_and_blow(a, b))\n    except EOFError:\n        break",
            "import sys\n\ndef hit_and_blow(secret, guess):\n    hit = sum(1 for i in range(4) if secret[i] == guess[i])\n    blow = sum(1 for i in range(4) if secret[i] in guess and secret[i] != guess[i])\n    return hit, blow\n\nwhile True:\n    try:\n        secret = list(map(int, sys.stdin.readline().split()))\n        guess = list(map(int, sys.stdin.readline().split()))\n        print(*hit_and_blow(secret, guess))\n    except EOFError:\n        break"
        ]
    },
    {
        "id": 55,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def day_of_date():\n    import sys\n    input = sys.stdin.read\n    from datetime import datetime\n\n    days_of_week = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    data = input().strip().split('\\n')\n    \n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        day_index = (date - datetime(2004, 1, 1)).days % 7\n        print(days_of_week[day_index])\n\n# Example usage:\n# day_of_date()\n# Input should be provided via stdin redirection or similar method in actual use.",
        "writer": "machine",
        "rewrite": [
            "def day_of_date():\n    import sys\n    from datetime import datetime\n\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    for line in sys.stdin:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        date = datetime(2004, m, d)\n        print(days[(date - datetime(2004, 1, 1)).days % 7])",
            "import sys\nfrom datetime import datetime\n\ndef day_of_date():\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    for line in sys.stdin:\n        try:\n            m, d = map(int, line.split())\n            if m == 0 and d == 0:\n                break\n            date = datetime(2004, m, d)\n            print(days[(date - datetime(2004, 1, 1)).days % 7])\n        except ValueError:\n            pass",
            "import sys\nfrom datetime import datetime\n\ndef get_day(year, month, day):\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    date = datetime(year, month, day)\n    return days[(date - datetime(year, 1, 1)).days % 7]\n\ndef day_of_date():\n    for line in sys.stdin:\n        try:\n            m, d = map(int, line.split())\n            if m == 0 and d == 0:\n                break\n            print(get_day(2004, m, d))\n        except ValueError:\n            pass",
            "import sys\nfrom datetime import datetime\n\nDAYS = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\ndef day_of_date():\n    for line in sys.stdin:\n        try:\n            m, d = map(int, line.split())\n            if m == 0 and d == 0:\n                break\n            day = datetime(2004, m, d).weekday()\n            print(DAYS[day])\n        except ValueError:\n            pass",
            "import sys\nfrom datetime import datetime\n\ndef day_of_date():\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    for line in sys.stdin:\n        try:\n            month, day = map(int, line.split())\n            if month == 0 and day == 0:\n                break\n            date = datetime(2004, month, day)\n            print(days[date.weekday()])\n        except ValueError:\n            pass",
            "import sys\nfrom datetime import datetime\n\ndef day_of_date():\n    days = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    for line in sys.stdin:\n        try:\n            m, d = map(int, line.split())\n            if 0 == m == d: break\n            print(days[datetime(2004, m, d).weekday()])\n        except ValueError: pass"
        ]
    },
    {
        "id": 56,
        "prompt_id": "p00027",
        "prompt": "Provide python code as a function for the below problem statement and produce no other text. Do not include the function inside a docstring.\n What day is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSundaday is today?\nYour task is to write a program which reads a date (from 2004/1/1 to 2004/12/31) and prints the day of the date. Jan. 1, 2004, is Thursday. Note that 2004 is a leap year and we have Feb. 29.\nInput\nThe input is a sequence of datasets. The end of the input is indicated by a line containing one zero. Each dataset consists of two integers\nm\nand\nd\nseparated by a single space in a line. These integers respectively represent the month and the day.\nThe number of datasets is less than or equal to 50.\nOutput\nFor each dataset, print the day (please see the following words) in a line.\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\nSunday\nSample Input\n1 1\n2 29\n0 0\nOutput for the Sample Input\nThursday\nSunday",
        "code": "def day_of_the_date():\n    import sys\n    input = sys.stdin.read\n    data = input().strip().split('\\n')\n    \n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    def calculate_day(m, d):\n        days = sum(days_in_month[:m-1]) + d - 1\n        return day_names[days % 7]\n    \n    results = []\n    for line in data:\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        results.append(calculate_day(m, d))\n    \n    for result in results:\n        print(result)\n\n# Example usage:\n# day_of_the_date()",
        "writer": "machine",
        "rewrite": [
            "def day_of_the_date():\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    while True:\n        try:\n            m, d = map(int, input().split())\n            if m == 0 and d == 0:\n                break\n            days = sum(days_in_month[:m-1]) + d -1\n            print(day_names[days % 7])\n        except EOFError:\n            break",
            "def day_of_the_date():\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n    \n    while True:\n        try:\n            line = input()\n            m, d = map(int, line.split())\n            if m == 0 and d == 0:\n                break\n            days = sum(days_in_month[:m-1]) + d - 1\n            print(day_names[days % 7])\n        except EOFError:\n            break",
            "def day_of_the_date():\n    days_in_month = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    while True:\n        try:\n            m, d = map(int, input().split())\n            if m == 0 and d == 0:\n                break\n            total_days = sum(days_in_month[:m]) + d\n            print(day_names[(total_days -1) % 7])\n        except EOFError:\n            break",
            "import datetime\n\ndef day_of_the_date():\n    while True:\n        try:\n            m, d = map(int, input().split())\n            if m == 0 and d == 0:\n                break\n            date = datetime.date(2000, m, d)\n            print(date.strftime(\"%A\"))\n        except EOFError:\n            break\n        except ValueError:\n            pass",
            "def day_of_the_date():\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    for line in sys.stdin:\n        line = line.strip()\n        if not line:\n            break\n        m, d = map(int, line.split())\n        if m == 0 and d == 0:\n            break\n        days = sum(days_in_month[:m - 1]) + d - 1\n        print(day_names[days % 7])\n\nimport sys",
            "import sys\n\ndef day_of_the_date():\n    days_in_month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    day_names = [\"Thursday\", \"Friday\", \"Saturday\", \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\"]\n\n    for line in sys.stdin:\n        try:\n            m, d = map(int, line.strip().split())\n            if m == 0 and d == 0:\n                break\n            day_index = (sum(days_in_month[:m - 1]) + d - 1) % 7\n            print(day_names[day_index])\n        except ValueError:\n            pass"
        ]
    }
]