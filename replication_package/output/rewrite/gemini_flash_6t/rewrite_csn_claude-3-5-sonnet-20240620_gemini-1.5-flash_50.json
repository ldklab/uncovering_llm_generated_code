[
    {
        "id": 5,
        "prompt": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"",
        "code": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"\n    import math\n    \n    char_count = len(chars)\n    if char_count == 0 or length == 0:\n        return 0.0\n    \n    entropy = length * math.log2(char_count)\n    return entropy",
        "writer": "machine",
        "rewrite": [
            "def password_entropy(length: int, chars: str) -> float:\n    import math\n    return length * math.log2(len(chars)) if length and chars else 0.0",
            "def password_entropy(length: int, chars: str) -> float:\n    import math\n    return 0.0 if not length or not chars else length * math.log2(len(chars))",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    return length * math.log2(len(chars)) if length and len(chars) > 0 else 0.0",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    return 0 if not length or not chars else length * math.log2(len(chars))",
            "import math\ndef password_entropy(length: int, chars: str) -> float:\n  return length * math.log2(len(chars)) if length >0 and len(chars) > 0 else 0.0",
            "import math\ndef password_entropy(length: int, chars: str) -> float:\n    try:\n        return length * math.log2(len(chars))\n    except (ValueError, TypeError):\n        return 0.0"
        ]
    },
    {
        "id": 3,
        "prompt": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"",
        "code": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"\n    new_set = self.copy()\n    for resolved_pkg, built_pkg in built_packages.items():\n        if resolved_pkg in new_set:\n            new_set.remove(resolved_pkg)\n            new_set.add(built_pkg)\n    return new_set",
        "writer": "machine",
        "rewrite": [
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    return new_set - set(built_packages) | set(built_packages.values())",
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    new_set.difference_update(built_packages)\n    new_set.update(built_packages.values())\n    return new_set",
            "def replace_built(self, built_packages):\n    return (self.copy() - set(built_packages)) | set(built_packages.values())",
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    for k, v in built_packages.items():\n        if k in new_set:\n            new_set.discard(k)\n            new_set.add(v)\n    return new_set",
            "def replace_built(self, built_packages):\n    new_set = self.copy()\n    for k, v in built_packages.items():\n        try:\n            new_set.remove(k)\n            new_set.add(v)\n        except KeyError:\n            pass\n    return new_set",
            "def replace_built(self, built_packages):\n    return {v if k in self else k for k, v in built_packages.items()} | (self - set(built_packages))"
        ]
    },
    {
        "id": 6,
        "prompt": "def actualize_source_type (self, sources, prop_set):\n        \"\"\" Helper for 'actualize_sources'.\n            For each passed source, actualizes it with the appropriate scanner.\n            Returns the actualized virtual targets.\n        \"\"\"",
        "code": "def actualize_source_type(self, sources, prop_set):\n    actualized_targets = []\n    for source in sources:\n        scanner = self.get_scanner(source)\n        if scanner:\n            actualized = scanner.actualize(source, prop_set)\n            actualized_targets.extend(actualized)\n        else:\n            actualized_targets.append(source)\n    return actualized_targets",
        "writer": "machine",
        "rewrite": [
            "def actualize_source_type(self, sources, prop_set):\n    return [scanner.actualize(source, prop_set) if (scanner := self.get_scanner(source)) else source for source in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    return [s.actualize(source, prop_set) if (s := self.get_scanner(source)) else source for source in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    return [self.get_scanner(source).actualize(source, prop_set) if self.get_scanner(source) else source for source in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    return [x.actualize(source, prop_set) if (x:=self.get_scanner(source)) else source for source in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    return sum(([s.actualize(source, prop_set)] if (s := self.get_scanner(source)) else [source] for source in sources), [])",
            "def actualize_source_type(self, sources, prop_set):\n    return [s.actualize(src, prop_set) if (s := self.get_scanner(src)) else src for src in sources]"
        ]
    },
    {
        "id": 3,
        "prompt": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"",
        "code": "def replace_built(self, built_packages):\n    \"\"\"Return a copy of this resolvable set but with built packages.\n\n    :param dict built_packages: A mapping from a resolved package to its locally built package.\n    :returns: A new resolvable set with built package replacements made.\n    \"\"\"\n    def map_packages(resolved_packages):\n      packages = OrderedSet(built_packages.get(p, p) for p in resolved_packages.packages)\n      return _ResolvedPackages(resolved_packages.resolvable, packages,\n                               resolved_packages.parent, resolved_packages.constraint_only)\n\n    return _ResolvableSet([map_packages(rp) for rp in self.__tuples])",
        "writer": "human",
        "rewrite": [
            "def replace_built(self, built_packages):\n    return _ResolvableSet([_ResolvedPackages(rp.resolvable, OrderedSet(built_packages.get(p, p) for p in rp.packages), rp.parent, rp.constraint_only) for rp in self.__tuples])",
            "def replace_built(self, built_packages):\n    return _ResolvableSet(_ResolvedPackages(rp.resolvable, OrderedSet(built_packages.get(p,p) for p in rp.packages), rp.parent, rp.constraint_only) for rp in self.__tuples)",
            "def replace_built(self, built_packages):\n    return _ResolvableSet(map(lambda rp: _ResolvedPackages(rp.resolvable, OrderedSet(built_packages.get(p, p) for p in rp.packages), rp.parent, rp.constraint_only), self.__tuples))",
            "def replace_built(self, built_packages):\n    return _ResolvableSet([_ResolvedPackages(rp.resolvable, OrderedSet(built_packages.get(pkg, pkg) for pkg in rp.packages), rp.parent, rp.constraint_only) for rp in self.__tuples])",
            "def replace_built(self, built_packages):\n    return _ResolvableSet(_ResolvedPackages(rp.resolvable, OrderedSet(built_packages.get(p, p) for p in rp.packages), rp.parent, rp.constraint_only) for rp in self.__tuples)",
            "def replace_built(self, built_packages):\n    return _ResolvableSet([_ResolvedPackages(rp.resolvable, OrderedSet(built_packages.get(p, p) for p in rp.packages), rp.parent, rp.constraint_only) for rp in self.__tuples])"
        ]
    },
    {
        "id": 2,
        "prompt": "def selectOptimalChunk(self, peer):\n        \"\"\"\n        select an optimal chunk to send to a peer.\n\n        @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n        otherwise None, None\n        \"\"\"",
        "code": "def selectOptimalChunk(self, peer):\n    \"\"\"\n    select an optimal chunk to send to a peer.\n\n    @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n    otherwise None, None\n    \"\"\"\n    available_chunks = set(self.chunks.keys()) - set(peer.has_chunks)\n    if not available_chunks:\n        return None, None\n    \n    optimal_chunk = min(available_chunks)\n    chunk_data = self.chunks[optimal_chunk]\n    \n    return optimal_chunk, chunk_data",
        "writer": "machine",
        "rewrite": [
            "def selectOptimalChunk(self, peer):\n    available_chunks = set(self.chunks.keys()) - set(peer.has_chunks)\n    if not available_chunks:\n        return None, None\n    optimal_chunk = min(available_chunks)\n    return optimal_chunk, self.chunks[optimal_chunk]",
            "def selectOptimalChunk(self, peer):\n    available_chunks = self.chunks.keys() - peer.has_chunks\n    if not available_chunks:\n        return None, None\n    return min(available_chunks), self.chunks[min(available_chunks)]",
            "def selectOptimalChunk(self, peer):\n    try:\n        optimal_chunk = min(set(self.chunks) - set(peer.has_chunks))\n        return optimal_chunk, self.chunks[optimal_chunk]\n    except ValueError:\n        return None, None",
            "def selectOptimalChunk(self, peer):\n    for chunk_num in sorted(self.chunks):\n        if chunk_num not in peer.has_chunks:\n            return chunk_num, self.chunks[chunk_num]\n    return None, None",
            "def selectOptimalChunk(self, peer):\n    available = set(self.chunks) - peer.has_chunks\n    return available.pop() if available else (None, None)",
            "def selectOptimalChunk(self, peer):\n    try: return min(k for k in self.chunks if k not in peer.has_chunks), self.chunks[min(k for k in self.chunks if k not in peer.has_chunks)]\n    except ValueError: return None, None"
        ]
    },
    {
        "id": 7,
        "prompt": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"",
        "code": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    return {\n        'id': row[0],\n        'name': row[1],\n        'description': row[2],\n        'created_at': row[3],\n        'updated_at': row[4],\n        'status': row[5],\n        'creator_id': row[6],\n        'hunt_id': row[7],\n        'flow_args': row[8]\n    }",
        "writer": "machine",
        "rewrite": [
            "def _HuntObjectFromRow(self, row):\n    id, name, description, created_at, updated_at, status, creator_id, hunt_id, flow_args = row\n    return {\n        'id': id,\n        'name': name,\n        'description': description,\n        'created_at': created_at,\n        'updated_at': updated_at,\n        'status': status,\n        'creator_id': creator_id,\n        'hunt_id': hunt_id,\n        'flow_args': flow_args\n    }",
            "def _HuntObjectFromRow(self, row):\n    fields = ['id', 'name', 'description', 'created_at', 'updated_at', 'status', 'creator_id', 'hunt_id', 'flow_args']\n    return dict(zip(fields, row))",
            "def _HuntObjectFromRow(self, row):\n    return dict(id=row[0], name=row[1], description=row[2], created_at=row[3], updated_at=row[4], status=row[5], creator_id=row[6], hunt_id=row[7], flow_args=row[8])",
            "def _HuntObjectFromRow(self, row):\n    return {k: v for k, v in zip(('id', 'name', 'description', 'created_at', 'updated_at', 'status', 'creator_id', 'hunt_id', 'flow_args'), row)}",
            "from operator import itemgetter\n\ndef _HuntObjectFromRow(self, row):\n    keys = ('id', 'name', 'description', 'created_at', 'updated_at', 'status', 'creator_id', 'hunt_id', 'flow_args')\n    return dict(zip(keys, itemgetter(*range(len(keys)))(row)))",
            "def _HuntObjectFromRow(self, row):\n    return dict(zip(('id', 'name', 'description', 'created_at', 'updated_at', 'status', 'creator_id', 'hunt_id', 'flow_args'), row))"
        ]
    },
    {
        "id": 6,
        "prompt": "def actualize_source_type (self, sources, prop_set):\n        \"\"\" Helper for 'actualize_sources'.\n            For each passed source, actualizes it with the appropriate scanner.\n            Returns the actualized virtual targets.\n        \"\"\"",
        "code": "def actualize_source_type (self, sources, prop_set):\n        \"\"\" Helper for 'actualize_sources'.\n            For each passed source, actualizes it with the appropriate scanner.\n            Returns the actualized virtual targets.\n        \"\"\"\n        assert is_iterable_typed(sources, VirtualTarget)\n        assert isinstance(prop_set, property_set.PropertySet)\n        result = []\n        for i in sources:\n            scanner = None\n\n# FIXME: what's this?\n#            if isinstance (i, str):\n#                i = self.manager_.get_object (i)\n\n            if i.type ():\n                scanner = b2.build.type.get_scanner (i.type (), prop_set)\n\n            r = i.actualize (scanner)\n            result.append (r)\n\n        return result",
        "writer": "human",
        "rewrite": [
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [i.actualize(b2.build.type.get_scanner(i.type(), prop_set) if i.type() else None) for i in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [i.actualize(b2.build.type.get_scanner(i.type(), prop_set) if i.type() else None) for i in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [s.actualize(b2.build.type.get_scanner(s.type(), prop_set) if s.type() else None) for s in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [source.actualize(b2.build.type.get_scanner(source.type(), prop_set) if source.type() else None) for source in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [s.actualize(b2.build.type.get_scanner(s.type(), prop_set) if s.type() else None) for s in sources]",
            "def actualize_source_type(self, sources, prop_set):\n    assert is_iterable_typed(sources, VirtualTarget)\n    assert isinstance(prop_set, property_set.PropertySet)\n    return [src.actualize(b2.build.type.get_scanner(src.type(), prop_set) if src.type() else None) for src in sources]"
        ]
    },
    {
        "id": 1,
        "prompt": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"",
        "code": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"\n    HYDROPH_DIST_MAX = 4.0\n    hydrophobic_pairs = []\n    \n    for atom_a in atom_set_a:\n        if atom_a.element == 'C' and not atom_a.is_polar():\n            for atom_b in atom_set_b:\n                if atom_b.element == 'C' and not atom_b.is_polar():\n                    distance = calculate_distance(atom_a, atom_b)\n                    if distance <= HYDROPH_DIST_MAX:\n                        hydrophobic_pairs.append((atom_a, atom_b))\n    \n    return hydrophobic_pairs",
        "writer": "machine",
        "rewrite": [
            "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    HYDROPH_DIST_MAX = 4.0\n    return [(atom_a, atom_b) for atom_a in atom_set_a for atom_b in atom_set_b if atom_a.element == 'C' and not atom_a.is_polar() and atom_b.element == 'C' and not atom_b.is_polar() and calculate_distance(atom_a, atom_b) <= HYDROPH_DIST_MAX]",
            "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    HYDROPH_DIST_MAX = 4.0\n    return [(a, b) for a in atom_set_a for b in atom_set_b if a.element == 'C' and not a.is_polar() and b.element == 'C' and not b.is_polar() and calculate_distance(a, b) <= HYDROPH_DIST_MAX]",
            "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    max_dist = 4.0\n    return [(a, b) for a in atom_set_a for b in atom_set_b if a.element == 'C' and not a.is_polar() and b.element == 'C' and not b.is_polar() and calculate_distance(a, b) <= max_dist]",
            "def hydrophobic_interactions(atom_set_a, atom_set_b):\n  max_dist = 4.0\n  return [(a, b) for a in atom_set_a if a.element == 'C' and not a.is_polar() for b in atom_set_b if b.element == 'C' and not b.is_polar() and calculate_distance(a,b) <= max_dist]",
            "def hydrophobic_interactions(a, b):\n    d = 4.0\n    return [(x, y) for x in a if x.element == 'C' and not x.is_polar() for y in b if y.element == 'C' and not y.is_polar() if calculate_distance(x, y) <= d]",
            "def hydrophobic_interactions(a, b):\n    max_distance = 4.0\n    pairs = []\n    for atom1 in a:\n        if atom1.element == 'C' and not atom1.is_polar():\n            for atom2 in b:\n                if atom2.element == 'C' and not atom2.is_polar():\n                    distance = calculate_distance(atom1, atom2)\n                    if distance <= max_distance:\n                        pairs.append((atom1, atom2))\n    return pairs"
        ]
    },
    {
        "id": 8,
        "prompt": "def ff(items, targets):\n    \"\"\"First-Fit\n\n    This is perhaps the simplest packing heuristic;\n    it simply packs items in the next available bin.\n\n    Complexity O(n^2)\n    \"\"\"",
        "code": "def ff(items, targets):\n    bins = []\n    for item in items:\n        for bin in bins:\n            if sum(bin) + item <= targets:\n                bin.append(item)\n                break\n        else:\n            bins.append([item])\n    return bins",
        "writer": "machine",
        "rewrite": [
            "def ff(items, targets):\n    bins = [[]]\n    for item in items:\n        placed = False\n        for i in range(len(bins)):\n            if sum(bins[i]) + item <= targets:\n                bins[i].append(item)\n                placed = True\n                break\n        if not placed:\n            bins.append([item])\n    return bins",
            "def ff(items, target):\n    bins = []\n    for item in items:\n        added = False\n        for i, bin in enumerate(bins):\n            if sum(bin) + item <= target:\n                bins[i].append(item)\n                added = True\n                break\n        if not added:\n            bins.append([item])\n    return bins",
            "def ff(items, target):\n    bins = []\n    for item in items:\n        bin_added = False\n        for i in range(len(bins)):\n            if sum(bins[i]) + item <= target:\n                bins[i].append(item)\n                bin_added = True\n                break\n        if not bin_added:\n            bins.append([item])\n    return bins",
            "def ff(items, target):\n    bins = []\n    for item in items:\n        placed = False\n        for i, bin in enumerate(bins):\n            if sum(bin) + item <= target:\n                bins[i].append(item)\n                placed = True\n                break\n        if not placed:\n            bins.append([item])\n    return bins",
            "def ff(items, target):\n  bins = []\n  for item in items:\n    found_bin = False\n    for i in range(len(bins)):\n      if sum(bins[i]) + item <= target:\n        bins[i].append(item)\n        found_bin = True\n        break\n    if not found_bin:\n      bins.append([item])\n  return bins",
            "def ff(items, target):\n    bins = []\n    for item in items:\n        added = False\n        for i, bin in enumerate(bins):\n            if sum(bin) + item <= target:\n                bins[i].append(item)\n                added = True\n                break\n        if not added:\n            bins.append([item])\n    return bins"
        ]
    },
    {
        "id": 5,
        "prompt": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"",
        "code": "def password_entropy(length: int, chars: str) -> float:\n    \"\"\"Calculate the entropy of a password with given length and chars.\"\"\"\n    if not isinstance(length, int):\n        raise TypeError('length can only be int')\n    if length < 0:\n        raise ValueError('length should be greater than 0')\n    if not isinstance(chars, str):\n        raise TypeError('chars can only be string')\n    if not chars:\n        raise ValueError(\"chars can't be null\")\n\n    if length == 0:\n        return 0.0\n\n    entropy_c = entropy_bits(list(chars))\n    return float(length * entropy_c)",
        "writer": "human",
        "rewrite": [
            "def password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int) or length < 0:\n        raise ValueError(\"length must be a non-negative integer\")\n    if not isinstance(chars, str) or not chars:\n        raise ValueError(\"chars must be a non-empty string\")\n    if length == 0:\n        return 0.0\n    entropy_c = len(chars).bit_length()\n    return length * entropy_c",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int) or length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n    if not isinstance(chars, str) or not chars:\n        raise ValueError(\"Chars must be a non-empty string.\")\n    \n    unique_chars = set(chars)\n    num_unique_chars = len(unique_chars)\n    \n    if num_unique_chars == 0:\n        raise ValueError(\"Chars string cannot be empty.\")\n\n    entropy = length * math.log2(num_unique_chars)\n    return entropy",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int) or length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n    if not isinstance(chars, str) or not chars:\n        raise ValueError(\"Chars must be a non-empty string.\")\n    return length * math.log2(len(set(chars)))",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int) or length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n    if not isinstance(chars, str) or not chars:\n        raise ValueError(\"Chars must be a non-empty string.\")\n    return length * math.log2(len(set(chars)))",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int) or length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n    if not isinstance(chars, str) or not chars:\n        raise ValueError(\"Chars must be a non-empty string.\")\n    return length * math.log2(len(set(chars)))",
            "import math\n\ndef password_entropy(length: int, chars: str) -> float:\n    if not isinstance(length, int) or length < 0:\n        raise ValueError(\"Length must be a non-negative integer.\")\n    if not isinstance(chars, str) or not chars:\n        raise ValueError(\"Chars must be a non-empty string.\")\n    return length * math.log2(len(set(chars)))"
        ]
    },
    {
        "id": 8,
        "prompt": "def ff(items, targets):\n    \"\"\"First-Fit\n\n    This is perhaps the simplest packing heuristic;\n    it simply packs items in the next available bin.\n\n    Complexity O(n^2)\n    \"\"\"",
        "code": "def ff(items, targets):\n    \"\"\"First-Fit\n\n    This is perhaps the simplest packing heuristic;\n    it simply packs items in the next available bin.\n\n    Complexity O(n^2)\n    \"\"\"\n    bins = [(target, []) for target in targets]\n    skip = []\n\n    for item in items:\n        for target, content in bins:\n            if item <= (target - sum(content)):\n                content.append(item)\n                break\n        else:\n            skip.append(item)\n    return bins, skip",
        "writer": "human",
        "rewrite": [
            "def ff(items, targets):\n    bins = [[target] for target in targets]\n    skip = []\n    for item in items:\n        placed = False\n        for i, bin in enumerate(bins):\n            if item <= bin[0] - sum(bin[1:]):\n                bins[i].append(item)\n                placed = True\n                break\n        if not placed:\n            skip.append(item)\n    return bins, skip",
            "def ff(items, targets):\n    bins = [([target], []) for target in targets]\n    skipped = []\n    for item in items:\n        added = False\n        for bin_data in bins:\n            if item <= bin_data[0][0] - sum(bin_data[1]):\n                bin_data[1].append(item)\n                added = True\n                break\n        if not added:\n            skipped.append(item)\n    return bins, skipped",
            "def first_fit(items, capacities):\n    bins = [[capacity] for capacity in capacities]\n    unfitted = []\n    for item in items:\n        placed = False\n        for bin in bins:\n            if item <= bin[0] - sum(bin[1:]):\n                bin.append(item)\n                placed = True\n                break\n        if not placed:\n            unfitted.append(item)\n    return bins, unfitted",
            "def first_fit(items, capacities):\n    bins = [{'capacity': c, 'items': []} for c in capacities]\n    leftovers = []\n    for item in items:\n        placed = False\n        for bin in bins:\n            if item <= bin['capacity'] - sum(bin['items']):\n                bin['items'].append(item)\n                placed = True\n                break\n        if not placed:\n            leftovers.append(item)\n    return bins, leftovers",
            "def first_fit(items, target_capacities):\n    bins = [{'capacity': c, 'items': []} for c in target_capacities]\n    unplaced_items = []\n    for item_size in items:\n        placed = False\n        for bin in bins:\n            remaining_capacity = bin['capacity'] - sum(bin['items'])\n            if item_size <= remaining_capacity:\n                bin['items'].append(item_size)\n                placed = True\n                break\n        if not placed:\n            unplaced_items.append(item_size)\n    return bins, unplaced_items",
            "def first_fit(items, bin_capacities):\n    bins = [[capacity, []] for capacity in bin_capacities]\n    remaining_items = []\n    for item in items:\n        added = False\n        for bin in bins:\n            if item <= bin[0] - sum(bin[1]):\n                bin[1].append(item)\n                added = True\n                break\n        if not added:\n            remaining_items.append(item)\n    return bins, remaining_items"
        ]
    },
    {
        "id": 4,
        "prompt": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n        \"\"\"\n        Create a new UserObject from the given template.\n\n        :param configuration:  EB configuration to use\n        :param tpl: CreateUserObject template, contain misc settings\n        :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n        :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n        :return: UO - user object ready to use\n        \"\"\"",
        "code": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    \"\"\"\n    Create a new UserObject from the given template.\n\n    :param configuration:  EB configuration to use\n    :param tpl: CreateUserObject template, contain misc settings\n    :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n    :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n    :return: UO - user object ready to use\n    \"\"\"\n    if configuration is None:\n        configuration = self.default_configuration\n    \n    if tpl is None:\n        tpl = self.default_template\n    \n    if keys is None:\n        keys = {}\n    \n    if obj_type is None:\n        obj_type = self.determine_obj_type(keys, tpl)\n    \n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set",
        "writer": "machine",
        "rewrite": [
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    configuration = self.default_configuration if configuration is None else configuration\n    tpl = self.default_template if tpl is None else tpl\n    keys = {} if keys is None else keys\n    obj_type = self.determine_obj_type(keys, tpl) if obj_type is None else obj_type\n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set_keys(keys)\n    return user_object",
            "def create_uo(self, configuration=self.default_configuration, tpl=self.default_template, keys={}, obj_type=None):\n    obj_type = self.determine_obj_type(keys, tpl) if obj_type is None else obj_type\n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set_keys(keys)\n    return user_object",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    configuration = configuration or self.default_configuration\n    tpl = tpl or self.default_template\n    keys = keys or {}\n    obj_type = obj_type or self.determine_obj_type(keys, tpl)\n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set_keys(keys)\n    return user_object",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    configuration = self.default_configuration if configuration is None else configuration\n    tpl = self.default_template if tpl is None else tpl\n    keys = keys if keys is not None else {}\n    obj_type = self.determine_obj_type(keys, tpl) if obj_type is None else obj_type\n    user_object = UserObject(configuration, obj_type)\n    user_object.apply_template(tpl)\n    user_object.set_keys(keys)\n    return user_object",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    configuration = self.default_configuration if configuration is None else configuration\n    tpl = self.default_template if tpl is None else tpl\n    keys = {} if keys is None else keys\n    obj_type = self.determine_obj_type(keys, tpl) if obj_type is None else obj_type\n    uo = UserObject(configuration, obj_type)\n    uo.apply_template(tpl)\n    uo.set_keys(keys)\n    return uo",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    config = self.default_configuration if configuration is None else configuration\n    template = self.default_template if tpl is None else tpl\n    key_dict = {} if keys is None else keys\n    obj_type = self.determine_obj_type(key_dict, template) if obj_type is None else obj_type\n    uo = UserObject(config, obj_type)\n    uo.apply_template(template)\n    uo.set_keys(key_dict)\n    return uo"
        ]
    },
    {
        "id": 10,
        "prompt": "def c_getprocs(self):\n        \"\"\"Get the getprocs of the module.\"\"\"",
        "code": "def c_getprocs(self):\n    \"\"\"Get the getprocs of the module.\"\"\"\n    return self._getprocs",
        "writer": "machine",
        "rewrite": [
            "def c_getprocs(self):\n    return self._getprocs",
            "def c_getprocs(self):\n    return self._getprocs",
            "def getprocs(self):\n    return self._getprocs",
            "def get_procs(self):\n    return self._getprocs",
            "def get_processes(self):\n    return self._getprocs",
            "def retrieve_processes(self):\n  return self._getprocs"
        ]
    },
    {
        "id": 11,
        "prompt": "def SLICE(array, n, position=None):\n    \"\"\"\n    Returns a subset of an array.\n    See https://docs.mongodb.com/manual/reference/operator/aggregation/slice/\n    for more details\n    :param array: Any valid expression as long as it resolves to an array.\n    :param n: Any valid expression as long as it resolves to an integer.\n    :param position: Optional. Any valid expression as long as it resolves to an integer.\n    :return: Aggregation operator\n    \"\"\"",
        "code": "def SLICE(array, n, position=None):\n    \"\"\"\n    Returns a subset of an array.\n    See https://docs.mongodb.com/manual/reference/operator/aggregation/slice/\n    for more details\n    :param array: Any valid expression as long as it resolves to an array.\n    :param n: Any valid expression as long as it resolves to an integer.\n    :param position: Optional. Any valid expression as long as it resolves to an integer.\n    :return: Aggregation operator\n    \"\"\"\n    return {'$slice': [array, position, n]} if position is not None else {'$slice': [array, n]}",
        "writer": "human",
        "rewrite": [
            "def SLICE(array, n, position=None):\n    if position is not None:\n        return {\"$slice\": [array, position, n]}\n    return {\"$slice\": [array, n]}",
            "def SLICE(array, n, position=None):\n    args = [array, n]\n    if position is not None:\n        args.insert(1, position)\n    return {'$slice': args}",
            "def SLICE(array, n, position=0):\n    return {'$slice': [array, position, n]}",
            "def SLICE(array, n, position=None):\n    return {\"$slice\": [array, position, n] if position is not None else [array, n]}",
            "def SLICE(array, n, position=0):\n  result = {'$slice': [array, n]}\n  if position:\n    result['$slice'].insert(1,position)\n  return result",
            "def SLICE(array, n, position=None):\n    return {'$slice': [array, n] + ([position] if position is not None else [])}"
        ]
    },
    {
        "id": 2,
        "prompt": "def selectOptimalChunk(self, peer):\n        \"\"\"\n        select an optimal chunk to send to a peer.\n\n        @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n        otherwise None, None\n        \"\"\"",
        "code": "def selectOptimalChunk(self, peer):\n        \"\"\"\n        select an optimal chunk to send to a peer.\n\n        @return: int(chunkNumber), str(chunkData) if there is data to be sent,\n        otherwise None, None\n        \"\"\"\n\n        # stuff I have\n        have = sets.Set(self.mask.positions(1))\n        # stuff that this peer wants\n        want = sets.Set(self.peers[peer].mask.positions(0))\n        exchangeable = have.intersection(want)\n        finalSet = dict.fromkeys(exchangeable, 0)\n\n        # taking a page from bittorrent, rarest-first\n        for chunkNumber in exchangeable:\n            for otherPeer in self.peers.itervalues():\n                finalSet[chunkNumber] += not otherPeer.mask[chunkNumber]\n        rarityList = [(rarity, random.random(), chunkNumber)\n                      for (chunkNumber, rarity)\n                      in finalSet.iteritems()]\n        if not rarityList:\n            return None, None\n        rarityList.sort()\n        chunkNumber = rarityList[-1][-1] # sorted in ascending order of rarity\n\n        # sanity check\n        assert self.mask[chunkNumber], \"I wanted to send a chunk I didn't have\"\n\n        self.file.seek(chunkNumber * CHUNK_SIZE)\n        chunkData = self.file.read(CHUNK_SIZE)\n        self.sha1sums[chunkNumber] = sha.new(chunkData).digest()\n        return chunkNumber, chunkData",
        "writer": "human",
        "rewrite": [
            "def selectOptimalChunk(self, peer):\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have & want\n    finalSet = {chunk: 0 for chunk in exchangeable}\n    for chunkNumber in exchangeable:\n        for otherPeer in self.peers.values():\n            finalSet[chunkNumber] += not otherPeer.mask[chunkNumber]\n    rarityList = [(rarity, random.random(), chunkNumber) for chunkNumber, rarity in finalSet.items()]\n    if not rarityList:\n        return None, None\n    rarityList.sort()\n    chunkNumber = rarityList[-1][-1]\n    assert self.mask[chunkNumber]\n    self.file.seek(chunkNumber * CHUNK_SIZE)\n    chunkData = self.file.read(CHUNK_SIZE)\n    self.sha1sums[chunkNumber] = hashlib.sha1(chunkData).digest()\n    return chunkNumber, chunkData",
            "def selectOptimalChunk(self, peer):\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have & want\n    finalSet = {c: 0 for c in exchangeable}\n    for chunkNumber in exchangeable:\n        for otherPeer in self.peers.values():\n            finalSet[chunkNumber] += not otherPeer.mask[chunkNumber]\n    rarityList = sorted([(r, random.random(), c) for c, r in finalSet.items()])\n    if not rarityList:\n        return None, None\n    chunkNumber = rarityList[-1][-1]\n    assert self.mask[chunkNumber]\n    self.file.seek(chunkNumber * CHUNK_SIZE)\n    chunkData = self.file.read(CHUNK_SIZE)\n    self.sha1sums[chunkNumber] = hashlib.sha1(chunkData).digest()\n    return chunkNumber, chunkData",
            "def selectOptimalChunk(self, peer):\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have.intersection(want)\n    if not exchangeable:\n        return None, None\n    \n    rarities = {chunk: sum(1 for p in self.peers.values() if not p.mask[chunk]) for chunk in exchangeable}\n    \n    optimal_chunk = max(rarities, key=rarities.get)\n    \n    assert self.mask[optimal_chunk]\n    self.file.seek(optimal_chunk * CHUNK_SIZE)\n    chunkData = self.file.read(CHUNK_SIZE)\n    self.sha1sums[optimal_chunk] = hashlib.sha1(chunkData).digest()\n    return optimal_chunk, chunkData",
            "import hashlib\nimport random\n\ndef selectOptimalChunk(self, peer):\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have & want\n    if not exchangeable:\n        return None, None\n    \n    chunk_rarities = {}\n    for chunk in exchangeable:\n        rarity = sum(1 for p in self.peers.values() if not p.mask[chunk])\n        chunk_rarities[chunk] = rarity\n\n    optimal_chunk = max(chunk_rarities, key=chunk_rarities.get)\n\n    assert self.mask[optimal_chunk]\n    self.file.seek(optimal_chunk * CHUNK_SIZE)\n    chunk_data = self.file.read(CHUNK_SIZE)\n    self.sha1sums[optimal_chunk] = hashlib.sha1(chunk_data).digest()\n    return optimal_chunk, chunk_data",
            "import hashlib\nimport random\n\ndef selectOptimalChunk(self, peer):\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have & want\n    if not exchangeable:\n        return None, None\n\n    chunk_rarities = {chunk: sum(1 for p in self.peers.values() if not p.mask[chunk]) for chunk in exchangeable}\n    \n    best_chunk = max(chunk_rarities, key=chunk_rarities.get)\n\n    assert self.mask[best_chunk]\n    self.file.seek(best_chunk * CHUNK_SIZE)\n    chunk_data = self.file.read(CHUNK_SIZE)\n    self.sha1sums[best_chunk] = hashlib.sha1(chunk_data).digest()\n    return best_chunk, chunk_data",
            "import hashlib\nimport random\n\ndef selectOptimalChunk(self, peer):\n    have = set(self.mask.positions(1))\n    want = set(self.peers[peer].mask.positions(0))\n    exchangeable = have & want\n    if not exchangeable: return None, None\n    \n    rarities = {c: sum(1 for p in self.peers.values() if not p.mask[c]) for c in exchangeable}\n    best_chunk = max(rarities, key=rarities.get)\n    \n    assert self.mask[best_chunk]\n    self.file.seek(best_chunk * CHUNK_SIZE)\n    data = self.file.read(CHUNK_SIZE)\n    self.sha1sums[best_chunk] = hashlib.sha1(data).digest()\n    return best_chunk, data"
        ]
    },
    {
        "id": 17,
        "prompt": "def add(self, **kwargs):\n        \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"",
        "code": "def add(self, **kwargs):\n        \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"\n        return self.from_datetime(\n            pendulum.instance(self.datetime()).add(**kwargs)\n        )",
        "writer": "human",
        "rewrite": [
            "def add(self, **kwargs):\n    return self.__class__(pendulum.instance(self.datetime()).add(**kwargs))",
            "def add(self, **kwargs):\n    dt = pendulum.instance(self.datetime())\n    dt = dt.add(**kwargs)\n    return self.from_datetime(dt)",
            "def add(self, **kwargs):\n    return self.__class__.from_datetime(pendulum.instance(self.datetime()).add(**kwargs))",
            "def add(self, **kwargs):\n    new_datetime = pendulum.instance(self.datetime()).add(**kwargs)\n    return self.from_datetime(new_datetime)",
            "def add(self, **kwargs):\n    dt = self.datetime()\n    dt = pendulum.instance(dt).add(**kwargs)\n    return self.from_datetime(dt)",
            "def add(self, **kwargs):\n    new_dt = pendulum.instance(self.datetime()).add(**kwargs)\n    return type(self).from_datetime(new_dt)"
        ]
    },
    {
        "id": 13,
        "prompt": "def raise_302(instance, location):\n    \"\"\"Abort the current request with a 302 (Found) response code. Sets the\n    Location header correctly. If the location does not start with a slash,\n    the path of the current request is prepended.\n\n    :param instance: Resource instance (used to access the response)\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` of status 302\n    \"\"\"",
        "code": "def raise_302(instance, location):\n    \"\"\"Abort the current request with a 302 (Found) response code. Sets the\n    Location header correctly. If the location does not start with a slash,\n    the path of the current request is prepended.\n\n    :param instance: Resource instance (used to access the response)\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` of status 302\n    \"\"\"\n    _set_location(instance, location)\n    instance.response.status = 302\n    raise ResponseException(instance.response)",
        "writer": "human",
        "rewrite": [
            "def raise_302(instance, location):\n    _set_location(instance, location)\n    instance.response.status = 302\n    raise webob.exc.HTTPFound(location=instance.request.path_qs + location if not location.startswith('/') else location)",
            "def raise_302(instance, location):\n    if not location.startswith('/'):\n        location = instance.request.path + '/' + location\n    raise webob.exc.HTTPFound(location=location)",
            "def raise_302(instance, location):\n    location = location if location.startswith('/') else instance.request.application_url + location\n    raise webob.exc.HTTPFound(location=location)",
            "def raise_302(instance, location):\n    response = webob.Response(status=302, location=location if location.startswith('/') else instance.request.path_url + location)\n    raise webob.exc.HTTPFound(location=response.location)",
            "def raise_302(instance, location):\n    if not location.startswith('/'):\n        location = f\"{instance.request.path_info}{location}\"\n    raise webob.exc.HTTPFound(location=location)",
            "def raise_302(instance, location):\n    url = location if location.startswith('/') else urljoin(instance.request.url, location)\n    raise webob.exc.HTTPFound(location=url)"
        ]
    },
    {
        "id": 9,
        "prompt": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"",
        "code": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"\n    if os.path.exists(image_path):\n        compressed_image = \"%s.gz\" %image_path\n        os.system('gzip -c -6 %s > %s' %(image_path, compressed_image))\n        return compressed_image\n\n    bot.exit(\"Cannot find image %s\" %image_path)",
        "writer": "human",
        "rewrite": [
            "def compress(self, image_path):\n    import gzip\n    import os\n    if os.path.exists(image_path):\n        with open(image_path, 'rb') as f_in:\n            with gzip.open(image_path + '.gz', 'wb') as f_out:\n                f_out.writelines(f_in)\n        return image_path + '.gz'\n    return None",
            "import gzip\nimport os\n\ndef compress(self, image_path):\n    if os.path.exists(image_path):\n        with open(image_path, 'rb') as f_in:\n            with gzip.open(image_path + '.gz', 'wb') as f_out:\n                f_out.writelines(f_in)\n        return image_path + '.gz'\n    else:\n        return None",
            "import gzip\nimport os\n\ndef compress(self, image_path):\n    if os.path.exists(image_path):\n        with open(image_path, \"rb\") as f:\n            with gzip.open(image_path + \".gz\", \"wb\") as g:\n                g.writelines(f)\n        return image_path + \".gz\"\n    return None",
            "import gzip\nimport os\n\ndef compress(self, image_path):\n    if os.path.exists(image_path):\n        with open(image_path, 'rb') as infile:\n            with gzip.open(image_path + '.gz', 'wb') as outfile:\n                outfile.writelines(infile)\n        return image_path + '.gz'\n    return None",
            "import gzip\nimport os\n\ndef compress(self, image_path):\n    if os.path.exists(image_path):\n        try:\n            with open(image_path, 'rb') as f_in:\n                with gzip.open(image_path + '.gz', 'wb') as f_out:\n                    f_out.writelines(f_in)\n            return image_path + '.gz'\n        except Exception as e:\n            return None\n    return None",
            "import gzip\nimport os\n\ndef compress(self, image_path):\n    if os.path.exists(image_path):\n        try:\n            with open(image_path, 'rb') as infile:\n                with gzip.open(image_path + '.gz', 'wb') as outfile:\n                    outfile.write(infile.read())\n            return image_path + '.gz'\n        except Exception as e:\n            print(f\"An error occurred: {e}\")  #For debugging purposes.  Remove in production.\n            return None\n    return None"
        ]
    },
    {
        "id": 14,
        "prompt": "def _count_extra_actions(self, game_image):\n        \"\"\"Count the number of extra actions for player in this turn.\"\"\"",
        "code": "def _count_extra_actions(self, game_image):\n    \"\"\"Count the number of extra actions for player in this turn.\"\"\"\n    extra_actions = 0\n    action_icons = self._detect_action_icons(game_image)\n    for icon in action_icons:\n        if icon.type == 'extra_action':\n            extra_actions += 1\n    return extra_actions",
        "writer": "machine",
        "rewrite": [
            "def _count_extra_actions(self, game_image):\n    return sum(1 for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action')",
            "def _count_extra_actions(self, game_image):\n    return sum(1 for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action')",
            "def _count_extra_actions(self, game_image):\n    return len([icon for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action'])",
            "def _count_extra_actions(self, game_image):\n    return sum(1 for icon in self._detect_action_icons(game_image) if icon.type == 'extra_action')",
            "def _count_extra_actions(self, game_image):\n    return len([i for i in self._detect_action_icons(game_image) if i.type == 'extra_action'])",
            "def _count_extra_actions(self, game_image):\n    return sum(1 for icon in self._detect_action_icons(game_image) if icon.type == \"extra_action\")"
        ]
    },
    {
        "id": 11,
        "prompt": "def SLICE(array, n, position=None):\n    \"\"\"\n    Returns a subset of an array.\n    See https://docs.mongodb.com/manual/reference/operator/aggregation/slice/\n    for more details\n    :param array: Any valid expression as long as it resolves to an array.\n    :param n: Any valid expression as long as it resolves to an integer.\n    :param position: Optional. Any valid expression as long as it resolves to an integer.\n    :return: Aggregation operator\n    \"\"\"",
        "code": "def SLICE(array, n, position=None):\n    if position is None:\n        if n >= 0:\n            return array[:n]\n        else:\n            return array[n:]\n    else:\n        start = max(0, position)\n        end = start + n if n >= 0 else len(array) + n\n        return array[start:end]",
        "writer": "machine",
        "rewrite": [
            "def SLICE(array, n, position=None):\n    if position is None:\n        return array[:n] if n >= 0 else array[n:]\n    start = max(0, position)\n    end = start + n if n >= 0 else len(array) + n\n    return array[start:end]",
            "def slice_array(arr, n, pos=None):\n  if pos is None: return arr[:n] if n>=0 else arr[n:]\n  start = max(0,pos)\n  end = start + n if n >=0 else len(arr) + n\n  return arr[start:end]",
            "def slice_it(arr, n, pos=None):\n    if pos is None: return arr[:n] if n>=0 else arr[n:]\n    start = max(0, pos)\n    end = start + n if n >= 0 else len(arr) + n\n    return arr[start:end]",
            "def my_slice(data, num, start=None):\n    if start is None:\n        return data[:num] if num >= 0 else data[num:]\n    else:\n        start = max(0, start)\n        stop = start + num if num >= 0 else len(data) + num\n        return data[start:stop]",
            "def slicer(arr, num, start_index=None):\n    if start_index is None:\n        return arr[:num] if num >= 0 else arr[num:]\n    else:\n        start = max(0, start_index)\n        end = start + num if num >= 0 else len(arr) + num\n        return arr[start:end]",
            "def array_slice(arr, n, pos=None):\n  if pos is None: return arr[:n] if n >= 0 else arr[n:]\n  start = max(0,pos)\n  end = start+n if n>=0 else len(arr)+n\n  return arr[start:end]"
        ]
    },
    {
        "id": 13,
        "prompt": "def raise_302(instance, location):\n    \"\"\"Abort the current request with a 302 (Found) response code. Sets the\n    Location header correctly. If the location does not start with a slash,\n    the path of the current request is prepended.\n\n    :param instance: Resource instance (used to access the response)\n    :type instance: :class:`webob.resource.Resource`\n    :raises: :class:`webob.exceptions.ResponseException` of status 302\n    \"\"\"",
        "code": "def raise_302(instance, location):\n    if not location.startswith('/'):\n        location = instance.request.path + '/' + location\n    instance.response.status_code = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception_class(instance.response)",
        "writer": "machine",
        "rewrite": [
            "def raise_302(instance, location):\n    location = location if location.startswith('/') else instance.request.path + '/' + location\n    instance.response.status = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception",
            "def raise_302(instance, location):\n    location = f\"{instance.request.path}/{location}\" if not location.startswith(\"/\") else location\n    instance.response.status = 302\n    instance.response.headers[\"Location\"] = location\n    raise instance.response.exception_class(instance.response)",
            "def raise_302(instance, location):\n    instance.response.status = 302\n    instance.response.headers['Location'] = location if location.startswith('/') else f\"{instance.request.path}/{location}\"\n    raise instance.response.exception_class(instance.response)",
            "def raise_302(instance, location):\n    location = f\"{instance.request.path}/{location}\" if not location.startswith(\"/\") else location\n    instance.response.status = 302\n    instance.response.headers[\"Location\"] = location\n    raise instance.response.exception_class(instance.response)",
            "def raise_302(instance, location):\n    if '/' != location[0]:\n        location = f'{instance.request.path}/{location}'\n    instance.response.status = 302\n    instance.response.headers['Location'] = location\n    raise instance.response.exception_class(instance.response)",
            "def raise_302(instance, location):\n    instance.response.status = 302\n    instance.response.headers['Location'] = instance.request.path + '/' + location if not location.startswith('/') else location\n    raise instance.response.exception_class(instance.response)"
        ]
    },
    {
        "id": 18,
        "prompt": "def _periodic_callback(self):\n        \"\"\" Will be started on first emit \"\"\"",
        "code": "def _periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)",
        "writer": "machine",
        "rewrite": [
            "def _periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)",
            "import threading\n\ndef _periodic_callback(self):\n    def run_periodically():\n        while True:\n            self.emit()\n            time.sleep(self.interval)\n\n    thread = threading.Thread(target=run_periodically)\n    thread.daemon = True\n    thread.start()",
            "import asyncio\n\nasync def _periodic_callback(self):\n    while True:\n        self.emit()\n        await asyncio.sleep(self.interval)",
            "import schedule\nimport time\n\ndef _periodic_callback(self):\n    schedule.every(self.interval).seconds.do(self.emit)\n    while True:\n        schedule.run_pending()\n        time.sleep(1)",
            "def _periodic_callback(self):\n    try:\n        while True:\n            self.emit()\n            time.sleep(self.interval)\n    except Exception as e:\n        print(f\"Error in periodic callback: {e}\")",
            "import time\ndef _periodic_callback(self):\n    while True:\n        self.emit()\n        time.sleep(self.interval)"
        ]
    },
    {
        "id": 7,
        "prompt": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"",
        "code": "def _HuntObjectFromRow(self, row):\n    \"\"\"Generates a flow object from a database row.\"\"\"\n    (\n        create_time,\n        last_update_time,\n        creator,\n        duration_micros,\n        client_rate,\n        client_limit,\n        hunt_state,\n        hunt_state_comment,\n        init_start_time,\n        last_start_time,\n        num_clients_at_start_time,\n        description,\n        body,\n    ) = row\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(body)\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(duration_micros)\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(create_time)\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(\n        last_update_time)\n\n    # Checks below are needed for hunts that were written to the database before\n    # respective fields became part of F1 schema.\n    if creator is not None:\n      hunt_obj.creator = creator\n\n    if client_rate is not None:\n      hunt_obj.client_rate = client_rate\n\n    if client_limit is not None:\n      hunt_obj.client_limit = client_limit\n\n    if hunt_state is not None:\n      hunt_obj.hunt_state = hunt_state\n\n    if hunt_state_comment is not None:\n      hunt_obj.hunt_state_comment = hunt_state_comment\n\n    if init_start_time is not None:\n      hunt_obj.init_start_time = mysql_utils.TimestampToRDFDatetime(\n          init_start_time)\n\n    if last_start_time is not None:\n      hunt_obj.last_start_time = mysql_utils.TimestampToRDFDatetime(\n          last_start_time)\n\n    if num_clients_at_start_time is not None:\n      hunt_obj.num_clients_at_start_time = num_clients_at_start_time\n\n    if description is not None:\n      hunt_obj.description = description\n\n    return hunt_obj",
        "writer": "human",
        "rewrite": [
            "def _HuntObjectFromRow(self, row):\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(row[12])\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(row[3])\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(row[0])\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(row[1])\n    if row[2]: hunt_obj.creator = row[2]\n    if row[4]: hunt_obj.client_rate = row[4]\n    if row[5]: hunt_obj.client_limit = row[5]\n    if row[6]: hunt_obj.hunt_state = row[6]\n    if row[7]: hunt_obj.hunt_state_comment = row[7]\n    if row[8]: hunt_obj.init_start_time = mysql_utils.TimestampToRDFDatetime(row[8])\n    if row[9]: hunt_obj.last_start_time = mysql_utils.TimestampToRDFDatetime(row[9])\n    if row[10]: hunt_obj.num_clients_at_start_time = row[10]\n    if row[11]: hunt_obj.description = row[11]\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    fields = dict(zip(('create_time', 'last_update_time', 'creator', 'duration_micros', 'client_rate', 'client_limit', 'hunt_state', 'hunt_state_comment', 'init_start_time', 'last_start_time', 'num_clients_at_start_time', 'description', 'body'), row))\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(fields['body'])\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(fields['duration_micros'])\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(fields['create_time'])\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(fields['last_update_time'])\n    for field in ('creator', 'client_rate', 'client_limit', 'hunt_state', 'hunt_state_comment', 'description'):\n        if fields[field]:\n            setattr(hunt_obj, field, fields[field])\n    for field in ('init_start_time', 'last_start_time'):\n        if fields[field]:\n            setattr(hunt_obj, field, mysql_utils.TimestampToRDFDatetime(fields[field]))\n    if fields['num_clients_at_start_time']:\n        hunt_obj.num_clients_at_start_time = fields['num_clients_at_start_time']\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(row[-1])\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(row[3])\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(row[0])\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(row[1])\n    for i, field in enumerate(('creator', 'client_rate', 'client_limit', 'hunt_state', 'hunt_state_comment', 'init_start_time', 'last_start_time', 'num_clients_at_start_time', 'description')):\n        if row[i+2]:\n            if field in ('init_start_time', 'last_start_time'):\n                setattr(hunt_obj, field, mysql_utils.TimestampToRDFDatetime(row[i+2]))\n            else:\n                setattr(hunt_obj, field, row[i+2])\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    kwargs = dict(zip([\"create_time\", \"last_update_time\", \"creator\", \"duration_micros\", \"client_rate\", \"client_limit\", \"hunt_state\", \"hunt_state_comment\", \"init_start_time\", \"last_start_time\", \"num_clients_at_start_time\", \"description\", \"body\"], row))\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(kwargs[\"body\"])\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(kwargs[\"duration_micros\"])\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(kwargs[\"create_time\"])\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(kwargs[\"last_update_time\"])\n    for key, value in kwargs.items():\n        if value is not None and key not in [\"body\", \"duration_micros\", \"create_time\", \"last_update_time\"]:\n            if key in [\"init_start_time\", \"last_start_time\"]:\n                setattr(hunt_obj, key, mysql_utils.TimestampToRDFDatetime(value))\n            else:\n                setattr(hunt_obj, key, value)\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(row[12])\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(row[3])\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(row[0])\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(row[1])\n    attributes = {\n        \"creator\": 2, \"client_rate\": 4, \"client_limit\": 5, \"hunt_state\": 6,\n        \"hunt_state_comment\": 7, \"init_start_time\": 8, \"last_start_time\": 9,\n        \"num_clients_at_start_time\": 10, \"description\": 11\n    }\n    for attr, index in attributes.items():\n        value = row[index]\n        if value is not None:\n            if attr in [\"init_start_time\", \"last_start_time\"]:\n                value = mysql_utils.TimestampToRDFDatetime(value)\n            setattr(hunt_obj, attr, value)\n    return hunt_obj",
            "def _HuntObjectFromRow(self, row):\n    hunt_obj = rdf_hunt_objects.Hunt.FromSerializedString(row[-1])\n    hunt_obj.duration = rdfvalue.Duration.FromMicroseconds(row[3])\n    hunt_obj.create_time = mysql_utils.TimestampToRDFDatetime(row[0])\n    hunt_obj.last_update_time = mysql_utils.TimestampToRDFDatetime(row[1])\n    for i in range(2, len(row) -1):\n        if row[i] is not None:\n            setattr(hunt_obj,  [\"creator\", \"client_rate\", \"client_limit\", \"hunt_state\", \"hunt_state_comment\", \"init_start_time\", \"last_start_time\", \"num_clients_at_start_time\", \"description\"][i-2], mysql_utils.TimestampToRDFDatetime(row[i]) if i in (8,9) else row[i] )\n    return hunt_obj"
        ]
    },
    {
        "id": 9,
        "prompt": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"",
        "code": "def compress(self, image_path):\n    \"\"\"compress will (properly) compress an image\"\"\"\n    from PIL import Image\n    import os\n\n    # Open the image\n    img = Image.open(image_path)\n\n    # Get the original file size\n    original_size = os.path.getsize(image_path)\n\n    # Set the quality (adjust as needed)\n    quality = 85\n\n    # Get the file extension\n    file_name, file_extension = os.path.splitext(image_path)\n\n    # Create the new file name\n    compressed_path = f\"{file_name}_compressed{file_extension}\"\n\n    # Compress and save the image\n    img.save(compressed_path, optimize=True, quality=quality)\n\n    # Get the compressed file size\n    compressed_size = os.path.getsize(compressed_path)\n\n    # If the compression didn't reduce the file size, return the original image path\n    if compressed_size >= original_size:\n        os.remove(compressed_path)\n        return image_path\n\n    return compressed_path",
        "writer": "machine",
        "rewrite": [
            "def compress(self, image_path):\n    from PIL import Image\n    import os\n    img = Image.open(image_path)\n    original_size = os.path.getsize(image_path)\n    quality = 85\n    file_name, file_extension = os.path.splitext(image_path)\n    compressed_path = f\"{file_name}_compressed{file_extension}\"\n    img.save(compressed_path, optimize=True, quality=quality)\n    compressed_size = os.path.getsize(compressed_path)\n    if compressed_size >= original_size:\n        os.remove(compressed_path)\n        return image_path\n    return compressed_path",
            "def compress_image(image_path, quality=85):\n    try:\n        with Image.open(image_path) as img:\n            original_size = os.path.getsize(image_path)\n            file_name, file_extension = os.path.splitext(image_path)\n            compressed_path = f\"{file_name}_compressed{file_extension}\"\n            img.save(compressed_path, optimize=True, quality=quality)\n            compressed_size = os.path.getsize(compressed_path)\n            if compressed_size >= original_size:\n                os.remove(compressed_path)\n                return image_path\n            return compressed_path\n    except FileNotFoundError:\n        return None\n    except Exception as e:\n        return None",
            "def compress_image(image_path, quality=85):\n    try:\n        with Image.open(image_path) as img:\n            original_size = os.path.getsize(image_path)\n            name, ext = os.path.splitext(image_path)\n            compressed_image_path = f\"{name}_compressed{ext}\"\n            img.save(compressed_image_path, optimize=True, quality=quality)\n            compressed_size = os.path.getsize(compressed_image_path)\n            if compressed_size >= original_size:\n                os.remove(compressed_image_path)\n                return image_path\n            return compressed_image_path\n    except (FileNotFoundError, IOError):\n        return None",
            "import os\nfrom PIL import Image\n\ndef compress_image(image_path, quality=85):\n    try:\n        with Image.open(image_path) as img:\n            original_size = os.stat(image_path).st_size\n            name, ext = os.path.splitext(image_path)\n            compressed_path = f\"{name}_compressed{ext}\"\n            img.save(compressed_path, optimize=True, quality=quality)\n            if os.stat(compressed_path).st_size >= original_size:\n                os.remove(compressed_path)\n                return image_path\n            return compressed_path\n    except (FileNotFoundError, OSError, IOError) as e:\n        return None",
            "from PIL import Image\nimport os\n\ndef compress(image_path, quality=85):\n    try:\n        with Image.open(image_path) as img:\n            original_size = os.path.getsize(image_path)\n            base, ext = os.path.splitext(image_path)\n            compressed_path = f\"{base}_compressed{ext}\"\n            img.save(compressed_path, optimize=True, quality=quality)\n            if os.path.getsize(compressed_path) >= original_size:\n                os.remove(compressed_path)\n                return image_path\n            return compressed_path\n    except (FileNotFoundError, IOError):\n        return None",
            "from PIL import Image\nimport os\n\ndef compress_image(image_path, quality=85):\n    try:\n        with Image.open(image_path) as img:\n            original_size = os.path.getsize(image_path)\n            name, ext = os.path.splitext(image_path)\n            compressed_file = f\"{name}_compressed{ext}\"\n            img.save(compressed_file, optimize=True, quality=quality)\n            if os.path.exists(compressed_file) and os.path.getsize(compressed_file) >= original_size:\n                os.remove(compressed_file)\n                return image_path\n            return compressed_file\n    except (FileNotFoundError, OSError, PIL.UnidentifiedImageError):\n        return None"
        ]
    },
    {
        "id": 17,
        "prompt": "def add(self, **kwargs):\n        \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"",
        "code": "def add(self, **kwargs):\n    \"\"\"Returns a new MayaDT object with the given offsets.\"\"\"\n    from maya import MayaDT\n    from datetime import timedelta\n    \n    offset = timedelta()\n    for unit, value in kwargs.items():\n        if unit in ['years', 'months']:\n            offset += timedelta(days=value * 365.25 / 12 if unit == 'months' else value * 365.25)\n        else:\n            offset += timedelta(**{unit: value})\n    \n    return MayaDT(self.epoch + offset.total_seconds())",
        "writer": "machine",
        "rewrite": [
            "def add(self, **kwargs):\n    from maya import MayaDT\n    from datetime import timedelta\n    offset_seconds = 0\n    for unit, value in kwargs.items():\n        if unit == 'years':\n            offset_seconds += value * 365.25 * 86400\n        elif unit == 'months':\n            offset_seconds += value * (365.25 / 12) * 86400\n        elif unit == 'days':\n            offset_seconds += value * 86400\n        elif unit == 'hours':\n            offset_seconds += value * 3600\n        elif unit == 'minutes':\n            offset_seconds += value * 60\n        elif unit == 'seconds':\n            offset_seconds += value\n    return MayaDT(self.epoch + offset_seconds)",
            "def add(self, **kwargs):\n    from maya import MayaDT\n    import maya.timedelta\n    offset = maya.timedelta.timedelta(**kwargs)\n    return MayaDT(self.epoch + offset.total_seconds())",
            "def add(self, **kwargs):\n    from maya import MayaDT, timedelta\n    td = timedelta(**kwargs)\n    return MayaDT(self.epoch + td.total_seconds())",
            "def add(self, **kwargs):\n    from maya import MayaDT, timedelta\n    offset = timedelta(days=kwargs.get('years',0)*365.25 + kwargs.get('months',0)*365.25/12, **{k:v for k,v in kwargs.items() if k not in ('years','months')})\n    return MayaDT(self.epoch + offset.total_seconds())",
            "def add(self, **kwargs):\n    from maya import MayaDT, timedelta\n    days = kwargs.get('years', 0) * 365.25 + kwargs.get('months', 0) * 365.25 / 12\n    kwargs.pop('years', None)\n    kwargs.pop('months', None)\n    offset = timedelta(days=days, **kwargs)\n    return MayaDT(self.epoch + offset.total_seconds())",
            "def add(self, **kwargs):\n    from maya import MayaDT, timedelta\n    days = kwargs.pop('years',0) * 365.25 + kwargs.pop('months',0) * 365.25/12\n    return MayaDT(self.epoch + timedelta(days=days,**kwargs).total_seconds())"
        ]
    },
    {
        "id": 18,
        "prompt": "def _periodic_callback(self):\n        \"\"\" Will be started on first emit \"\"\"",
        "code": "def _periodic_callback(self):\n        \"\"\" Will be started on first emit \"\"\"\n        try:\n            self.notify(self._state)  # emit to all subscribers\n        except Exception:  # pylint: disable=broad-except\n            self._error_callback(*sys.exc_info())\n\n        if self._subscriptions:\n            # if there are still subscriptions register next _periodic callback\n            self._call_later_handle = \\\n                self._loop.call_later(self._interval, self._periodic_callback)\n        else:\n            self._state = NONE\n            self._call_later_handle = None",
        "writer": "human",
        "rewrite": [
            "def _periodic_callback(self):\n    try:\n        self.notify(self._state)\n    except Exception as e:\n        self._error_callback(e)\n\n    if self._subscriptions:\n        self._call_later_handle = self._loop.call_later(self._interval, self._periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None",
            "def _periodic_callback(self):\n    try:\n        self.notify(self._state)\n    except Exception as e:\n        self._error_callback(type(e), e, e.__traceback__)\n    if self._subscriptions:\n        self._call_later_handle = self._loop.call_later(self._interval, self._periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None",
            "def _periodic_callback(self):\n    if self._subscriptions:\n        try:\n            self.notify(self._state)\n        except Exception as e:\n            self._error_callback(e)\n        self._call_later_handle = self._loop.call_later(self._interval, self._periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None",
            "def _periodic_callback(self):\n    try:\n        self.notify(self._state)\n    except Exception as e:\n        self._error_callback(e)\n    if self._subscriptions:\n        self._loop.call_later(self._interval, self._periodic_callback)\n    else:\n        self._state = NONE\n        self._call_later_handle = None",
            "def _periodic_callback(self):\n    try:\n        self.notify(self._state)\n    except Exception:\n        self._error_callback(*sys.exc_info())\n    self._call_later_handle = self._loop.call_later(self._interval, self._periodic_callback) if self._subscriptions else None\n    self._state = NONE if not self._subscriptions else self._state",
            "def _periodic_callback(self):\n    try:\n        self.notify(self._state)\n    except Exception as e:\n        self._error_callback(e)\n\n    if self._subscriptions:\n        self._call_later_handle = self._loop.call_later(self._interval, self._periodic_callback)\n    else:\n        self._call_later_handle = None\n        self._state = NONE"
        ]
    },
    {
        "id": 20,
        "prompt": "def predict(self, X, **kwargs):\n        \"\"\"Predict the closest cluster each sample in X belongs to.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            New data to predict.\n\n        Returns\n        -------\n        labels : array, shape [n_samples,]\n            Index of the cluster each sample belongs to.\n        \"\"\"",
        "code": "def predict(self, X, **kwargs):\n    distances = self._compute_distances(X)\n    return distances.argmin(axis=1)",
        "writer": "machine",
        "rewrite": [
            "def predict(self, X, **kwargs):\n    return self._compute_distances(X).argmin(axis=1)",
            "def predict(self, X, **kwargs):\n    return np.argmin(self._compute_distances(X), axis=1)",
            "def predict(self, X, **kwargs):\n    return np.apply_along_axis(np.argmin, axis=1, arr=self._compute_distances(X))",
            "def predict(self, X, **kwargs):\n    return [np.argmin(d) for d in self._compute_distances(X)]",
            "def predict(self, X, **kwargs):\n    return np.array([np.argmin(row) for row in self._compute_distances(X)])",
            "import numpy as np\n\ndef predict(self, X, **kwargs):\n    dist = self._compute_distances(X)\n    return np.array([np.argmin(i) for i in dist])"
        ]
    },
    {
        "id": 22,
        "prompt": "def append(self, decoration):\n        \"\"\"\n        Adds a text decoration on a CodeEdit instance\n\n        :param decoration: Text decoration to add\n        :type decoration: pyqode.core.api.TextDecoration\n        \"\"\"",
        "code": "def append(self, decoration):\n    \"\"\"\n    Adds a text decoration on a CodeEdit instance\n\n    :param decoration: Text decoration to add\n    :type decoration: pyqode.core.api.TextDecoration\n    \"\"\"\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
        "writer": "machine",
        "rewrite": [
            "def append(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
            "def add_decoration(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
            "def add_text_decoration(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
            "def decorate(self, dec):\n    self.decorations.append(dec)\n    self.document().addDecoration(dec)",
            "def apply_decoration(self, decoration):\n    self.decorations.append(decoration)\n    self.document().addDecoration(decoration)",
            "def add_code_decoration(self, deco):\n    self.decorations.append(deco)\n    self.document().addDecoration(deco)"
        ]
    },
    {
        "id": 19,
        "prompt": "def add_node(self, node):\n        \"\"\"Add an agent, connecting it to the previous node.\"\"\"",
        "code": "def add_node(self, node):\n    if not self.nodes:\n        self.nodes.append(node)\n    else:\n        prev_node = self.nodes[-1]\n        prev_node.next = node\n        node.prev = prev_node\n        self.nodes.append(node)",
        "writer": "machine",
        "rewrite": [
            "def add_node(self, node):\n    if not self.nodes:\n        self.nodes = [node]\n    else:\n        self.nodes[-1].next = node\n        node.prev = self.nodes[-1]\n        self.nodes.append(node)",
            "def add_node(self, node):\n    if self.nodes:\n        self.nodes[-1].next = node\n        node.prev = self.nodes[-1]\n    self.nodes.append(node)",
            "def add_node(self, node):\n    self.nodes.append(node)\n    if self.nodes and len(self.nodes) > 1:\n        node.prev = self.nodes[-2]\n        self.nodes[-2].next = node",
            "def add_node(self, node):\n    if self.nodes:\n        node.prev = self.nodes[-1]\n        self.nodes[-1].next = node\n    self.nodes.append(node)",
            "def add_node(self, node):\n    self.nodes += [node]\n    if len(self.nodes) > 1:\n        self.nodes[-2].next = node\n        node.prev = self.nodes[-2]",
            "def add_node(self, node):\n    if self.nodes:\n        self.nodes[-1].next = node\n        node.prev = self.nodes[-1]\n    self.nodes.append(node)"
        ]
    },
    {
        "id": 10,
        "prompt": "def c_getprocs(self):\n        \"\"\"Get the getprocs of the module.\"\"\"",
        "code": "def c_getprocs(self):\n        \"\"\"Get the getprocs of the module.\"\"\"\n        getprocs = []\n        for name, dummy_args in self.funcs:\n            if name == 'GetProcAddress':\n                if callable(self.opts.hash_func):\n                    continue\n                getter = 'get_proc_by_string'\n            elif self.opts.no_structs:\n                getter = 'GetProcAddress'\n            else:\n                getter = 'windll->kernel32.GetProcAddress'\n            if callable(self.opts.hash_func):\n                getter = 'get_proc_by_hash'\n            if self.opts.no_structs:\n                var = name\n            else:\n                var = 'windll->{}.{}'.format(self.name, name)\n            getproc = '{} = ({} *){}({}, {}{});\\n'.format(\n                var,\n                self._c_type_name(name),\n                getter,\n                self._c_base_var(),\n                self.opts.prefix, name\n            )\n            getprocs.append(getproc + self._c_null_check(var))\n        return getprocs",
        "writer": "human",
        "rewrite": [
            "def c_getprocs(self):\n    getprocs = []\n    for name, dummy_args in self.funcs:\n        getter = 'get_proc_by_string' if name == 'GetProcAddress' and not callable(self.opts.hash_func) else ('GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress')\n        getter = 'get_proc_by_hash' if callable(self.opts.hash_func) else getter\n        var = name if self.opts.no_structs else f'windll->{{}}.{{}}'.format(self.name, name)\n        getproc = f'{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n'\n        getprocs.append(getproc + self._c_null_check(var))\n    return getprocs",
            "def c_getprocs(self):\n    return [f\"{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n\" + self._c_null_check(var)\n            for name, _ in self.funcs\n            for getter in ([('get_proc_by_string' if name != 'GetProcAddress' or callable(self.opts.hash_func) else 'GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress')] if not callable(self.opts.hash_func) else ['get_proc_by_hash'])\n            for var in ([name] if self.opts.no_structs else [f'windll->{{}}.{{}}'.format(self.name, name)])]",
            "def c_getprocs(self):\n    getprocs = []\n    for name, _ in self.funcs:\n        if callable(self.opts.hash_func):\n            getter = 'get_proc_by_hash'\n            if name == 'GetProcAddress':\n                continue\n        elif name == 'GetProcAddress':\n            getter = 'get_proc_by_string'\n        elif self.opts.no_structs:\n            getter = 'GetProcAddress'\n        else:\n            getter = 'windll->kernel32.GetProcAddress'\n        var = name if self.opts.no_structs else f'windll->{{}}.{{}}'.format(self.name, name)\n        getproc = f'{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n'\n        getprocs.append(getproc + self._c_null_check(var))\n    return getprocs",
            "def c_getprocs(self):\n    result = []\n    for name, _ in self.funcs:\n        if callable(self.opts.hash_func):\n            if name == 'GetProcAddress':\n                continue\n            getter = 'get_proc_by_hash'\n        else:\n            getter = 'get_proc_by_string' if name == 'GetProcAddress' else 'GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress'\n        var = name if self.opts.no_structs else f'windll->{{}}.{{}}'.format(self.name, name)\n        line = f'{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n'\n        result.append(line + self._c_null_check(var))\n    return result",
            "def c_getprocs(self):\n    lines = []\n    for name, _ in self.funcs:\n        if callable(self.opts.hash_func):\n            if name == 'GetProcAddress': continue\n            getter = 'get_proc_by_hash'\n        else:\n            getter = 'get_proc_by_string' if name == 'GetProcAddress' else 'GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress'\n        var = name if self.opts.no_structs else f'windll->{{}}.{{}}'.format(self.name, name)\n        lines.append(f'{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n' + self._c_null_check(var))\n    return lines",
            "def c_getprocs(self):\n    return [f\"{var} = ({self._c_type_name(name)} *){getter}({self._c_base_var()}, {self.opts.prefix}{name});\\n{self._c_null_check(var)}\" for name, _ in self.funcs if not (name == 'GetProcAddress' and callable(self.opts.hash_func)) for getter in ([f\"{'get_proc_by_hash' if callable(self.opts.hash_func) else 'get_proc_by_string' if name == 'GetProcAddress' else 'GetProcAddress' if self.opts.no_structs else 'windll->kernel32.GetProcAddress'}\"] ) for var in ([name if self.opts.no_structs else f\"windll->{{}}.{{}}\".format(self.name, name)])]"
        ]
    },
    {
        "id": 23,
        "prompt": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"",
        "code": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"\n    t = Transliterator(source_lang=self.language,\n                       target_lang=target_language)\n    return t.transliterate(self.string)",
        "writer": "human",
        "rewrite": [
            "def transliterate(self, target_language=\"en\"):\n    return Transliterator(source_lang=self.language, target_lang=target_language).transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    return Transliterator(self.language, target_language).transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    return Transliterator(source_lang=self.language, target_lang=target_language).transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    return Transliterator(self.language, target_language).transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    return Transliterator(source_lang=self.language, target_lang=target_language).transliterate(self.string)",
            "def transliterate(self, target_language=\"en\"):\n    return Transliterator(self.language, target_language).transliterate(self.string)"
        ]
    },
    {
        "id": 14,
        "prompt": "def _count_extra_actions(self, game_image):\n        \"\"\"Count the number of extra actions for player in this turn.\"\"\"",
        "code": "def _count_extra_actions(self, game_image):\n        \"\"\"Count the number of extra actions for player in this turn.\"\"\"\n        proportional = self._bonus_tools['extra_action_region']\n        # Use ProportionalRegion to isolate the extra actions area\n        t, l, b, r = proportional.region_in(game_image)\n        token_region = game_image[t:b, l:r]\n        # Use TemplateFinder (multiple) to check for extra actions\n        game_h, game_w = game_image.shape[0:2]\n        token_h = int(round(game_h * 27.0 / 960))\n        token_w = int(round(game_w * 22.0 / 1280))\n        sizes = (token_h, token_w),\n        # sizes change every time so just remake it.\n        # thresholds are tight since need to count conservatively\n        finder = v.TemplateFinder(pq_data.extra_action_template,\n                                  sizes=sizes,\n                                  acceptable_threshold=0.1,\n                                  immediate_threshold=0.1)\n        found_tokens = finder.locate_multiple_in(token_region)\n        return len(found_tokens)",
        "writer": "human",
        "rewrite": [
            "def _count_extra_actions(self, game_image):\n    t, l, b, r = self._bonus_tools['extra_action_region'].region_in(game_image)\n    token_region = game_image[t:b, l:r]\n    game_h, game_w = game_image.shape[:2]\n    token_h = int(round(game_h * 27 / 960))\n    token_w = int(round(game_w * 22 / 1280))\n    finder = v.TemplateFinder(pq_data.extra_action_template, sizes=((token_h, token_w),), acceptable_threshold=0.1, immediate_threshold=0.1)\n    return len(finder.locate_multiple_in(token_region))",
            "def _count_extra_actions(self, game_image):\n    region = self._bonus_tools['extra_action_region'].region_in(game_image)\n    token_region = game_image[region[0]:region[2], region[1]:region[3]]\n    game_h, game_w = game_image.shape[:2]\n    token_size = (int(round(game_h * 27 / 960)), int(round(game_w * 22 / 1280)))\n    finder = v.TemplateFinder(pq_data.extra_action_template, sizes=(token_size,), acceptable_threshold=0.1, immediate_threshold=0.1)\n    return len(finder.locate_multiple_in(token_region))",
            "def _count_extra_actions(self, game_image):\n    top, left, bottom, right = self._bonus_tools['extra_action_region'].region_in(game_image)\n    region = game_image[top:bottom, left:right]\n    height, width = game_image.shape[:2]\n    template_height = int(round(height * 27 / 960))\n    template_width = int(round(width * 22 / 1280))\n    finder = v.TemplateFinder(pq_data.extra_action_template, sizes=((template_height, template_width),), acceptable_threshold=0.1, immediate_threshold=0.1)\n    return len(finder.locate_multiple_in(region))",
            "def _count_extra_actions(self, game_image):\n    rect = self._bonus_tools['extra_action_region'].region_in(game_image)\n    roi = game_image[rect[0]:rect[2], rect[1]:rect[3]]\n    h, w = game_image.shape[:2]\n    size = (int(round(h * 27 / 960)), int(round(w * 22 / 1280)))\n    finder = v.TemplateFinder(pq_data.extra_action_template, sizes=(size,), acceptable_threshold=0.1, immediate_threshold=0.1)\n    return len(finder.locate_multiple_in(roi))",
            "def count_extra_actions(game_image, extra_action_region, extra_action_template):\n    t, l, b, r = extra_action_region.region_in(game_image)\n    region = game_image[t:b, l:r]\n    h, w = game_image.shape[:2]\n    size = (int(round(h * 27 / 960)), int(round(w * 22 / 1280)))\n    finder = v.TemplateFinder(extra_action_template, sizes=(size,), acceptable_threshold=0.1, immediate_threshold=0.1)\n    return len(finder.locate_multiple_in(region))",
            "def count_extra_actions(game_image, extra_action_region, extra_action_template):\n    top, left, bottom, right = extra_action_region.region_in(game_image)\n    cropped_image = game_image[top:bottom, left:right]\n    height, width = game_image.shape[:2]\n    template_size = (int(round(height * 27 / 960)), int(round(width * 22 / 1280)))\n    finder = v.TemplateFinder(extra_action_template, sizes=(template_size,), acceptable_threshold=0.1, immediate_threshold=0.1)\n    return len(finder.locate_multiple_in(cropped_image))"
        ]
    },
    {
        "id": 22,
        "prompt": "def append(self, decoration):\n        \"\"\"\n        Adds a text decoration on a CodeEdit instance\n\n        :param decoration: Text decoration to add\n        :type decoration: pyqode.core.api.TextDecoration\n        \"\"\"",
        "code": "def append(self, decoration):\n        \"\"\"\n        Adds a text decoration on a CodeEdit instance\n\n        :param decoration: Text decoration to add\n        :type decoration: pyqode.core.api.TextDecoration\n        \"\"\"\n        if decoration not in self._decorations:\n            self._decorations.append(decoration)\n            self._decorations = sorted(\n                self._decorations, key=lambda sel: sel.draw_order)\n            self.editor.setExtraSelections(self._decorations)\n            return True\n        return False",
        "writer": "human",
        "rewrite": [
            "def append(self, decoration):\n    if decoration not in self._decorations:\n        self._decorations.append(decoration)\n        self._decorations.sort(key=lambda sel: sel.draw_order)\n        self.editor.setExtraSelections(self._decorations)\n        return True\n    return False",
            "def append(self, decoration):\n    try:\n        self._decorations.remove(decoration)\n    except ValueError:\n        pass\n    self._decorations.append(decoration)\n    self._decorations.sort(key=lambda d: d.draw_order)\n    self.editor.setExtraSelections(self._decorations)\n    return True",
            "def append(self, decoration):\n    if decoration in self._decorations: return False\n    self._decorations.append(decoration)\n    self._decorations.sort(key=lambda x: x.draw_order)\n    self.editor.setExtraSelections(self._decorations)\n    return True",
            "def append(self, decoration):\n    self._decorations.append(decoration)\n    self._decorations.sort(key=lambda x: x.draw_order)\n    self.editor.setExtraSelections(self._decorations)\n    return len(self._decorations) == 1",
            "def append(self, decoration):\n    added = decoration not in self._decorations\n    if added:\n        self._decorations.append(decoration)\n        self._decorations.sort(key=lambda x: x.draw_order)\n        self.editor.setExtraSelections(self._decorations)\n    return added",
            "def append(self, decoration):\n    self._decorations.append(decoration)\n    self._decorations.sort(key=lambda x: x.draw_order)\n    self.editor.setExtraSelections(self._decorations)\n    return True"
        ]
    },
    {
        "id": 19,
        "prompt": "def add_node(self, node):\n        \"\"\"Add an agent, connecting it to the previous node.\"\"\"",
        "code": "def add_node(self, node):\n        \"\"\"Add an agent, connecting it to the previous node.\"\"\"\n        other_nodes = [n for n in self.nodes() if n.id != node.id]\n\n        if isinstance(node, Source) and other_nodes:\n            raise(Exception(\"Chain network already has a nodes, \"\n                            \"can't add a source.\"))\n\n        if other_nodes:\n            parent = max(other_nodes, key=attrgetter('creation_time'))\n            parent.connect(whom=node)",
        "writer": "human",
        "rewrite": [
            "def add_node(self, node):\n        if isinstance(node, Source) and any(n for n in self.nodes() if n.id != node.id):\n            raise Exception(\"Chain network already has nodes, can't add a source.\")\n        if self.nodes():\n            max(self.nodes(), key=attrgetter('creation_time')).connect(whom=node)",
            "def add_node(self, node):\n    if isinstance(node, Source) and list(self.nodes()):\n        raise Exception(\"Chain network already has nodes, can't add a source.\")\n    if self.nodes():\n        max(self.nodes(), key=lambda n: n.creation_time).connect(whom=node)",
            "def add_node(self, node):\n    if isinstance(node, Source) and len(list(self.nodes())) > 0:\n        raise Exception(\"Chain network already has nodes, can't add a source.\")\n    if len(list(self.nodes())) > 0:\n        max(self.nodes(), key=lambda n: n.creation_time).connect(whom=node)",
            "def add_node(self, node):\n    nodes = list(self.nodes())\n    if isinstance(node, Source) and nodes:\n        raise Exception(\"Chain network already has nodes, can't add a source.\")\n    if nodes:\n        nodes.sort(key=lambda n: n.creation_time, reverse=True)\n        nodes[0].connect(whom=node)",
            "def add_node(self, node):\n    if isinstance(node, Source) and list(self.nodes()):\n        raise Exception(\"Cannot add source to non-empty network.\")\n    if self.nodes():\n        latest_node = max(self.nodes(), key=lambda n: n.creation_time)\n        latest_node.connect(whom=node)",
            "def add_node(self, node):\n    if isinstance(node, Source) and self.nodes():\n        raise Exception(\"Cannot add source node to existing network.\")\n    if self.nodes():\n        last_node = sorted(self.nodes(), key=lambda x: x.creation_time)[-1]\n        last_node.connect(whom=node)"
        ]
    },
    {
        "id": 4,
        "prompt": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n        \"\"\"\n        Create a new UserObject from the given template.\n\n        :param configuration:  EB configuration to use\n        :param tpl: CreateUserObject template, contain misc settings\n        :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n        :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n        :return: UO - user object ready to use\n        \"\"\"",
        "code": "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n        \"\"\"\n        Create a new UserObject from the given template.\n\n        :param configuration:  EB configuration to use\n        :param tpl: CreateUserObject template, contain misc settings\n        :param keys: dictionary of keys, create_uo.KeyTypes. Communication keys, application key (if applicable).\n        :param obj_type: optional field for easy object type entry - required flags are computed from keys dict and tpl.\n        :return: UO - user object ready to use\n        \"\"\"\n        if configuration is not None:\n            self.configuration = configuration\n        if tpl is not None:\n            self.tpl = tpl\n        if keys is not None:\n            self.keys = keys\n        if self.keys is None:\n            self.keys = dict()\n\n        # generate comm keys if not present\n        TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n\n        # obj_type infer\n        if obj_type is not None:\n            tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n            self.tpl = CreateUO.set_type(self.tpl if self.tpl is not None else dict(), tpl_type)\n\n        # Create template specifications, using local config and defaults.\n        spec = CreateUO.get_template_request_spec(self.configuration)\n        if self.tpl is not None:\n            if isinstance(self.tpl, dict):\n                spec = EBUtils.update(spec, self.tpl)\n            else:\n                raise ValueError('Unknown tpl format')\n\n        # Fetch template for new UO.\n        tpl_resp = CreateUO.template_request(self.configuration, spec)\n\n        # Process the template, fill in the keys, do the crypto\n        tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n        tpl_req = tpl_processor.process()\n\n        # Import the initialized UO\n        self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n\n        # Build UO\n        uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req,\n                                            import_resp=self.import_resp)\n        return uo",
        "writer": "human",
        "rewrite": [
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    self.configuration = configuration or self.configuration\n    self.tpl = tpl or self.tpl\n    self.keys = keys or self.keys or {}\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n    if obj_type:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl or {}, tpl_type)\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl:\n        if isinstance(self.tpl, dict):\n            spec.update(self.tpl)\n        else:\n            raise ValueError('Unknown tpl format')\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req, import_resp=self.import_resp)\n    return uo",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    self.configuration = configuration or self.configuration\n    self.tpl = tpl or self.tpl\n    self.keys = keys or self.keys or {}\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n    if obj_type:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl or {}, tpl_type)\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl:\n        if isinstance(self.tpl, dict):\n            spec.update(self.tpl)\n        else:\n            raise ValueError(\"Unknown tpl format\")\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req, import_resp=self.import_resp)\n    return uo",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    self.configuration = configuration or self.configuration\n    self.tpl = tpl or self.tpl\n    self.keys = keys or self.keys or {}\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n    if obj_type:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl or {}, tpl_type)\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl:\n        if isinstance(self.tpl, dict):\n            spec.update(self.tpl)\n        else:\n            raise ValueError(\"Unknown tpl format\")\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req, import_resp=self.import_resp)\n    return uo",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    self.configuration = configuration or self.configuration\n    self.tpl = tpl or self.tpl\n    self.keys = keys or self.keys or {}\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n    if obj_type:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl or {}, tpl_type)\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl:\n        if isinstance(self.tpl, dict):\n            spec.update(self.tpl)\n        else:\n            raise ValueError('Unknown tpl format')\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req, import_resp=self.import_resp)\n    return uo",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    self.configuration = configuration or self.configuration\n    self.tpl = tpl or self.tpl\n    self.keys = keys or self.keys or {}\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n    if obj_type:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl or {}, tpl_type)\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl:\n        if isinstance(self.tpl, dict):\n            spec.update(self.tpl)\n        else:\n            raise ValueError('Unknown tpl format')\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req, import_resp=self.import_resp)\n    return uo",
            "def create_uo(self, configuration=None, tpl=None, keys=None, obj_type=None):\n    self.configuration = configuration or self.configuration\n    self.tpl = tpl or self.tpl\n    self.keys = keys or self.keys or {}\n    TemplateProcessor.generate_comm_keys_if_not_present(self.keys)\n    if obj_type:\n        tpl_type = CreateUO.get_uo_type(obj_type, KeyTypes.COMM_ENC in self.keys, KeyTypes.APP_KEY in self.keys)\n        self.tpl = CreateUO.set_type(self.tpl or {}, tpl_type)\n    spec = CreateUO.get_template_request_spec(self.configuration)\n    if self.tpl:\n        if isinstance(self.tpl, dict):\n            spec.update(self.tpl)\n        else:\n            raise ValueError('Unknown tpl format')\n    tpl_resp = CreateUO.template_request(self.configuration, spec)\n    tpl_processor = TemplateProcessor(configuration=self.configuration, keys=self.keys, tpl_response=tpl_resp)\n    tpl_req = tpl_processor.process()\n    self.import_resp = CreateUO.import_object(configuration=self.configuration, tpl=tpl_req)\n    uo = CreateUO.build_imported_object(configuration=self.configuration, tpl_import_req=tpl_req, import_resp=self.import_resp)\n    return uo"
        ]
    },
    {
        "id": 1,
        "prompt": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"",
        "code": "def hydrophobic_interactions(atom_set_a, atom_set_b):\n    \"\"\"Detection of hydrophobic pliprofiler between atom_set_a (binding site) and atom_set_b (ligand).\n    Definition: All pairs of qualified carbon atoms within a distance of HYDROPH_DIST_MAX\n    \"\"\"\n    data = namedtuple('hydroph_interaction', 'bsatom bsatom_orig_idx ligatom ligatom_orig_idx '\n                                             'distance restype resnr reschain restype_l, resnr_l, reschain_l')\n    pairings = []\n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx:\n            continue\n        e = euclidean3d(a.atom.coords, b.atom.coords)\n        if not config.MIN_DIST < e < config.HYDROPH_DIST_MAX:\n            continue\n        restype, resnr, reschain = whichrestype(a.atom), whichresnumber(a.atom), whichchain(a.atom)\n        restype_l, resnr_l, reschain_l = whichrestype(b.orig_atom), whichresnumber(b.orig_atom), whichchain(b.orig_atom)\n        contact = data(bsatom=a.atom, bsatom_orig_idx=a.orig_idx, ligatom=b.atom, ligatom_orig_idx=b.orig_idx,\n                       distance=e, restype=restype, resnr=resnr,\n                       reschain=reschain, restype_l=restype_l,\n                       resnr_l=resnr_l, reschain_l=reschain_l)\n        pairings.append(contact)\n    return filter_contacts(pairings)",
        "writer": "human",
        "rewrite": [
            "from collections import namedtuple\nimport itertools\nfrom scipy.spatial.distance import euclidean as euclidean3d\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    data = namedtuple('hydroph_interaction', 'bsatom bsatom_orig_idx ligatom ligatom_orig_idx distance restype resnr reschain restype_l resnr_l reschain_l')\n    pairings = []\n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx:\n            continue\n        dist = euclidean3d(a.atom.coords, b.atom.coords)\n        if not config.MIN_DIST < dist < config.HYDROPH_DIST_MAX:\n            continue\n        restype, resnr, reschain = whichrestype(a.atom), whichresnumber(a.atom), whichchain(a.atom)\n        restype_l, resnr_l, reschain_l = whichrestype(b.orig_atom), whichresnumber(b.orig_atom), whichchain(b.orig_atom)\n        contact = data(bsatom=a.atom, bsatom_orig_idx=a.orig_idx, ligatom=b.atom, ligatom_orig_idx=b.orig_idx, distance=dist, restype=restype, resnr=resnr, reschain=reschain, restype_l=restype_l, resnr_l=resnr_l, reschain_l=reschain_l)\n        pairings.append(contact)\n    return pairings",
            "from collections import namedtuple\nimport itertools\nfrom scipy.spatial.distance import euclidean as euclidean3d\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    data = namedtuple('HydroInteraction', ['bsatom', 'bsatom_orig_idx', 'ligatom', 'ligatom_orig_idx', 'distance', 'restype', 'resnr', 'reschain', 'restype_l', 'resnr_l', 'reschain_l'])\n    interactions = []\n    for atom_a, atom_b in itertools.product(atom_set_a, atom_set_b):\n        if atom_a.orig_idx == atom_b.orig_idx:\n            continue\n        distance = euclidean3d(atom_a.atom.coords, atom_b.atom.coords)\n        if not config.MIN_DIST < distance < config.HYDROPH_DIST_MAX:\n            continue\n        restype_a, resnr_a, reschain_a = whichrestype(atom_a.atom), whichresnumber(atom_a.atom), whichchain(atom_a.atom)\n        restype_b, resnr_b, reschain_b = whichrestype(atom_b.atom), whichresnumber(atom_b.atom), whichchain(atom_b.atom)\n        interaction = data(atom_a.atom, atom_a.orig_idx, atom_b.atom, atom_b.orig_idx, distance, restype_a, resnr_a, reschain_a, restype_b, resnr_b, reschain_b)\n        interactions.append(interaction)\n    return filter_contacts(interactions)",
            "from collections import namedtuple\nimport itertools\nfrom scipy.spatial.distance import euclidean as euclidean3d\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    interaction_data = namedtuple('Interaction', ['bsatom', 'bsatom_idx', 'ligatom', 'ligatom_idx', 'distance', 'bs_restype', 'bs_resnr', 'bs_reschain', 'lig_restype', 'lig_resnr', 'lig_reschain'])\n    interactions = []\n    for atom_a, atom_b in itertools.product(atom_set_a, atom_set_b):\n        if atom_a.orig_idx == atom_b.orig_idx:\n            continue\n        dist = euclidean3d(atom_a.atom.coords, atom_b.atom.coords)\n        if not config.MIN_DIST < dist < config.HYDROPH_DIST_MAX:\n            continue\n        bs_restype, bs_resnr, bs_reschain = whichrestype(atom_a.atom), whichresnumber(atom_a.atom), whichchain(atom_a.atom)\n        lig_restype, lig_resnr, lig_reschain = whichrestype(atom_b.atom), whichresnumber(atom_b.atom), whichchain(atom_b.atom)\n        interaction = interaction_data(atom_a.atom, atom_a.orig_idx, atom_b.atom, atom_b.orig_idx, dist, bs_restype, bs_resnr, bs_reschain, lig_restype, lig_resnr, lig_reschain)\n        interactions.append(interaction)\n    return filter_contacts(interactions)",
            "from collections import namedtuple\nimport itertools\nfrom scipy.spatial.distance import euclidean as euclidean3d\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    Interaction = namedtuple(\"Interaction\", [\"bsatom\", \"bsatom_idx\", \"ligatom\", \"ligatom_idx\", \"distance\", \"bs_type\", \"bs_num\", \"bs_chain\", \"lig_type\", \"lig_num\", \"lig_chain\"])\n    interactions = []\n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx:\n            continue\n        dist = euclidean3d(a.atom.coords, b.atom.coords)\n        if not config.MIN_DIST < dist < config.HYDROPH_DIST_MAX:\n            continue\n        bs_type, bs_num, bs_chain = whichrestype(a.atom), whichresnumber(a.atom), whichchain(a.atom)\n        lig_type, lig_num, lig_chain = whichrestype(b.orig_atom), whichresnumber(b.orig_atom), whichchain(b.orig_atom)\n        interaction = Interaction(a.atom, a.orig_idx, b.atom, b.orig_idx, dist, bs_type, bs_num, bs_chain, lig_type, lig_num, lig_chain)\n        interactions.append(interaction)\n    return filter_contacts(interactions)",
            "from collections import namedtuple\nimport itertools\nfrom scipy.spatial.distance import euclidean\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    Interaction = namedtuple(\"Interaction\", [\"bs_atom\", \"bs_index\", \"lig_atom\", \"lig_index\", \"distance\", \"bs_res_type\", \"bs_res_num\", \"bs_chain\", \"lig_res_type\", \"lig_res_num\", \"lig_chain\"])\n    interactions = []\n    for atom_a, atom_b in itertools.product(atom_set_a, atom_set_b):\n        if atom_a.orig_idx == atom_b.orig_idx:\n            continue\n        distance = euclidean(atom_a.atom.coords, atom_b.atom.coords)\n        if not config.MIN_DIST < distance < config.HYDROPH_DIST_MAX:\n            continue\n        bs_res_type, bs_res_num, bs_chain = whichrestype(atom_a.atom), whichresnumber(atom_a.atom), whichchain(atom_a.atom)\n        lig_res_type, lig_res_num, lig_chain = whichrestype(atom_b.atom), whichresnumber(atom_b.atom), whichchain(atom_b.atom)\n        interaction = Interaction(atom_a.atom, atom_a.orig_idx, atom_b.atom, atom_b.orig_idx, distance, bs_res_type, bs_res_num, bs_chain, lig_res_type, lig_res_num, lig_chain)\n        interactions.append(interaction)\n    return filter_contacts(interactions)",
            "from collections import namedtuple\nimport itertools\nfrom scipy.spatial.distance import euclidean\n\ndef hydrophobic_interactions(atom_set_a, atom_set_b):\n    Interaction = namedtuple(\"Interaction\", [\"bs_atom\", \"bs_idx\", \"lig_atom\", \"lig_idx\", \"distance\", \"bs_type\", \"bs_num\", \"bs_chain\", \"lig_type\", \"lig_num\", \"lig_chain\"])\n    interactions = []\n    for a, b in itertools.product(atom_set_a, atom_set_b):\n        if a.orig_idx == b.orig_idx: continue\n        d = euclidean(a.atom.coords, b.atom.coords)\n        if not config.MIN_DIST < d < config.HYDROPH_DIST_MAX: continue\n        bs_type, bs_num, bs_chain = whichrestype(a.atom), whichresnumber(a.atom), whichchain(a.atom)\n        lig_type, lig_num, lig_chain = whichrestype(b.orig_atom), whichresnumber(b.orig_atom), whichchain(b.orig_atom)\n        interaction = Interaction(a.atom, a.orig_idx, b.atom, b.orig_idx, d, bs_type, bs_num, bs_chain, lig_type, lig_num, lig_chain)\n        interactions.append(interaction)\n    return filter_contacts(interactions)"
        ]
    },
    {
        "id": 23,
        "prompt": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"",
        "code": "def transliterate(self, target_language=\"en\"):\n    \"\"\"Transliterate the string to the target language.\"\"\"\n    from unidecode import unidecode\n    \n    if target_language.lower() == \"en\":\n        return unidecode(self)\n    else:\n        raise ValueError(\"Transliteration to languages other than English is not supported.\")",
        "writer": "machine",
        "rewrite": [
            "def transliterate(self, target_language=\"en\"):\n    from unidecode import unidecode\n    if target_language.lower() == \"en\": return unidecode(self)\n    raise ValueError(\"Transliteration to languages other than English is not supported.\")",
            "def transliterate(text, target_language=\"en\"):\n    from unidecode import unidecode\n    if target_language.lower() == \"en\":\n        return unidecode(text)\n    raise ValueError(\"Only English transliteration is supported.\")",
            "def transliterate(text, target_language='en'):\n  try:\n    from unidecode import unidecode\n    if target_language.lower() == 'en':\n      return unidecode(text)\n    else:\n      return text\n  except ImportError:\n    return text",
            "def transliterate(text, target_language=\"en\"):\n    from unidecode import unidecode\n    return unidecode(text) if target_language.lower() == \"en\" else text",
            "def transliterate(text, target_language='en'):\n    try:\n        from unidecode import unidecode\n        return unidecode(text) if target_language.lower()=='en' else text\n    except ImportError:\n        return text",
            "def transliterate(text, target_language=\"en\"):\n    try:\n        from unidecode import unidecode\n        return unidecode(text) if target_language.lower() == \"en\" else text\n    except ImportError:\n        return text"
        ]
    },
    {
        "id": 20,
        "prompt": "def predict(self, X, **kwargs):\n        \"\"\"Predict the closest cluster each sample in X belongs to.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            New data to predict.\n\n        Returns\n        -------\n        labels : array, shape [n_samples,]\n            Index of the cluster each sample belongs to.\n        \"\"\"",
        "code": "def predict(self, X, **kwargs):\n        \"\"\"Predict the closest cluster each sample in X belongs to.\n\n        Parameters\n        ----------\n        X : array-like, shape = [n_samples, n_features]\n            New data to predict.\n\n        Returns\n        -------\n        labels : array, shape [n_samples,]\n            Index of the cluster each sample belongs to.\n        \"\"\"\n\n        assert hasattr(self, '_enc_cluster_centroids'), \"Model not yet fitted.\"\n\n        if self.verbose and self.cat_dissim == ng_dissim:\n            print(\"Ng's dissimilarity measure was used to train this model, \"\n                  \"but now that it is predicting the model will fall back to \"\n                  \"using simple matching dissimilarity.\")\n\n        X = pandas_to_numpy(X)\n        X = check_array(X, dtype=None)\n        X, _ = encode_features(X, enc_map=self._enc_map)\n        return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
        "writer": "human",
        "rewrite": [
            "def predict(self, X, **kwargs):\n    assert hasattr(self, '_enc_cluster_centroids')\n    if self.verbose and self.cat_dissim == ng_dissim:\n        print(\"Ng's dissimilarity measure was used to train this model, but now that it is predicting the model will fall back to using simple matching dissimilarity.\")\n    X = pandas_to_numpy(X)\n    X = check_array(X, dtype=None)\n    X, _ = encode_features(X, enc_map=self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
            "def predict(self, X, **kwargs):\n    if not hasattr(self, '_enc_cluster_centroids'):\n        raise Exception(\"Model not yet fitted.\")\n    if self.verbose and self.cat_dissim is ng_dissim:\n        print(\"Ng's dissimilarity measure was used to train this model, but now that it is predicting the model will fall back to using simple matching dissimilarity.\")\n    X = np.array(X) if isinstance(X, pd.DataFrame) else X\n    X = check_array(X, dtype=None)\n    X, _ = encode_features(X, enc_map=self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
            "def predict(self, X, **kwargs):\n    if not hasattr(self, '_enc_cluster_centroids'): raise RuntimeError(\"Model not fitted\")\n    if self.verbose and self.cat_dissim is ng_dissim: print(\"Warning: Switching to simple matching dissimilarity for prediction.\")\n    X = np.asarray(X)\n    X = check_array(X)\n    X, _ = encode_features(X, self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
            "def predict(self, X, **kwargs):\n    if not self._enc_cluster_centroids: raise RuntimeError(\"Model not fitted.\")\n    if self.verbose and self.cat_dissim == ng_dissim: print(\"Using simple matching dissimilarity for prediction.\")\n    X = np.array(X)\n    X = check_array(X, dtype=float)\n    X, _ = encode_features(X, self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
            "def predict(self, X, **kwargs):\n    if not hasattr(self, '_enc_cluster_centroids'): raise ValueError(\"Model not fitted.\")\n    if self.verbose and self.cat_dissim is ng_dissim:  print(\"Falling back to simple matching dissimilarity for prediction.\")\n    X = np.array(X)\n    X = check_array(X)\n    X, _ = encode_features(X, self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]",
            "def predict(self, X, **kwargs):\n    if not hasattr(self, '_enc_cluster_centroids'):\n        raise ValueError(\"Model not fitted\")\n    if self.verbose and self.cat_dissim == ng_dissim:\n        print(\"Warning: Using simple matching dissimilarity for prediction.\")\n    X = np.asarray(X)\n    X = check_array(X)\n    X, _ = encode_features(X, enc_map=self._enc_map)\n    return _labels_cost(X, self._enc_cluster_centroids, self.cat_dissim)[0]"
        ]
    },
    {
        "id": 27,
        "prompt": "def clean(self, value):\n\t\t\"\"\"Clean\n\n\t\tUses the valid method to check which type the value is, and then calls\n\t\tthe correct version of clean on that node\n\n\t\tArguments:\n\t\t\tvalue {mixed} -- The value to clean\n\n\t\tReturns:\n\t\t\tmixed\n\t\t\"\"\"",
        "code": "def clean(self, value):\n\t\t\"\"\"Clean\n\n\t\tUses the valid method to check which type the value is, and then calls\n\t\tthe correct version of clean on that node\n\n\t\tArguments:\n\t\t\tvalue {mixed} -- The value to clean\n\n\t\tReturns:\n\t\t\tmixed\n\t\t\"\"\"\n\n\t\t# If the value is None and it's optional, return as is\n\t\tif value is None and self._optional:\n\t\t\treturn None\n\n\t\t# Go through each of the nodes\n\t\tfor i in range(len(self._nodes)):\n\n\t\t\t# If it's valid\n\t\t\tif self._nodes[i].valid(value):\n\n\t\t\t\t# Use it's clean\n\t\t\t\treturn self._nodes[i].clean(value)\n\n\t\t# Something went wrong\n\t\traise ValueError('value', value)",
        "writer": "human",
        "rewrite": [
            "def clean(self, value):\n    if value is None and self._optional:\n        return None\n    for node in self._nodes:\n        if node.valid(value):\n            return node.clean(value)\n    raise ValueError('value', value)",
            "def clean(self, value):\n    if value is None and self._optional: return None\n    for node in self._nodes:\n        if node.valid(value): return node.clean(value)\n    raise ValueError('value', value)",
            "def clean(self, value):\n    if value is None and self._optional: return None\n    try:\n        return next(node.clean(value) for node in self._nodes if node.valid(value))\n    except StopIteration:\n        raise ValueError('value', value)",
            "def clean(self, value):\n    if value is None and self._optional: return None\n    for node in self._nodes:\n        if node.valid(value): return node.clean(value)\n    raise ValueError(f\"Invalid value: {value}\")",
            "def clean(self, value):\n    if value is None and self._optional:\n        return None\n    cleaned_value = next((node.clean(value) for node in self._nodes if node.valid(value)), None)\n    if cleaned_value is None:\n        raise ValueError(\"Invalid value: {value}\")\n    return cleaned_value",
            "def clean(self, value):\n    if value is None and self._optional: return None\n    return next((node.clean(value) for node in self._nodes if node.valid(value)), None) or ValueError(\"Invalid value\")"
        ]
    },
    {
        "id": 28,
        "prompt": "def _co_names_from_config(self):\n        \"\"\"\n        Parse the configuration for the names of the COs for which to\n        construct virtual IdPs.\n\n        :rtype: [str]\n\n        :return: list of CO names\n        \"\"\"",
        "code": "def _co_names_from_config(self):\n    co_names = []\n    if 'CO_NAMES' in self.config:\n        co_names = self.config['CO_NAMES'].split(',')\n    return [name.strip() for name in co_names]",
        "writer": "machine",
        "rewrite": [
            "def _co_names_from_config(self):\n    return [name.strip() for name in self.config.get('CO_NAMES', '').split(',')]",
            "def _co_names_from_config(self):\n    return [n.strip() for n in self.config.get('CO_NAMES', '').split(',') if n.strip()]",
            "def _co_names_from_config(self):\n    try:\n        return [name.strip() for name in self.config['CO_NAMES'].split(',')]\n    except KeyError:\n        return []",
            "def _co_names_from_config(self):\n    return [x.strip() for x in self.config.get('CO_NAMES', '').split(',') if x]",
            "def _co_names_from_config(self):\n    co_names = self.config.get('CO_NAMES', '')\n    return list(map(str.strip, co_names.split(',')))",
            "def _co_names_from_config(self):\n    return list(map(str.strip, self.config.get('CO_NAMES', '').split(',')))"
        ]
    },
    {
        "id": 26,
        "prompt": "def flatten(obj, isinstance=isinstance, StringTypes=StringTypes,\n            SequenceTypes=SequenceTypes, do_flatten=do_flatten):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"",
        "code": "def flatten(obj, isinstance=isinstance, StringTypes=StringTypes,\n            SequenceTypes=SequenceTypes, do_flatten=do_flatten):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"\n    if isinstance(obj, StringTypes) or not isinstance(obj, SequenceTypes):\n        return [obj]\n    result = []\n    for item in obj:\n        if isinstance(item, StringTypes) or not isinstance(item, SequenceTypes):\n            result.append(item)\n        else:\n            do_flatten(item, result)\n    return result",
        "writer": "human",
        "rewrite": [
            "def flatten(obj):\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    result = []\n    for item in obj:\n        if isinstance(item, str) or not isinstance(item, (list, tuple)):\n            result.append(item)\n        else:\n            result.extend(flatten(item))\n    return result",
            "def flatten(obj):\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    flat_list = []\n    for sublist in obj:\n        if isinstance(sublist, (list, tuple)):\n            flat_list.extend(flatten(sublist))\n        else:\n            flat_list.append(sublist)\n    return flat_list",
            "def flatten(obj):\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    flat_list = []\n    for item in obj:\n        flat_list.extend(flatten(item)) if isinstance(item, (list, tuple)) else flat_list.append(item)\n    return flat_list",
            "def flatten(obj):\n    if isinstance(obj, str) or not isinstance(obj, (list, tuple)):\n        return [obj]\n    return [item for sublist in obj for item in flatten(sublist) if isinstance(sublist, (list, tuple)) ] + [item for item in obj if not isinstance(item,(list,tuple))]",
            "def flatten(iterable):\n    for item in iterable:\n        if isinstance(item, (list, tuple)):\n            yield from flatten(item)\n        elif isinstance(item, str):\n            yield item\n        else:\n            yield item",
            "def flatten(x):\n    if isinstance(x, (str, bytes)):\n        return [x]\n    if isinstance(x, (list, tuple)):\n        return [item for sub in x for item in flatten(sub)]\n    return [x]"
        ]
    },
    {
        "id": 30,
        "prompt": "def add_router(self, path, router):\n        \"\"\"\n        Add a (regex, router) pair to this router. Any req.path that\n        matches the regex will pass the request/response objects to\n        that router.\n        \"\"\"",
        "code": "def add_router(self, path, router):\n    \"\"\"\n    Add a (regex, router) pair to this router. Any req.path that\n    matches the regex will pass the request/response objects to\n    that router.\n    \"\"\"\n    self.routers.append((re.compile(path), router))",
        "writer": "machine",
        "rewrite": [
            "def add_router(self, path, router):\n    self.routers.append((re.compile(path), router))",
            "def add_router(self, path, router):\n    self.routers.append((re.compile(path), router))",
            "def add_router(self, path, router):\n    self.routers.append((re.compile(path), router))",
            "def add_router(self, path, router):\n    compiled_path = re.compile(path)\n    self.routers.append((compiled_path, router))",
            "def add_router(self, path, router):\n    try:\n        compiled_path = re.compile(path)\n        self.routers.append((compiled_path, router))\n    except re.error:\n        pass",
            "def add_router(self, path, router):\n    self.routers.append((path, router))"
        ]
    },
    {
        "id": 28,
        "prompt": "def _co_names_from_config(self):\n        \"\"\"\n        Parse the configuration for the names of the COs for which to\n        construct virtual IdPs.\n\n        :rtype: [str]\n\n        :return: list of CO names\n        \"\"\"",
        "code": "def _co_names_from_config(self):\n        \"\"\"\n        Parse the configuration for the names of the COs for which to\n        construct virtual IdPs.\n\n        :rtype: [str]\n\n        :return: list of CO names\n        \"\"\"\n        co_names = [co[self.KEY_ENCODEABLE_NAME] for\n                    co in self.config[self.KEY_CO]]\n\n        return co_names",
        "writer": "human",
        "rewrite": [
            "def _co_names_from_config(self):\n    return [co[self.KEY_ENCODEABLE_NAME] for co in self.config.get(self.KEY_CO, [])]",
            "def _co_names_from_config(self):\n    try:\n        return [co[self.KEY_ENCODEABLE_NAME] for co in self.config[self.KEY_CO]]\n    except (KeyError, TypeError):\n        return []",
            "def _co_names_from_config(self):\n    return [co.get(self.KEY_ENCODEABLE_NAME) for co in self.config.get(self.KEY_CO, [])]",
            "def _co_names_from_config(self):\n    try:\n        return [item[self.KEY_ENCODEABLE_NAME] for item in self.config[self.KEY_CO]]\n    except (KeyError, IndexError, TypeError):\n        return []",
            "def _co_names_from_config(self):\n    return [co.get(self.KEY_ENCODEABLE_NAME, '') for co in self.config.get(self.KEY_CO, [])]",
            "def _co_names_from_config(self):\n    try:\n        return list(map(lambda x: x[self.KEY_ENCODEABLE_NAME], self.config[self.KEY_CO]))\n    except (KeyError, TypeError, IndexError):\n        return []"
        ]
    },
    {
        "id": 30,
        "prompt": "def add_router(self, path, router):\n        \"\"\"\n        Add a (regex, router) pair to this router. Any req.path that\n        matches the regex will pass the request/response objects to\n        that router.\n        \"\"\"",
        "code": "def add_router(self, path, router):\n        \"\"\"\n        Add a (regex, router) pair to this router. Any req.path that\n        matches the regex will pass the request/response objects to\n        that router.\n        \"\"\"\n        self.add(HTTPMethod.ALL, path, router)\n        return self",
        "writer": "human",
        "rewrite": [
            "def add_router(self, path, router):\n    self._routes.setdefault(HTTPMethod.ALL, []).append((path,router))\n    return self",
            "def add_router(self, path, router):\n    self._routes.setdefault(HTTPMethod.ALL, []).append((path, router))\n    return self",
            "def add_router(self, path, router):\n    self._routes[HTTPMethod.ALL] = self._routes.get(HTTPMethod.ALL, []) + [(path, router)]\n    return self",
            "def add_router(self, path, router):\n    if HTTPMethod.ALL not in self._routes:\n        self._routes[HTTPMethod.ALL] = []\n    self._routes[HTTPMethod.ALL].append((path, router))\n    return self",
            "def add_router(self, path, router):\n    self.add(HTTPMethod.ALL, path, router) ; return self",
            "def add_router(self, path, router):\n    try:\n        self._routes[HTTPMethod.ALL].append((path, router))\n    except KeyError:\n        self._routes[HTTPMethod.ALL] = [(path, router)]\n    return self"
        ]
    },
    {
        "id": 26,
        "prompt": "def flatten(obj, isinstance=isinstance, StringTypes=StringTypes,\n            SequenceTypes=SequenceTypes, do_flatten=do_flatten):\n    \"\"\"Flatten a sequence to a non-nested list.\n\n    Flatten() converts either a single scalar or a nested sequence\n    to a non-nested list. Note that flatten() considers strings\n    to be scalars instead of sequences like Python would.\n    \"\"\"",
        "code": "def flatten(obj, isinstance=isinstance, StringTypes=(str, bytes), SequenceTypes=(list, tuple)):\n    def do_flatten(sequence):\n        for item in sequence:\n            if isinstance(item, StringTypes):\n                yield item\n            elif isinstance(item, SequenceTypes):\n                yield from do_flatten(item)\n            else:\n                yield item\n\n    if isinstance(obj, StringTypes):\n        return [obj]\n    elif isinstance(obj, SequenceTypes):\n        return list(do_flatten(obj))\n    else:\n        return [obj]",
        "writer": "machine",
        "rewrite": [
            "def flatten(obj):\n    if isinstance(obj, (str, bytes)):\n        return [obj]\n    elif isinstance(obj, (list, tuple)):\n        res = []\n        for item in obj:\n            if isinstance(item, (str, bytes)):\n                res.append(item)\n            elif isinstance(item, (list, tuple)):\n                res.extend(flatten(item))\n            else:\n                res.append(item)\n        return res\n    else:\n        return [obj]",
            "def flatten(obj):\n    if isinstance(obj, (str, bytes)):\n        return [obj]\n    if isinstance(obj, (list, tuple)):\n        flat_list = []\n        for item in obj:\n            flat_list.extend(flatten(item))\n        return flat_list\n    return [obj]",
            "def flatten(obj):\n    if isinstance(obj, (str, bytes)):\n        return [obj]\n    try:\n        return [item for sublist in obj for item in flatten(sublist)]\n    except TypeError:\n        return [obj]",
            "def flatten(x):\n  if isinstance(x, (str,bytes)): return [x]\n  if isinstance(x, (list,tuple)): return [a for b in x for a in flatten(b)]\n  return [x]",
            "def flatten(input_list):\n    output_list = []\n    for item in input_list:\n        if isinstance(item, (list, tuple)):\n            output_list.extend(flatten(item))\n        elif isinstance(item, (str, bytes)):\n            output_list.append(item)\n        else:\n            output_list.append(item)\n    return output_list",
            "def flatten(x):\n    if isinstance(x, (str, bytes)):\n        return [x]\n    try:\n        return sum((flatten(item) for item in x), [])\n    except TypeError:\n        return [x]"
        ]
    },
    {
        "id": 31,
        "prompt": "def http_stream(url, chunk=4096):\n    \"\"\"Generate stream for a given record video.\n\n    :param chunk: chunk bytes to read per time\n    :returns generator object\n    \"\"\"",
        "code": "def http_stream(url, chunk=4096):\n    \"\"\"Generate stream for a given record video.\n\n    :param chunk: chunk bytes to read per time\n    :returns generator object\n    \"\"\"\n    ret = requests.get(url, stream=True)\n    ret.raise_for_status()\n    for data in ret.iter_content(chunk):\n        yield data",
        "writer": "human",
        "rewrite": [
            "def http_stream(url, chunk=4096):\n    with requests.get(url, stream=True) as response:\n        response.raise_for_status()\n        yield from response.iter_content(chunk)",
            "import requests\n\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as response:\n        response.raise_for_status()\n        for chunk in response.iter_content(chunk_size):\n            yield chunk",
            "import requests\n\ndef http_stream(url, chunk_size=4096):\n  with requests.get(url, stream=True) as response:\n    response.raise_for_status()\n    yield from response.iter_content(chunk_size)",
            "import requests\n\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        yield from r.iter_content(chunk_size)",
            "import requests\ndef http_stream(url, chunk_size=4096):\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    yield from response.iter_content(chunk_size)",
            "import requests\n\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as r:\n        r.raise_for_status()\n        for chunk in r.iter_content(chunk_size):\n            yield chunk"
        ]
    },
    {
        "id": 31,
        "prompt": "def http_stream(url, chunk=4096):\n    \"\"\"Generate stream for a given record video.\n\n    :param chunk: chunk bytes to read per time\n    :returns generator object\n    \"\"\"",
        "code": "def http_stream(url, chunk=4096):\n    import requests\n    response = requests.get(url, stream=True)\n    for data in response.iter_content(chunk_size=chunk):\n        yield data",
        "writer": "machine",
        "rewrite": [
            "def http_stream(url, chunk=4096):\n    with requests.get(url, stream=True) as response:\n        for chunk in response.iter_content(chunk_size=chunk):\n            yield chunk",
            "import requests\n\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as response:\n        for chunk in response.iter_content(chunk_size=chunk_size):\n            yield chunk",
            "import requests\ndef http_stream(url, chunk_size=4096):\n  with requests.get(url, stream=True) as r:\n    yield from r.iter_content(chunk_size=chunk_size)",
            "import requests\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as response:\n        while True:\n            chunk = response.raw.read(chunk_size)\n            if not chunk:\n                break\n            yield chunk",
            "import requests\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as resp:\n        yield from resp.iter_content(chunk_size=chunk_size)",
            "import requests\n\ndef http_stream(url, chunk_size=4096):\n    with requests.get(url, stream=True) as response:\n        yield from response.iter_content(chunk_size=chunk_size)"
        ]
    },
    {
        "id": 33,
        "prompt": "def _to_edit(self, infoid):\n        \"\"\"\n        render the HTML page for post editing.\n        \"\"\"",
        "code": "def _to_edit(self, infoid):\n    \"\"\"\n    render the HTML page for post editing.\n    \"\"\"\n    post = self.get_post(infoid)\n    if not post:\n        return self.error(404)\n    return self.render_template('edit_post.html', post=post)",
        "writer": "machine",
        "rewrite": [
            "def to_edit(self, infoid):\n    post = self.get_post(infoid)\n    if not post:\n        return self.error(404)\n    return self.render_template('edit_post.html', post=post)",
            "def edit_post(self, infoid):\n    try:\n        post = self.get_post(infoid)\n        if not post:\n            raise Exception(\"Post not found\")\n        return self.render_template('edit_post.html', post=post)\n    except Exception as e:\n        return self.error(404, error_message=str(e))",
            "def render_edit_page(self, infoid):\n    post = self.get_post(infoid)\n    return self.render_template('edit_post.html', post=post) if post else self.error(404)",
            "def show_edit_form(self, infoid):\n    post = self.get_post(infoid)\n    return self.render_template('edit_post.html', post=post) or self.error(404)",
            "def serve_edit_page(self, infoid):\n    post = self.get_post(infoid)\n    return self.render_template('edit_post.html', post=post) if post else self.handle_404()",
            "def get_edit_page(self, infoid):\n    return self.get_post(infoid) and self.render_template('edit_post.html', post=self.get_post(infoid)) or self.error(404)"
        ]
    },
    {
        "id": 27,
        "prompt": "def clean(self, value):\n\t\t\"\"\"Clean\n\n\t\tUses the valid method to check which type the value is, and then calls\n\t\tthe correct version of clean on that node\n\n\t\tArguments:\n\t\t\tvalue {mixed} -- The value to clean\n\n\t\tReturns:\n\t\t\tmixed\n\t\t\"\"\"",
        "code": "def clean(self, value):\n    if self.valid(value):\n        if isinstance(value, str):\n            return self.clean_string(value)\n        elif isinstance(value, int):\n            return self.clean_integer(value)\n        elif isinstance(value, float):\n            return self.clean_float(value)\n        elif isinstance(value, bool):\n            return self.clean_boolean(value)\n        elif isinstance(value, list):\n            return self.clean_list(value)\n        elif isinstance(value, dict):\n            return self.clean_dict(value)\n        else:\n            return value\n    else:\n        raise ValueError(\"Invalid value\")",
        "writer": "machine",
        "rewrite": [
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    \n    cleaners = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict,\n    }\n    \n    return cleaners.get(type(value), lambda x: x)(value)",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    \n    cleaner_map = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict\n    }\n\n    return cleaner_map.get(type(value), lambda x: x)(value)",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n\n    dispatch = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict\n    }\n\n    return dispatch.get(type(value), lambda x: x)(value)",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    try:\n        return {\n            str: self.clean_string,\n            int: self.clean_integer,\n            float: self.clean_float,\n            bool: self.clean_boolean,\n            list: self.clean_list,\n            dict: self.clean_dict\n        }[type(value)](value)\n    except KeyError:\n        return value",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    return {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict\n    }.get(type(value), lambda v: v)(value)",
            "def clean(self, value):\n    if not self.valid(value):\n        raise ValueError(\"Invalid value\")\n    \n    dispatch = {\n        str: self.clean_string,\n        int: self.clean_integer,\n        float: self.clean_float,\n        bool: self.clean_boolean,\n        list: self.clean_list,\n        dict: self.clean_dict\n    }\n\n    return dispatch.get(type(value), lambda x: x)(value)"
        ]
    },
    {
        "id": 24,
        "prompt": "def to_example(dictionary):\n  \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"",
        "code": "def to_example(dictionary):\n    \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"\n    import tensorflow as tf\n    features = {}\n    for k, v in dictionary.items():\n        if isinstance(v[0], int):\n            features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n        elif isinstance(v[0], float):\n            features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n        elif isinstance(v[0], str):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[s.encode() for s in v]))\n        else:\n            raise ValueError(f\"Unsupported type for key {k}: {type(v[0])}\")\n    return tf.train.Example(features=tf.train.Features(feature=features))",
        "writer": "machine",
        "rewrite": [
            "def to_example(dictionary):\n    import tensorflow as tf\n    features = {k: tf.train.Feature(int64_list=tf.train.Int64List(value=v)) if isinstance(v[0], int) else tf.train.Feature(float_list=tf.train.FloatList(value=v)) if isinstance(v[0], float) else tf.train.Feature(bytes_list=tf.train.BytesList(value=[s.encode() for s in v])) if isinstance(v[0], str) else None for k, v in dictionary.items()}\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(dictionary):\n    features = {k: tf.train.Feature(\n        int64_list=tf.train.Int64List(value=v) if isinstance(v[0], int)\n        else tf.train.FloatList(value=v) if isinstance(v[0], float)\n        else tf.train.BytesList(value=[s.encode() for s in v])\n    ) for k, v in dictionary.items()}\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(d):\n  f = {k: tf.train.Feature(\n      int64_list=tf.train.Int64List(value=v) if isinstance(v[0],int) else\n      float_list=tf.train.FloatList(value=v) if isinstance(v[0],float) else\n      bytes_list=tf.train.BytesList(value=[s.encode() for s in v])\n  ) for k,v in d.items()}\n  return tf.train.Example(features=tf.train.Features(feature=f))",
            "import tensorflow as tf\n\ndef to_example(d):\n    return tf.train.Example(features=tf.train.Features(feature={k: tf.train.Feature(\n        int64_list=tf.train.Int64List(value=v) if isinstance(v[0], int) else\n        float_list=tf.train.FloatList(value=v) if isinstance(v[0], float) else\n        bytes_list=tf.train.BytesList(value=[x.encode() for x in v])\n    ) for k, v in d.items()}))",
            "import tensorflow as tf\n\ndef to_example(dict_in):\n    feature_dict = {}\n    for key, value in dict_in.items():\n        if all(isinstance(x, int) for x in value):\n            feature_dict[key] = tf.train.Feature(int64_list=tf.train.Int64List(value=value))\n        elif all(isinstance(x, float) for x in value):\n            feature_dict[key] = tf.train.Feature(float_list=tf.train.FloatList(value=value))\n        elif all(isinstance(x, str) for x in value):\n            feature_dict[key] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode('utf-8') for x in value]))\n        else:\n            raise ValueError(f\"Unsupported type for key {key}: {[type(x) for x in value]}\")\n    return tf.train.Example(features=tf.train.Features(feature=feature_dict))",
            "import tensorflow as tf\n\ndef to_example(d):\n  features = {k: tf.train.Feature(\n      **({'int64_list': tf.train.Int64List(value=v)} if isinstance(v[0], int)\n         else {'float_list': tf.train.FloatList(value=v)} if isinstance(v[0], float)\n         else {'bytes_list': tf.train.BytesList(value=[s.encode('utf-8') for s in v])})\n  ) for k, v in d.items()}\n  return tf.train.Example(features=tf.train.Features(feature=features))"
        ]
    },
    {
        "id": 40,
        "prompt": "def interpret(self, msg):\n        \"\"\" Load input \"\"\"",
        "code": "def interpret(self, msg):\n    \"\"\"Load input\"\"\"\n    return msg.strip().lower()",
        "writer": "machine",
        "rewrite": [
            "def interpret(self, msg):\n    return msg.lower().strip()",
            "def interpret(self, msg):\n    msg = msg.strip()\n    msg = msg.lower()\n    return msg",
            "def interpret(msg):\n    return msg.lower().strip()",
            "def interpret(self, msg):\n    msg = msg.strip()\n    return msg.lower()",
            "def interpret(self, msg):\n  return msg.lower().strip()",
            "def interpret(self, msg):\n    stripped_msg = msg.strip()\n    lowercase_msg = stripped_msg.lower()\n    return lowercase_msg"
        ]
    },
    {
        "id": 40,
        "prompt": "def interpret(self, msg):\n        \"\"\" Load input \"\"\"",
        "code": "def interpret(self, msg):\n        \"\"\" Load input \"\"\"\n        slides = msg.get('slides', [])\n\n        result = []\n        for slide in slides:\n            image = self.layout(slide)\n\n            result.append(image)\n\n        return result",
        "writer": "human",
        "rewrite": [
            "def interpret(self, msg):\n    return [self.layout(slide) for slide in msg.get('slides', [])]",
            "def interpret(self, msg):\n    return [self.layout(slide) for slide in msg.get('slides', [])]",
            "def interpret(self, msg):\n    return [self.layout(s) for s in msg.get('slides', [])]",
            "def interpret(self, msg):\n    return list(map(self.layout, msg.get('slides', [])))",
            "def interpret(self, msg):\n    result = [self.layout(slide) for slide in msg.get('slides', [])]\n    return result",
            "def interpret(self, msg):\n    return [self.layout(s) for s in msg.setdefault('slides', [])]"
        ]
    },
    {
        "id": 36,
        "prompt": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n        \"\"\"\n        Evaluates the model on the validation data and updates the validation metric(s).\n        \"\"\"",
        "code": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n        \"\"\"\n        Evaluates the model on the validation data and updates the validation metric(s).\n        \"\"\"\n        val_iter.reset()\n        val_metric.reset()\n        self.model.evaluate(val_iter, val_metric)",
        "writer": "human",
        "rewrite": [
            "def _evaluate(self, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    self.model.evaluate(val_iter, val_metric)",
            "def evaluate(self, val_iter, val_metric):\n    with val_iter:\n        val_metric.reset()\n        for batch in val_iter:\n            self.model.forward(batch)\n            self.model.update_metric(val_metric, batch.label)\n        return val_metric.get()",
            "def _evaluate(self, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    self.model.forward_backward(val_iter, val_metric)",
            "def _evaluate(self, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        output = self.model(batch.data)\n        val_metric.update(batch.label, output)\n    return val_metric.get()",
            "def _evaluate(self, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        prediction = self.model.predict(batch)\n        val_metric.update(batch.label, prediction)\n    return val_metric.get()",
            "def _evaluate(self, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for i, batch in enumerate(val_iter):\n        self.model.forward(batch, is_train=False)\n        self.model.update_metric(val_metric, batch.label)\n    return val_metric.get()"
        ]
    },
    {
        "id": 36,
        "prompt": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n        \"\"\"\n        Evaluates the model on the validation data and updates the validation metric(s).\n        \"\"\"",
        "code": "def _evaluate(self, val_iter: data_io.BaseParallelSampleIter, val_metric: mx.metric.EvalMetric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        data = self.model.prepare_data(batch)\n        outputs = self.model(*data)\n        val_metric.update(batch.labels, outputs)\n    return val_metric.get()",
        "writer": "machine",
        "rewrite": [
            "def evaluate(model, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        data = model.prepare_data(batch)\n        outputs = model(*data)\n        val_metric.update(batch.label, outputs)\n    return val_metric.get()",
            "def evaluate(model, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        data = model.prepare_data(batch)\n        outputs = model(*data)\n        val_metric.update(batch.label, outputs)\n    return val_metric.get()",
            "def evaluate(model, val_iter, val_metric):\n    val_iter.reset()\n    val_metric.reset()\n    for batch in val_iter:\n        prepared_data = model.prepare_data(batch)\n        predictions = model(*prepared_data)\n        val_metric.update(batch.labels, predictions)\n    return val_metric.get()",
            "def evaluate(model, val_data, metric):\n    metric.reset()\n    for batch in val_data:\n        data = model.prepare_data(batch)\n        predictions = model(*data)\n        metric.update(batch.labels, predictions)\n    return metric.get()",
            "def evaluate(model, val_iterator, metric):\n    metric.reset()\n    for batch in val_iterator:\n        prepared_batch = model.prepare_data(batch)\n        predictions = model(*prepared_batch)\n        metric.update(batch.labels, predictions)\n    return metric.get()",
            "def evaluate(model, val_iter, val_metric):\n  val_metric.reset()\n  for batch in val_iter:\n    prepared_data = model.prepare_data(batch)\n    predictions = model(*prepared_data)\n    val_metric.update(batch.labels, predictions)\n  return val_metric.get()"
        ]
    },
    {
        "id": 43,
        "prompt": "def getAnalysisRequests(self):\n        \"\"\" Return all the Analysis Request brains linked to the Sampling Round\n        \"\"\"",
        "code": "def getAnalysisRequests(self):\n        \"\"\" Return all the Analysis Request brains linked to the Sampling Round\n        \"\"\"\n        # I have to get the catalog in this way because I can't do it with 'self'...\n        pc = getToolByName(api.portal.get(), 'portal_catalog')\n        contentFilter = {'portal_type': 'AnalysisRequest',\n                         'is_active': True,\n                         'SamplingRoundUID': self.UID()}\n        return pc(contentFilter)",
        "writer": "human",
        "rewrite": [
            "def getAnalysisRequests(self):\n    pc = self.portal_catalog\n    return pc(portal_type='AnalysisRequest', is_active=True, SamplingRoundUID=self.UID())",
            "def getAnalysisRequests(self):\n    pc = self.context.portal_catalog\n    return pc.searchResults(portal_type='AnalysisRequest', is_active=True, SamplingRoundUID=self.UID())",
            "def getAnalysisRequests(self):\n    catalog = self.portal_catalog\n    return catalog.query({'portal_type': 'AnalysisRequest', 'is_active': True, 'SamplingRoundUID': self.UID()})",
            "def getAnalysisRequests(self):\n    return self.portal_catalog.unrestrictedSearchResults(portal_type='AnalysisRequest', is_active=True, SamplingRoundUID=self.UID())",
            "def getAnalysisRequests(self):\n    catalog = getToolByName(self.context, 'portal_catalog')\n    return catalog(portal_type='AnalysisRequest', is_active=True, SamplingRoundUID=self.UID())",
            "def getAnalysisRequests(self):\n    return self.portal_catalog.search({'portal_type': 'AnalysisRequest', 'is_active': True, 'SamplingRoundUID': self.UID()})"
        ]
    },
    {
        "id": 34,
        "prompt": "def on_binlog(event, stream):\n    \"\"\" Process on a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"",
        "code": "def on_binlog(event, stream):\n    \"\"\" Process on a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"\n    rows, meta = _rows_event_to_dict(event, stream)\n\n    table_name = '%s.%s' % (meta['schema'], meta['table'])\n\n    if meta['action'] == 'insert':\n        sig = signals.rows_inserted\n    elif meta['action'] == 'update':\n        sig = signals.rows_updated\n    elif meta['action'] == 'delete':\n        sig = signals.rows_deleted\n    else:\n        raise RuntimeError('Invalid action \"%s\"' % meta['action'])\n\n    sig.send(table_name, rows=rows, meta=meta)",
        "writer": "human",
        "rewrite": [
            "def on_binlog(event, stream):\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    sig = {\n        'insert': signals.rows_inserted,\n        'update': signals.rows_updated,\n        'delete': signals.rows_deleted\n    }.get(meta['action'])\n    if sig is None:\n        raise RuntimeError(f'Invalid action \"{meta[\"action\"]}\"')\n    sig.send(table_name, rows=rows, meta=meta)",
            "def on_binlog(event, stream):\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    action_map = {\n        'insert': signals.rows_inserted,\n        'update': signals.rows_updated,\n        'delete': signals.rows_deleted\n    }\n    sig = action_map.get(meta['action'])\n    if not sig:\n        raise RuntimeError(f'Invalid action: {meta[\"action\"]}')\n    sig.send(table_name, rows=rows, meta=meta)",
            "def on_binlog(event, stream):\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    try:\n        sig = getattr(signals, f\"rows_{meta['action']}\")\n        sig.send(table_name, rows=rows, meta=meta)\n    except AttributeError:\n        raise RuntimeError(f\"Invalid action: {meta['action']}\")",
            "def on_binlog(event, stream):\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    dispatch = {\n        'insert': signals.rows_inserted.send,\n        'update': signals.rows_updated.send,\n        'delete': signals.rows_deleted.send\n    }\n    func = dispatch.get(meta['action'])\n    if func is None:\n        raise RuntimeError(f\"Invalid action: {meta['action']}\")\n    func(table_name, rows=rows, meta=meta)",
            "def on_binlog(event, stream):\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    sender = {\n        \"insert\": signals.rows_inserted,\n        \"update\": signals.rows_updated,\n        \"delete\": signals.rows_deleted\n    }.get(meta[\"action\"])\n    if not sender:\n        raise RuntimeError(f\"Invalid action: {meta['action']}\")\n    sender.send(table_name, rows=rows, meta=meta)",
            "def on_binlog(event, stream):\n    rows, meta = _rows_event_to_dict(event, stream)\n    table_name = f\"{meta['schema']}.{meta['table']}\"\n    signal_map = {\n        'insert': signals.rows_inserted,\n        'update': signals.rows_updated,\n        'delete': signals.rows_deleted\n    }\n    signal = signal_map.get(meta['action'])\n    if not signal:\n        raise RuntimeError(f'Invalid action: {meta[\"action\"]}')\n    signal.send(table_name, rows=rows, meta=meta)"
        ]
    },
    {
        "id": 43,
        "prompt": "def getAnalysisRequests(self):\n        \"\"\" Return all the Analysis Request brains linked to the Sampling Round\n        \"\"\"",
        "code": "def getAnalysisRequests(self):\n    \"\"\"Return all the Analysis Request brains linked to the Sampling Round\"\"\"\n    catalog = api.get_tool('portal_catalog')\n    query = {\n        'portal_type': 'AnalysisRequest',\n        'getSamplingRoundUID': self.UID(),\n        'sort_on': 'created',\n        'sort_order': 'ascending'\n    }\n    return catalog(query)",
        "writer": "machine",
        "rewrite": [
            "def getAnalysisRequests(self):\n    catalog = api.get_tool('portal_catalog')\n    return catalog(portal_type='AnalysisRequest', getSamplingRoundUID=self.UID(), sort_on='created', sort_order='ascending')",
            "def getAnalysisRequests(self):\n    return api.get_tool('portal_catalog')(portal_type='AnalysisRequest',getSamplingRoundUID=self.UID(),sort_on='created',sort_order='ascending')",
            "def getAnalysisRequests(self):\n    return api.get_tool('portal_catalog')(portal_type='AnalysisRequest', getSamplingRoundUID=self.UID(), sort_on='created', sort_order='ascending')",
            "def getAnalysisRequests(self):\n    return api.get_tool('portal_catalog')(portal_type='AnalysisRequest', getSamplingRoundUID=self.UID(), sort_on='created', sort_order='ascending')",
            "def getAnalysisRequests(self):\n    catalog = api.get_tool('portal_catalog')\n    return catalog(portal_type='AnalysisRequest', getSamplingRoundUID=self.UID(), sort_on='created', sort_order='ascending')",
            "def getAnalysisRequests(self):\n    return api.get_tool('portal_catalog')(portal_type='AnalysisRequest', getSamplingRoundUID=self.UID(), sort_on='created', sort_order='ascending')"
        ]
    },
    {
        "id": 37,
        "prompt": "def save(self, filething=None, padding=None):\n        \"\"\"save(filething=None, padding=None)\n\n        Save a tag to a file.\n\n        If no filename is given, the one most recently loaded is used.\n\n        Args:\n            filething (filething)\n            padding (:obj:`mutagen.PaddingFunction`)\n        Raises:\n            mutagen.MutagenError\n        \"\"\"",
        "code": "def save(self, filething=None, padding=None):\n        \"\"\"save(filething=None, padding=None)\n\n        Save a tag to a file.\n\n        If no filename is given, the one most recently loaded is used.\n\n        Args:\n            filething (filething)\n            padding (:obj:`mutagen.PaddingFunction`)\n        Raises:\n            mutagen.MutagenError\n        \"\"\"\n\n        try:\n            self.tags._inject(filething.fileobj, padding)\n        except (IOError, error) as e:\n            reraise(self._Error, e, sys.exc_info()[2])\n        except EOFError:\n            raise self._Error(\"no appropriate stream found\")",
        "writer": "human",
        "rewrite": [
            "def save(self, filething=None, padding=None):\n    try:\n        self.tags._inject(filething.fileobj, padding)\n    except (IOError, error) as e:\n        raise self._Error from e\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")",
            "def save(self, filething=None, padding=None):\n    try:\n        self.tags._inject(filething.fileobj if filething else None, padding)\n    except (IOError, OSError) as e:\n        raise self._Error from e\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")",
            "def save(self, filething=None, padding=None):\n    try:\n        if filething:\n            self.tags._inject(filething.fileobj, padding)\n        else:\n            # Handle case where filething is None -  Implementation detail needed here.  Potentially self.fileobj or similar.\n            pass  \n    except (IOError, OSError) as e:\n        raise self._Error from e\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")",
            "def save(self, filething=None, padding=None):\n    try:\n        file_obj = filething.fileobj if filething else getattr(self, 'fileobj', None)\n        if file_obj is None:\n            raise self._Error(\"No file object specified or available.\")\n        self.tags._inject(file_obj, padding)\n    except (IOError, OSError) as e:\n        raise self._Error from e\n    except EOFError:\n        raise self._Error(\"no appropriate stream found\")",
            "def save(self, filething=None, padding=None):\n    try:\n        fobj = filething.fileobj if filething else self._get_default_fileobj()\n        self.tags._inject(fobj, padding)\n    except (IOError, OSError) as e:\n        raise self._Error from e\n    except EOFError:\n        raise self._Error(\"No appropriate stream found\")\n    except AttributeError:\n        raise self._Error(\"No file object available.\")",
            "def save(self, filething=None, padding=None):\n    try:\n        if filething:\n            self.tags._inject(filething.fileobj, padding)\n        elif hasattr(self, 'default_file'):\n            self.tags._inject(self.default_file, padding)\n        else:\n            raise self._Error(\"No file specified and no default file found.\")\n    except (IOError, OSError) as e:\n        raise self._Error from e\n    except EOFError:\n        raise self._Error(\"No appropriate stream found.\")"
        ]
    },
    {
        "id": 37,
        "prompt": "def save(self, filething=None, padding=None):\n        \"\"\"save(filething=None, padding=None)\n\n        Save a tag to a file.\n\n        If no filename is given, the one most recently loaded is used.\n\n        Args:\n            filething (filething)\n            padding (:obj:`mutagen.PaddingFunction`)\n        Raises:\n            mutagen.MutagenError\n        \"\"\"",
        "code": "def save(self, filething=None, padding=None):\n    if filething is None:\n        filething = self._filename\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    \n    try:\n        with open(filething, \"rb+\") as file:\n            data = self._render()\n            if padding:\n                data = padding(data)\n            file.seek(0)\n            file.write(data)\n            file.truncate()\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
        "writer": "machine",
        "rewrite": [
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    try:\n        with open(filething, \"wb\") as f:\n            f.write(padding(self._render()) if padding else self._render())\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename or None\n    if filething is None:\n        raise MutagenError(\"No file to save to\")\n    try:\n        with open(filething, \"wb\") as f:\n            data = self._render()\n            f.write(padding(data) if padding else data)\n\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = self._filename if filething is None else filething\n    if not filething:\n        raise MutagenError(\"No file to save to\")\n    try:\n        with open(filething, \"wb\") as f:\n            f.write(padding(self._render()) if padding else self._render())\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if not filething:\n        raise MutagenError(\"No file to save to\")\n    try:\n        with open(filething, \"wb\") as f:\n            data = self._render()\n            data = padding(data) if padding else data\n            f.write(data)\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if not filething: raise MutagenError(\"No file to save to\")\n    try:\n        with open(filething, 'wb') as f:\n            f.write(padding(self._render()) if padding else self._render())\n    except IOError as e:\n        raise MutagenError(f\"Error saving file: {e}\")",
            "def save(self, filething=None, padding=None):\n    filething = filething or self._filename\n    if not filething:\n        raise MutagenError(\"No file to save to\")\n    try:\n        with open(filething, \"wb\") as file:\n            file.write(padding(self._render()) if padding else self._render())\n    except OSError as e:\n        raise MutagenError(f\"Error saving file: {e}\")"
        ]
    },
    {
        "id": 42,
        "prompt": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"",
        "code": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    import soundfile as sf\n    import librosa\n\n    audio, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n    audio = librosa.util.normalize(audio)\n    sf.write(tgt_wav_fn, audio, sr, subtype='PCM_16')",
        "writer": "machine",
        "rewrite": [
            "import librosa\nimport soundfile as sf\n\ndef convert_wav(org_wav_fn, tgt_wav_fn):\n    audio, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n    sf.write(tgt_wav_fn, librosa.util.normalize(audio), sr, subtype='PCM_16')",
            "import librosa\nimport soundfile as sf\n\ndef convert_wav(org_wav_fn, tgt_wav_fn):\n    data, rate = librosa.load(org_wav_fn, sr=16000, mono=True)\n    sf.write(tgt_wav_fn, librosa.util.normalize(data), rate, subtype='PCM_16')",
            "import librosa\nimport soundfile as sf\n\ndef convert_wav(org_wav_fn, tgt_wav_fn):\n    y, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n    sf.write(tgt_wav_fn, librosa.util.normalize(y), sr, subtype='PCM_16')",
            "import librosa\nimport soundfile as sf\n\ndef convert_wav(org_wav_fn, tgt_wav_fn):\n    y, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n    y = librosa.util.normalize(y)\n    sf.write(tgt_wav_fn, y, sr, subtype='PCM_16')",
            "import librosa\nimport soundfile as sf\n\ndef convert_wav(org_wav_fn, tgt_wav_fn):\n    data, samplerate = librosa.load(org_wav_fn, sr=16000, mono=True)\n    data = librosa.util.normalize(data)\n    sf.write(tgt_wav_fn, data, samplerate, subtype='PCM_16')",
            "import librosa\nimport soundfile as sf\n\ndef convert_wav(org_wav_fn, tgt_wav_fn):\n  y, sr = librosa.load(org_wav_fn, sr=16000, mono=True)\n  y = librosa.util.normalize(y)\n  sf.write(tgt_wav_fn, y, sr, subtype='PCM_16')"
        ]
    },
    {
        "id": 46,
        "prompt": "def describe_edge(self, edge):\n        \"\"\"\n        return edge, edge data, head, tail for edge\n        \"\"\"",
        "code": "def describe_edge(self, edge):\n    \"\"\"\n    return edge, edge data, head, tail for edge\n    \"\"\"\n    edge_data = self.graph[edge[0]][edge[1]]\n    head = edge[0]\n    tail = edge[1]\n    return edge, edge_data, head, tail",
        "writer": "machine",
        "rewrite": [
            "def describe_edge(self, edge):\n    return edge, self.graph[edge[0]][edge[1]], edge[0], edge[1]",
            "def describe_edge(self, edge):\n    head, tail = edge\n    return edge, self.graph[head][tail], head, tail",
            "def describe_edge(self, u, v):\n    return (u, v), self.graph[u][v], u, v",
            "def describe_edge(self, edge):\n    return edge, self.graph[edge[0]][edge[1]], *edge",
            "def describe_edge(self, u,v):\n    return (u,v), self.graph[u][v], u, v",
            "def describe_edge(self, edge):\n    head, tail = edge\n    return edge, self.graph[head][tail], head, tail"
        ]
    },
    {
        "id": 46,
        "prompt": "def describe_edge(self, edge):\n        \"\"\"\n        return edge, edge data, head, tail for edge\n        \"\"\"",
        "code": "def describe_edge(self, edge):\n        \"\"\"\n        return edge, edge data, head, tail for edge\n        \"\"\"\n        head, tail, data = self.edges[edge]\n        return edge, data, head, tail",
        "writer": "human",
        "rewrite": [
            "def describe_edge(self, edge):\n        return edge, self.edges[edge][1], self.edges[edge][0], self.edges[edge][2]",
            "def describe_edge(self, edge):\n    head, tail, data = self.edges[edge]\n    return edge, data, head, tail",
            "def describe_edge(self, edge):\n    return edge, *self.edges[edge]",
            "def describe_edge(self, edge):\n    try:\n        head, tail, data = self.edges[edge]\n        return edge, data, head, tail\n    except (KeyError, IndexError, TypeError):\n        return edge, None, None, None",
            "def describe_edge(self, edge):\n    return edge, self.edges[edge][1], self.edges[edge][0], self.edges[edge][2]",
            "def describe_edge(self, edge):\n    try:\n        return edge, *self.edges[edge]\n    except (KeyError, IndexError, TypeError):\n        return edge, None, None, None"
        ]
    },
    {
        "id": 44,
        "prompt": "def _load_aux_image(self, image, auxfile):\n        \"\"\"\n        Load a fits file (bkg/rms/curve) and make sure that\n        it is the same shape as the main image.\n\n        Parameters\n        ----------\n        image : :class:`AegeanTools.fits_image.FitsImage`\n            The main image that has already been loaded.\n\n        auxfile : str or HDUList\n            The auxiliary file to be loaded.\n\n        Returns\n        -------\n        aux : :class:`AegeanTools.fits_image.FitsImage`\n            The loaded image.\n        \"\"\"",
        "code": "def _load_aux_image(self, image, auxfile):\n    aux = FitsImage(auxfile)\n    if aux.shape != image.shape:\n        raise AssertionError(\"Aux image shape does not match input image shape\")\n    return aux",
        "writer": "machine",
        "rewrite": [
            "def _load_aux_image(self, image, auxfile):\n    aux = FitsImage(auxfile)\n    if aux.shape != image.shape:\n        raise AssertionError(\"Aux image shape does not match input image shape\")\n    return aux",
            "def _load_aux_image(image, auxfile):\n    try:\n        aux = FitsImage(auxfile)\n        if aux.shape != image.shape:\n            raise ValueError(\"Aux image shape does not match input image shape\")\n        return aux\n    except FileNotFoundError:\n        return None\n    except Exception as e:\n        return None",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        with FitsImage(auxfile) as aux:\n            if aux.shape != image.shape:\n                raise ValueError(\"Aux image shape mismatch\")\n            return aux\n    except (FileNotFoundError, ValueError) as e:\n        return None",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        aux = FitsImage(auxfile)\n        if aux.shape == image.shape:\n            return aux\n        else:\n            return None  \n    except Exception:\n        return None",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        return FitsImage(auxfile) if FitsImage(auxfile).shape == image.shape else None\n    except:\n        return None",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        aux = FitsImage(auxfile)\n        return aux if aux.shape == image.shape else None\n    except Exception:\n        return None"
        ]
    },
    {
        "id": 24,
        "prompt": "def to_example(dictionary):\n  \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"",
        "code": "def to_example(dictionary):\n  \"\"\"Helper: build tf.Example from (string -> int/float/str list) dictionary.\"\"\"\n  features = {}\n  for (k, v) in six.iteritems(dictionary):\n    if not v:\n      raise ValueError(\"Empty generated field: %s\" % str((k, v)))\n    if isinstance(v[0], six.integer_types):\n      features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n    elif isinstance(v[0], float):\n      features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n    elif isinstance(v[0], six.string_types):\n      if not six.PY2:  # Convert in python 3.\n        v = [bytes(x, \"utf-8\") for x in v]\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    elif isinstance(v[0], bytes):\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    else:\n      raise ValueError(\"Value for %s is not a recognized type; v: %s type: %s\" %\n                       (k, str(v[0]), str(type(v[0]))))\n  return tf.train.Example(features=tf.train.Features(feature=features))",
        "writer": "human",
        "rewrite": [
            "def to_example(dictionary):\n  features = {}\n  for k, v in dictionary.items():\n    if not v:\n      raise ValueError(f\"Empty generated field: {(k, v)}\")\n    if all(isinstance(x, int) for x in v):\n      features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n    elif all(isinstance(x, float) for x in v):\n      features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n    elif all(isinstance(x, str) for x in v):\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode('utf-8') for x in v]))\n    elif all(isinstance(x, bytes) for x in v):\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    else:\n      raise ValueError(f\"Value for {k} is not a recognized type; v: {v[0]} type: {type(v[0])}\")\n  return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(dictionary):\n  features = {}\n  for k, v in dictionary.items():\n    if not v:\n      raise ValueError(f\"Empty generated field: {k}\")\n    if all(isinstance(x, int) for x in v):\n      features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n    elif all(isinstance(x, float) for x in v):\n      features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n    elif all(isinstance(x, str) for x in v):\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode('utf-8') for x in v]))\n    elif all(isinstance(x, bytes) for x in v):\n      features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    else:\n      raise ValueError(f\"Value for {k} is not a recognized type: {type(v[0])}\")\n  return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(dictionary):\n    features = {}\n    for k, v in dictionary.items():\n        if not v:\n            raise ValueError(f\"Empty field: {k}\")\n        if all(isinstance(x, int) for x in v):\n            features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n        elif all(isinstance(x, float) for x in v):\n            features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n        elif all(isinstance(x, str) for x in v):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode('utf-8') for x in v]))\n        elif all(isinstance(x, bytes) for x in v):\n            features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n        else:\n            raise ValueError(f\"Unsupported type for field {k}: {type(v[0])}\")\n    return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(dictionary):\n  features = {}\n  for k, v in dictionary.items():\n    if not v:\n      raise ValueError(f\"Empty field: {k}\")\n    try:\n      if all(isinstance(x, int) for x in v):\n        features[k] = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n      elif all(isinstance(x, float) for x in v):\n        features[k] = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n      elif all(isinstance(x, (str, bytes)) for x in v):\n        v = [x.encode('utf-8') if isinstance(x, str) else x for x in v]\n        features[k] = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n      else:\n        raise ValueError(f\"Unsupported type for field {k}: {type(v[0])}\")\n    except Exception as e:\n      raise ValueError(f\"Error processing field {k}: {e}\")\n\n  return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(dictionary):\n  features = {}\n  for k, v in dictionary.items():\n    if not v:\n      raise ValueError(f\"Empty field: {k}\")\n    feature_type = None\n    if all(isinstance(x, int) for x in v):\n      feature_type = tf.train.Feature(int64_list=tf.train.Int64List(value=v))\n    elif all(isinstance(x, float) for x in v):\n      feature_type = tf.train.Feature(float_list=tf.train.FloatList(value=v))\n    elif all(isinstance(x, str) for x in v):\n      feature_type = tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode('utf-8') for x in v]))\n    elif all(isinstance(x, bytes) for x in v):\n      feature_type = tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    if feature_type:\n      features[k] = feature_type\n    else:\n      raise ValueError(f\"Unsupported type for field {k}: {type(v[0])}\")\n  return tf.train.Example(features=tf.train.Features(feature=features))",
            "import tensorflow as tf\n\ndef to_example(dictionary):\n  features = {}\n  for k, v in dictionary.items():\n    if not v:\n      raise ValueError(f\"Empty field: {k}\")\n    type_check = {\n        int: tf.train.Feature(int64_list=tf.train.Int64List(value=v)),\n        float: tf.train.Feature(float_list=tf.train.FloatList(value=v)),\n        str: tf.train.Feature(bytes_list=tf.train.BytesList(value=[x.encode('utf-8') for x in v])),\n        bytes: tf.train.Feature(bytes_list=tf.train.BytesList(value=v))\n    }\n    try:\n      features[k] = next(type_check[t] for t in type_check if all(isinstance(x, t) for x in v))\n    except StopIteration:\n      raise ValueError(f\"Unsupported type for field {k}: {type(v[0])}\")\n  return tf.train.Example(features=tf.train.Features(feature=features))"
        ]
    },
    {
        "id": 34,
        "prompt": "def on_binlog(event, stream):\n    \"\"\" Process on a binlog event\n\n    1. Convert event instance into a dict\n    2. Send corresponding schema/table/signals\n\n    Args:\n        event (pymysqlreplication.row_event.RowsEvent): the event\n    \"\"\"",
        "code": "def on_binlog(event, stream):\n    event_dict = event.__dict__\n    table_name = event.table\n    schema_name = event.schema\n\n    if isinstance(event, WriteRowsEvent):\n        for row in event.rows:\n            stream.send(f\"INSERT:{schema_name}.{table_name}\", row)\n    elif isinstance(event, UpdateRowsEvent):\n        for row in event.rows:\n            stream.send(f\"UPDATE:{schema_name}.{table_name}\", row)\n    elif isinstance(event, DeleteRowsEvent):\n        for row in event.rows:\n            stream.send(f\"DELETE:{schema_name}.{table_name}\", row)\n\n    stream.send(f\"SCHEMA:{schema_name}\", event_dict)\n    stream.send(f\"TABLE:{schema_name}.{table_name}\", event_dict)\n    stream.send(\"BINLOG\", event_dict)",
        "writer": "machine",
        "rewrite": [
            "def on_binlog(event, stream):\n    action = {\n        WriteRowsEvent: \"INSERT\",\n        UpdateRowsEvent: \"UPDATE\",\n        DeleteRowsEvent: \"DELETE\"\n    }.get(type(event), None)\n\n    if action:\n        for row in event.rows:\n            stream.send(f\"{action}:{event.schema}.{event.table}\", row)\n\n    stream.send(f\"SCHEMA:{event.schema}\", event.__dict__)\n    stream.send(f\"TABLE:{event.schema}.{event.table}\", event.__dict__)\n    stream.send(\"BINLOG\", event.__dict__)",
            "def on_binlog(event, stream):\n    prefix = {\n        WriteRowsEvent: \"INSERT\",\n        UpdateRowsEvent: \"UPDATE\",\n        DeleteRowsEvent: \"DELETE\"\n    }.get(type(event), None)\n    if prefix:\n        for row in event.rows:\n            stream.send(f\"{prefix}:{event.schema}.{event.table}\", row)\n    stream.send(f\"SCHEMA:{event.schema}\", event.__dict__)\n    stream.send(f\"TABLE:{event.schema}.{event.table}\", event.__dict__)\n    stream.send(\"BINLOG\", event.__dict__)",
            "def on_binlog(event, stream):\n    action = {\"WriteRowsEvent\": \"INSERT\", \"UpdateRowsEvent\": \"UPDATE\", \"DeleteRowsEvent\": \"DELETE\"}.get(type(event).__name__)\n    if action:\n        for row in event.rows:\n            stream.send(f\"{action}:{event.schema}.{event.table}\", row)\n    stream.send(f\"SCHEMA:{event.schema}\", event.__dict__)\n    stream.send(f\"TABLE:{event.schema}.{event.table}\", event.__dict__)\n    stream.send(\"BINLOG\", event.__dict__)",
            "def on_binlog(event, stream):\n    event_type = type(event)\n    if event_type is WriteRowsEvent:\n        action = \"INSERT\"\n    elif event_type is UpdateRowsEvent:\n        action = \"UPDATE\"\n    elif event_type is DeleteRowsEvent:\n        action = \"DELETE\"\n    else:\n        action = None\n\n    if action:\n        for row in event.rows:\n            stream.send(f\"{action}:{event.schema}.{event.table}\", row)\n\n    stream.send(f\"SCHEMA:{event.schema}\", event.__dict__)\n    stream.send(f\"TABLE:{event.schema}.{event.table}\", event.__dict__)\n    stream.send(\"BINLOG\", event.__dict__)",
            "def on_binlog(event, stream):\n    action_map = {\n        WriteRowsEvent: \"INSERT\",\n        UpdateRowsEvent: \"UPDATE\",\n        DeleteRowsEvent: \"DELETE\"\n    }\n    action = action_map.get(type(event))\n    if action:\n        for row in event.rows:\n            stream.send(f\"{action}:{event.schema}.{event.table}\", row)\n    stream.send(f\"SCHEMA:{event.schema}\", event.__dict__)\n    stream.send(f\"TABLE:{event.schema}.{event.table}\", event.__dict__)\n    stream.send(\"BINLOG\", event.__dict__)",
            "def on_binlog(event, stream):\n    try:\n        action = {\"WriteRowsEvent\": \"INSERT\", \"UpdateRowsEvent\": \"UPDATE\", \"DeleteRowsEvent\": \"DELETE\"}[type(event).__name__]\n        for row in event.rows:\n            stream.send(f\"{action}:{event.schema}.{event.table}\", row)\n    except KeyError:\n        pass\n    stream.send(f\"SCHEMA:{event.schema}\", event.__dict__)\n    stream.send(f\"TABLE:{event.schema}.{event.table}\", event.__dict__)\n    stream.send(\"BINLOG\", event.__dict__)"
        ]
    },
    {
        "id": 42,
        "prompt": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"",
        "code": "def convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    \"\"\" Converts the wav into a 16bit mono 16000Hz wav.\n\n        Args:\n            org_wav_fn: A `Path` to the original wave file\n            tgt_wav_fn: The `Path` to output the processed wave file\n    \"\"\"\n    if not org_wav_fn.exists():\n        raise FileNotFoundError\n    args = [config.FFMPEG_PATH,\n            \"-i\", str(org_wav_fn), \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)]\n    subprocess.run(args)",
        "writer": "human",
        "rewrite": [
            "import subprocess\nfrom pathlib import Path\n\ndef convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.is_file():\n        raise FileNotFoundError\n    subprocess.run([config.FFMPEG_PATH, \"-y\", \"-i\", str(org_wav_fn), \"-ac\", \"1\", \"-ar\", \"16000\", \"-acodec\", \"pcm_s16le\", str(tgt_wav_fn)])",
            "import subprocess\nfrom pathlib import Path\n\ndef convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.exists():\n        raise FileNotFoundError\n    try:\n        subprocess.run([config.FFMPEG_PATH, \"-y\", \"-i\", str(org_wav_fn), \"-ac\", \"1\", \"-ar\", \"16000\", \"-f\", \"wav\", \"-bits_per_sample\", \"16\", str(tgt_wav_fn)], check=True, stderr=subprocess.PIPE)\n    except subprocess.CalledProcessError as e:\n        print(f\"FFmpeg Error: {e.stderr.decode()}\")\n        raise",
            "import subprocess\nfrom pathlib import Path\n\ndef convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.is_file():\n        raise FileNotFoundError\n    subprocess.run([config.FFMPEG_PATH, \"-i\", str(org_wav_fn), \"-acodec\", \"pcm_s16le\", \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)], check=True, stderr=subprocess.PIPE)",
            "import subprocess\nfrom pathlib import Path\n\ndef convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.is_file():\n        raise FileNotFoundError\n    try:\n        subprocess.run([config.FFMPEG_BIN, \"-y\", \"-i\", str(org_wav_fn), \"-acodec\", \"pcm_s16le\", \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)], check=True, capture_output=True, text=True)\n    except subprocess.CalledProcessError as e:\n        print(f\"Error converting WAV: {e.stderr}\")\n        raise",
            "import subprocess\nfrom pathlib import Path\n\ndef convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.is_file():\n        raise FileNotFoundError\n    subprocess.run([config.ffmpeg, \"-y\", \"-i\", str(org_wav_fn), \"-acodec\", \"pcm_s16le\", \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)], check=True, stderr=subprocess.PIPE)",
            "import subprocess\nfrom pathlib import Path\n\ndef convert_wav(org_wav_fn: Path, tgt_wav_fn: Path) -> None:\n    if not org_wav_fn.is_file():\n        raise FileNotFoundError\n    try:\n        subprocess.check_call([config.ffmpeg, \"-i\", str(org_wav_fn), \"-acodec\", \"pcm_s16le\", \"-ac\", \"1\", \"-ar\", \"16000\", str(tgt_wav_fn)])\n    except subprocess.CalledProcessError as e:\n        raise RuntimeError(f\"FFmpeg conversion failed with return code {e.returncode}\") from e"
        ]
    },
    {
        "id": 44,
        "prompt": "def _load_aux_image(self, image, auxfile):\n        \"\"\"\n        Load a fits file (bkg/rms/curve) and make sure that\n        it is the same shape as the main image.\n\n        Parameters\n        ----------\n        image : :class:`AegeanTools.fits_image.FitsImage`\n            The main image that has already been loaded.\n\n        auxfile : str or HDUList\n            The auxiliary file to be loaded.\n\n        Returns\n        -------\n        aux : :class:`AegeanTools.fits_image.FitsImage`\n            The loaded image.\n        \"\"\"",
        "code": "def _load_aux_image(self, image, auxfile):\n        \"\"\"\n        Load a fits file (bkg/rms/curve) and make sure that\n        it is the same shape as the main image.\n\n        Parameters\n        ----------\n        image : :class:`AegeanTools.fits_image.FitsImage`\n            The main image that has already been loaded.\n\n        auxfile : str or HDUList\n            The auxiliary file to be loaded.\n\n        Returns\n        -------\n        aux : :class:`AegeanTools.fits_image.FitsImage`\n            The loaded image.\n        \"\"\"\n        auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n        if auximg.shape != image.get_pixels().shape:\n            self.log.error(\"file {0} is not the same size as the image map\".format(auxfile))\n            self.log.error(\"{0}= {1}, image = {2}\".format(auxfile, auximg.shape, image.get_pixels().shape))\n            sys.exit(1)\n        return auximg",
        "writer": "human",
        "rewrite": [
            "def _load_aux_image(self, image, auxfile):\n    auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    if auximg.shape != image.get_pixels().shape:\n        raise ValueError(f\"file {auxfile} is not the same size as the image map: {auximg.shape} != {image.get_pixels().shape}\")\n    return auximg",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n        if auximg.shape != image.get_pixels().shape:\n            raise ValueError(f\"Shape mismatch: {auximg.shape} != {image.get_pixels().shape} for {auxfile}\")\n        return auximg\n    except Exception as e:\n        self.log.exception(f\"Error loading auxiliary image {auxfile}: {e}\")\n        raise",
            "def _load_aux_image(self, image, auxfile):\n    auximg = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    if auximg.shape != image.get_pixels().shape:\n        raise ValueError(f\"Auxiliary file {auxfile} has shape {auximg.shape}, expected {image.get_pixels().shape}\")\n    return auximg",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        aux_data = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n        assert aux_data.shape == image.get_pixels().shape, f\"Shape mismatch: {aux_data.shape} != {image.get_pixels().shape} for {auxfile}\"\n        return aux_data\n    except AssertionError as e:\n        self.log.error(e)\n        raise\n    except Exception as e:\n        self.log.exception(f\"Error loading {auxfile}: {e}\")\n        raise",
            "def _load_aux_image(self, image, auxfile):\n    try:\n        return FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    except Exception as e:\n        self.log.exception(f\"Failed to load auxiliary image {auxfile}: {e}\")\n        raise",
            "def _load_aux_image(self, image, auxfile):\n    aux_data = FitsImage(auxfile, beam=self.global_data.beam).get_pixels()\n    if aux_data.shape != image.get_pixels().shape:\n        raise ValueError(f\"Incompatible shapes: {aux_data.shape} vs {image.get_pixels().shape} for {auxfile}\")\n    return aux_data"
        ]
    },
    {
        "id": 49,
        "prompt": "def new(cls, nsptagname, val):\n        \"\"\"\n        Return a new ``CT_DecimalNumber`` element having tagname *nsptagname*\n        and ``val`` attribute set to *val*.\n        \"\"\"",
        "code": "def new(cls, nsptagname, val):\n        \"\"\"\n        Return a new ``CT_DecimalNumber`` element having tagname *nsptagname*\n        and ``val`` attribute set to *val*.\n        \"\"\"\n        return OxmlElement(nsptagname, attrs={qn('w:val'): str(val)})",
        "writer": "human",
        "rewrite": [
            "def new(cls, nsptagname, val):\n    return OxmlElement(nsptagname, {qn('w:val'): str(val)})",
            "def new(cls, nsptagname, val):\n    return OxmlElement(nsptagname, {qn('w:val'): str(val)})",
            "def new(cls, nsptagname, val):\n    return OxmlElement(nsptagname, {qn('w:val'): str(val)})",
            "def new(cls, nsptagname, val):\n    return OxmlElement(nsptagname, **{qn('w:val'): str(val)})",
            "def new(cls, nsptagname, val):\n  return OxmlElement(nsptagname, {qn('w:val'): str(val)})",
            "def new(cls, nsptagname, val):\n    return OxmlElement(nsptagname, {qn('w:val'): str(val)})"
        ]
    },
    {
        "id": 49,
        "prompt": "def new(cls, nsptagname, val):\n        \"\"\"\n        Return a new ``CT_DecimalNumber`` element having tagname *nsptagname*\n        and ``val`` attribute set to *val*.\n        \"\"\"",
        "code": "def new(cls, nsptagname, val):\n    element = OxmlElement(nsptagname)\n    element.val = val\n    return element",
        "writer": "machine",
        "rewrite": [
            "def new(cls, nsptagname, val):\n    element = cls(nsptagname)\n    element.text = str(val)\n    return element",
            "def new(cls, nsptagname, val):\n    element = cls(nsptagname)\n    element.text = str(val)\n    return element",
            "def new(cls, nsptagname, val):\n    element = cls(nsptagname)\n    element.text = str(val)\n    return element",
            "def new(cls, nsptagname, val):\n    element = cls(nsptagname)\n    element.text = str(val)\n    return element",
            "def new(cls, nsptagname, val):\n    element = cls(nsptagname)\n    element.text = str(val)\n    return element",
            "def new(cls, nsptagname, val):\n    element = cls(nsptagname)\n    element.text = str(val)\n    return element"
        ]
    },
    {
        "id": 51,
        "prompt": "def create_api_equipment(self):\n        \"\"\"Get an instance of Api Equipment services facade.\"\"\"",
        "code": "def create_api_equipment(self):\n    return ApiEquipment(self.client)",
        "writer": "machine",
        "rewrite": [
            "def create_api_equipment(client):\n    return ApiEquipment(client)",
            "def create_api_equipment(client):\n    return ApiEquipment(client)",
            "def create_api_equipment(client):\n    return ApiEquipment(client)",
            "def create_api_equipment(client):\n    return ApiEquipment(client)",
            "def create_api_equipment(client):\n  return ApiEquipment(client)",
            "def create_api_equipment(client):\n    return ApiEquipment(client)"
        ]
    },
    {
        "id": 51,
        "prompt": "def create_api_equipment(self):\n        \"\"\"Get an instance of Api Equipment services facade.\"\"\"",
        "code": "def create_api_equipment(self):\n        \"\"\"Get an instance of Api Equipment services facade.\"\"\"\n        return ApiEquipment(\n            self.networkapi_url,\n            self.user,\n            self.password,\n            self.user_ldap)",
        "writer": "human",
        "rewrite": [
            "def create_api_equipment(networkapi_url, user, password, user_ldap):\n    return ApiEquipment(networkapi_url, user, password, user_ldap)",
            "def create_api_equipment(networkapi_url, user, password, user_ldap):\n    return ApiEquipment(networkapi_url, user, password, user_ldap)",
            "def create_api_equipment(self):\n    return ApiEquipment(*self.get_credentials())",
            "def create_api_equipment(self):\n    return ApiEquipment(**self.__dict__)",
            "def create_api_equipment(self):\n  return ApiEquipment(networkapi_url=self.networkapi_url, user=self.user, password=self.password, user_ldap=self.user_ldap)",
            "def create_api_equipment(self):\n    config = self.get_api_config()\n    return ApiEquipment(**config)"
        ]
    },
    {
        "id": 52,
        "prompt": "def clean_series_name(seriesname):\n    \"\"\"Cleans up series name.\n\n    By removing any . and _ characters, along with any trailing hyphens.\n\n    Is basically equivalent to replacing all _ and . with a\n    space, but handles decimal numbers in string, for example:\n\n    >>> _clean_series_name(\"an.example.1.0.test\")\n    'an example 1.0 test'\n    >>> _clean_series_name(\"an_example_1.0_test\")\n    'an example 1.0 test'\n    \"\"\"",
        "code": "def clean_series_name(seriesname):\n    cleaned = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = cleaned.split()\n    result = []\n    for i, part in enumerate(parts):\n        if i > 0 and part.replace('.', '').isdigit() and parts[i-1].replace('.', '').isdigit():\n            result.append('.' + part)\n        else:\n            result.append(part)\n    return ' '.join(result).strip('-')",
        "writer": "machine",
        "rewrite": [
            "def clean_series_name(seriesname):\n    cleaned = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = cleaned.split()\n    result = [part if not (i > 0 and part.isdigit() and parts[i-1].isdigit()) else '.' + part for i, part in enumerate(parts)]\n    return ' '.join(result).strip('-')",
            "def clean_series_name(seriesname):\n  seriesname = seriesname.replace('_', ' ').replace('.', ' ')\n  parts = seriesname.split()\n  cleaned_parts = []\n  for i, part in enumerate(parts):\n    if i > 0 and parts[i-1].isdigit() and part.isdigit():\n      cleaned_parts.append('.' + part)\n    else:\n      cleaned_parts.append(part)\n  return ' '.join(cleaned_parts).strip('-')",
            "import re\n\ndef clean_series_name(seriesname):\n    seriesname = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = seriesname.split()\n    parts = [re.sub(r\"^\\d+$\", r\".\\g<0>\", part) if i > 0 and parts[i-1].isdigit() and part.isdigit() else part for i, part in enumerate(parts)]\n    return \" \".join(parts).strip(\"-\")",
            "def clean_series_name(seriesname):\n    seriesname = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = seriesname.split()\n    for i in range(1, len(parts)):\n        if parts[i-1].isdigit() and parts[i].isdigit():\n            parts[i] = '.' + parts[i]\n    return ' '.join(parts).strip('-')",
            "def clean_series_name(seriesname):\n    seriesname = seriesname.replace('_', ' ').replace('.', ' ')\n    parts = seriesname.split()\n    for i in range(len(parts) - 1, 0, -1):\n        if parts[i].isdigit() and parts[i-1].isdigit():\n            parts[i] = '.' + parts[i]\n    return ' '.join(parts).strip('-')",
            "def clean_series_name(name):\n    name = name.replace('_', ' ').replace('.', ' ')\n    words = name.split()\n    for i in range(1, len(words)):\n        if words[i-1].isdigit() and words[i].isdigit():\n            words[i] = '.' + words[i]\n    return ' '.join(words).strip('-')"
        ]
    },
    {
        "id": 52,
        "prompt": "def clean_series_name(seriesname):\n    \"\"\"Cleans up series name.\n\n    By removing any . and _ characters, along with any trailing hyphens.\n\n    Is basically equivalent to replacing all _ and . with a\n    space, but handles decimal numbers in string, for example:\n\n    >>> _clean_series_name(\"an.example.1.0.test\")\n    'an example 1.0 test'\n    >>> _clean_series_name(\"an_example_1.0_test\")\n    'an example 1.0 test'\n    \"\"\"",
        "code": "def clean_series_name(seriesname):\n    \"\"\"Cleans up series name.\n\n    By removing any . and _ characters, along with any trailing hyphens.\n\n    Is basically equivalent to replacing all _ and . with a\n    space, but handles decimal numbers in string, for example:\n\n    >>> _clean_series_name(\"an.example.1.0.test\")\n    'an example 1.0 test'\n    >>> _clean_series_name(\"an_example_1.0_test\")\n    'an example 1.0 test'\n    \"\"\"\n    if not seriesname:\n        return seriesname\n    # TODO(xxxx): Could this be made to clean \"Hawaii.Five-0.2010\" into\n    # \"Hawaii Five-0 2010\"?\n    seriesname = re.sub(r'(\\D)[.](\\D)', '\\\\1 \\\\2', seriesname)\n    seriesname = re.sub(r'(\\D)[.]', '\\\\1 ', seriesname)\n    seriesname = re.sub(r'[.](\\D)', ' \\\\1', seriesname)\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub('-$', '', seriesname)\n    return _replace_series_name(seriesname.strip(),\n                                cfg.CONF.input_series_replacements)",
        "writer": "human",
        "rewrite": [
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = re.sub(r'[._]', ' ', seriesname)\n    seriesname = re.sub('-$', '', seriesname)\n    return seriesname.strip()",
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = re.sub(r'[._]', ' ', seriesname)\n    seriesname = re.sub(r'(\\d)\\.(\\d)', r'\\1.\\2', seriesname)\n    seriesname = re.sub('-$', '', seriesname).strip()\n    return seriesname",
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub(r'\\.(\\w)', r' \\1', seriesname)\n    seriesname = re.sub(r'(\\w)\\.', r'\\1 ', seriesname)\n    seriesname = re.sub('-$', '', seriesname).strip()\n    return seriesname",
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname: return seriesname\n    seriesname = seriesname.replace('_', ' ').replace('.', ' ')\n    seriesname = re.sub(r'\\s+', ' ', seriesname)\n    return seriesname.strip().rstrip('-')",
            "import re\n\ndef clean_series_name(seriesname):\n  if not seriesname:\n    return seriesname\n  seriesname = seriesname.replace('_', ' ')\n  seriesname = re.sub(r'\\.(\\w)', r' \\1', seriesname)\n  seriesname = re.sub(r'(\\w)\\.', r'\\1 ', seriesname)\n  seriesname = seriesname.rstrip('-').strip()\n  return seriesname",
            "import re\n\ndef clean_series_name(seriesname):\n    if not seriesname:\n        return seriesname\n    seriesname = seriesname.replace('_', ' ')\n    seriesname = re.sub(r'\\.(\\w)', r' \\1', seriesname)\n    seriesname = re.sub(r'(\\w)\\.', r'\\1 ', seriesname)\n    seriesname = seriesname.rstrip('-').strip()\n    return seriesname"
        ]
    },
    {
        "id": 53,
        "prompt": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"",
        "code": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"\n    # Log the request\n    self.logger.info(f\"SOAP Request: {envelope}\")\n    self.logger.info(f\"HTTP Headers: {http_headers}\")\n    self.logger.info(f\"Operation: {operation}\")\n    self.logger.info(f\"Binding Options: {binding_options}\")\n\n    # Return the envelope and headers without modification\n    return envelope, http_headers",
        "writer": "machine",
        "rewrite": [
            "def egress(self, envelope, http_headers, operation, binding_options):\n    self.logger.info(f\"SOAP Request: {envelope}\")\n    self.logger.info(f\"HTTP Headers: {http_headers}\")\n    self.logger.info(f\"Operation: {operation}\")\n    self.logger.info(f\"Binding Options: {binding_options}\")\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    log_data = {\n        \"SOAP Request\": envelope,\n        \"HTTP Headers\": http_headers,\n        \"Operation\": operation,\n        \"Binding Options\": binding_options\n    }\n    self.logger.info(log_data)\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    self.logger.info({\"envelope\": envelope, \"http_headers\": http_headers, \"operation\": operation, \"binding_options\": binding_options})\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n  log_msg = \"SOAP Request: %s, HTTP Headers: %s, Operation: %s, Binding Options: %s\" % (envelope, http_headers, operation, binding_options)\n  self.logger.info(log_msg)\n  return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    self.logger.info({\"type\": \"egress\", \"envelope\": envelope, \"http_headers\": http_headers, \"operation\": operation, \"binding_options\": binding_options})\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    self.logger.debug(envelope)\n    self.logger.debug(http_headers)\n    self.logger.debug(operation)\n    self.logger.debug(binding_options)\n    return envelope, http_headers"
        ]
    },
    {
        "id": 54,
        "prompt": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"",
        "code": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The list_nodes_min function must be called with -f or --function.'\n        )\n\n    nodes = list_nodes_full()\n\n    result = {}\n    for instance_id, full_node in nodes.items():\n        result[instance_id] = {\n            'name': full_node['instance_name'],\n            'status': full_node['status'],\n        }\n\n    return result",
        "writer": "human",
        "rewrite": [
            "def list_nodes_min(call=None):\n    if call != 'function':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    nodes = list_nodes_full()\n    return {instance_id: {'name': node['instance_name'], 'status': node['status']} for instance_id, node in nodes.items()}",
            "def list_nodes_min(call=None):\n    if call != 'function':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return {instance_id: {'name': node['instance_name'], 'status': node['status']} for instance_id, node in list_nodes_full().items()}",
            "def list_nodes_min(call=None):\n    if call != 'function':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return {k: {'name': v['instance_name'], 'status': v['status']} for k, v in list_nodes_full().items()}",
            "def list_nodes_min(call=None):\n    if call != 'function': raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return {id: {'name': node['instance_name'], 'status': node['status']} for id, node in list_nodes_full().items()}",
            "def list_nodes_min(call=None):\n    if call != 'function': raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return dict((k, {'name': v['instance_name'], 'status': v['status']}) for k, v in list_nodes_full().items())",
            "def list_nodes_min(call=None):\n    if call != 'function': raise SaltCloudSystemExit('list_nodes_min needs -f or --function')\n    return {i: {'name': n['instance_name'], 'status': n['status']} for i, n in list_nodes_full().items()}"
        ]
    },
    {
        "id": 54,
        "prompt": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"",
        "code": "def list_nodes_min(call=None):\n    \"\"\"\n    Return a list of the instances that are on the provider. Only a list of\n    instances names, and their state, is returned.\n\n    CLI Examples:\n\n    .. code-block:: bash\n\n        salt-cloud -f list_nodes_min my-qingcloud\n    \"\"\"\n    if call == 'action':\n        raise SaltCloudSystemExit(\n            'The list_nodes_min function must be called with -f or --function.'\n        )\n\n    ret = {}\n    nodes = _get_nodes()\n\n    for node in nodes:\n        ret[node['instance_id']] = {\n            'state': node['status']\n        }\n\n    return ret",
        "writer": "machine",
        "rewrite": [
            "def list_nodes_min(call=None):\n    if call == 'action':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    ret = {}\n    nodes = _get_nodes()\n    for node in nodes:\n        ret[node['instance_id']] = {'state': node['status']}\n    return ret",
            "def list_nodes_min(call=None):\n    if call == 'action':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return {node['instance_id']: {'state': node['status']} for node in _get_nodes()}",
            "def list_nodes_min(call=None):\n    if call == 'action':\n        raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return dict((node['instance_id'], {'state': node['status']}) for node in _get_nodes())",
            "def list_nodes_min(call=None):\n    if call == 'action': raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return {n['instance_id']: {'state': n['status']} for n in _get_nodes()}",
            "def list_nodes_min(call=None):\n    if call == 'action': raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return {i['instance_id']: {'state': i['status']} for i in _get_nodes()}",
            "def list_nodes_min(call=None):\n    if call == 'action': raise SaltCloudSystemExit('The list_nodes_min function must be called with -f or --function.')\n    return dict((n['instance_id'], {'state': n['status']}) for n in _get_nodes())"
        ]
    },
    {
        "id": 57,
        "prompt": "def L1(layer=\"input\", constant=0, batch=None):\n  \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"",
        "code": "def L1(layer=\"input\", constant=0, batch=None):\n  \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"\n  if batch is None:\n    return lambda T: tf.reduce_sum(tf.abs(T(layer) - constant))\n  else:\n    return lambda T: tf.reduce_sum(tf.abs(T(layer)[batch] - constant))",
        "writer": "human",
        "rewrite": [
            "def L1(layer=\"input\", constant=0, batch=None):\n  def l1_norm(T):\n    tensor = T(layer)\n    if batch is not None:\n      tensor = tensor[batch]\n    return tf.reduce_sum(tf.abs(tensor - constant))\n  return l1_norm",
            "def L1(layer=\"input\", constant=0, batch=None):\n    def l1_norm(T):\n        return tf.reduce_sum(tf.abs(T(layer)[batch] - constant if batch is not None else T(layer) - constant))\n    return l1_norm",
            "import tensorflow as tf\n\ndef L1(layer=\"input\", constant=0, batch=None):\n  def l1_norm(tensor_func):\n    tensor = tensor_func(layer)\n    if batch is not None:\n      tensor = tf.gather(tensor, batch, axis=0) #Assuming batch is index or list of indices\n    return tf.reduce_sum(tf.abs(tensor - constant))\n  return l1_norm",
            "import tensorflow as tf\n\ndef L1(layer=\"input\", constant=0, batch=None):\n    return lambda T: tf.reduce_sum(tf.abs(T(layer)[batch] if batch is not None else T(layer) - constant))",
            "import tensorflow as tf\n\ndef L1(layer='input', constant=0, batch=None):\n  return lambda f: tf.reduce_sum(tf.abs(f(layer) - constant if batch is None else f(layer)[batch] - constant))",
            "import tensorflow as tf\n\ndef L1(layer=\"input\", constant=0, batch=None):\n  def l1_loss(model):\n    output = model(layer)\n    if batch is not None:\n        output = output[batch]\n    return tf.reduce_sum(tf.abs(output - constant))\n  return l1_loss"
        ]
    },
    {
        "id": 55,
        "prompt": "def init2(\n        self, \n        input_tube,      # Read task from the input tube.\n        output_tubes,    # Send result on all the output tubes.\n        num_workers,     # Total number of workers in the stage.\n        disable_result,  # Whether to override any result with None.\n        do_stop_task,    # Whether to call doTask() on \"stop\" request.\n        ):\n        \"\"\"Create *num_workers* worker objects with *input_tube* and \n        an iterable of *output_tubes*. The worker reads a task from *input_tube* \n        and writes the result to *output_tubes*.\"\"\"",
        "code": "def init2(\n        self, \n        input_tube,      # Read task from the input tube.\n        output_tubes,    # Send result on all the output tubes.\n        num_workers,     # Total number of workers in the stage.\n        disable_result,  # Whether to override any result with None.\n        do_stop_task,    # Whether to call doTask() on \"stop\" request.\n        ):\n        \"\"\"Create *num_workers* worker objects with *input_tube* and \n        an iterable of *output_tubes*. The worker reads a task from *input_tube* \n        and writes the result to *output_tubes*.\"\"\"\n\n        super(UnorderedWorker, self).__init__()\n        self._tube_task_input = input_tube\n        self._tubes_result_output = output_tubes\n        self._num_workers = num_workers\n        self._disable_result = disable_result\n        self._do_stop_task = do_stop_task",
        "writer": "human",
        "rewrite": [
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    super().__init__()\n    self._tube_task_input = input_tube\n    self._tubes_result_output = output_tubes\n    self._num_workers = num_workers\n    self._disable_result = disable_result\n    self._do_stop_task = do_stop_task",
            "def __init__(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    super().__init__()\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task",
            "def __init__(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    super().__init__()\n    self.input = input_tube\n    self.outputs = output_tubes\n    self.worker_count = num_workers\n    self.disable_results = disable_result\n    self.stop_task = do_stop_task",
            "def __init__(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    super(UnorderedWorker, self).__init__()\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task",
            "def __init__(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    super().__init__()\n    self.in_tube = input_tube\n    self.out_tubes = output_tubes\n    self.n_workers = num_workers\n    self.disable_res = disable_result\n    self.stop_task_enabled = do_stop_task",
            "def __init__(self, input, outputs, num_workers, disable_output, handle_stop):\n    super(UnorderedWorker, self).__init__()\n    self.input = input\n    self.outputs = outputs\n    self.num_workers = num_workers\n    self.disable_output = disable_output\n    self.handle_stop = handle_stop"
        ]
    },
    {
        "id": 57,
        "prompt": "def L1(layer=\"input\", constant=0, batch=None):\n  \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"",
        "code": "def L1(layer=\"input\", constant=0, batch=None):\n    \"\"\"L1 norm of layer. Generally used as penalty.\"\"\"\n    import tensorflow as tf\n    \n    if batch is None:\n        batch = tf.shape(layer)[0]\n    \n    l1_norm = tf.reduce_sum(tf.abs(layer), axis=list(range(1, len(layer.shape))))\n    l1_norm = tf.reshape(l1_norm, [batch, -1])\n    \n    return constant * tf.reduce_sum(l1_norm)",
        "writer": "machine",
        "rewrite": [
            "import tensorflow as tf\n\ndef L1(layer=\"input\", constant=0, batch=None):\n    if batch is None:\n        batch = tf.shape(layer)[0]\n    l1_norm = tf.reduce_sum(tf.abs(layer), axis=list(range(1,len(layer.shape))))\n    l1_norm = tf.reshape(l1_norm, [batch, -1])\n    return constant * tf.reduce_sum(l1_norm)",
            "import tensorflow as tf\n\ndef L1(layer, constant=0, batch=None):\n  batch = tf.shape(layer)[0] if batch is None else batch\n  l1 = tf.reduce_sum(tf.abs(layer), axis=1)\n  return constant * tf.reduce_sum(l1)",
            "import tensorflow as tf\n\ndef L1(layer, constant=0, batch=None):\n    batch = tf.shape(layer)[0] if batch is None else batch\n    return constant * tf.reduce_sum(tf.abs(layer), axis=tuple(range(1, tf.rank(layer))))",
            "import tensorflow as tf\n\ndef L1(layer, constant=0, batch=None):\n  if batch is None:\n    batch = tf.shape(layer)[0]\n  return constant * tf.reduce_sum(tf.reshape(tf.reduce_sum(tf.abs(layer), axis=list(range(1, tf.rank(layer)))), (batch, -1)))",
            "import tensorflow as tf\n\ndef L1(layer, constant=0, batch=None):\n  b = tf.shape(layer)[0] if batch is None else batch\n  return constant * tf.reduce_sum(tf.reduce_sum(tf.abs(layer), axis=tuple(range(1, tf.rank(layer)))))",
            "import tensorflow as tf\n\ndef L1(layer, constant=0, batch=None):\n  batch = tf.shape(layer)[0] if batch is None else batch\n  return constant * tf.reduce_sum(tf.reduce_sum(tf.math.abs(layer), axis=list(range(1, tf.rank(layer)))))"
        ]
    },
    {
        "id": 59,
        "prompt": "def _validate_condition_keys(self, field, value, error):\n        \"\"\"\n        Validates that all of the keys in one of the sets of keys are defined\n        as keys of ``value``.\n        \"\"\"",
        "code": "def _validate_condition_keys(self, field, value, error):\n    \"\"\"\n    Validates that all of the keys in one of the sets of keys are defined\n    as keys of ``value``.\n    \"\"\"\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n    else:\n        valid_keys = set(self.condition_keys)\n        provided_keys = set(value.keys())\n        if not valid_keys.issuperset(provided_keys):\n            invalid_keys = provided_keys - valid_keys\n            error(field, f\"Invalid keys: {', '.join(invalid_keys)}\")",
        "writer": "machine",
        "rewrite": [
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n        return\n    missing_keys = set(self.condition_keys) - set(value.keys())\n    if missing_keys:\n        error(field, f\"Missing keys: {', '.join(missing_keys)}\")",
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n        return\n    for key in value:\n        if key not in self.condition_keys:\n            error(field, f\"Invalid key: {key}\")",
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n        return\n    if not all(k in self.condition_keys for k in value):\n        error(field, f\"Invalid keys: {', '.join(k for k in value if k not in self.condition_keys)}\")",
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n        return\n    missing = set(self.condition_keys) - set(value)\n    if missing:\n        error(field, f\"Missing keys: {', '.join(missing)}\")",
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n        return\n    extra_keys = set(value.keys()) - set(self.condition_keys)\n    if extra_keys:\n        error(field, f\"Extra keys: {', '.join(extra_keys)}\")",
            "def _validate_condition_keys(self, field, value, error):\n    if not isinstance(value, dict):\n        error(field, \"Must be a dictionary\")\n        return\n    if set(value).difference(self.condition_keys):\n        error(field, f\"Invalid keys: {', '.join(set(value).difference(self.condition_keys))}\")"
        ]
    },
    {
        "id": 55,
        "prompt": "def init2(\n        self, \n        input_tube,      # Read task from the input tube.\n        output_tubes,    # Send result on all the output tubes.\n        num_workers,     # Total number of workers in the stage.\n        disable_result,  # Whether to override any result with None.\n        do_stop_task,    # Whether to call doTask() on \"stop\" request.\n        ):\n        \"\"\"Create *num_workers* worker objects with *input_tube* and \n        an iterable of *output_tubes*. The worker reads a task from *input_tube* \n        and writes the result to *output_tubes*.\"\"\"",
        "code": "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]",
        "writer": "machine",
        "rewrite": [
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(i, output_tubes, disable_result, do_stop_task) for i in [input_tube]*num_workers]",
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]",
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]",
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]",
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]",
            "def init2(self, input_tube, output_tubes, num_workers, disable_result, do_stop_task):\n    self.input_tube = input_tube\n    self.output_tubes = output_tubes\n    self.num_workers = num_workers\n    self.disable_result = disable_result\n    self.do_stop_task = do_stop_task\n    self.workers = [Worker(input_tube, output_tubes, disable_result, do_stop_task) for _ in range(num_workers)]"
        ]
    },
    {
        "id": 62,
        "prompt": "def close(self):\n        \"\"\"\n        Close the stream. Assumes stream has 'close' method.\n        \"\"\"",
        "code": "def close(self):\n    \"\"\"\n    Close the stream. Assumes stream has 'close' method.\n    \"\"\"\n    self.stream.close()",
        "writer": "machine",
        "rewrite": [
            "def close_stream(stream):\n    stream.close()",
            "def close_stream(stream):\n    stream.close()",
            "def close_stream(stream):\n  stream.close()",
            "def close_stream(stream):\n    stream.close()",
            "def close_stream(stream):\n    stream.close()",
            "def close_stream(stream):\n    stream.close()"
        ]
    },
    {
        "id": 64,
        "prompt": "def delete(self):\n        \"\"\"Remove myself from my :class:`Character`.\n\n        For symmetry with :class:`Thing` and :class`Place`.\n\n        \"\"\"",
        "code": "def delete(self):\n    if hasattr(self, 'character'):\n        self.character.remove_avatar(self)\n        self.character = None",
        "writer": "machine",
        "rewrite": [
            "def delete(self):\n    try:\n        self.character.remove_avatar(self)\n    except AttributeError:\n        pass\n    self.character = None",
            "def delete(self):\n    if self.character:\n        self.character.remove_avatar(self)\n        self.character = None",
            "def delete(self):\n    try:\n        self.character.remove_avatar(self)\n    except AttributeError:\n        pass\n    self.character = None",
            "def delete(self):\n    if 'character' in self.__dict__:\n        self.character.remove_avatar(self)\n        del self.character",
            "def delete(self):\n    try:\n        self.character.remove_avatar(self)\n    except AttributeError:\n        return\n    self.character = None",
            "def delete(self):\n    try:\n        self.character.remove_avatar(self)\n    except AttributeError:\n        pass\n    self.character = None"
        ]
    },
    {
        "id": 61,
        "prompt": "def next(self):\n        \"\"\" allow us to iterate over the output of our command \"\"\"",
        "code": "def next(self):\n    if self.current_index < len(self.output):\n        result = self.output[self.current_index]\n        self.current_index += 1\n        return result\n    else:\n        raise StopIteration()",
        "writer": "machine",
        "rewrite": [
            "def next(self):\n    try:\n        result = self.output[self.current_index]\n        self.current_index += 1\n        return result\n    except IndexError:\n        raise StopIteration",
            "def __next__(self):\n    if self.current_index >= len(self.output):\n        raise StopIteration\n    result = self.output[self.current_index]\n    self.current_index += 1\n    return result",
            "def __next__(self):\n    try:\n        return self.output[self.current_index]\n    except IndexError:\n        raise StopIteration\n    finally:\n        self.current_index += 1",
            "def __next__(self):\n    if self.current_index < len(self.output):\n        self.current_index +=1\n        return self.output[self.current_index -1]\n    else:\n        raise StopIteration",
            "def __next__(self):\n    try:\n        return self.output[self.current_index++]\n    except IndexError:\n        raise StopIteration",
            "def __next__(self):\n    if self.current_index < len(self.output):\n        return self.output[self.current_index++]\n    raise StopIteration"
        ]
    },
    {
        "id": 65,
        "prompt": "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization. Dependent upon the access\n    rights of the profile token.\n\n    .. versionadded:: 2016.11.0\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"",
        "code": "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization. Dependent upon the access\n    rights of the profile token.\n\n    .. versionadded:: 2016.11.0\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"\n    repos = []\n    for repo in _get_repos(profile):\n        if repo.private is True:\n            repos.append(repo.name)\n    return repos",
        "writer": "human",
        "rewrite": [
            "def list_private_repos(profile='github'):\n    return [repo.name for repo in _get_repos(profile) if repo.private]",
            "def list_private_repos(profile='github'):\n    return [repo.name for repo in _get_repos(profile) if repo.private]",
            "def list_private_repos(profile='github'):\n    return [repo.name for repo in _get_repos(profile) if repo.private == True]",
            "def list_private_repos(profile='github'):\n    return [r.name for r in _get_repos(profile) if r.private]",
            "def list_private_repos(profile='github'):\n    return [repo.name for repo in _get_repos(profile) if repo.private]",
            "def list_private_repos(profile='github'):\n    return [r.name for r in _get_repos(profile) if r.private is True]"
        ]
    },
    {
        "id": 61,
        "prompt": "def next(self):\n        \"\"\" allow us to iterate over the output of our command \"\"\"",
        "code": "def next(self):\n        \"\"\" allow us to iterate over the output of our command \"\"\"\n\n        if self._stopped_iteration:\n            raise StopIteration()\n\n        # we do this because if get blocks, we can't catch a KeyboardInterrupt\n        # so the slight timeout allows for that.\n        while True:\n            try:\n                chunk = self.process._pipe_queue.get(True, 0.001)\n            except Empty:\n                if self.call_args[\"iter_noblock\"]:\n                    return errno.EWOULDBLOCK\n            else:\n                if chunk is None:\n                    self.wait()\n                    self._stopped_iteration = True\n                    raise StopIteration()\n                try:\n                    return chunk.decode(self.call_args[\"encoding\"],\n                        self.call_args[\"decode_errors\"])\n                except UnicodeDecodeError:\n                    return chunk",
        "writer": "human",
        "rewrite": [
            "def next(self):\n    if self._stopped_iteration:\n        raise StopIteration()\n    while True:\n        try:\n            chunk = self.process._pipe_queue.get(True, 0.001)\n            if chunk is None:\n                self.wait()\n                self._stopped_iteration = True\n                raise StopIteration()\n            try:\n                return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n            except UnicodeDecodeError:\n                return chunk\n        except queue.Empty:\n            if self.call_args[\"iter_noblock\"]:\n                return errno.EWOULDBLOCK",
            "def next(self):\n    if self._stopped_iteration: raise StopIteration\n    while True:\n        try:\n            chunk = self.process._pipe_queue.get(timeout=0.001)\n            if chunk is None:\n                self.wait()\n                self._stopped_iteration = True\n                raise StopIteration\n            try: return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n            except UnicodeDecodeError: return chunk\n        except queue.Empty:\n            if self.call_args.get(\"iter_noblock\"): return errno.EWOULDBLOCK",
            "def next(self):\n    if self._stopped_iteration: raise StopIteration\n    while True:\n        try:\n            chunk = self.process._pipe_queue.get(True, 0.001)\n            if chunk is None:\n                self._stopped_iteration = True\n                self.wait()\n                raise StopIteration\n            return chunk.decode(self.call_args['encoding'], self.call_args['decode_errors'])\n        except queue.Empty:\n            if self.call_args['iter_noblock']: return errno.EWOULDBLOCK\n        except UnicodeDecodeError:\n            return chunk",
            "def next(self):\n    if self._stopped_iteration:\n        raise StopIteration()\n    try:\n        chunk = self.process._pipe_queue.get(True, 0.001)\n        if chunk is None:\n            self.wait()\n            self._stopped_iteration = True\n            raise StopIteration()\n        try:\n            return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n        except UnicodeDecodeError:\n            return chunk\n    except queue.Empty:\n        if self.call_args[\"iter_noblock\"]:\n            return errno.EWOULDBLOCK",
            "def next(self):\n    if self._stopped_iteration: raise StopIteration\n    try:\n        chunk = self.process._pipe_queue.get(timeout=.001)\n        if chunk is None:\n            self._stopped_iteration = True\n            self.wait()\n            raise StopIteration\n        return chunk.decode(self.call_args[\"encoding\"], self.call_args[\"decode_errors\"])\n    except queue.Empty:\n        if self.call_args[\"iter_noblock\"]: return errno.EWOULDBLOCK\n    except UnicodeDecodeError:\n        return chunk",
            "def next(self):\n    if self._stopped_iteration: raise StopIteration\n    try:\n        chunk = self.process._pipe_queue.get(timeout=0.001)\n        if chunk is None:\n            self._stopped_iteration = True; self.wait(); raise StopIteration\n        try: return chunk.decode(self.call_args[\"encoding\"], errors=self.call_args[\"decode_errors\"])\n        except UnicodeDecodeError: return chunk\n    except queue.Empty:\n        if self.call_args[\"iter_noblock\"]: return errno.EWOULDBLOCK"
        ]
    },
    {
        "id": 62,
        "prompt": "def close(self):\n        \"\"\"\n        Close the stream. Assumes stream has 'close' method.\n        \"\"\"",
        "code": "def close(self):\n        \"\"\"\n        Close the stream. Assumes stream has 'close' method.\n        \"\"\"\n        self.out_stream.close()\n        # If we're asked to write in place, substitute the named\n        # temporary file for the current file\n        if self.in_place:\n            shutil.move(self.temp_file.name, self.out)",
        "writer": "human",
        "rewrite": [
            "def close(self):\n    self.out_stream.close()\n    if self.in_place:\n        os.replace(self.temp_file.name, self.out)",
            "def close(self):\n    try:\n        self.out_stream.close()\n    except AttributeError:\n        pass  # Ignore if out_stream is None\n    if self.in_place:\n        os.replace(self.temp_file.name, self.out)",
            "def close(self):\n    self.out_stream.close()\n    if self.in_place:\n        try:\n            os.replace(self.temp_file.name, self.out)\n        except (FileNotFoundError, OSError):\n            pass",
            "def close(self):\n    try:\n        self.out_stream.close()\n        if self.in_place:\n            os.replace(self.temp_file.name, self.out)\n    except Exception:\n        pass",
            "def close(self):\n    try:\n        self.out_stream.close()\n    except Exception as e:\n        print(f\"Error closing stream: {e}\")\n    if self.in_place:\n        try:\n            os.replace(self.temp_file.name, self.out)\n        except Exception as e:\n            print(f\"Error replacing file: {e}\")",
            "def close(self):\n    try:\n        self.out_stream.close()\n    except:\n        pass\n    if self.in_place:\n        try:\n            os.replace(self.temp_file.name, self.out)\n        except:\n            pass"
        ]
    },
    {
        "id": 53,
        "prompt": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"",
        "code": "def egress(self, envelope, http_headers, operation, binding_options):\n    \"\"\"Overrides the egress function ror request logging.\n\n    Args:\n      envelope: An Element with the SOAP request data.\n      http_headers: A dict of the current http headers.\n      operation: The SoapOperation instance.\n      binding_options: An options dict for the SOAP binding.\n\n    Returns:\n      A tuple of the envelope and headers.\n    \"\"\"\n    if self._logger.isEnabledFor(logging.INFO):\n      service_name = operation.binding.wsdl.services.keys()[0]\n      self._logger.info(_REQUEST_LOG_LINE, service_name, operation.name,\n                        binding_options['address'])\n\n    if self._logger.isEnabledFor(logging.DEBUG):\n      http_headers_safe = http_headers.copy()\n      if self._AUTHORIZATION_HEADER in http_headers_safe:\n        http_headers_safe[self._AUTHORIZATION_HEADER] = self._REDACTED\n\n      request_string = etree.tostring(envelope, pretty_print=True)\n      safe_request = self._DEVELOPER_TOKEN_SUB.sub(\n          self._REDACTED, request_string.decode('utf-8'))\n      self._logger.debug(\n          _REQUEST_XML_LOG_LINE, http_headers_safe, safe_request)\n\n    return envelope, http_headers",
        "writer": "human",
        "rewrite": [
            "def egress(self, envelope, http_headers, operation, binding_options):\n    log = self._logger\n    if log.isEnabledFor(logging.INFO):\n        service_name = list(operation.binding.wsdl.services.keys())[0]\n        log.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options['address'])\n    if log.isEnabledFor(logging.DEBUG):\n        headers = http_headers.copy()\n        headers[self._AUTHORIZATION_HEADER] = self._REDACTED if self._AUTHORIZATION_HEADER in headers else headers[self._AUTHORIZATION_HEADER]\n        request = etree.tostring(envelope, pretty_print=True).decode('utf-8')\n        safe_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request)\n        log.debug(_REQUEST_XML_LOG_LINE, headers, safe_request)\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    logger = self._logger\n    if logger.isEnabledFor(logging.INFO):\n        service_name = next(iter(operation.binding.wsdl.services))\n        logger.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options[\"address\"])\n    if logger.isEnabledFor(logging.DEBUG):\n        headers = http_headers.copy()\n        headers[self._AUTHORIZATION_HEADER] = self._REDACTED if self._AUTHORIZATION_HEADER in headers else headers.get(self._AUTHORIZATION_HEADER)\n        request = etree.tostring(envelope, pretty_print=True).decode()\n        safe_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request)\n        logger.debug(_REQUEST_XML_LOG_LINE, headers, safe_request)\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    log_level = self._logger.getEffectiveLevel()\n    if log_level <= logging.INFO:\n        service_name = next(iter(operation.binding.wsdl.services))\n        self._logger.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options['address'])\n    if log_level <= logging.DEBUG:\n        headers = http_headers.copy()\n        headers[self._AUTHORIZATION_HEADER] = self._REDACTED if self._AUTHORIZATION_HEADER in headers else headers.get(self._AUTHORIZATION_HEADER)\n        xml_string = etree.tostring(envelope, pretty_print=True).decode()\n        safe_xml = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, xml_string)\n        self._logger.debug(_REQUEST_XML_LOG_LINE, headers, safe_xml)\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    logger = self._logger\n    if logger.isEnabledFor(logging.INFO):\n        service_name = list(operation.binding.wsdl.services.keys())[0]\n        logger.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options[\"address\"])\n    if logger.isEnabledFor(logging.DEBUG):\n        headers = http_headers.copy()\n        headers[self._AUTHORIZATION_HEADER] = self._REDACTED if self._AUTHORIZATION_HEADER in headers else headers.get(self._AUTHORIZATION_HEADER, self._REDACTED)\n        request = etree.tostring(envelope, pretty_print=True).decode(\"utf-8\")\n        safe_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request)\n        logger.debug(_REQUEST_XML_LOG_LINE, headers, safe_request)\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    log = self._logger\n    if log.isEnabledFor(logging.INFO):\n        service_name = next(iter(operation.binding.wsdl.services))\n        log.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options['address'])\n    if log.isEnabledFor(logging.DEBUG):\n        headers = http_headers.copy()\n        headers[self._AUTHORIZATION_HEADER] = self._REDACTED if self._AUTHORIZATION_HEADER in headers else headers.get(self._AUTHORIZATION_HEADER)\n        request = etree.tostring(envelope, pretty_print=True).decode()\n        redacted_request = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, request)\n        log.debug(_REQUEST_XML_LOG_LINE, headers, redacted_request)\n    return envelope, http_headers",
            "def egress(self, envelope, http_headers, operation, binding_options):\n    logger = self._logger\n    if logger.isEnabledFor(logging.INFO):\n        service_name = list(operation.binding.wsdl.services.keys())[0]\n        logger.info(_REQUEST_LOG_LINE, service_name, operation.name, binding_options['address'])\n    if logger.isEnabledFor(logging.DEBUG):\n        headers = http_headers.copy()\n        headers.setdefault(self._AUTHORIZATION_HEADER, self._REDACTED)\n        xml = etree.tostring(envelope, pretty_print=True).decode('utf-8')\n        safe_xml = self._DEVELOPER_TOKEN_SUB.sub(self._REDACTED, xml)\n        logger.debug(_REQUEST_XML_LOG_LINE, headers, safe_xml)\n    return envelope, http_headers"
        ]
    },
    {
        "id": 67,
        "prompt": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"",
        "code": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"\n    lst = []\n    for file in os.listdir(path):\n        hidden_file = FileSystem(file).is_hidden()\n        if (hidden_file and include_hidden) or (not hidden_file):\n            lst.append(os.path.join(path, file))\n    return list(set(lst))",
        "writer": "human",
        "rewrite": [
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    return [os.path.join(path, file) for file in os.listdir(path) if not file.startswith('.') or include_hidden]",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    files = os.listdir(path)\n    paths = [os.path.join(path, file) for file in files]\n    if not include_hidden:\n        paths = [p for p in paths if not os.path.basename(p).startswith('.')]\n    return paths",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    return sorted(list(set(os.path.join(path, f) for f in os.listdir(path) if not f.startswith('.') or include_hidden)))",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    files = [f for f in os.listdir(path) if not f.startswith('.') or include_hidden]\n    return [os.path.join(path, f) for f in files]",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    paths = [os.path.join(path, filename) for filename in os.listdir(path) if include_hidden or not filename.startswith('.')]\n    return paths",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    return list({os.path.join(path, f) for f in os.listdir(path) if include_hidden or not f.startswith('.')})"
        ]
    },
    {
        "id": 33,
        "prompt": "def _to_edit(self, infoid):\n        \"\"\"\n        render the HTML page for post editing.\n        \"\"\"",
        "code": "def _to_edit(self, infoid):\n        \"\"\"\n        render the HTML page for post editing.\n        \"\"\"\n\n        postinfo = MPost.get_by_uid(infoid)\n\n        if postinfo:\n            pass\n        else:\n            return self.show404()\n\n        if 'def_cat_uid' in postinfo.extinfo:\n            catid = postinfo.extinfo['def_cat_uid']\n        elif 'gcat0' in postinfo.extinfo:\n            catid = postinfo.extinfo['gcat0']\n        else:\n            catid = ''\n\n        if len(catid) == 4:\n            pass\n        else:\n            catid = ''\n\n        catinfo = None\n        p_catinfo = None\n\n        post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n        if post2catinfo:\n            catid = post2catinfo.tag_id\n            catinfo = MCategory.get_by_uid(catid)\n            if catinfo:\n                p_catinfo = MCategory.get_by_uid(catinfo.pid)\n\n        kwd = {\n            'gcat0': catid,\n            'parentname': '',\n            'catname': '',\n            'parentlist': MCategory.get_parent_list(),\n            'userip': self.request.remote_ip,\n            'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n        }\n\n        if self.filter_view:\n            tmpl = 'autogen/edit/edit_{0}.html'.format(catid)\n        else:\n            tmpl = 'post_{0}/post_edit.html'.format(self.kind)\n\n        logger.info('Meta template: {0}'.format(tmpl))\n\n        self.render(\n            tmpl,\n            kwd=kwd,\n            postinfo=postinfo,\n            catinfo=catinfo,\n            pcatinfo=p_catinfo,\n            userinfo=self.userinfo,\n            cat_enum=MCategory.get_qian2(catid[:2]),\n            tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n            tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n            app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n            app2label_info=MPost2Label.get_by_uid(infoid).objects()\n        )",
        "writer": "human",
        "rewrite": [
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = ''\n    if 'def_cat_uid' in postinfo.extinfo:\n        catid = postinfo.extinfo['def_cat_uid']\n    elif 'gcat0' in postinfo.extinfo:\n        catid = postinfo.extinfo['gcat0']\n\n    if len(catid) != 4:\n        catid = ''\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        p_catinfo = MCategory.get_by_uid(catinfo.pid) if catinfo else None\n    else:\n        catinfo = None\n        p_catinfo = None\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{0}.html'.format(catid) if self.filter_view else 'post_{0}/post_edit.html'.format(self.kind)\n    logger.info('Meta template: {0}'.format(tmpl))\n\n    self.render(\n        tmpl,\n        kwd=kwd,\n        postinfo=postinfo,\n        catinfo=catinfo,\n        pcatinfo=p_catinfo,\n        userinfo=self.userinfo,\n        cat_enum=MCategory.get_qian2(catid[:2]),\n        tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n        tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n        app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n        app2label_info=MPost2Label.get_by_uid(infoid).objects()\n    )",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0', '')\n    if len(catid) != 4:\n        catid = ''\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        p_catinfo = MCategory.get_by_uid(catinfo.pid) if catinfo else None\n    else:\n        catinfo = p_catinfo = None\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{}.html'.format(catid) if self.filter_view else 'post_{}/post_edit.html'.format(self.kind)\n    logger.info(f'Meta template: {tmpl}')\n\n    self.render(tmpl, kwd=kwd, postinfo=postinfo, catinfo=catinfo, pcatinfo=p_catinfo, userinfo=self.userinfo,\n                cat_enum=MCategory.get_qian2(catid[:2]),\n                tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n                tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n                app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n                app2label_info=MPost2Label.get_by_uid(infoid).objects())",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0') or \"\"\n    if len(catid) != 4:\n        catid = \"\"\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        p_catinfo = MCategory.get_by_uid(catinfo.pid) if catinfo else None\n    else:\n        catinfo = p_catinfo = None\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{}.html'.format(catid) if self.filter_view else 'post_{}/post_edit.html'.format(self.kind)\n    logger.info(f'Meta template: {tmpl}')\n\n    self.render(tmpl, kwd=kwd, postinfo=postinfo, catinfo=catinfo, pcatinfo=p_catinfo, userinfo=self.userinfo,\n                cat_enum=MCategory.get_qian2(catid[:2]),\n                tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n                tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n                app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n                app2label_info=MPost2Label.get_by_uid(infoid).objects())",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0', '')\n    if len(catid) != 4:\n        catid = ''\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        p_catinfo = MCategory.get_by_uid(catinfo.pid) if catinfo else None\n    else:\n        catinfo = p_catinfo = None\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{}.html'.format(catid) if self.filter_view else f'post_{self.kind}/post_edit.html'\n    logger.info(f'Meta template: {tmpl}')\n\n    self.render(tmpl, kwd=kwd, postinfo=postinfo, catinfo=catinfo, pcatinfo=p_catinfo, userinfo=self.userinfo,\n                cat_enum=MCategory.get_qian2(catid[:2]),\n                tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n                tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n                app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n                app2label_info=MPost2Label.get_by_uid(infoid).objects())",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0', '')\n    catid = catid if len(catid) == 4 else ''\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        p_catinfo = MCategory.get_by_uid(catinfo.pid) if catinfo else None\n    else:\n        catinfo = p_catinfo = None\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{}.html'.format(catid) if self.filter_view else f'post_{self.kind}/post_edit.html'\n    logger.info(f'Meta template: {tmpl}')\n\n    self.render(tmpl, kwd=kwd, postinfo=postinfo, catinfo=catinfo, pcatinfo=p_catinfo, userinfo=self.userinfo,\n                cat_enum=MCategory.get_qian2(catid[:2]),\n                tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n                tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n                app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n                app2label_info=MPost2Label.get_by_uid(infoid).objects())",
            "def _to_edit(self, infoid):\n    postinfo = MPost.get_by_uid(infoid)\n    if not postinfo:\n        return self.show404()\n\n    catid = postinfo.extinfo.get('def_cat_uid') or postinfo.extinfo.get('gcat0', '')\n    catid = catid if len(catid) == 4 else ''\n\n    post2catinfo = MPost2Catalog.get_first_category(postinfo.uid)\n    if post2catinfo:\n        catid = post2catinfo.tag_id\n        catinfo = MCategory.get_by_uid(catid)\n        p_catinfo = MCategory.get_by_uid(catinfo.pid) if catinfo else None\n    else:\n        catinfo, p_catinfo = None, None\n\n    kwd = {\n        'gcat0': catid,\n        'parentname': '',\n        'catname': '',\n        'parentlist': MCategory.get_parent_list(),\n        'userip': self.request.remote_ip,\n        'extinfo': json.dumps(postinfo.extinfo, indent=2, ensure_ascii=False),\n    }\n\n    tmpl = 'autogen/edit/edit_{}.html'.format(catid) if self.filter_view else f'post_{self.kind}/post_edit.html'\n    logger.info(f'Meta template: {tmpl}')\n\n    self.render(tmpl, kwd=kwd, postinfo=postinfo, catinfo=catinfo, pcatinfo=p_catinfo, userinfo=self.userinfo,\n                cat_enum=MCategory.get_qian2(catid[:2]),\n                tag_infos=MCategory.query_all(by_order=True, kind=self.kind),\n                tag_infos2=MCategory.query_all(by_order=True, kind=self.kind),\n                app2tag_info=MPost2Catalog.query_by_entity_uid(infoid, kind=self.kind).objects(),\n                app2label_info=MPost2Label.get_by_uid(infoid).objects())"
        ]
    },
    {
        "id": 67,
        "prompt": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"",
        "code": "def ls_dir(path, include_hidden=False):\n    \"\"\"Finds content of folder\n\n    :param path: directory to get list of files and folders\n    :param include_hidden: True iff include hidden files in list\n    :return: List of paths in given directory\n    \"\"\"\n    import os\n    content = os.listdir(path)\n    if not include_hidden:\n        content = [item for item in content if not item.startswith('.')]\n    return [os.path.join(path, item) for item in content]",
        "writer": "machine",
        "rewrite": [
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    return [os.path.join(path, item) for item in os.listdir(path) if include_hidden or not item.startswith('.')]",
            "import os\n\ndef ls_dir(path, include_hidden=False):\n    return [os.path.join(path, f) for f in os.listdir(path) if include_hidden or not f.startswith('.')]",
            "import os\ndef ls_dir(path, include_hidden=False):\n  files = os.listdir(path)\n  filtered_files = [f for f in files if include_hidden or not f.startswith('.')]\n  return [os.path.join(path, f) for f in filtered_files]",
            "import os\ndef ls_dir(p,h=False):\n    return [os.path.join(p,i) for i in os.listdir(p) if h or not i.startswith('.')]",
            "import os\ndef ls_dir(path,include_hidden=False):\n    files=os.listdir(path)\n    return [os.path.join(path,f) for f in files if include_hidden or not f.startswith(\".\")]",
            "import os\ndef ls_dir(path, include_hidden=False):\n    return [os.path.join(path, f) for f in os.listdir(path) if include_hidden or not f.startswith('.')]"
        ]
    },
    {
        "id": 50,
        "prompt": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n                 format=\"png\"):\n        \"\"\"\n        Convert to selected format (discarding geo).\n\n        Optionally also resizes.\n        Note: for color images returns interlaced.\n        :param transparent: if True - sets alpha channel for nodata pixels\n        :param thumbnail_size: if not None - resize to thumbnail size, e.g. 512\n        :param in_range: input intensity range\n        :param out_range: output intensity range\n        :param format : str, image format, default \"png\"\n        :param resampling: one of Resampling enums\n\n        :return bytes\n        \"\"\"",
        "code": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    from rasterio.enums import Resampling\n\n    data = self.read()\n    mask = self.read_masks(1)\n    \n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n    \n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n    \n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n    \n    img = Image.fromarray(data)\n    \n    if transparent:\n        mask = Image.fromarray(mask)\n        img.putalpha(mask)",
        "writer": "machine",
        "rewrite": [
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n\n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        mask = Image.fromarray(mask).convert('L')\n        img = img.convert(\"RGBA\")\n        img.putalpha(mask)\n\n    if thumbnail_size:\n        img.thumbnail(thumbnail_size)\n\n    with io.BytesIO() as output:\n        img.save(output, format=format)\n        contents = output.getvalue()\n    return contents\n\nimport io",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    import io\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n\n    data = np.clip(data, in_range[0], in_range[1])\n    data = (((data - in_range[0]) / (in_range[1] - in_range[0])) * (out_range[1] - out_range[0]) + out_range[0]).astype(np.uint8)\n\n\n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        mask = Image.fromarray(mask).convert(\"L\")\n        img = img.convert(\"RGBA\")\n        img.putalpha(mask)\n\n    with io.BytesIO() as output:\n        img.save(output, format=format)\n        contents = output.getvalue()\n    return contents",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    import io\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_min, in_max = np.iinfo(data.dtype).min, np.iinfo(data.dtype).max\n    else:\n        in_min, in_max = in_range\n    if out_range == 'dtype':\n        out_min, out_max = 0, 255\n    else:\n        out_min, out_max = out_range\n\n    data = np.clip(data, in_min, in_max)\n    data = ((data - in_min) / (in_max - in_min) * (out_max - out_min) + out_min).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = np.transpose(data, (1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        mask = Image.fromarray(mask).convert(\"L\")\n        img = img.convert(\"RGBA\")\n        img.putalpha(mask)\n\n    with io.BytesIO() as output:\n        img.save(output, format=format)\n        contents = output.getvalue()\n    return contents",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    import io\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n\n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = data.transpose((1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        mask = Image.fromarray(mask).convert('L')\n        img = img.convert('RGBA')\n        img.putalpha(mask)\n\n    with io.BytesIO() as buffer:\n        img.save(buffer, format=format)\n        return buffer.getvalue()",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    import io\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n\n    data = np.clip(data, *in_range)\n    data = ((data - in_range[0]) / (in_range[1] - in_range[0]) * (out_range[1] - out_range[0]) + out_range[0]).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = data.transpose((1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        img = img.convert(\"RGBA\")\n        img.putalpha(Image.fromarray(mask).convert(\"L\"))\n\n    with io.BytesIO() as buffer:\n        img.save(buffer, format=format)\n        return buffer.getvalue()",
            "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    import numpy as np\n    from PIL import Image\n    import io\n\n    data = self.read()\n    mask = self.read_masks(1)\n\n    if in_range == 'dtype':\n        in_range = (np.iinfo(data.dtype).min, np.iinfo(data.dtype).max)\n    if out_range == 'dtype':\n        out_range = (0, 255)\n\n    data = np.interp(data, in_range, out_range).astype(np.uint8)\n\n    if data.ndim == 3:\n        data = data.transpose((1, 2, 0))\n\n    img = Image.fromarray(data)\n\n    if transparent:\n        img = img.convert(\"RGBA\")\n        img.putalpha(Image.fromarray(mask).convert(\"L\"))\n\n    with io.BytesIO() as buffer:\n        img.save(buffer, format=format)\n        return buffer.getvalue()"
        ]
    },
    {
        "id": 59,
        "prompt": "def _validate_condition_keys(self, field, value, error):\n        \"\"\"\n        Validates that all of the keys in one of the sets of keys are defined\n        as keys of ``value``.\n        \"\"\"",
        "code": "def _validate_condition_keys(self, field, value, error):\n        \"\"\"\n        Validates that all of the keys in one of the sets of keys are defined\n        as keys of ``value``.\n        \"\"\"\n        if 'field' in value:\n            operators = self.nonscalar_conditions + self.scalar_conditions\n            matches = sum(1 for k in operators if k in value)\n            if matches == 0:\n                error(field, 'Must contain one of {}'.format(operators))\n                return False\n            elif matches > 1:\n                error(\n                    field,\n                    'Must contain no more than one of {}'.format(operators)\n                )\n                return False\n            return True\n        elif 'and' in value:\n            for condition in value['and']:\n                self._validate_condition_keys(field, condition, error)\n        elif 'or' in value:\n            for condition in value['or']:\n                self._validate_condition_keys(field, condition, error)\n        else:\n            error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n            return False",
        "writer": "human",
        "rewrite": [
            "def _validate_condition_keys(self, field, value, error):\n    if 'field' in value:\n        operators = self.nonscalar_conditions + self.scalar_conditions\n        matches = sum(1 for k in operators if k in value)\n        if not matches:\n            error(field, f'Must contain one of {operators}')\n            return False\n        if matches > 1:\n            error(field, f'Must contain no more than one of {operators}')\n            return False\n        return True\n    if 'and' in value:\n        return all(self._validate_condition_keys(field, cond, error) for cond in value['and'])\n    if 'or' in value:\n        return any(self._validate_condition_keys(field, cond, error) for cond in value['or'])\n    error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n    return False",
            "def _validate_condition_keys(self, field, value, error):\n    if 'field' in value:\n        ops = self.nonscalar_conditions + self.scalar_conditions\n        matches = sum(1 for op in ops if op in value)\n        if not matches:\n            error(field, f\"Must contain one of {ops}\")\n            return False\n        if matches > 1:\n            error(field, f\"Must contain no more than one of {ops}\")\n            return False\n        return True\n    if 'and' in value:\n        return all(self._validate_condition_keys(field, c, error) for c in value['and'])\n    if 'or' in value:\n        return any(self._validate_condition_keys(field, c, error) for c in value['or'])\n    error(field, \"Must contain field + operator keys, 'and', or 'or'.\")\n    return False",
            "def _validate_condition_keys(self, field, value, error):\n    if \"field\" in value:\n        ops = self.nonscalar_conditions + self.scalar_conditions\n        count = sum(1 for op in ops if op in value)\n        if count == 0:\n            error(field, f\"Must contain one of {ops}\")\n            return False\n        if count > 1:\n            error(field, f\"Must contain only one of {ops}\")\n            return False\n        return True\n    if \"and\" in value:\n        return all(self._validate_condition_keys(field, c, error) for c in value[\"and\"])\n    if \"or\" in value:\n        return any(self._validate_condition_keys(field, c, error) for c in value[\"or\"])\n    error(field, \"Must contain 'field', 'and', or 'or'\")\n    return False",
            "def _validate_condition_keys(self, field, value, error):\n    if \"field\" in value:\n        all_ops = self.nonscalar_conditions + self.scalar_conditions\n        present_ops = [op for op in all_ops if op in value]\n        if not present_ops:\n            error(field, f\"Must contain one of {all_ops}\")\n            return False\n        if len(present_ops) > 1:\n            error(field, f\"Must contain at most one of {all_ops}\")\n            return False\n        return True\n    if \"and\" in value:\n        return all(self._validate_condition_keys(field, cond, error) for cond in value[\"and\"])\n    if \"or\" in value:\n        return any(self._validate_condition_keys(field, cond, error) for cond in value[\"or\"])\n    error(field, \"Must contain 'field', 'and', or 'or'\")\n    return False",
            "def _validate_condition_keys(self, field, value, error):\n    if \"field\" in value:\n        operators = self.nonscalar_conditions + self.scalar_conditions\n        if not any(op in value for op in operators):\n            error(field, f\"Must contain one of {operators}\")\n            return False\n        if sum(1 for op in operators if op in value) > 1:\n            error(field, f\"Must contain at most one of {operators}\")\n            return False\n        return True\n    if \"and\" in value:\n        return all(self._validate_condition_keys(field, c, error) for c in value[\"and\"])\n    if \"or\" in value:\n        return all(self._validate_condition_keys(field, c, error) for c in value[\"or\"])\n    error(field, \"Must contain 'field', 'and', or 'or'\")\n    return False",
            "def _validate_condition_keys(self, field, value, error):\n    if \"field\" in value:\n        operators = self.nonscalar_conditions + self.scalar_conditions\n        num_matches = sum(1 for op in operators if op in value)\n        if num_matches == 0:\n            error(field, f\"Must contain one of {operators}\")\n            return False\n        if num_matches > 1:\n            error(field, f\"Must contain at most one of {operators}\")\n            return False\n        return True\n    if \"and\" in value:\n        return all(self._validate_condition_keys(field, v, error) for v in value[\"and\"])\n    if \"or\" in value:\n        return all(self._validate_condition_keys(field, v, error) for v in value[\"or\"])\n    error(field, \"Must contain 'field', 'and', or 'or'\")\n    return False"
        ]
    },
    {
        "id": 69,
        "prompt": "def reload(self, schedule):\n        \"\"\"\n        Reload the schedule from saved schedule file.\n        \"\"\"",
        "code": "def reload(self, schedule):\n        \"\"\"\n        Reload the schedule from saved schedule file.\n        \"\"\"\n        # Remove all jobs from self.intervals\n        self.intervals = {}\n\n        if 'schedule' in schedule:\n            schedule = schedule['schedule']\n        self.opts.setdefault('schedule', {}).update(schedule)",
        "writer": "human",
        "rewrite": [
            "def reload(self, schedule):\n    self.intervals = {}\n    schedule = schedule.get('schedule', {})\n    self.opts.setdefault('schedule', {}).update(schedule)",
            "def reload(self, schedule):\n    self.intervals = {}\n    self.opts['schedule'] = schedule.get('schedule', {})",
            "def reload(self, schedule):\n    self.intervals = {}\n    try:\n        self.opts['schedule'].update(schedule['schedule'])\n    except KeyError:\n        self.opts['schedule'] = schedule.get('schedule', {})",
            "def reload(self, schedule):\n    self.intervals = {}\n    self.opts['schedule'] = schedule.get('schedule', {})",
            "def reload(self, schedule):\n    self.intervals = {}\n    try:\n        self.opts['schedule'] = schedule['schedule']\n    except KeyError:\n        pass",
            "def reload(self, schedule):\n    self.intervals = {}\n    self.opts['schedule'] = schedule.get('schedule', self.opts.get('schedule',{}))"
        ]
    },
    {
        "id": 64,
        "prompt": "def delete(self):\n        \"\"\"Remove myself from my :class:`Character`.\n\n        For symmetry with :class:`Thing` and :class`Place`.\n\n        \"\"\"",
        "code": "def delete(self):\n        \"\"\"Remove myself from my :class:`Character`.\n\n        For symmetry with :class:`Thing` and :class`Place`.\n\n        \"\"\"\n        branch, turn, tick = self.engine._nbtt()\n        self.engine._edges_cache.store(\n            self.character.name,\n            self.origin.name,\n            self.destination.name,\n            0,\n            branch,\n            turn,\n            tick,\n            None\n        )\n        self.engine.query.exist_edge(\n            self.character.name,\n            self.origin.name,\n            self.destination.name,\n            branch, turn, tick, False\n        )\n        try:\n            del self.engine._edge_objs[\n                (self.graph.name, self.orig, self.dest)\n            ]\n        except KeyError:\n            pass\n        self.character.portal[self.origin.name].send(\n            self.character.portal[self.origin.name],\n            key='dest', val=None\n        )",
        "writer": "human",
        "rewrite": [
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(self.character.name, self.origin.name, self.destination.name, 0, branch, turn, tick, None)\n    self.engine.query.delete_edge(self.character.name, self.origin.name, self.destination.name, branch, turn, tick)\n    try:\n        del self.engine._edge_objs[(self.graph.name, self.orig, self.dest)]\n    except KeyError:\n        pass\n    self.character.portal[self.origin.name].remove_destination()",
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(self.character.name, self.origin.name, self.destination.name, 0, branch, turn, tick, None)\n    self.engine.query.delete_edge(self.character.name, self.origin.name, self.destination.name, branch, turn, tick)\n    try:\n        del self.engine._edge_objs[(self.graph.name, self.orig, self.dest)]\n    except KeyError:\n        pass\n    self.character.portal[self.origin.name].remove_destination()",
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(self.character.name, self.origin.name, self.destination.name, 0, branch, turn, tick, None)\n    self.engine.query.delete_edge(self.character.name, self.origin.name, self.destination.name, branch, turn, tick)\n    try:\n        del self.engine._edge_objs[(self.graph.name, self.orig, self.dest)]\n    except KeyError:\n        pass\n    self.character.portal[self.origin.name].remove_destination()",
            "def delete(self):\n    b, t, ti = self.engine._nbtt()\n    self.engine._edges_cache.store(self.character.name, self.origin.name, self.destination.name, 0, b, t, ti, None)\n    self.engine.query.remove_edge(self.character.name, self.origin.name, self.destination.name, b, t, ti)\n    try:\n        del self.engine._edge_objs[(self.graph.name, self.orig, self.dest)]\n    except KeyError:\n        pass\n    self.character.portal[self.origin.name].clear_destination()",
            "def delete(self):\n    b, t, ti = self.engine._nbtt()\n    self.engine._edges_cache.store(self.character.name, self.origin.name, self.destination.name, 0, b, t, ti, None)\n    self.engine.query.delete_edge(self.character.name, self.origin.name, self.destination.name, b, t, ti)\n    try:\n        del self.engine._edge_objs[(self.graph.name, self.orig, self.dest)]\n    except KeyError:\n        pass\n    self.character.portal[self.origin.name].destination = None",
            "def delete(self):\n    branch, turn, tick = self.engine._nbtt()\n    self.engine._edges_cache.store(self.character.name, self.origin.name, self.destination.name, 0, branch, turn, tick, None)\n    self.engine.query.remove_edge(self.character.name, self.origin.name, self.destination.name, branch, turn, tick)\n    try:\n        del self.engine._edge_objs[(self.graph.name, self.orig, self.dest)]\n    except KeyError:\n        pass\n    self.character.portal[self.origin.name].dest = None"
        ]
    },
    {
        "id": 69,
        "prompt": "def reload(self, schedule):\n        \"\"\"\n        Reload the schedule from saved schedule file.\n        \"\"\"",
        "code": "def reload(self, schedule):\n    \"\"\"\n    Reload the schedule from saved schedule file.\n    \"\"\"\n    with open(schedule, 'r') as file:\n        self.schedule = json.load(file)",
        "writer": "machine",
        "rewrite": [
            "def reload(self, schedule):\n    self.schedule = json.load(open(schedule, 'r'))",
            "def reload(self, schedule_path):\n    try:\n        with open(schedule_path, 'r') as f:\n            self.schedule = json.load(f)\n    except (FileNotFoundError, json.JSONDecodeError) as e:\n        self.schedule = {} # or handle the error appropriately",
            "def reload(self, schedule_file):\n    try:\n        self.schedule = json.load(open(schedule_file, 'r'))\n    except (FileNotFoundError, json.JSONDecodeError):\n        pass # Or handle the exception as needed",
            "def reload(self, schedule_path):\n    try:\n        with open(schedule_path, 'r') as f:\n            self.schedule = json.load(f)\n    except Exception as e:\n        print(f\"Error loading schedule: {e}\")",
            "def reload(self, schedule_path):\n    self.schedule = json.loads(open(schedule_path, 'r').read())",
            "def reload(self, schedule_path):\n    try:\n        with open(schedule_path, 'r') as f:\n            self.schedule = json.load(f)\n    except (FileNotFoundError, json.JSONDecodeError):\n        print(\"Error loading schedule file.\")"
        ]
    },
    {
        "id": 65,
        "prompt": "def list_private_repos(profile='github'):\n    \"\"\"\n    List private repositories within the organization. Dependent upon the access\n    rights of the profile token.\n\n    .. versionadded:: 2016.11.0\n\n    profile\n        The name of the profile configuration to use. Defaults to ``github``.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt myminion github.list_private_repos\n        salt myminion github.list_private_repos profile='my-github-profile'\n    \"\"\"",
        "code": "def list_private_repos(profile='github'):\n    import requests\n    import salt.utils.github\n\n    gh_api = salt.utils.github.get_api(profile)\n    headers = {'Authorization': f'token {gh_api.token}'}\n    url = f'{gh_api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    \n    private_repos = []\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        private_repos.extend(repo['name'] for repo in response.json() if repo['private'])\n        url = response.links.get('next', {}).get('url')\n    \n    return private_repos",
        "writer": "machine",
        "rewrite": [
            "def list_private_repos(profile='github'):\n    import requests\n    from salt.utils import github\n\n    gh_api = github.get_api(profile)\n    headers = {'Authorization': f'token {gh_api.token}'}\n    url = f'{gh_api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    \n    private_repos = []\n    while url:\n        response = requests.get(url, headers=headers, params=params)\n        response.raise_for_status()\n        private_repos.extend([repo['name'] for repo in response.json() if repo['private']])\n        url = response.links.get('next', {}).get('url')\n\n    return private_repos",
            "def list_private_repos(profile='github'):\n    import requests\n    from salt.utils import github\n\n    api = github.get_api(profile)\n    headers = {'Authorization': f'token {api.token}'}\n    url = f'{api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n\n    repos = []\n    while url:\n        resp = requests.get(url, headers=headers, params=params)\n        resp.raise_for_status()\n        repos.extend(r['name'] for r in resp.json() if r['private'])\n        url = resp.links.get('next', {}).get('url')\n    return repos",
            "def list_private_repos(profile='github'):\n    import requests\n    from salt.utils import github\n\n    gh = github.get_api(profile)\n    headers = {'Authorization': f'token {gh.token}'}\n    base_url = f'{gh.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n\n    all_repos = []\n    next_url = base_url\n    while next_url:\n        res = requests.get(next_url, headers=headers, params=params)\n        res.raise_for_status()\n        repos = [repo['name'] for repo in res.json() if repo['private']]\n        all_repos.extend(repos)\n        next_url = res.links.get('next', {}).get('url')\n    return all_repos",
            "def list_private_repos(profile=\"github\"):\n    import requests\n    from salt.utils import github\n\n    auth = github.get_api(profile)\n    headers = {\"Authorization\": f\"token {auth.token}\"}\n    url = f\"{auth.base_url}/user/repos\"\n    params = {\"visibility\": \"private\", \"per_page\": 100}\n\n    private_repos = []\n    while url:\n        r = requests.get(url, headers=headers, params=params)\n        r.raise_for_status()\n        private_repos.extend(repo[\"name\"] for repo in r.json() if repo[\"private\"])\n        url = r.links.get(\"next\", {}).get(\"url\")\n    return private_repos",
            "import requests\nfrom salt.utils import github\n\ndef list_private_repos(profile='github'):\n    api = github.get_api(profile)\n    headers = {'Authorization': f'token {api.token}'}\n    url = f'{api.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    repos = []\n    while url:\n        res = requests.get(url, headers=headers, params=params)\n        res.raise_for_status()\n        repos.extend([repo['name'] for repo in res.json() if repo['private']])\n        url = res.links.get('next', {}).get('url')\n    return repos",
            "from salt.utils import github\nimport requests\n\ndef list_private_repos(profile='github'):\n    g = github.get_api(profile)\n    headers = {'Authorization': f'token {g.token}'}\n    base = f'{g.base_url}/user/repos'\n    params = {'visibility': 'private', 'per_page': 100}\n    all_repos = []\n    next_page = base\n    while next_page:\n        r = requests.get(next_page, headers=headers, params=params)\n        r.raise_for_status()\n        data = r.json()\n        all_repos.extend([repo['name'] for repo in data if repo['private']])\n        next_page = r.links.get('next', {}).get('url')\n    return all_repos"
        ]
    },
    {
        "id": 68,
        "prompt": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    \"\"\"\n    Construct final target url.\n\n    :param endpoint_url: Target endpoint url where request is served to.\n    :param bucket_name: Bucket component for the target url.\n    :param object_name: Object component for the target url.\n    :param bucket_region: Bucket region for the target url.\n    :param query: Query parameters as a *dict* for the target url.\n    :return: Returns final target url as *str*.\n    \"\"\"",
        "code": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/')\n    if bucket_name:\n        url += f'/{bucket_name}'\n    if object_name:\n        url += f'/{object_name}'\n    if bucket_region != 'us-east-1':\n        url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com')\n    if query:\n        query_string = '&'.join([f'{k}={v}' for k, v in query.items()])\n        url += f'?{query_string}'\n    return url",
        "writer": "machine",
        "rewrite": [
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/') + (\"/\" + bucket_name if bucket_name else \"\") + (\"/\" + object_name if object_name else \"\")\n    url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com') if bucket_region != 'us-east-1' else url\n    url += f\"?{'&'.join([f'{k}={v}' for k, v in query.items()])}\" if query else \"\"\n    return url",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/')\n    url += f\"/{bucket_name}\" if bucket_name else \"\"\n    url += f\"/{object_name}\" if object_name else \"\"\n    if bucket_region != 'us-east-1':\n        url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com')\n    url += f\"?{'&'.join(f'{k}={v}' for k, v in query.items() if query)}\"\n    return url",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/') + ('/' + bucket_name if bucket_name else '') + ('/' + object_name if object_name else '')\n    if bucket_region != 'us-east-1':\n        url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com')\n    url += f\"?{ '&'.join([f'{k}={v}' for k,v in query.items()]) if query else ''}\"\n    return url",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/')\n    url += f\"/{bucket_name}\" if bucket_name else \"\"\n    url += f\"/{object_name}\" if object_name else \"\"\n    url = url.replace(\"s3.amazonaws.com\", f\"s3.{bucket_region}.amazonaws.com\") if bucket_region != \"us-east-1\" else url\n    url += f\"?{'&'.join(f'{k}={v}' for k, v in query.items())}\" if query else \"\"\n    return url",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip(\"/\")\n    url += \"/\" + bucket_name if bucket_name else \"\"\n    url += \"/\" + object_name if object_name else \"\"\n    if bucket_region != \"us-east-1\":\n        url = url.replace(\"s3.amazonaws.com\", f\"s3.{bucket_region}.amazonaws.com\")\n    url += \"?\" + \"&\".join(f\"{k}={v}\" for k, v in query.items()) if query else \"\"\n    return url",
            "def get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    url = endpoint_url.rstrip('/')\n    path = '/' + bucket_name if bucket_name else '' + '/' + object_name if object_name else ''\n    url += path\n    url = url.replace('s3.amazonaws.com', f's3.{bucket_region}.amazonaws.com') if bucket_region != 'us-east-1' else url\n    url += f\"?{'&'.join([f'{k}={v}' for k,v in query.items()])}\" if query else ''\n    return url"
        ]
    },
    {
        "id": 50,
        "prompt": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n                 format=\"png\"):\n        \"\"\"\n        Convert to selected format (discarding geo).\n\n        Optionally also resizes.\n        Note: for color images returns interlaced.\n        :param transparent: if True - sets alpha channel for nodata pixels\n        :param thumbnail_size: if not None - resize to thumbnail size, e.g. 512\n        :param in_range: input intensity range\n        :param out_range: output intensity range\n        :param format : str, image format, default \"png\"\n        :param resampling: one of Resampling enums\n\n        :return bytes\n        \"\"\"",
        "code": "def to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype',\n                 format=\"png\"):\n        \"\"\"\n        Convert to selected format (discarding geo).\n\n        Optionally also resizes.\n        Note: for color images returns interlaced.\n        :param transparent: if True - sets alpha channel for nodata pixels\n        :param thumbnail_size: if not None - resize to thumbnail size, e.g. 512\n        :param in_range: input intensity range\n        :param out_range: output intensity range\n        :param format : str, image format, default \"png\"\n        :param resampling: one of Resampling enums\n\n        :return bytes\n        \"\"\"\n        resampling = resampling if resampling is not None else Resampling.cubic\n\n        if self.num_bands < 3:\n            warnings.warn(\"Deprecation: to_png of less then three bands raster will be not be supported in next \\\nrelease, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n\n        if self.num_bands > 3:\n            warnings.warn(\"Limiting %d bands raster to first three bands to generate png\" % self.num_bands,\n                          GeoRaster2Warning)\n            three_first_bands = self.band_names[:3]\n            raster = self.limit_to_bands(three_first_bands)\n        elif self.num_bands == 2:\n            warnings.warn(\"Limiting two bands raster to use the first band to generate png\",\n                          GeoRaster2Warning)\n            first_band = self.band_names[:1]\n            raster = self.limit_to_bands(first_band)\n        else:\n            raster = self\n\n        if raster.image.dtype != np.uint8:\n            warnings.warn(\"downscaling dtype to 'uint8' to convert to png\",\n                          GeoRaster2Warning)\n            thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range)\n        else:\n            thumbnail = raster.copy_with()\n\n        if thumbnail_size:\n            if thumbnail.width > thumbnail.height:\n                thumbnail = thumbnail.resize(dest_width=thumbnail_size, resampling=resampling)\n            else:\n                thumbnail = thumbnail.resize(dest_height=thumbnail_size, resampling=resampling)\n\n        img, mask = thumbnail.to_pillow_image(return_mask=True)\n\n        if transparent:\n            mask = np.array(mask)[:, :, np.newaxis]\n            mask = 255 - 255 * mask  # inverse\n\n            if thumbnail.num_bands == 1:\n                img = np.stack([img, img, img], axis=2)  # make grayscale into rgb. bypass, as mode=LA isn't supported\n\n            img = np.stack(tuple(np.split(np.asarray(img), 3, axis=2) + [mask]), axis=2)  # re-arrange into RGBA\n            img = img[:, :, :, 0]\n\n        f = io.BytesIO()\n        imageio.imwrite(f, img, format)\n        image_data = f.getvalue()\n        return image_data",
        "writer": "human",
        "rewrite": [
            "import io\nimport imageio\nimport numpy as np\nimport warnings\n\ndef to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling if resampling is not None else Resampling.cubic\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less then three bands raster will be not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n    if self.num_bands > 3:\n        warnings.warn(\"Limiting %d bands raster to first three bands to generate png\" % self.num_bands, GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:3])\n    elif self.num_bands == 2:\n        warnings.warn(\"Limiting two bands raster to use the first band to generate png\", GeoRaster2Warning)\n        raster = self.limit_to_bands(self.band_names[:1])\n    else:\n        raster = self\n    if raster.image.dtype != np.uint8:\n        warnings.warn(\"downscaling dtype to 'uint8' to convert to png\", GeoRaster2Warning)\n        thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range)\n    else:\n        thumbnail = raster.copy_with()\n    if thumbnail_size:\n        if thumbnail.width > thumbnail.height:\n            thumbnail = thumbnail.resize(dest_width=thumbnail_size, resampling=resampling)\n        else:\n            thumbnail = thumbnail.resize(dest_height=thumbnail_size, resampling=resampling)\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n    if transparent:\n        mask = 255 - 255 * np.array(mask)[:, :, np.newaxis]\n        if thumbnail.num_bands == 1:\n            img = np.stack([img, img, img], axis=2)\n        img = np.concatenate((np.asarray(img), mask), axis=2)\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "import io\nimport imageio\nimport numpy as np\nimport warnings\n\ndef to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling or Resampling.cubic\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less then three bands raster will be not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n    raster = self.limit_to_bands(self.band_names[:min(3, self.num_bands)])\n    thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range) if raster.image.dtype != np.uint8 else raster.copy_with()\n    if thumbnail_size:\n        thumbnail = thumbnail.resize(dest_width=thumbnail_size if thumbnail.width > thumbnail.height else None, dest_height=thumbnail_size if thumbnail.height > thumbnail.width else None, resampling=resampling)\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n    if transparent:\n        mask = 255 - 255 * np.array(mask)[:,:,None]\n        img = np.concatenate((np.stack([img]*3, axis=2) if thumbnail.num_bands==1 else img, mask), axis=2)\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "import io\nimport imageio\nimport numpy as np\nimport warnings\n\ndef to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling or Resampling.cubic\n    num_bands = min(3, self.num_bands)\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will be not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n    elif self.num_bands > 3:\n        warnings.warn(f\"Limiting {self.num_bands} bands raster to first three bands to generate png\", GeoRaster2Warning)\n    raster = self.limit_to_bands(self.band_names[:num_bands])\n    thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range) if raster.image.dtype != np.uint8 else raster.copy_with()\n    if thumbnail_size:\n        thumbnail = thumbnail.resize(dest_width=thumbnail_size if thumbnail.width > thumbnail.height else None, dest_height=thumbnail_size if thumbnail.height >= thumbnail.width else None, resampling=resampling)\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n    if transparent:\n        mask = 255 - 255 * np.array(mask)[:,:,None]\n        img = np.concatenate((np.stack([img] * 3, axis=2) if thumbnail.num_bands == 1 else img, mask), axis=2)\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "import io\nimport imageio\nimport numpy as np\nimport warnings\n\ndef to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling or Resampling.cubic\n    num_bands = min(self.num_bands, 3)\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n    elif self.num_bands > 3:\n        warnings.warn(f\"Limiting {self.num_bands} bands raster to first three bands to generate png\", GeoRaster2Warning)\n    raster = self.limit_to_bands(self.band_names[:num_bands])\n    thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range) if raster.image.dtype != np.uint8 else raster.copy_with()\n    if thumbnail_size:\n        thumbnail = thumbnail.resize(dest_width=thumbnail_size if thumbnail.width > thumbnail.height else None, dest_height=thumbnail_size if thumbnail.height >= thumbnail.width else None, resampling=resampling)\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n    if transparent:\n        mask = 255 - 255 * np.expand_dims(mask, axis=-1)\n        img = np.concatenate((np.repeat(img[..., None], 3, axis=-1) if img.ndim == 2 else img, mask), axis=-1)\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "import io\nimport imageio\nimport numpy as np\nimport warnings\n\ndef to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling or Resampling.cubic\n    num_bands = min(3, self.num_bands)\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n    elif self.num_bands > 3:\n        warnings.warn(f\"Limiting {self.num_bands} bands raster to first three bands to generate png\", GeoRaster2Warning)\n    raster = self.limit_to_bands(self.band_names[:num_bands])\n    thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range) if raster.image.dtype != np.uint8 else raster.copy_with()\n    if thumbnail_size:\n        thumbnail = thumbnail.resize(dest_width=thumbnail_size if thumbnail.width > thumbnail.height else None, dest_height=thumbnail_size if thumbnail.height >= thumbnail.width else None, resampling=resampling)\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n    if transparent:\n        mask = 255 - 255 * np.expand_dims(mask, -1)\n        img = np.concatenate((np.repeat(img[..., None], 3, -1) if img.ndim == 2 else img, mask), axis=-1)\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()",
            "import io\nimport imageio\nimport numpy as np\nimport warnings\n\ndef to_bytes(self, transparent=True, thumbnail_size=None, resampling=None, in_range='dtype', out_range='dtype', format=\"png\"):\n    resampling = resampling or Resampling.cubic\n    bands = min(3, self.num_bands)\n    if self.num_bands < 3:\n        warnings.warn(\"Deprecation: to_png of less than three bands raster will not be supported in next release, please use: .colorize('gray').to_png()\", GeoRaster2Warning)\n    elif self.num_bands > 3:\n        warnings.warn(f\"Limiting {self.num_bands} bands raster to the first three bands to generate png\", GeoRaster2Warning)\n    raster = self.limit_to_bands(self.band_names[:bands])\n    thumbnail = raster.astype(np.uint8, in_range=in_range, out_range=out_range) if raster.image.dtype != np.uint8 else raster.copy_with()\n    if thumbnail_size:\n        size = (thumbnail_size, thumbnail_size) if thumbnail.width > thumbnail.height else (None, thumbnail_size) if thumbnail.height > thumbnail.width else (thumbnail_size, None)\n        thumbnail = thumbnail.resize(dest_width=size[0], dest_height=size[1], resampling=resampling)\n    img, mask = thumbnail.to_pillow_image(return_mask=True)\n    if transparent:\n        img = np.stack((img,)*3 + (255-255*np.expand_dims(mask,-1),), axis=-1) if img.ndim == 2 else np.concatenate((img, 255-255*np.expand_dims(mask,-1)), axis=-1)\n    f = io.BytesIO()\n    imageio.imwrite(f, img, format)\n    return f.getvalue()"
        ]
    },
    {
        "id": 68,
        "prompt": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    \"\"\"\n    Construct final target url.\n\n    :param endpoint_url: Target endpoint url where request is served to.\n    :param bucket_name: Bucket component for the target url.\n    :param object_name: Object component for the target url.\n    :param bucket_region: Bucket region for the target url.\n    :param query: Query parameters as a *dict* for the target url.\n    :return: Returns final target url as *str*.\n    \"\"\"",
        "code": "def get_target_url(endpoint_url, bucket_name=None, object_name=None,\n                   bucket_region='us-east-1', query=None):\n    \"\"\"\n    Construct final target url.\n\n    :param endpoint_url: Target endpoint url where request is served to.\n    :param bucket_name: Bucket component for the target url.\n    :param object_name: Object component for the target url.\n    :param bucket_region: Bucket region for the target url.\n    :param query: Query parameters as a *dict* for the target url.\n    :return: Returns final target url as *str*.\n    \"\"\"\n    # New url\n    url = None\n\n    # Parse url\n    parsed_url = urlsplit(endpoint_url)\n\n    # Get new host, scheme.\n    scheme = parsed_url.scheme\n    host = parsed_url.netloc\n\n    # Strip 80/443 ports since curl & browsers do not\n    # send them in Host header.\n    if (scheme == 'http' and parsed_url.port == 80) or\\\n       (scheme == 'https' and parsed_url.port == 443):\n        host = parsed_url.hostname\n\n    if 's3.amazonaws.com' in host:\n        host = get_s3_endpoint(bucket_region)\n\n    url = scheme + '://' + host\n    if bucket_name:\n        # Save if target url will have buckets which suppport\n        # virtual host.\n        is_virtual_host_style = is_virtual_host(endpoint_url,\n                                                bucket_name)\n        if is_virtual_host_style:\n            url = (scheme + '://' + bucket_name + '.' + host)\n        else:\n            url = (scheme + '://' + host + '/' + bucket_name)\n\n    url_components = [url]\n    url_components.append('/')\n\n    if object_name:\n        object_name = encode_object_name(object_name)\n        url_components.append(object_name)\n\n    if query:\n        ordered_query = collections.OrderedDict(sorted(query.items()))\n        query_components = []\n        for component_key in ordered_query:\n            if isinstance(ordered_query[component_key], list):\n                for value in ordered_query[component_key]:\n                    query_components.append(component_key+'='+\n                                            queryencode(value))\n            else:\n                query_components.append(\n                    component_key+'='+\n                    queryencode(ordered_query.get(component_key, '')))\n\n        query_string = '&'.join(query_components)\n        if query_string:\n            url_components.append('?')\n            url_components.append(query_string)\n\n    return ''.join(url_components)",
        "writer": "human",
        "rewrite": [
            "from urllib.parse import urlsplit\nfrom urllib.parse import urlencode\nimport collections\n\ndef get_s3_endpoint(bucket_region):\n    return f's3.{bucket_region}.amazonaws.com'\n\ndef is_virtual_host(endpoint_url, bucket_name):\n    return 's3.amazonaws.com' in endpoint_url\n\ndef encode_object_name(object_name):\n    return object_name\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed_url = urlsplit(endpoint_url)\n    scheme = parsed_url.scheme\n    host = parsed_url.netloc\n    if (scheme == 'http' and parsed_url.port == 80) or (scheme == 'https' and parsed_url.port == 443):\n        host = parsed_url.hostname\n    if 's3.amazonaws.com' in host:\n        host = get_s3_endpoint(bucket_region)\n    url = f'{scheme}://{host}'\n    if bucket_name:\n        is_virtual_host_style = is_virtual_host(endpoint_url, bucket_name)\n        url = f'{scheme}://{bucket_name}.{host}' if is_virtual_host_style else f'{scheme}://{host}/{bucket_name}'\n    url_components = [url, '/']\n    if object_name:\n        url_components.append(encode_object_name(object_name))\n    if query:\n        ordered_query = collections.OrderedDict(sorted(query.items()))\n        query_components = [f'{k}={urlencode({v}) if isinstance(v,str) else urlencode(v)}' for k,v in ordered_query.items()]\n        query_string = '&'.join(query_components)\n        url_components.extend(['?', query_string])\n    return ''.join(url_components)",
            "from urllib.parse import urlsplit, urlencode\nimport collections\n\ndef get_s3_endpoint(region):\n    return f\"s3.{region}.amazonaws.com\"\n\ndef is_virtual_host(endpoint, bucket):\n    return \"s3.amazonaws.com\" in endpoint\n\ndef encode_object_name(name):\n    return name\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed = urlsplit(endpoint_url)\n    scheme = parsed.scheme\n    host = parsed.hostname if ((scheme == 'http' and parsed.port == 80) or (scheme == 'https' and parsed.port == 443)) else parsed.netloc\n    host = get_s3_endpoint(bucket_region) if \"s3.amazonaws.com\" in host else host\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        url = f\"{scheme}://{bucket_name}.{host}\" if is_virtual_host(endpoint_url, bucket_name) else f\"{scheme}://{host}/{bucket_name}\"\n    parts = [url, '/']\n    if object_name:\n        parts.append(encode_object_name(object_name))\n    if query:\n        ordered = collections.OrderedDict(sorted(query.items()))\n        query_params = []\n        for k, v in ordered.items():\n            if isinstance(v, list):\n                for val in v:\n                    query_params.append(f\"{k}={urlencode({val})}\")\n            else:\n                query_params.append(f\"{k}={urlencode({v})}\")\n        query_string = '&'.join(query_params)\n        parts.extend(['?', query_string])\n    return \"\".join(parts)",
            "from urllib.parse import urlsplit, urlencode\nimport collections\n\ndef get_s3_endpoint(region):\n    return f\"s3.{region}.amazonaws.com\"\n\ndef is_virtual_host(endpoint, bucket):\n    return \"s3.amazonaws.com\" in endpoint\n\ndef encode_object_name(name):\n    return name\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed = urlsplit(endpoint_url)\n    scheme = parsed.scheme\n    host = parsed.hostname if (parsed.port in (80, 443) and parsed.scheme in ('http', 'https')) else parsed.netloc\n    host = get_s3_endpoint(bucket_region) if \"s3.amazonaws.com\" in host else host\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        url += f\"/{bucket_name}\" if not is_virtual_host(endpoint_url, bucket_name) else f\".{bucket_name}\"\n    path = \"/\" + (object_name or \"\")\n    query_string = \"\"\n    if query:\n        ordered = collections.OrderedDict(sorted(query.items()))\n        query_string = \"&\".join(f\"{k}={urlencode(v)}\" if isinstance(v, (str, int, bool)) else \"&\".join(f\"{k}={urlencode(x)}\" for x in v) for k, v in ordered.items())\n    return f\"{url}{path}?{query_string}\" if query_string else f\"{url}{path}\"",
            "from urllib.parse import urlsplit, urlencode\nimport collections\n\ndef get_s3_endpoint(region):\n  return f\"s3.{region}.amazonaws.com\"\n\ndef is_virtual_host(endpoint, bucket):\n  return \"s3.amazonaws.com\" in endpoint\n\ndef encode_object_name(name):\n  return name\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed = urlsplit(endpoint_url)\n    scheme = parsed.scheme\n    host = parsed.hostname if (parsed.port in (80, 443) and parsed.scheme in ('http', 'https')) else parsed.netloc\n    host = get_s3_endpoint(bucket_region) if \"s3.amazonaws.com\" in host else host\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        url = f\"{scheme}://{bucket_name}.{host}\" if is_virtual_host(endpoint_url, bucket_name) else f\"{url}/{bucket_name}\"\n    url += f\"/{object_name or ''}\" if object_name else \"/\"\n    if query:\n        query_string = '&'.join(f'{k}={urlencode(v)}' if isinstance(v,(str,int,bool)) else '&'.join(f'{k}={urlencode(x)}' for x in v) for k,v in collections.OrderedDict(sorted(query.items())).items())\n        url += f\"?{query_string}\"\n    return url",
            "from urllib.parse import urlsplit, urlencode\nimport collections\n\ndef get_s3_endpoint(region):\n    return f\"s3.{region}.amazonaws.com\"\n\ndef is_virtual_host(endpoint, bucket):\n    return \"s3.amazonaws.com\" in endpoint\n\ndef encode_object_name(name):\n    return name\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed = urlsplit(endpoint_url)\n    scheme = parsed.scheme\n    host = parsed.hostname if (parsed.scheme in ('http', 'https') and parsed.port in (80, 443)) else parsed.netloc\n    host = get_s3_endpoint(bucket_region) if \"s3.amazonaws.com\" in host else host\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        url += f\"{('.' if is_virtual_host(endpoint_url, bucket_name) else '/')}{bucket_name}\"\n    url += f\"/{encode_object_name(object_name) or ''}\" if object_name else \"/\"\n    if query:\n        query_params = []\n        for k, v in collections.OrderedDict(sorted(query.items())).items():\n            if isinstance(v, list):\n                query_params.extend([f\"{k}={urlencode(x)}\" for x in v])\n            else:\n                query_params.append(f\"{k}={urlencode(v)}\")\n        url += f\"?{'&'.join(query_params)}\"\n    return url",
            "from urllib.parse import urlsplit, urlencode\nimport collections\n\ndef get_s3_endpoint(region):\n    return f\"s3.{region}.amazonaws.com\"\n\ndef is_virtual_host(endpoint, bucket):\n    return \"s3.amazonaws.com\" in endpoint\n\ndef encode_object_name(name):\n    return name\n\ndef get_target_url(endpoint_url, bucket_name=None, object_name=None, bucket_region='us-east-1', query=None):\n    parsed = urlsplit(endpoint_url)\n    scheme = parsed.scheme\n    host = parsed.hostname if (parsed.scheme in ('http', 'https') and parsed.port in (80, 443)) else parsed.netloc\n    host = get_s3_endpoint(bucket_region) if \"s3.amazonaws.com\" in host else host\n    url = f\"{scheme}://{host}\"\n    if bucket_name:\n        url += f\"{('.' if is_virtual_host(endpoint_url, bucket_name) else '/')}{bucket_name}\"\n    url += f\"/{encode_object_name(object_name) or ''}\" if object_name else \"/\"\n    if query:\n        query_string = \"&\".join(f\"{k}={urlencode(v)}\" if not isinstance(v, list) else f\"{k}={urlencode(x)}\" for k,v in collections.OrderedDict(sorted(query.items())).items() for x in ([v] if not isinstance(v,list) else v))\n        url += f\"?{query_string}\"\n    return url"
        ]
    }
]