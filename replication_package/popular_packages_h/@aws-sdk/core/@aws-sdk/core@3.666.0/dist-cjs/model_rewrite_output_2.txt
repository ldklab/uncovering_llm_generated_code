The given Node.js code snippet is a module export script. It utilizes the `tslib` library, which provides helper functions for TypeScript's syntactic sugar (like decorators, async/await, and module imports/exports). This script uses the `__exportStar` helper function from `tslib` to re-export all exports from each of three specified submodule paths: `./submodules/client/index`, `./submodules/httpAuthSchemes/index`, and `./submodules/protocols/index`.

Here, re-exporting means that the module is effectively aggregating exports from these submodules, allowing them to be accessed as part of this module's namespace.

Now, here's the rewritten equivalent code:

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const clientExports = require("./submodules/client/index");
const httpAuthSchemesExports = require("./submodules/httpAuthSchemes/index");
const protocolsExports = require("./submodules/protocols/index");

Object.keys(clientExports).forEach((key) => {
    if (key === "default" || exports.hasOwnProperty(key)) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return clientExports[key];
        },
    });
});

Object.keys(httpAuthSchemesExports).forEach((key) => {
    if (key === "default" || exports.hasOwnProperty(key)) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return httpAuthSchemesExports[key];
        },
    });
});

Object.keys(protocolsExports).forEach((key) => {
    if (key === "default" || exports.hasOwnProperty(key)) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return protocolsExports[key];
        },
    });
});
```