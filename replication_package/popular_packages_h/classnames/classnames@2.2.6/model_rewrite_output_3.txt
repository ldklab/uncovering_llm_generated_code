The provided Node.js code defines a utility function called `classNames` that helps in conditionally joining class names together. This function takes variable arguments and processes them to return a single string of class names based on the following rules:
- If an argument is a string or a number, it is added directly to the list of class names.
- If an argument is an array, the function is applied recursively to the elements of the array, and any returned class names are added.
- If an argument is an object, all property keys with truthy values are added as class names.

The function is organized to be compatible with different module systems (CommonJS, AMD) and can be used both in Node.js and in the browser.

Here's the rewritten code:

```javascript
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/

(function () {
	'use strict';

	function classNames(...args) {
		const classes = [];

		for (let arg of args) {
			if (!arg) continue;

			if (typeof arg === 'string' || typeof arg === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				const inner = classNames(...arg);
				if (inner) {
					classes.push(inner);
				}
			} else if (typeof arg === 'object') {
				for (let key in arg) {
					if (arg.hasOwnProperty(key) && arg[key]) {
						classes.push(key);
					}
				}
			}
		}

		return classes.join(' ');
	}

	if (typeof module !== 'undefined' && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (typeof define === 'function' && define.amd) {
		define('classnames', [], () => classNames);
	} else {
		window.classNames = classNames;
	}
})();
```