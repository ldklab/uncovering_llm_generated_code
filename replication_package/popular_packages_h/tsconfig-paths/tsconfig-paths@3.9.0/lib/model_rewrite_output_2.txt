The provided Node.js code is exporting several functionalities from different modules. Here's a breakdown of the code:

1. It is making use of the modern ES modules system while being compiled for use in a CommonJS environment, as shown by the `Object.defineProperty(exports, "__esModule", { value: true });` line.
2. It imports and re-exports specific functions from the `match-path-sync` module:
   - `createMatchPath`
   - `matchFromAbsolutePaths`
3. It imports and re-exports specific functions from the `match-path-async` module:
   - `createMatchPathAsync`
   - `matchFromAbsolutePathsAsync`
4. It imports and re-exports the `register` function from the `register` module.
5. It imports and re-exports `loadConfig` from the `config-loader` module.

Each import uses a named import style, picking specific exports from each module and then re-exporting them in the current module's export object, making them accessible to any module that imports from this module.

Here is a possible rewrite of this Node.js code:

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

// Synchronous path matching functions
var { createMatchPath, matchFromAbsolutePaths } = require("./match-path-sync");
exports.createMatchPath = createMatchPath;
exports.matchFromAbsolutePaths = matchFromAbsolutePaths;

// Asynchronous path matching functions
var { createMatchPathAsync, matchFromAbsolutePathsAsync } = require("./match-path-async");
exports.createMatchPathAsync = createMatchPathAsync;
exports.matchFromAbsolutePathsAsync = matchFromAbsolutePathsAsync;

// Registration function
var { register } = require("./register");
exports.register = register;

// Configuration loader
var { loadConfig } = require("./config-loader");
exports.loadConfig = loadConfig;
```