The original Node.js code is a module that integrates Tailwind CSS with PostCSS. It handles the configuration of Tailwind CSS, allowing configurations to be passed in various formats like objects, strings, or via a file path, and it processes these configurations accordingly. The code also manages dependencies to automatically update when configurations change, unless Jest is running. It involves multiple imported utility functions and relies on lodash for type checking and object manipulation. Here's a simplified and organized restructured version:

```javascript
"use strict";

// Importing necessary modules and functions
const path = require("path");
const fs = require("fs");
const _ = require("lodash");

const getModuleDependencies = require("./lib/getModuleDependencies").default;
const registerConfigAsDependency = require("./lib/registerConfigAsDependency").default;
const processTailwindFeatures = require("./processTailwindFeatures").default;
const formatCSS = require("./lib/formatCSS").default;
const resolveConfig = require("./util/resolveConfig").default;
const getAllConfigs = require("./util/getAllConfigs").default;
const { defaultConfigFile } = require("./constants");
const defaultConfigStub = require("../stubs/defaultConfig.stub.js").default;

// Function to resolve the configuration path
function resolveConfigPath(filePath) {
  if (_.isObject(filePath) && !_.has(filePath, 'config') && !_.isEmpty(filePath)) {
    return undefined;
  }
  if (_.isObject(filePath) && _.has(filePath, 'config') && _.isString(filePath.config)) {
    return path.resolve(filePath.config);
  }
  if (_.isObject(filePath) && _.has(filePath, 'config') && _.isObject(filePath.config)) {
    return undefined;
  }
  if (_.isString(filePath)) {
    return path.resolve(filePath);
  }
  try {
    const defaultConfigPath = path.resolve(defaultConfigFile);
    fs.accessSync(defaultConfigPath);
    return defaultConfigPath;
  } catch (err) {
    return undefined;
  }
}

// Generate a configuration function
const getConfigFunction = config => () => {
  if (_.isUndefined(config)) {
    return resolveConfig([...getAllConfigs(defaultConfigStub)]);
  }
  if (process.env.JEST_WORKER_ID === undefined && !_.isObject(config)) {
    getModuleDependencies(config).forEach(mdl => {
      delete require.cache[require.resolve(mdl.file)];
    });
  }
  const configObject = _.isObject(config) ? _.get(config, 'config', config) : require(config);
  return resolveConfig([...getAllConfigs(configObject)]);
};

// Main module function
module.exports = function(config) {
  const plugins = [];
  const resolvedConfigPath = resolveConfigPath(config);

  if (!_.isUndefined(resolvedConfigPath)) {
    plugins.push(registerConfigAsDependency(resolvedConfigPath));
  }

  return {
    postcssPlugin: 'tailwindcss',
    plugins: [
      ...plugins,
      processTailwindFeatures(getConfigFunction(resolvedConfigPath || config)),
      formatCSS
    ],
  };
};

module.exports.postcss = true;
```