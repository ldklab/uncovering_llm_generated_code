The Node.js code provides two functions: `escape` and `unescape`. These functions are used for handling HTML entities in a given string:

1. **escape**: This function takes a string and replaces certain characters (`&`, `<`, `>`, `'`, `"`), potentially dangerous in an HTML context, with their corresponding HTML entities to prevent HTML injection attacks or rendering issues. The function uses regular expressions to identify these characters and replaces each matching character with its HTML entity equivalent using a lookup from the `esca` object.

2. **unescape**: This function does the reverse operation. It converts HTML entities back into their respective characters. This can be useful when receiving user input that has been encoded and needs to be displayed as normal text. It also utilizes regular expressions to match the entities and replaces them using a lookup from the `unes` object.

Here's the rewritten code with a clear structure:

```javascript
'use strict';
/**
 * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

const { replace } = String.prototype;

// Regular expressions for identifying characters and entities
const es = /&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/g;
const ca = /[&<>'"]/g;

// Lookup dictionary for escape mapping
const esca = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  "'": '&#39;',
  '"': '&quot;'
};

// Callback function for replacing characters with entities
const pe = match => esca[match];

// Function to escape HTML entities
const escape = input => replace.call(input, ca, pe);

// Exporting the escape function
exports.escape = escape;

// Lookup dictionary for unescape mapping
const unes = {
  '&amp;': '&',
  '&#38;': '&',
  '&lt;': '<',
  '&#60;': '<',
  '&gt;': '>',
  '&#62;': '>',
  '&apos;': "'",
  '&#39;': "'",
  '&quot;': '"',
  '&#34;': '"'
};

// Callback function for replacing entities with characters
const cape = match => unes[match];

// Function to unescape HTML entities
const unescape = input => replace.call(input, es, cape);

// Exporting the unescape function
exports.unescape = unescape;
```