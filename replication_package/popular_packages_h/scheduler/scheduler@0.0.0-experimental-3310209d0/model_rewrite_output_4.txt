The given Node.js code checks the environment in which it's being executed and exports different modules based on specific conditions. Here's a step-by-step explanation of its functionality:

1. **Environment Check for `window`:** The code first checks if the `window` object is defined. If it's `undefined`, it implies the code isn't running in a browser environment. Accordingly, it exports a module from `'./unstable_no_dom'`.

2. **MessageChannel Check:** Alongside the `window` check, it also verifies whether `MessageChannel` is a function, which is another indication that the script is running in an environment similar to browsers.

3. **Production Environment Check:** If the script is executing in a browser-like environment (where both `window` and `MessageChannel` are defined), the code then checks the `process.env.NODE_ENV` variable to determine if the application is in production mode. If it is in production, it exports the `scheduler.production.min.js` module.

4. **Development Environment Handling:** If none of the above conditions are met (meaning it is running in a browser environment but not in production mode), the code exports `scheduler.development.js`.

Here is the rewritten code based on this explanation:

```javascript
'use strict';

const isBrowser = (typeof window !== 'undefined' && typeof MessageChannel === 'function');
const isProduction = (process.env.NODE_ENV === 'production');

if (!isBrowser) {
  // If not a browser-like environment, export no DOM functionality.
  module.exports = require('./unstable_no_dom');
} else if (isProduction) {
  // If in a production environment within a browser, export production scheduler.
  module.exports = require('./cjs/scheduler.production.min.js');
} else {
  // Otherwise, export the development version of the scheduler for non-production browser environments.
  module.exports = require('./cjs/scheduler.development.js');
}
```