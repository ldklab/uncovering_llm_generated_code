The functionality of the given Node.js code is to conditionally export different stream-related modules based on an environment variable `READABLE_STREAM`. Here's a step-by-step explanation of what the code does:

1. It requires the built-in Node.js `stream` module.
2. It checks if an environment variable `READABLE_STREAM` is set to 'disable' and whether the `stream` module has been loaded.
3. If `READABLE_STREAM` is set to 'disable', it exports the `Stream.Readable` class from the `stream` module and assigns all properties of the `Stream` module to the exports. It also sets `module.exports.Stream` to be the `Stream` object.
4. If `READABLE_STREAM` is not 'disable', it imports multiple stream classes and functionalities from a custom library located in the `./lib/` directory:
   - The default export is `_stream_readable.js`, which is set to both `exports` and `module.exports`.
   - Assigns `exports.Stream` to be `Stream` if it's available, otherwise defaults to `exports`.
   - Maps other exports to corresponding stream-related modules: `Writable`, `Duplex`, `Transform`, `PassThrough`, `finished`, and `pipeline`.

Here's a possible rewrite of the code:

```javascript
const Stream = require('stream');

if (process.env.READABLE_STREAM === 'disable' && Stream) {
  module.exports = Stream.Readable;
  Object.assign(module.exports, Stream);
  module.exports.Stream = Stream;
} else {
  const readable = require('./lib/_stream_readable.js');
  module.exports = readable;
  exports.Stream = Stream || readable;
  exports.Readable = readable;
  exports.Writable = require('./lib/_stream_writable.js');
  exports.Duplex = require('./lib/_stream_duplex.js');
  exports.Transform = require('./lib/_stream_transform.js');
  exports.PassThrough = require('./lib/_stream_passthrough.js');
  exports.finished = require('./lib/internal/streams/end-of-stream.js');
  exports.pipeline = require('./lib/internal/streams/pipeline.js');
}
```