The provided Node.js code manages module extensions for a server or build environment that handles various JavaScript and TypeScript file types. It defines a configuration for automatically registering specific compiler or interpreter modules based on file extensions. Here is the breakdown:

1. **Importing Modules**: The code uses the `path` module for handling file path manipulations.

2. **Regular Expression Check**: A regular expression `endsInBabelJs` is defined to test if a file name ends with `.babel.js`, `.babel.ts`, `.babel.jsx`, or `.babel.tsx`.

3. **Function to Ignore Specific Files**: 
   - `ignoreNonBabelAndNodeModules` checks whether a file does not end in `.babel.js[x]` or `.babel.tsx`, and whether it is within a `node_modules` directory. It returns `true` for files that should be ignored by Babel registers.

4. **Extensions Configuration**: 
   - An `extensions` object maps file extensions to modules or configurations needed to handle those file types. This mapping includes registering Babel for handling `.babel.js`, `.jsx`, `.ts`, and other extensions.
   - The configuration makes use of different ways to register handlers, which could include directly specifying a module path or providing an object with `module` and `register` fields where the `register` field defines how to load the module with optional parameters.

5. **Variant JavaScript Extensions**: 
   - Lists the various extensions that are considered alternative or additional JavaScript syntax supported by the configuration via the `jsVariantExtensions` array.

6. **Exports**: 
   - The configuration is exported as a module exposing the `extensions` mapping and `jsVariants` helper, providing a subset of `extensions` tailored specifically for JavaScript variant extensions.

Here's the rewritten version of this Node.js code block:

```javascript
const path = require('path');

const endsInBabelJs = /\.babel\.[jt]s(x)$/;
const mjsStub = path.join(__dirname, 'mjs-stub');

function ignoreNonBabelAndNodeModules(file) {
  return !endsInBabelJs.test(file) &&
    path.relative(process.cwd(), file).split(path.sep).includes('node_modules');
}

const extensions = {
  '.babel.js': [
    { module: '@babel/register', register: hook => hook({ extensions: '.js', rootMode: 'upward-optional', ignore: [ignoreNonBabelAndNodeModules] }) },
    { module: 'babel-register', register: hook => hook({ extensions: '.js', ignore: ignoreNonBabelAndNodeModules }) },
    { module: 'babel-core/register', register: hook => hook({ extensions: '.js', ignore: ignoreNonBabelAndNodeModules }) },
    { module: 'babel/register', register: hook => hook({ extensions: '.js', ignore: ignoreNonBabelAndNodeModules }) }
  ],
  '.babel.ts': [
    { module: '@babel/register', register: hook => hook({ extensions: '.ts', rootMode: 'upward-optional', ignore: [ignoreNonBabelAndNodeModules] }) }
  ],
  '.buble.js': 'buble/register',
  '.cirru': 'cirru-script/lib/register',
  '.cjsx': 'node-cjsx/register',
  '.co': 'coco',
  '.coffee': ['coffeescript/register', 'coffee-script/register', 'coffeescript', 'coffee-script'],
  '.coffee.md': ['coffeescript/register', 'coffee-script/register', 'coffeescript', 'coffee-script'],
  '.csv': 'require-csv',
  '.eg': 'earlgrey/register',
  '.esm.js': {
    module: 'esm',
    register: hook => {
      const esmLoader = hook(module);
      require.extensions['.js'] = esmLoader('module')._extensions['.js'];
    },
  },
  '.iced': ['iced-coffee-script/register', 'iced-coffee-script'],
  '.iced.md': 'iced-coffee-script/register',
  '.ini': 'require-ini',
  '.js': null,
  '.json': null,
  '.json5': ['json5/lib/register', 'json5/lib/require'],
  '.jsx': [
    { module: '@babel/register', register: hook => hook({ extensions: '.jsx', rootMode: 'upward-optional', ignore: [ignoreNonBabelAndNodeModules] }) },
    { module: 'babel-register', register: hook => hook({ extensions: '.jsx', ignore: ignoreNonBabelAndNodeModules }) },
    { module: 'babel-core/register', register: hook => hook({ extensions: '.jsx', ignore: ignoreNonBabelAndNodeModules }) },
    { module: 'babel/register', register: hook => hook({ extensions: '.jsx', ignore: ignoreNonBabelAndNodeModules }) },
    { module: 'node-jsx', register: hook => hook.install({ extension: '.jsx', harmony: true }) }
  ],
  '.litcoffee': ['coffeescript/register', 'coffee-script/register', 'coffeescript', 'coffee-script'],
  '.liticed': 'iced-coffee-script/register',
  '.ls': ['livescript', 'LiveScript'],
  '.mjs': mjsStub,
  '.node': null,
  '.toml': {
    module: 'toml-require',
    register: hook => hook.install(),
  },
  '.ts': [
    'ts-node/register',
    'typescript-node/register',
    'typescript-register',
    'typescript-require',
    'sucrase/register/ts',
    { module: '@babel/register', register: hook => hook({ extensions: '.ts', rootMode: 'upward-optional', ignore: [ignoreNonBabelAndNodeModules] }) }
  ],
  '.tsx': [
    'ts-node/register',
    'typescript-node/register',
    'sucrase/register',
    { module: '@babel/register', register: hook => hook({ extensions: '.tsx', rootMode: 'upward-optional', ignore: [ignoreNonBabelAndNodeModules] }) }
  ],
  '.wisp': 'wisp/engine/node',
  '.xml': 'require-xml',
  '.yaml': 'require-yaml',
  '.yml': 'require-yaml',
};

const jsVariantExtensions = [
  '.js', '.babel.js', '.babel.ts', '.buble.js', '.cirru', '.cjsx',
  '.co', '.coffee', '.coffee.md', '.eg', '.esm.js', '.iced',
  '.iced.md', '.jsx', '.litcoffee', '.liticed', '.ls', '.mjs',
  '.ts', '.tsx', '.wisp',
];

module.exports = {
  extensions: extensions,
  jsVariants: jsVariantExtensions.reduce((result, ext) => {
    result[ext] = extensions[ext];
    return result;
  }, {}),
};
```