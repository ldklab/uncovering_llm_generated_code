The provided Node.js code is a module intended for parsing and analyzing CommonJS (CJS) module source code. Its functionalities can be summarized as follows:

1. **State Management**: 
   - Various global variables keep track of the parsing state, such as open token depth, current parsing position, last token position, and collections of exports and re-exports.

2. **Reset State Function**: 
   - `resetState()` initializes or clears the state variables to prepare for a new parsing session.

3. **Main Parsing Functionality**:
   - `parseCJS(source, name)` is the main function exposed by the module. It takes CJS source code as input and identifies and returns collected exports and re-exports by parsing the source code.
   - The function attempts to parse import-like or export-like statements within the CJS for conversion or re-exports.

4. **Decoding Strings**:
   - `decode(str)` attempts to safely decode string literals, ensuring valid surrogate pair handling for UTF-16.

5. **Token and Syntax Parsing**:
   - `parseSource(source)` reads through the CJS source code character by character, handling various syntactical elements, including string literals, import/export patterns, template strings, and JavaScript expressions.
   - Helper functions such as `tryParseRequire`, `tryParseExportsDotAssign`, and others are used within `parseSource` to parse specific patterns and maintain the state accordingly.

6. **Character and Keyword Identification**:
   - Utilizes utility functions to identify JavaScript identifiers, punctuation, and special syntax to decide parsing paths and detect potential syntax errors specific to CJS, such as improper use of `import` or `export`.

7. **Exported Functions**:
   - The module exports `parse`, `init`, and `initSync`, where `parse` is the key function used to initiate the parsing of a CJS module.

The code contains various structures and methodologies to handle complex source analysis specific to CommonJS modules and requires a detailed component-like approach to handle potential syntax exclusively found in CJS modules.

Here's a possible rewritten version of the code:

```javascript
let state = {
  source: undefined,
  pos: undefined,
  end: undefined,
  openTokenDepth: 0,
  templateDepth: -1,
  lastTokenPos: -1,
  lastSlashWasDivision: false,
  templateStack: new Array(1024),
  templateStackDepth: 0,
  openTokenPosStack: new Array(1024),
  openClassPosStack: new Array(1024),
  nextBraceIsClass: false,
  starExportMap: Object.create(null),
  lastStarExportSpecifier: null,
  _exports: new Set(),
  unsafeGetters: new Set(),
  reexports: new Set()
};

function resetState() {
  state.openTokenDepth = 0;
  state.templateDepth = -1;
  state.lastTokenPos = -1;
  state.lastSlashWasDivision = false;
  state.templateStackDepth = 0;
  state.nextBraceIsClass = false;
  state.starExportMap = Object.create(null);
  state.lastStarExportSpecifier = null;
  state._exports.clear();
  state.unsafeGetters.clear();
  state.reexports.clear();
}

const RequireType = { Import: 0, ExportAssign: 1, ExportStar: 2 };

function parseCJS(source, name = '@') {
  resetState();
  try {
    parseSource(source);
  } catch (e) {
    e.message += `\n  at ${name}:${source.slice(0, state.pos).split('\n').length}:${state.pos - source.lastIndexOf('\n', state.pos - 1)}`;
    e.loc = state.pos;
    throw e;
  }
  const result = {
    exports: [...state._exports].filter(expt => expt !== undefined && !state.unsafeGetters.has(expt)),
    reexports: [...state.reexports].filter(reexpt => reexpt !== undefined)
  };
  resetState();
  return result;
}

function parseSource(cjsSource) {
  state.source = cjsSource;
  state.pos = -1;
  state.end = state.source.length - 1;
  let ch = 0;

  // Skip #! (shebang) if it's the first line
  if (state.source.charCodeAt(0) === 35 /*#*/ && state.source.charCodeAt(1) === 33 /*!*/) {
    if (state.source.length === 2) return true;
    state.pos += 2;
    while (state.pos++ < state.end) {
      ch = state.source.charCodeAt(state.pos);
      if (ch === 10 /*\n*/ || ch === 13 /*\r*/) break;
    }
  }

  while (state.pos++ < state.end) {
    ch = state.source.charCodeAt(state.pos);

    if (ch === 32 || (ch < 14 && ch > 8)) continue;

    if (state.openTokenDepth === 0) {
      switch (ch) {
        case 105 /*i*/:
          if (state.source.startsWith('mport', state.pos + 1) && keywordStart(state.pos))
            throwIfImportStatement();
          state.lastTokenPos = state.pos;
          continue;
        case 114 /*r*/:
          const startPos = state.pos;
          if (tryParseRequire(RequireType.Import) && keywordStart(startPos))
            tryBacktrackAddStarExportBinding(startPos - 1);
          state.lastTokenPos = state.pos;
          continue;
        case 95 /*_*/:
          if (state.source.startsWith('interopRequireWildcard', state.pos + 1) &&
              (keywordStart(state.pos) || state.source.charCodeAt(state.pos - 1) === 46 /*.*/)) {
            const startPos = state.pos;
            state.pos += 23;
            if (state.source.charCodeAt(state.pos) === 40 /*(*/) {
              state.pos++;
              state.openTokenPosStack[state.openTokenDepth++] = state.lastTokenPos;
              if (tryParseRequire(RequireType.Import) && keywordStart(startPos)) {
                tryBacktrackAddStarExportBinding(startPos - 1);
              }
            }
          } else if (state.source.startsWith('_export', state.pos + 1) &&
                     (keywordStart(state.pos) || state.source.charCodeAt(state.pos - 1) === 46 /*.*/)) {
            state.pos += 8;
            if (state.source.startsWith('Star', state.pos))
              state.pos += 4;
            if (state.source.charCodeAt(state.pos) === 40 /*(*/) {
              state.openTokenPosStack[state.openTokenDepth++] = state.lastTokenPos;
              if (state.source.charCodeAt(++state.pos) === 114 /*r*/)
                tryParseRequire(RequireType.ExportStar);
            }
          }
          state.lastTokenPos = state.pos;
          continue;
        }
    }

    switch (ch) {
      case 101 /*e*/:
        if (state.source.startsWith('xport', state.pos + 1) && keywordStart(state.pos)) {
          if (state.source.charCodeAt(state.pos + 6) === 115 /*s*/)
            tryParseExportsDotAssign(false);
          else if (state.openTokenDepth === 0)
            throwIfExportStatement();
        }
        break;
      case 99 /*c*/:
        if (keywordStart(state.pos) && state.source.startsWith('lass', state.pos + 1) &&
            isBrOrWs(state.source.charCodeAt(state.pos + 5)))
          state.nextBraceIsClass = true;
        break;
      case 109 /*m*/:
        if (state.source.startsWith('odule', state.pos + 1) && keywordStart(state.pos))
          tryParseModuleExportsDotAssign();
        break;
      case 79 /*O*/:
        if (state.source.startsWith('bject', state.pos + 1) && keywordStart(state.pos))
          tryParseObjectDefineOrKeys(state.openTokenDepth === 0);
        break;
      case 40 /*(*/:
        state.openTokenPosStack[state.openTokenDepth++] = state.lastTokenPos;
        break;
      case 41 /*)*/:
        if (state.openTokenDepth === 0)
          throw new Error('Unexpected closing bracket.');
        state.openTokenDepth--;
        break;
      case 123 /*{*/:
        state.openClassPosStack[state.openTokenDepth] = state.nextBraceIsClass;
        state.nextBraceIsClass = false;
        state.openTokenPosStack[state.openTokenDepth++] = state.lastTokenPos;
        break;
      case 125 /*}*/:
        if (state.openTokenDepth === 0)
          throw new Error('Unexpected closing brace.');
        if (state.openTokenDepth-- === state.templateDepth) {
          state.templateDepth = state.templateStack[--state.templateStackDepth];
          templateString();
        } else {
          if (state.templateDepth !== -1 && state.openTokenDepth < state.templateDepth)
            throw new Error('Unexpected closing brace.');
        }
        break;
      case 60 /*>*/:
        // TODO: <!-- XML comment support
        break;
      case 39 /*'*/:
      case 34 /*"*/:
        stringLiteral(ch);
        break;
      case 47 /*/*/: {
        const next_ch = state.source.charCodeAt(state.pos + 1);
        if (next_ch === 47 /*/*/) {
          lineComment();
          continue;
        } else if (next_ch === 42 /***/) {
          blockComment();
          continue;
        } else {
          const lastToken = state.source.charCodeAt(state.lastTokenPos);
          if (isExpressionPunctuator(lastToken) &&
              !(lastToken === 46 /*.*/ && isBetweenDigits()) &&
              !(lastToken === 43 /*+*/ && state.source.charCodeAt(state.lastTokenPos - 1) === 43 /*+*/) &&
              !(lastToken === 45 /*-*/ && state.source.charCodeAt(state.lastTokenPos - 1) === 45 /*-*/) ||
              lastToken === 41 /*)*/ && isParenKeyword(state.openTokenPosStack[state.openTokenDepth]) ||
              lastToken === 125 /*}*/ && (isExpressionTerminator(state.openTokenPosStack[state.openTokenDepth]) ||
              state.openClassPosStack[state.openTokenDepth]) ||
              lastToken === 47 /*/*/ && state.lastSlashWasDivision ||
              isExpressionKeyword(state.lastTokenPos) ||
              !lastToken) {
            regularExpression();
            state.lastSlashWasDivision = false;
          } else {
            state.lastSlashWasDivision = true;
          }
        }
        break;
      }
      case 96 /*`*/:
        templateString();
        break;
    }
    state.lastTokenPos = state.pos;
  }

  if (state.templateDepth !== -1)
    throw new Error('Unterminated template.');

  if (state.openTokenDepth)
    throw new Error('Unterminated braces.');
}

function isBetweenDigits() {
  return state.source.charCodeAt(state.lastTokenPos - 1) >= 48 && state.source.charCodeAt(state.lastTokenPos - 1) <= 57;
}

function tryBacktrackAddStarExportBinding(bPos) {
  while (state.source.charCodeAt(bPos) === 32 /* */ && bPos >= 0) bPos--;
  if (state.source.charCodeAt(bPos) === 61 /*=*/) {
    bPos--;
    while (state.source.charCodeAt(bPos) === 32 /* */ && bPos >= 0) bPos--;
    let codePoint;
    const id_end = bPos;
    let identifierStart = false;
    while ((codePoint = codePointAtLast(bPos)) && bPos >= 0) {
      if (codePoint === 92 /*\*/) return;
      if (!isIdentifierChar(codePoint, true)) break;
      identifierStart = isIdentifierStart(codePoint, true);
      bPos -= codePointLen(codePoint);
    }
    if (identifierStart && state.source.charCodeAt(bPos) === 32 /* */) {
      const starExportId = state.source.slice(bPos + 1, id_end + 1);
      while (state.source.charCodeAt(bPos) === 32 /* */ && bPos >= 0) bPos--;
      switch (state.source.charCodeAt(bPos)) {
        case 114 /*r*/:
          if (!state.source.startsWith('va', bPos - 2)) return;
          break;
        case 116 /*t*/:
          if (!state.source.startsWith('le', bPos - 2) && !state.source.startsWith('cons', bPos - 4)) return;
          break;
        default:
          return;
      }
      state.starExportMap[starExportId] = state.lastStarExportSpecifier;
    }
  }
}

// `Object.` `prototype.`? hasOwnProperty.call(`  IDENTIFIER `, ` IDENTIFIER$2 `)`
function tryParseObjectHasOwnProperty(it_id) {
  state.pos += 6;
  const revertPos = state.pos - 1;
  let ch = commentWhitespace();
  if (ch !== 46 /*.*/) {
    state.pos = revertPos;
    return false;
  }
  state.pos++;
  ch = commentWhitespace();
  if (ch === 112 /*p*/) {
    if (!state.source.startsWith('rototype', state.pos + 1)) return false;
    state.pos += 9;
    ch = commentWhitespace();
    if (ch !== 46 /*.*/) return false;
    state.pos++;
    ch = commentWhitespace();
  }
  if (ch !== 104 /*h*/ || !state.source.startsWith('asOwnProperty', state.pos + 1)) return false;
  state.pos += 14;
  ch = commentWhitespace();
  if (ch !== 46 /*.*/) return false;
  state.pos++;
  ch = commentWhitespace();
  if (ch !== 99 /*c*/ || !state.source.startsWith('all', state.pos + 1)) return false;
  state.pos += 4;
  ch = commentWhitespace();
  if (ch !== 40 /*(*/) return false;
  state.pos++;
  ch = commentWhitespace();
  if (!identifier()) return false;
  ch = commentWhitespace();
  if (ch !== 44 /*,*/) return false;
  state.pos++;
  ch = commentWhitespace();
  if (!state.source.startsWith(it_id, state.pos)) return false;
  state.pos += it_id.length;
  ch = commentWhitespace();
  if (ch !== 41 /*)*/) return false;
  state.pos++;
  return true;
}

function tryParseObjectDefineOrKeys(keys) {
  state.pos += 6;
  let revertPos = state.pos - 1;
  let ch = commentWhitespace();
  if (ch === 46 /*.*/) {
    state.pos++;
    ch = commentWhitespace();
    if (ch === 100 /*d*/ && state.source.startsWith('efineProperty', state.pos + 1)) {
      let expt;
      while (true) {
        state.pos += 14;
        revertPos = state.pos - 1;
        ch = commentWhitespace();
        if (ch !== 40 /*(*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (!readExportsOrModuleDotExports(ch)) break;
        ch = commentWhitespace();
        if (ch !== 44 /*,*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 39 /*'*/ && ch !== 34 /*"*/) break;
        const exportPos = state.pos;
        stringLiteral(ch);
        expt = state.source.slice(exportPos, ++state.pos);
        ch = commentWhitespace();
        if (ch !== 44 /*,*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 123 /*{*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch === 101 /*e*/) {
          if (!state.source.startsWith('numerable', state.pos + 1)) break;
          state.pos += 10;
          ch = commentWhitespace();
          if (ch !== 58 /*:*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 116 /*t*/ || !state.source.startsWith('rue', state.pos + 1)) break;
          state.pos += 4;
          ch = commentWhitespace();
          if (ch !== 44) break;
          state.pos++;
          ch = commentWhitespace();
        }
        if (ch === 118 /*v*/) {
          if (!state.source.startsWith('alue', state.pos + 1)) break;
          state.pos += 5;
          ch = commentWhitespace();
          if (ch !== 58 /*:*/) break;
          state._exports.add(decode(expt));
          state.pos = revertPos;
          return;
        } else if (ch === 103 /*g*/) {
          if (!state.source.startsWith('et', state.pos + 1)) break;
          state.pos += 3;
          ch = commentWhitespace();
          if (ch === 58 /*:*/) {
            state.pos++;
            ch = commentWhitespace();
            if (ch !== 102 /*f*/) break;
            if (!state.source.startsWith('unction', state.pos + 1)) break;
            state.pos += 8;
            let lastPos = state.pos;
            ch = commentWhitespace();
            if (ch !== 40 && (lastPos === state.pos || !identifier())) break;
            ch = commentWhitespace();
          }
          if (ch !== 40 /*(*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 41 /*)*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 123 /*{*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 114 /*r*/) break;
          if (!state.source.startsWith('eturn', state.pos + 1)) break;
          state.pos += 6;
          ch = commentWhitespace();
          if (!identifier()) break;
          ch = commentWhitespace();
          if (ch === 46 /*.*/) {
            state.pos++;
            commentWhitespace();
            if (!identifier()) break;
            ch = commentWhitespace();
          } else if (ch === 91 /*[*/) {
            state.pos++;
            ch = commentWhitespace();
            if (ch === 39 /*'*/ || ch === 34 /*"*/) stringLiteral(ch);
            else break;
            state.pos++;
            ch = commentWhitespace();
            if (ch !== 93 /*]*/) break;
            state.pos++;
            ch = commentWhitespace();
          }
          if (ch === 59 /*;*/) {
            state.pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125 /*}*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch === 44 /*,*/) {
            state.pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125 /*}*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 41 /*)*/) break;
          state._exports.add(decode(expt));
          return;
        }
        break;
      }
      if (expt) {
        state.unsafeGetters.add(decode(expt));
      }
    } else if (keys && ch === 107 /*k*/ && state.source.startsWith('eys', state.pos + 1)) {
      while (true) {
        state.pos += 4;
        revertPos = state.pos - 1;
        ch = commentWhitespace();
        if (ch !== 40 /*(*/) break;
        state.pos++;
        ch = commentWhitespace();
        const id_start = state.pos;
        if (!identifier()) break;
        const id = state.source.slice(id_start, state.pos);
        ch = commentWhitespace();
        if (ch !== 41 /*)*/) break;

        revertPos = state.pos++;
        ch = commentWhitespace();
        if (ch !== 46 /*.*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 102 /*f*/ || !state.source.startsWith('orEach', state.pos + 1)) break;
        state.pos += 7;
        ch = commentWhitespace();
        revertPos = state.pos - 1;
        if (ch !== 40 /*(*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 102 /*f*/ || !state.source.startsWith('unction', state.pos + 1)) break;
        state.pos += 8;
        ch = commentWhitespace();
        if (ch !== 40 /*(*/) break;
        state.pos++;
        ch = commentWhitespace();
        const it_id_start = state.pos;
        if (!identifier()) break;
        const it_id = state.source.slice(it_id_start, state.pos);
        ch = commentWhitespace();
        if (ch !== 41 /*)*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 123 /*{*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 105 /*i*/ || state.source.charCodeAt(state.pos + 1) !== 102 /*f*/) break;
        state.pos += 2;
        ch = commentWhitespace();
        if (ch !== 40 /*(*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (!state.source.startsWith(it_id, state.pos)) break;
        state.pos += it_id.length;
        ch = commentWhitespace();
        if (ch === 61 /*=*/) {
          if (!state.source.startsWith('==', state.pos + 1)) break;
          state.pos += 3;
          ch = commentWhitespace();
          if (ch !== 34 /*"*/ && ch !== 39 /*'*/) break;
          let quot = ch;
          if (!state.source.startsWith('default', state.pos + 1)) break;
          state.pos += 8;
          ch = commentWhitespace();
          if (ch !== quot) break;
          state.pos += 1;
          ch = commentWhitespace();
          if (ch !== 124 /*|*/ || state.source.charCodeAt(state.pos + 1) !== 124 /*|*/) break;
          state.pos += 2;
          ch = commentWhitespace();
          if (state.source.slice(state.pos, state.pos + it_id.length) !== it_id) break;
          state.pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 61 /*=*/ || state.source.slice(state.pos + 1, state.pos + 3) !== '==') break;
          state.pos += 3;
          ch = commentWhitespace();
          if (ch !== 34 /*"*/ && ch !== 39 /*'*/) break;
          quot = ch;
          if (!state.source.startsWith('__esModule', state.pos + 1)) break;
          state.pos += 11;
          ch = commentWhitespace();
          if (ch !== quot) break;
          state.pos += 1;
          ch = commentWhitespace();
          if (ch !== 41 /*)*/) break;
          state.pos += 1;
          ch = commentWhitespace();
          if (ch !== 114 /*r*/ || !state.source.startsWith('eturn', state.pos + 1)) break;
          state.pos += 6;
          ch = commentWhitespace();
          if (ch === 59 /*;*/) state.pos++;
          ch = commentWhitespace();

          if (ch === 105 /*i*/ && state.source.charCodeAt(state.pos + 1) === 102 /*f*/) {
            let inIf = true;
            state.pos += 2;
            ch = commentWhitespace();
            if (ch !== 40 /*(*/) break;
            state.pos++;
            const ifInnerPos = state.pos;
            if (tryParseObjectHasOwnProperty[it_id]) {
              ch = commentWhitespace();
              if (ch !== 41 /*)*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (ch !== 114 /*r*/ || !state.source.startsWith('eturn', state.pos + 1)) break;
              state.pos += 6;
              ch = commentWhitespace();
              if (ch === 59 /*;*/) state.pos++;
              ch = commentWhitespace();
              if (ch === 105 /*i*/ && state.source.charCodeAt(state.pos + 1) === 102 /*f*/) {
                state.pos += 2;
                ch = commentWhitespace();
                if (ch !== 40 /*(*/) break;
                state.pos++;
              } else {
                inIf = false;
              }
            } else {
              state.pos = ifInnerPos;
            }

            if (inIf) {
              if (!state.source.startsWith(it_id, state.pos)) break;
              state.pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 105 /*i*/ || !state.source.startsWith('n ', state.pos + 1)) break;
              state.pos += 3;
              ch = commentWhitespace();
              if (!readExportsOrModuleDotExports(ch)) break;
              ch = commentWhitespace();
              if (ch !== 38 /*&*/ || state.source.charCodeAt(state.pos + 1) !== 38 /*&*/) break;
              state.pos += 2;
              ch = commentWhitespace();
              if (!readExportsOrModuleDotExports(ch)) break;
              ch = commentWhitespace();
              if (ch !== 91 /*[*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (!state.source.startsWith(it_id, state.pos)) break;
              state.pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 93 /*]*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (ch !== 61 /*=*/ || !state.source.startsWith('==', state.pos + 1)) break;
              state.pos += 3;
              ch = commentWhitespace();
              if (!state.source.startsWith(id, state.pos)) break;
              state.pos += id.length;
              ch = commentWhitespace();
              if (ch !== 91 /*[*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (!state.source.startsWith(it_id, state.pos)) break;
              state.pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 93 /*]*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (ch !== 41 /*)*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (ch !== 114 /*r*/ || !state.source.startsWith('eturn', state.pos + 1)) break;
              state.pos += 6;
              ch = commentWhitespace();
              if (ch === 59 /*;*/) state.pos++;
              ch = commentWhitespace();
            }
          }
        } else if (ch === 33 /*!*/) {
          if (!state.source.startsWith('==', state.pos + 1)) break;
          state.pos += 3;
          ch = commentWhitespace();
          if (ch !== 34 /*"*/ && ch !== 39 /*'*/) break;
          const quot = ch;
          if (!state.source.startsWith('default', state.pos + 1)) break;
          state.pos += 8;
          ch = commentWhitespace();
          if (ch !== quot) break;
          state.pos += 1;
          ch = commentWhitespace();
          if (ch === 38 /*&*/) {
            if (state.source.charCodeAt(state.pos + 1) !== 38 /*&*/) break;
            state.pos += 2;
            ch = commentWhitespace();
            if (ch !== 33 /*!*/) break;
            state.pos += 1;
            ch = commentWhitespace();
            if (ch === 79 /*O*/ && state.source.startsWith('bject', state.pos + 1) && state.source[state.pos + 6] === '.') {
              if (!tryParseObjectHasOwnProperty[it_id]) break;
            } else if (identifier()) {
              ch = commentWhitespace();
              if (ch !== 46 /*.*/) break;
              state.pos++;
              ch = commentWhitespace();
              if (ch !== 104 /*h*/ || !state.source.startsWith('asOwnProperty', state.pos + 1)) break;
              state.pos += 14;
              ch = commentWhitespace();
              if (ch !== 40 /*(*/) break;
              state.pos += 1;
              ch = commentWhitespace();
              if (!state.source.startsWith(it_id, state.pos)) break;
              state.pos += it_id.length;
              ch = commentWhitespace();
              if (ch !== 41 /*)*/) break;
              state.pos += 1;
            } else break;
            ch = commentWhitespace();
          }
          if (ch !== 41 /*)*/) break;
          state.pos += 1;
          ch = commentWhitespace();
        } else break;

        if (readExportsOrModuleDotExports(ch)) {
          ch = commentWhitespace();
          if (ch !== 91 /*[*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (state.source.slice(state.pos, state.pos + it_id.length) !== it_id) break;
          state.pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 93 /*]*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 61 /*=*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (state.source.slice(state.pos, state.pos + id.length) !== id) break;
          state.pos += id.length;
          ch = commentWhitespace();
          if (ch !== 91 /*[*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (state.source.slice(state.pos, state.pos + it_id.length) !== it_id) break;
          state.pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 93 /*]*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch === 59 /*;*/) {
            state.pos++;
            ch = commentWhitespace();
          }
        } else if (ch === 79 /*O*/) {
          if (state.source.slice(state.pos + 1, state.pos + 6) !== 'bject') break;
          state.pos += 6;
          ch = commentWhitespace();
          if (ch !== 46 /*.*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 100 /*d*/ || !state.source.startsWith('efineProperty', state.pos + 1)) break;
          state.pos += 14;
          ch = commentWhitespace();
          if (ch !== 40 /*(*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (!readExportsOrModuleDotExports(ch)) break;
          ch = commentWhitespace();
          if (ch !== 44 /*,*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (!state.source.startsWith(it_id, state.pos)) break;
          state.pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 44 /*,*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 123 /*{*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 101 /*e*/ || !state.source.startsWith('numerable', state.pos + 1)) break;
          state.pos += 10;
          ch = commentWhitespace();
          if (ch !== 58 /*:*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 116 /*t*/ && !state.source.startsWith('rue', state.pos + 1)) break;
          state.pos += 4;
          ch = commentWhitespace();
          if (ch !== 44 /*,*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 103 /*g*/ || !state.source.startsWith('et', state.pos + 1)) break;
          state.pos += 3;
          ch = commentWhitespace();
          if (ch === 58 /*:*/) {
            state.pos++;
            ch = commentWhitespace();
            if (ch !== 102 /*f*/) break;
            if (!state.source.startsWith('unction', state.pos + 1)) break;
            state.pos += 8;
            let lastPos = state.pos;
            ch = commentWhitespace();
            if (ch !== 40 && (lastPos === state.pos || !identifier())) break;
            ch = commentWhitespace();
          }
          if (ch !== 40 /*(*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 41 /*)*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 123 /*{*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 114 /*r*/ || !state.source.startsWith('eturn', state.pos + 1)) break;
          state.pos += 6;
          ch = commentWhitespace();
          if (!state.source.startsWith(id, state.pos)) break;
          state.pos += id.length;
          ch = commentWhitespace();
          if (ch !== 91 /*[*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (!state.source.startsWith(it_id, state.pos)) break;
          state.pos += it_id.length;
          ch = commentWhitespace();
          if (ch !== 93 /*]*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch === 59 /*;*/) {
            state.pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125 /*}*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch === 44 /*,*/) {
            state.pos++;
            ch = commentWhitespace();
          }
          if (ch !== 125 /*}*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch !== 41 /*)*/) break;
          state.pos++;
          ch = commentWhitespace();
          if (ch === 59 /*;*/) {
            state.pos++;
            ch = commentWhitespace();
          }
        } else break;

        if (ch !== 125 /*}*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 41 /*)*/) break;

        const starExportSpecifier = state.starExportMap[id];
        if (starExportSpecifier) {
          state.reexports.add(decode(starExportSpecifier));
          state.pos = revertPos;
          return;
        }
        return;
      }
    }
  }
  state.pos = revertPos;
}

function readExportsOrModuleDotExports(ch) {
  const revertPos = state.pos;
  if (ch === 109 /*m*/ && state.source.startsWith('odule', state.pos + 1)) {
    state.pos += 6;
    ch = commentWhitespace();
    if (ch !== 46 /*.*/) {
      state.pos = revertPos;
      return false;
    }
    state.pos++;
    ch = commentWhitespace();
  }
  if (ch === 101 /*e*/ && state.source.startsWith('xports', state.pos + 1)) {
    state.pos += 7;
    return true;
  } else {
    state.pos = revertPos;
    return false;
  }
}

function tryParseModuleExportsDotAssign() {
  state.pos += 6;
  const revertPos = state.pos - 1;
  let ch = commentWhitespace();
  if (ch === 46 /*.*/) {
    state.pos++;
    ch = commentWhitespace();
    if (ch === 101 /*e*/ && state.source.startsWith('xports', state.pos + 1)) {
      tryParseExportsDotAssign(true);
      return;
    }
  }
  state.pos = revertPos;
}

function tryParseExportsDotAssign(assign) {
  state.pos += 7;
  const revertPos = state.pos - 1;
  let ch = commentWhitespace();
  switch (ch) {
    case 46 /*.*/: {
      state.pos++;
      ch = commentWhitespace();
      const startPos = state.pos;
      if (identifier()) {
        const endPos = state.pos;
        ch = commentWhitespace();
        if (ch === 61/*=*/) {
          state._exports.add(decode(state.source.slice(startPos, endPos)));
          return;
        }
      }
      break;
    }
    case 91 /*[*/: {
      state.pos++;
      ch = commentWhitespace();
      if (ch === 39 /*'*/ || ch === 34 /*"*/) {
        const startPos = state.pos;
        stringLiteral(ch);
        const endPos = ++state.pos;
        ch = commentWhitespace();
        if (ch !== 93/*]*/) break;
        state.pos++;
        ch = commentWhitespace();
        if (ch !== 61/*=*/) break;
        state._exports.add(decode(state.source.slice(startPos, endPos)));
      }
      break;
    }
    case 61 /*=*/: {
      if (assign) {
        if (state.reexports.size) state.reexports.clear();
        state.pos++;
        ch = commentWhitespace();
        if (ch === 123/*{*/) {
          tryParseLiteralExports();
          return;
        }
        if (ch === 114/*r*/) tryParseRequire(RequireType.ExportAssign);
      }
    }
  }
  state.pos = revertPos;
}

function tryParseRequire(requireType) {
  const revertPos = state.pos;
  if (state.source.startsWith('equire', state.pos + 1)) {
    state.pos += 7;
    let ch = commentWhitespace();
    if (ch === 40/*(*/) {
      state.pos++;
      ch = commentWhitespace();
      const reexportStart = state.pos;
      if (ch === 39/*'*/ || ch === 34/*"*/) {
        stringLiteral(ch);
        const reexportEnd = ++state.pos;
        ch = commentWhitespace();
        if (ch === 41/*)*/) {
          const decoded = decode(state.source.slice(reexportStart, reexportEnd));
          switch (requireType) {
            case RequireType.ExportAssign:
            case RequireType.ExportStar:
              state.reexports.add(decoded);
              return true;
            default:
              state.lastStarExportSpecifier = decoded;
              return true;
          }
        }
      }
    }
    state.pos = revertPos;
  }
  return false;
}

function tryParseLiteralExports() {
  const revertPos = state.pos - 1;
  while (state.pos++ < state.end) {
    let ch = commentWhitespace();
    const startPos = state.pos;
    if (identifier()) {
      const endPos = state.pos;
      ch = commentWhitespace();
      if (ch === 58/*:*/) {
        state.pos++;
        ch = commentWhitespace();
        if (!identifier()) {
          state.pos = revertPos;
          return;
        }
        ch = state.source.charCodeAt(state.pos);
      }
      state._exports.add(decode(state.source.slice(startPos, endPos)));
    } else if (ch === 46/*.*/ && state.source.startsWith('..', state.pos + 1)) {
      state.pos += 3;
      if (state.source.charCodeAt(state.pos) === 114/*r*/ && tryParseRequire(RequireType.ExportAssign)) {
        state.pos++;
      } else if (!identifier()) {
        state.pos = revertPos;
        return;
      }
      ch = commentWhitespace();
    } else if (ch === 39/*'*/ || ch === 34/*"*/) {
      const startPos = state.pos;
      stringLiteral(ch);
      const endPos = ++state.pos;
      ch = commentWhitespace();
      if (ch === 58/*:*/) {
        state.pos++;
        ch = commentWhitespace();
        if (!identifier()) {
          state.pos = revertPos;
          return;
        }
        ch = state.source.charCodeAt(state.pos);
        state._exports.add(decode(state.source.slice(startPos, endPos)));
      }
    } else {
      state.pos = revertPos;
      return;
    }

    if (ch === 125/*}*/) return;

    if (ch !== 44/*,*/) {
      state.pos = revertPos;
      return;
    }
  }
}

// Helper functions for decode, codePointLen, codePointAtLast, identifier, and so on are omitted for brevity, but should be similarly refactored as necessary.

function decode (str) {
  if (str[0] === '"' || str[0] === '\'') {
    try {
      const decoded = (0, eval)(str);
      for (let i = 0; i < decoded.length; i++) {
        const surrogatePrefix = decoded.charCodeAt(i) & 0xFC00;
        if (surrogatePrefix < 0xD800) {
          continue;
        } else if (surrogatePrefix === 0xD800) {
          if ((decoded.charCodeAt(++i) & 0xFC00) !== 0xDC00)
            return;
        } else {
          return;
        }
      }
      return decoded;
    } catch {}
  } else {
    return str;
  }
}

// Omitted lengthy identifier validation regex and isIdentifierChar implementations for brevity and focus on main features.

function throwIfImportStatement() {
  const startPos = state.pos;
  state.pos += 6;
  const ch = commentWhitespace();
  switch (ch) {
    case 40 /*(*/:
      state.openTokenPosStack[state.openTokenDepth++] = startPos;
      return;
    case 46 /*.*/:
      throw esmSyntaxErr('Unexpected import.meta in CJS module.');
    default:
      if (state.pos === startPos + 6) break;
    case 34 /*"*/:
    case 39 /*'*/:
    case 123 /*{*/:
    case 42 /***/:
      if (state.openTokenDepth !== 0) {
        state.pos--;
        return;
      }
      throw esmSyntaxErr('Unexpected import statement in CJS module.');
  }
}

function throwIfExportStatement() {
  state.pos += 6;
  const curPos = state.pos;
  const ch = commentWhitespace();
  if (state.pos === curPos && !isPunctuator(ch)) return;
  throw esmSyntaxErr('Unexpected export statement in CJS module.');
}

function esmSyntaxErr(msg) {
  return Object.assign(new Error(msg), { code: 'ERR_LEXER_ESM_SYNTAX' });
}

const initPromise = Promise.resolve();

module.exports.init = () => initPromise;
module.exports.initSync = () => {};
module.exports.parse = parseCJS;
```