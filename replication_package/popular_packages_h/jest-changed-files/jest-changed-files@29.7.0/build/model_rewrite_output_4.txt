The provided Node.js code is a module that helps in finding and processing information about repositories (git, hg, and sl) and their changed files. Here's a breakdown of the code's functionality:

1. **Dependencies**: The code imports several dependencies:
   - `p-limit` to limit the number of concurrently running asynchronous operations.
   - Functions from `jest-util` for utility purposes.
   - Local modules for handling git, hg, and sl repositories.

2. **Concurrency Control**: It sets up a concurrency limiter (`pLimit`) to ensure that no more than five concurrent operations are executed. This is useful in projects with many repository roots.

3. **Functions**:
   - `findGitRoot`, `findHgRoot`, `findSlRoot`: These functions use the concurrency limiter to safely get the root of the corresponding directory (git, hg, or sl).
   - `getChangedFilesForRoots`: This is an asynchronous function that:
     - Finds all the repositories for a given set of roots.
     - For each repository type (git, hg, sl), retrieves the changed files based on provided options.
     - Combines the results into a single set of changed files and returns it along with the repository mappings.
   - `findRepos`: Another asynchronous function that determines which roots contain repositories of each type. It uses the above `findGitRoot`, `findHgRoot`, and `findSlRoot` functions and filters out null or undefined results, returning them as sets of repositories.

This code is structured to handle multiple repository types (git, hg, sl) within a project, efficiently manage concurrency, and retrieve changed files for the specified roots.

Here is the rewritten version of the code:

```javascript
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.getChangedFilesForRoots = exports.findRepos = void 0;

const pLimit = require('p-limit');
const { isNonNullable } = require('jest-util');
const git = require('./git');
const hg = require('./hg');
const sl = require('./sl');

const concurrencyLimit = pLimit(5);

const findRoot = (vcsModule, dir) => concurrencyLimit(() => vcsModule.getRoot(dir));

const findGitRoot = dir => findRoot(git, dir);
const findHgRoot = dir => findRoot(hg, dir);
const findSlRoot = dir => findRoot(sl, dir);

const getChangedFilesForRoots = async (roots, options) => {
  const repos = await findRepos(roots);
  const changedFilesOptions = { includePaths: roots, ...options };

  const findChangedFiles = (vcsModule, repoSet) => 
    Array.from(repoSet, repo => vcsModule.findChangedFiles(repo, changedFilesOptions));

  const gitPromises = findChangedFiles(git, repos.git);
  const hgPromises = findChangedFiles(hg, repos.hg);
  const slPromises = findChangedFiles(sl, repos.sl);

  const changedFiles = (
    await Promise.all([...gitPromises, ...hgPromises, ...slPromises])
  ).reduce((allFiles, repoChangedFiles) => {
    repoChangedFiles.forEach(file => allFiles.add(file));
    return allFiles;
  }, new Set());

  return { changedFiles, repos };
};

const findRepos = async (roots) => {
  const [gitRoots, hgRoots, slRoots] = await Promise.all([
    Promise.all(roots.map(findGitRoot)),
    Promise.all(roots.map(findHgRoot)),
    Promise.all(roots.map(findSlRoot))
  ]);

  const filterNonNullable = (rootsArray) => new Set(rootsArray.filter(isNonNullable));

  return {
    git: filterNonNullable(gitRoots),
    hg: filterNonNullable(hgRoots),
    sl: filterNonNullable(slRoots)
  };
};

exports.getChangedFilesForRoots = getChangedFilesForRoots;
exports.findRepos = findRepos;
```