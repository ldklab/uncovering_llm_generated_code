The provided Node.js code is setting up a module that exports several functionalities. These functionalities are being imported from external packages `@jest/core` and `jest-cli`. The code is utilizing lazy-loading techniques through the use of locally defined functions `(_core)` and `(_jestCli)` which return the required modules when called.

### Explanation:
1. **Exported Properties**: 
   - The module exports six properties: `SearchSource`, `TestScheduler`, `TestWatcher`, `getVersion`, `runCLI`, and `run`.
   - Each property is made enumerable (`enumerable: true`) to ensure they can be iterated over.

2. **Lazy-loading**:
   - The properties `SearchSource`, `TestScheduler`, `TestWatcher`, `getVersion`, and `runCLI` are fetched from the `@jest/core` package. The function `_core()` is a closure responsible for requiring and returning the `@jest/core` module.
   - The property `run` is fetched from the `jest-cli` package. The function `_jestCli()` is a closure similar to `_core()`, but it handles the requiring of the `jest-cli` module.
   - Lazy-loading is achieved by only requiring the module when its properties are accessed, optimizing memory usage and possibly improving load times.

Here's a possible rewrite of the provided Node.js code:

```javascript
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function setupProperty(exports, name, getter) {
  Object.defineProperty(exports, name, {
    enumerable: true,
    get: getter
  });
}

const _core = (() => {
  let data;
  return () => data || (data = require('@jest/core'));
})();

const _jestCli = (() => {
  let data;
  return () => data || (data = require('jest-cli'));
})();

setupProperty(exports, 'SearchSource', function() { return _core().SearchSource; });
setupProperty(exports, 'TestScheduler', function() { return _core().TestScheduler; });
setupProperty(exports, 'TestWatcher', function() { return _core().TestWatcher; });
setupProperty(exports, 'getVersion', function() { return _core().getVersion; });
setupProperty(exports, 'runCLI', function() { return _core().runCLI; });
setupProperty(exports, 'run', function() { return _jestCli().run; });
```

This rewritten version organizes the repetitive property definition tasks into a helper function `setupProperty`. It uses IIFE (Immediately Invoked Function Expression) to define `_core` and `_jestCli` functions for lazy-loading the respective modules just once.