The provided Node.js code exports several components from the `@jest/core` and `jest-cli` modules. Each component is defined as an enumerable property on the `exports` object, ensuring that these properties can be iterated over if desired. 

The `Object.defineProperty` function is used to define each export:

- `SearchSource`, `TestScheduler`, `TestWatcher`, `getVersion`, and `runCLI` are retrieved from the `@jest/core` module.
- `run` is retrieved from the `jest-cli` module.

Whenever any of the exported properties are accessed, the corresponding module is loaded on-demand using the lazy-loading pattern. The `_core()` function and `_jestCli()` function ensure that the required modules are only loaded when necessary, optimizing resource usage.

Here's a rewritten version of the code:

```javascript
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
Object.defineProperty(exports, 'SearchSource', {
  enumerable: true,
  get: () => require('@jest/core').SearchSource
});
Object.defineProperty(exports, 'TestScheduler', {
  enumerable: true,
  get: () => require('@jest/core').TestScheduler
});
Object.defineProperty(exports, 'TestWatcher', {
  enumerable: true,
  get: () => require('@jest/core').TestWatcher
});
Object.defineProperty(exports, 'getVersion', {
  enumerable: true,
  get: () => require('@jest/core').getVersion
});
Object.defineProperty(exports, 'runCLI', {
  enumerable: true,
  get: () => require('@jest/core').runCLI
});
Object.defineProperty(exports, 'run', {
  enumerable: true,
  get: () => require('jest-cli').run
});
```
