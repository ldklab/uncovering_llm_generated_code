The provided Node.js script is a main function for running lint-staged, a tool used to run linting and other scripts on Git staged files before they are committed. The script orchestrates loading configuration, running tasks, and managing potential errors in the process.

### Functionality Explained:

1. **Dependencies:** It uses various modules:
   - **cosmiconfig** to load configuration from different possible files.
   - **debug** for logging debug messages.
   - **stringify-object** to pretty-print objects for debugging output.
   - **Custom modules** are imported to handle various errors, messages, task execution, and configuration validations.

2. **Configuration Loading:**
   - The function `resolveConfig` attempts to resolve a file path for the configuration, falling back to the given path if it can't resolve.
   - `loadConfig` uses cosmiconfig to load a configuration either from a specified path or by searching known locations.

3. **Main Function (`lintStaged`):**
   - Accepts an options object and a logger interface.
   - Loads configuration using cosmiconfig.
   - Validates the loaded configuration.
   - Unsets `GIT_LITERAL_PATHSPECS` to avoid path interpretation issues.
   - Executes tasks defined in the configuration:
     - Handles success by printing task outputs.
     - Handles errors by logging predefined error messages and optionally restoring a stash.
   - Outputs detailed error messages if the configuration file is not found or there's a parsing issue.

4. **Error Handling:**
   - It logs different messages based on the type of error encountered using a try-catch block.
   - It provides user guidance in case of configuration errors with a link to official documentation.

Here is a rewritten version of the original Node.js code:

```javascript
'use strict'

const dedent = require('dedent');
const { cosmiconfig } = require('cosmiconfig');
const debugLog = require('debug')('lint-staged');
const stringifyObject = require('stringify-object');
const { PREVENTED_EMPTY_COMMIT, GIT_ERROR, RESTORE_STASH_EXAMPLE } = require('./messages');
const printTaskOutput = require('./printTaskOutput');
const runAll = require('./runAll');
const { ApplyEmptyCommitError, GetBackupStashError, GitError } = require('./symbols');
const formatConfig = require('./formatConfig');
const validateConfig = require('./validateConfig');

const errConfigNotFound = new Error('Config could not be found');

function resolveConfig(configPath) {
  try {
    return require.resolve(configPath);
  } catch {
    return configPath;
  }
}

function loadConfig(configPath) {
  const explorer = cosmiconfig('lint-staged', {
    searchPlaces: [
      'package.json',
      '.lintstagedrc',
      '.lintstagedrc.json',
      '.lintstagedrc.yaml',
      '.lintstagedrc.yml',
      '.lintstagedrc.js',
      '.lintstagedrc.cjs',
      'lint-staged.config.js',
      'lint-staged.config.cjs',
    ],
  });

  return configPath ? explorer.load(resolveConfig(configPath)) : explorer.search();
}

/**
 * @typedef {(...any) => void} LogFunction
 * @typedef {{ error: LogFunction, log: LogFunction, warn: LogFunction }} Logger
 *
 * Root lint-staged function that is called from `bin/lint-staged`.
 *
 * @param {object} options
 * @param {Object} [options.allowEmpty] - Allow empty commits when tasks revert all staged changes
 * @param {boolean | number} [options.concurrent] - The number of tasks to run concurrently, or false to run tasks serially
 * @param {object}  [options.config] - Object with configuration for programmatic API
 * @param {string} [options.configPath] - Path to configuration file
 * @param {Object} [options.cwd] - Current working directory
 * @param {boolean} [options.debug] - Enable debug mode
 * @param {number} [options.maxArgLength] - Maximum argument string length
 * @param {boolean} [options.quiet] - Disable lint-stagedâ€™s own console output
 * @param {boolean} [options.relative] - Pass relative filepaths to tasks
 * @param {boolean} [options.shell] - Skip parsing of tasks for better shell support
 * @param {boolean} [options.stash] - Enable the backup stash, and revert in case of errors
 * @param {boolean} [options.verbose] - Show task output even when tasks succeed; by default only failed output is shown
 * @param {Logger} [logger]
 *
 * @returns {Promise<boolean>} Promise of whether the linting passed or failed
 */
module.exports = async function lintStaged(
  {
    allowEmpty = false,
    concurrent = true,
    config: configObject,
    configPath,
    cwd = process.cwd(),
    debug = false,
    maxArgLength,
    quiet = false,
    relative = false,
    shell = false,
    stash = true,
    verbose = false,
  } = {},
  logger = console
) {
  try {
    debugLog('Loading config using `cosmiconfig`');
    const resolved = configObject
      ? { config: configObject, filepath: '(input)' }
      : await loadConfig(configPath);

    if (resolved == null) throw errConfigNotFound;
    debugLog('Successfully loaded config from `%s`:\n%O', resolved.filepath, resolved.config);

    const formattedConfig = formatConfig(resolved.config);
    const config = validateConfig(formattedConfig);

    if (debug) {
      logger.log('Running lint-staged with the following config:');
      logger.log(stringifyObject(config, { indent: '  ' }));
    } else {
      debugLog('lint-staged config:\n%O', config);
    }

    debugLog('Unset GIT_LITERAL_PATHSPECS (was `%s`)', process.env.GIT_LITERAL_PATHSPECS);
    delete process.env.GIT_LITERAL_PATHSPECS;

    try {
      const ctx = await runAll(
        {
          allowEmpty,
          concurrent,
          config,
          cwd,
          debug,
          maxArgLength,
          quiet,
          relative,
          shell,
          stash,
          verbose,
        },
        logger
      );
      debugLog('Tasks were executed successfully!');
      printTaskOutput(ctx, logger);
      return true;
    } catch (runAllError) {
      if (runAllError && runAllError.ctx && runAllError.ctx.errors) {
        const { ctx } = runAllError;
        if (ctx.errors.has(ApplyEmptyCommitError)) {
          logger.warn(PREVENTED_EMPTY_COMMIT);
        } else if (ctx.errors.has(GitError) && !ctx.errors.has(GetBackupStashError)) {
          logger.error(GIT_ERROR);
          if (ctx.shouldBackup) {
            logger.error(RESTORE_STASH_EXAMPLE);
          }
        }

        printTaskOutput(ctx, logger);
        return false;
      }
      throw runAllError;
    }
  } catch (lintStagedError) {
    if (lintStagedError === errConfigNotFound) {
      logger.error(`${lintStagedError.message}.`);
    } else {
      logger.error(dedent`
        Could not parse lint-staged config.

        ${lintStagedError}
      `);
    }
    logger.error();
    logger.error(dedent`
      Please make sure you have created it correctly.
      See https://github.com/okonet/lint-staged#configuration.
    `);

    throw lintStagedError;
  }
}
```