The provided Node.js code is a complex implementation of a Markdown parser with rich features. The high-level functionality of this code can be explained as follows:

1. **Module Imports:**
   - The code uses various libraries such as `mdurl`, `ucmicro`, `entities`, `linkify-it`, and `punycode.js` for URL parsing, Unicode character handling, HTML entities decoding, automatic URL linking, and Punycode conversions for internationalized domain names, respectively.

2. **Utility Functions:**
   - Contains several utility functions to handle strings, manage object properties, merge objects, validate and process entities, escape HTML, and determine types of characters (e.g., whitespace, punctuation).

3. **Parsing Functions:**
   - Provides parsing functionality for Markdown structures such as link labels, link destinations, and titles. It defines parsing rules and logic to handle links, inline code, emphasis, and other Markdown features.

4. **Renderer Class:**
   - Defines a `Renderer` class that is responsible for converting tokens into HTML. It includes rules for rendering code blocks, images, headings, etc.

5. **Token and State Classes:**
   - Defines classes like `Token`, `StateCore`, `StateBlock`, and `StateInline` to represent tokens and manage parsing states during the transformation process.

6. **Core Parsing Logic:**
   - Contains core parsing logic for block-level and inline-level elements in Markdown. This involves identifying and processing various Markdown syntaxes and converting them into meaningful tokens.

7. **Markdown-It Class:**
   - The `MarkdownIt` class serves as the main class for the Markdown parser, allowing configuration through presets and options to enable/disable features. It provides methods for parsing and rendering Markdown to HTML and offers hooks for plugins for extendable functionality.

Here's a streamlined rewrite of the core components and functionalities explained above, focusing on the main objectives of Markdown parsing and rendering:

```javascript
'use strict';

const mdurl = require('mdurl');
const ucmicro = require('uc.micro');
const entities = require('entities');
const LinkifyIt = require('linkify-it');
const punycode = require('punycode.js');

function MarkdownItConfig(presetName, options) {
    if (!(this instanceof MarkdownItConfig)) {
        return new MarkdownItConfig(presetName, options);
    }
    
    if (!options) {
        if (typeof presetName !== 'string') {
            options = presetName || {};
            presetName = 'default';
        }
    }

    // Initialize parser components
    this.inline = new ParserInline();
    this.block = new ParserBlock();
    this.core = new Core();
    this.renderer = new Renderer();
    this.linkify = new LinkifyIt();

    // Link validation and normalization functions
    this.validateLink = validateLink;
    this.normalizeLink = normalizeLink;
    this.normalizeLinkText = normalizeLinkText;

    // Utilities and helpers exposure
    this.utils = utils;
    this.helpers = assign({}, helpers);
    
    // Apply preset configuration
    this.options = {};
    this.configure(presetName);
    if (options) {
        this.set(options);
    }
}

// ... Additional utility and helper functions to support core features

MarkdownItConfig.prototype.set = function (options) {
    assign(this.options, options);
    return this;
};

MarkdownItConfig.prototype.configure = function (presets) {
    // Configure according to specified presets
    // ... Implementation specific details
};

MarkdownItConfig.prototype.enable = function (list, ignoreInvalid) {
    // Enable specific parsing rules
    // ... Implementation specific details
};

MarkdownItConfig.prototype.disable = function (list, ignoreInvalid) {
    // Disable specific parsing rules
    // ... Implementation specific details
};

MarkdownItConfig.prototype.use = function (plugin, ...params) {
    // Apply plugins for extension
    plugin(this, ...params);
    return this;
};

MarkdownItConfig.prototype.parse = function (src, env) {
    if (typeof src !== 'string') {
        throw new Error('Input data should be a String');
    }

    const state = new this.core.State(src, this, env || {});
    this.core.process(state);
    return state.tokens;
};

MarkdownItConfig.prototype.render = function (src, env) {
    const tokens = this.parse(src, env || {});
    return this.renderer.render(tokens, this.options, env);
};

MarkdownItConfig.prototype.parseInline = function (src, env) {
    const state = new this.core.State(src, this, env || {});
    state.inlineMode = true;
    this.core.process(state);
    return state.tokens;
};

MarkdownItConfig.prototype.renderInline = function (src, env) {
    const tokens = this.parseInline(src, env || {});
    return this.renderer.render(tokens, this.options, env);
};

module.exports = MarkdownItConfig;
``` 

This rewrite consolidates the code's primary workload to process markdown into a more modular structure, organizing the parser setup and execution strategy succinctly.