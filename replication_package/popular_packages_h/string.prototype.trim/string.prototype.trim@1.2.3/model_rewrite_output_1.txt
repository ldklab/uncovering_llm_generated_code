The functionality of the provided Node.js code is as follows:

1. **Strict Mode:** The code is being run in strict mode for more secure JavaScript.

2. **Imports:**
   - `call-bind`: A module that is used to bind functions to specific contexts.
   - `define-properties`: A module that aids in defining properties on an object.
   - `implementation`, `getPolyfill`, and `shim`: These modules are imported from local paths and are likely related to polyfilling and shimming a specific functionality.

3. **Polyfill and Shimming Setup:**
   - `getPolyfill()`: This function is called to retrieve the appropriate polyfill for the feature.
   - `callBind(getPolyfill())`: The result of `getPolyfill()` is bound using `call-bind`, creating `boundTrim`, likely a method for trimming strings.

4. **Property Definitions:**
   - `define(boundTrim, {...})`: `define-properties` is used to add properties to `boundTrim`, exposing `getPolyfill`, `implementation`, and `shim`. This suggests that these properties are related to extending a feature (likely string trimming).

5. **Export:** The `boundTrim` function, with its attached properties, is exported as a module, making it available for use elsewhere.

Here is a possible rewrite of the Node.js code according to this explanation:

```javascript
'use strict';

const callBind = require('call-bind');
const defineProperties = require('define-properties');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

// Get the appropriate polyfill and bind it.
const boundTrim = callBind(getPolyfill());

// Define additional properties related to string trimming polyfill on boundTrim.
defineProperties(boundTrim, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

// Export the bound and augmented trim function as a module.
module.exports = boundTrim;
```