The Node.js code is a module that exports a function named `isAsyncFunction`. This function is used to determine whether a given function `fn` is an asynchronous function by inspecting its argument names. The function works by checking if any of the argument names of `fn` match a predefined list of common callback names or optionally, a user-supplied list of names. If a match is found, the function is considered to be asynchronous.

- **Parameters:**
  - `fn`: The function to be checked.
  - `names`: An optional array of argument names that can be recognized as indicating an asynchronous function. If not provided, the function uses common callback names.
  - `strict`: An optional boolean indicating the mode of return value. Defaults to `true`. If `true`, the function returns a boolean indicating whether `fn` is asynchronous. If `false`, it returns the index (position) of the matched callback name, which can be useful to determine the position where the callback is expected.

- **Return Value:**
  - In strict mode (`strict = true`), it returns a boolean (`true` for asynchronous and `false` otherwise).
  - If `strict = false`, it returns the index of the recognized callback argument or `false` if not found.

Here is a rewritten version of the code:

```javascript
'use strict';

const arrayify = require('arrify');
const arrIncludes = require('arr-includes').default || require('arr-includes');
const callbackNames = require('common-callback-names');
const functionArguments = require('function-arguments');

function isAsyncFunction(fn, names, strict = true) {
  if (typeof fn !== 'function') {
    throw new TypeError('is-async-function expects a function');
  }

  if (typeof names === 'boolean') {
    strict = names;
    names = null;
  }

  names = arrayify(names);
  if (names.length === 0) {
    names = callbackNames;
  }

  const argumentNames = functionArguments(fn);
  const idx = arrIncludes(names, argumentNames);

  return strict ? Boolean(idx) : idx;
}

module.exports = isAsyncFunction;
```