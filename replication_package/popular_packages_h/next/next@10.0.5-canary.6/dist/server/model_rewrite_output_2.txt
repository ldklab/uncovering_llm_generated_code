The provided Node.js code snippet sets up a framework to create a server using the Next.js framework. Here's a breakdown of its functionality:

1. **Module Imports**: 
   - The script imports the `next-server` module and constants from the `constants` library.
   - It also imports logging functionalities from `../build/output/log`.

2. **Helper Functions**:
   - There are helper functions `_interopRequireWildcard` and `_interopRequireDefault` to handle module imports, ensuring compatibility with both CommonJS and ES module systems. They handle the import or require operation, checking if the module is already an ES module and returning the default export if necessary.

3. **`createServer` Function**:
   - The `createServer` function is designed to be the exported method that initializes a Next.js server.
   - It validates the options passed to it. If options are not provided, it throws an error.
   - It checks if the server is in a development command and whether the `NODE_ENV` is set to a non-standard environment, logging a warning if this is the case.
   - If the development mode (`dev`) is enabled, it performs a type check on the `dev` option and logs a warning if it's not a boolean.
   - Depending on whether it's in development or production, it returns an instance of a development server or a standard Next.js server.

4. **Module Exports**:
   - The function `createServer` is exported using both the CommonJS and ES module export methods, allowing it to be imported via `require('next')` or `import next from 'next'`.

Below is the rewritten code with the explanation encapsulated in comments:

```javascript
"use strict";

exports.__esModule = true;
exports.default = void 0;

// Import necessary modules
var _nextServer = _interopRequireDefault(require("../next-server/server/next-server"));
var _constants = require("../lib/constants");
var log = _interopRequireWildcard(require("../build/output/log"));

// Helper function for module imports in CommonJS and ES module systems
function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();
    _getRequireWildcardCache = function() { return cache; };
    return cache;
}

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
        return { default: obj };
    }
    var cache = _getRequireWildcardCache();
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
}

// Function to create a Next.js server instance
function createServer(options) {
    const standardEnv = ['production', 'development', 'test'];

    if (options == null) {
        throw new Error('The server has not been instantiated properly. https://err.sh/next.js/invalid-server-options');
    }

    if (!options.isNextDevCommand && process.env.NODE_ENV && !standardEnv.includes(process.env.NODE_ENV)) {
        log.warn(_constants.NON_STANDARD_NODE_ENV);
    }

    if (options.dev) {
        if (typeof options.dev !== 'boolean') {
            console.warn("Warning: 'dev' is not a boolean which could introduce unexpected behavior. https://err.sh/next.js/invalid-server-options");
        }
        const DevServer = require('./next-dev-server').default;
        return new DevServer(options);
    }

    return new _nextServer.default(options);
}

// Support CommonJS `require('next')`
module.exports = createServer;
exports = module.exports;

// Support `import next from 'next'`
var _default = createServer;
exports.default = _default;
```