```javascript
const path = require('path');
const fs = require('fs');
const { EventEmitter } = require('events');
const makeError = require('makeerror');

class Walker extends EventEmitter {
  constructor(root) {
    super();
    this._pending = 0;
    this._filterDir = () => true;
    this.go(root);
  }

  static UnknownFileTypeError = makeError(
    'UnknownFileTypeError',
    'The type of this file could not be determined.'
  );

  filterDir(fn) {
    this._filterDir = fn;
    return this;
  }

  go(entry) {
    this._pending++;
    fs.lstat(entry, (er, stat) => {
      if (er) {
        this.emit('error', er, entry, stat);
        this.doneOne();
        return;
      }

      const handleEntry = (type) => {
        this.emit('entry', entry, stat);
        this.emit(type, entry, stat);
        this.doneOne();
      };

      switch (true) {
        case stat.isDirectory():
          if (!this._filterDir(entry, stat)) {
            this.doneOne();
          } else {
            fs.readdir(entry, (er, files) => {
              if (er) {
                this.emit('error', er, entry, stat);
                this.doneOne();
                return;
              }

              this.emit('entry', entry, stat);
              this.emit('dir', entry, stat);
              files.forEach((part) => this.go(path.join(entry, part)));
              this.doneOne();
            });
          }
          break;
        case stat.isSymbolicLink():
          handleEntry('symlink');
          break;
        case stat.isBlockDevice():
          handleEntry('blockDevice');
          break;
        case stat.isCharacterDevice():
          handleEntry('characterDevice');
          break;
        case stat.isFIFO():
          handleEntry('fifo');
          break;
        case stat.isSocket():
          handleEntry('socket');
          break;
        case stat.isFile():
          handleEntry('file');
          break;
        default:
          this.emit('error', Walker.UnknownFileTypeError(), entry, stat);
          this.doneOne();
          break;
      }
    });

    return this;
  }

  doneOne() {
    if (--this._pending === 0) this.emit('end');
    return this;
  }
}

module.exports = Walker;
```