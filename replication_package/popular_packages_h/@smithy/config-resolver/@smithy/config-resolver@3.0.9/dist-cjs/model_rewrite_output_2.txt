The provided Node.js code primarily focuses on managing configuration related to AWS endpoints. It enables toggling between different types of endpoints (Dualstack and FIPS), resolving endpoint configurations, and handling region-related settings. Here's a high-level breakdown of its functionality:

1. **Utilities for Exporting and Property Management**: Functions like `__defProp`, `__getOwnPropNames`, and `__copyProps` are utility functions used for defining object properties, managing module exports, and copying properties between objects, respectively. These are common techniques used in module systems to handle exports and manage properties more effectively.

2. **Configuration Constants and Options**: The code defines constants for environment variables and configuration options related to AWS Dualstack and FIPS endpoints. This includes default values and selectors for environment variables and config files.

3. **Endpoint Resolution**: Functions like `resolveCustomEndpointsConfig`, `resolveEndpointsConfig`, and dependencies such as `getEndpointFromRegion` manage how endpoints are constructed and resolved based on the input configuration. These functions consider various conditions, such as whether custom endpoints are used, and adapt behavior accordingly.

4. **Region Management**: Region-related constants and functions handle the resolution and validation of AWS regions, including stripping FIPS prefixes/suffixes to determine the "real" region.

5. **Hostname and Partition Management**: Functions like `getHostnameFromVariants`, `getResolvedHostname`, `getResolvedPartition`, and `getResolvedSigningRegion` work together to resolve hostnames and determine AWS partitions and signing regions based on variations and regex patterns.

6. **Exports**: The module exports specific functions and constants that are relevant for configuring endpoints and regions, making them available for use in other parts of an application or service.

Below is a possible rewrite of this Node.js code with a similar organization and functionality:

```javascript
const { booleanSelector, SelectorType } = require("@smithy/util-config-provider");
const { normalizeProvider } = require("@smithy/util-middleware");

const __defProp = Object.defineProperty;
const __getOwnPropDesc = Object.getOwnPropertyDescriptor;
const __getOwnPropNames = Object.getOwnPropertyNames;
const __hasOwnProp = Object.prototype.hasOwnProperty;

const __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const __export = (target, all) => {
  for (let name in all) {
    __defProp(target, name, { get: all[name], enumerable: true });
  }
};
const __copyProps = (to, from, except) => {
  if ((from && typeof from === "object") || typeof from === "function") {
    for (let key of __getOwnPropNames(from)) {
      if (!__hasOwnProp.call(to, key) && key !== except) {
        __defProp(to, key, {
          get: () => from[key],
          enumerable: !(__getOwnPropDesc(from, key) || {}).enumerable
        });
      }
    }
  }
  return to;
};
const __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// Constants and Configuration Options
const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
  environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_DUALSTACK_ENDPOINT, SelectorType.ENV),
  configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_DUALSTACK_ENDPOINT, SelectorType.CONFIG),
  default: false
};

const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
  environmentVariableSelector: (env) => booleanSelector(env, ENV_USE_FIPS_ENDPOINT, SelectorType.ENV),
  configFileSelector: (profile) => booleanSelector(profile, CONFIG_USE_FIPS_ENDPOINT, SelectorType.CONFIG),
  default: false
};

// Endpoint Resolution Functions
const resolveCustomEndpointsConfig = __name((input) => {
  const { endpoint, urlParser } = input;
  return {
    ...input,
    tls: input.tls ?? true,
    endpoint: normalizeProvider(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
    isCustomEndpoint: true,
    useDualstackEndpoint: normalizeProvider(input.useDualstackEndpoint ?? false)
  };
}, "resolveCustomEndpointsConfig");

const getEndpointFromRegion = __name(async (input) => {
  const { tls = true } = input;
  const region = await input.region();
  const dnsHostRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/;
  if (!dnsHostRegex.test(region)) {
    throw new Error("Invalid region in client config");
  }
  const useDualstackEndpoint = await input.useDualstackEndpoint();
  const useFipsEndpoint = await input.useFipsEndpoint();
  const { hostname } = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint }) || {};
  if (!hostname) {
    throw new Error("Cannot resolve hostname from client config");
  }
  return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
}, "getEndpointFromRegion");

const resolveEndpointsConfig = __name((input) => {
  const useDualstackEndpoint = normalizeProvider(input.useDualstackEndpoint ?? false);
  const { endpoint, useFipsEndpoint, urlParser } = input;
  return {
    ...input,
    tls: input.tls ?? true,
    endpoint: endpoint ? normalizeProvider(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => getEndpointFromRegion({ ...input, useDualstackEndpoint, useFipsEndpoint }),
    isCustomEndpoint: !!endpoint,
    useDualstackEndpoint
  };
}, "resolveEndpointsConfig");

// Region Management Functions
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
  environmentVariableSelector: (env) => env[REGION_ENV_NAME],
  configFileSelector: (profile) => profile[REGION_INI_NAME],
  default: () => {
    throw new Error("Region is missing");
  }
};

const NODE_REGION_CONFIG_FILE_OPTIONS = {
  preferredFile: "credentials"
};

const isFipsRegion = __name((region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips")), "isFipsRegion");

const getRealRegion = __name((region) => isFipsRegion(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region, "getRealRegion");

const resolveRegionConfig = __name((input) => {
  const { region, useFipsEndpoint } = input;
  if (!region) {
    throw new Error("Region is missing");
  }
  return {
    ...input,
    region: async () => {
      if (typeof region === "string") {
        return getRealRegion(region);
      }
      const providedRegion = await region();
      return getRealRegion(providedRegion);
    },
    useFipsEndpoint: async () => {
      const providedRegion = typeof region === "string" ? region : await region();
      if (isFipsRegion(providedRegion)) {
        return true;
      }
      return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
    }
  };
}, "resolveRegionConfig");

// Hostname and Partition Management
const getHostnameFromVariants = __name((variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
  const variant = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"));
  return variant ? variant.hostname : undefined;
}, "getHostnameFromVariants");

const getResolvedHostname = __name((resolvedRegion, { regionHostname, partitionHostname }) => {
  if (regionHostname) return regionHostname;
  if (partitionHostname) return partitionHostname.replace("{region}", resolvedRegion);
  return undefined;
}, "getResolvedHostname");

const getResolvedPartition = __name((region, { partitionHash }) => {
  const partition = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region)) || "aws";
  return partition;
}, "getResolvedPartition");

const getResolvedSigningRegion = __name((hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
  if (signingRegion) return signingRegion;
  if (useFipsEndpoint && regionRegex) {
    const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
    const regionRegexMatchArray = hostname.match(regionRegexJs);
    if (regionRegexMatchArray) {
      return regionRegexMatchArray[0].slice(1, -1);
    }
  }
  return undefined;
}, "getResolvedSigningRegion");

const getRegionInfo = __name((region, {
  useFipsEndpoint = false,
  useDualstackEndpoint = false,
  signingService,
  regionHash,
  partitionHash
}) => {
  const partition = getResolvedPartition(region, { partitionHash });
  const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
  const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
  const regionHostname = getHostnameFromVariants(regionHash[resolvedRegion]?.variants, hostnameOptions);
  const partitionHostname = getHostnameFromVariants(partitionHash[partition]?.variants, hostnameOptions);
  const hostname = getResolvedHostname(resolvedRegion, { regionHostname, partitionHostname });

  if (!hostname) {
    throw new Error(`Endpoint resolution failed for: { resolvedRegion: ${resolvedRegion}, useFipsEndpoint: ${useFipsEndpoint}, useDualstackEndpoint: ${useDualstackEndpoint} }`);
  }

  const signingRegion = getResolvedSigningRegion(hostname, {
    signingRegion: regionHash[resolvedRegion]?.signingRegion,
    regionRegex: partitionHash[partition].regionRegex,
    useFipsEndpoint
  });

  return {
    partition,
    signingService: regionHash[resolvedRegion]?.signingService || signingService,
    hostname,
    ...(signingRegion && { signingRegion })
  };
}, "getRegionInfo");

// Exported Module
const src_exports = {};
__export(src_exports, {
  CONFIG_USE_DUALSTACK_ENDPOINT: () => CONFIG_USE_DUALSTACK_ENDPOINT,
  CONFIG_USE_FIPS_ENDPOINT: () => CONFIG_USE_FIPS_ENDPOINT,
  DEFAULT_USE_DUALSTACK_ENDPOINT: () => DEFAULT_USE_DUALSTACK_ENDPOINT,
  DEFAULT_USE_FIPS_ENDPOINT: () => DEFAULT_USE_FIPS_ENDPOINT,
  ENV_USE_DUALSTACK_ENDPOINT: () => ENV_USE_DUALSTACK_ENDPOINT,
  ENV_USE_FIPS_ENDPOINT: () => ENV_USE_FIPS_ENDPOINT,
  NODE_REGION_CONFIG_FILE_OPTIONS: () => NODE_REGION_CONFIG_FILE_OPTIONS,
  NODE_REGION_CONFIG_OPTIONS: () => NODE_REGION_CONFIG_OPTIONS,
  NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS,
  NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS: () => NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS,
  REGION_ENV_NAME: () => REGION_ENV_NAME,
  REGION_INI_NAME: () => REGION_INI_NAME,
  getRegionInfo: () => getRegionInfo,
  resolveCustomEndpointsConfig: () => resolveCustomEndpointsConfig,
  resolveEndpointsConfig: () => resolveEndpointsConfig,
  resolveRegionConfig: () => resolveRegionConfig
});

module.exports = __toCommonJS(src_exports);
```