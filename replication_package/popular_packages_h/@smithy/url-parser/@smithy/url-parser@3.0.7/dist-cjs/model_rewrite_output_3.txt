The given Node.js code defines a module with a single `parseUrl` function, designed to offer a unified interface for parsing URLs. Here's a breakdown of the code's functionality:

1. **Utility Functions**: Several utility functions (`__defProp`, `__getOwnPropDesc`, etc.) are defined to work with object properties, particularly to define properties and copy them from one object to another, likely for module exports.
   
2. **`__name` Function**: This is a helper to set the name of a function for easier debugging.

3. **`__export` Function**: This utility is used to export functions or properties from the module by setting up getters for each property on the target export object.

4. **`__copyProps` and `__toCommonJS` Functions**: These functions help manage module properties and exports, particularly for compatibility between CommonJS and ES Module systems.

5. **`src/index.ts`**: This is where the actual URL parsing logic resides. The `parseUrl` function takes a URL as input and returns an object with `hostname`, `port`, `protocol`, `path`, and `query`. If the input is a string, it first converts it into a `URL` object. It uses the `@smithy/querystring-parser` library to parse the query string into an object if the URL contains a search component.

6. **Module Export**: The `parseUrl` function is exported as part of the module.

Here is a rewritten version of the Node.js code:

```javascript
// Utility function to define a property
const defineProperty = (target, name, descriptor) => Object.defineProperty(target, name, descriptor);

// Utility function to export all properties of an object
const exportProperties = (target, properties) => {
  for (const name in properties) {
    defineProperty(target, name, { get: properties[name], enumerable: true });
  }
};

// Function to copy properties from one object to another, excluding specified keys
const copyProperties = (to, from, except) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (const key of Object.getOwnPropertyNames(from)) {
      if (!(key in to) && key !== except) {
        defineProperty(to, key, {
          get: () => from[key],
          enumerable: Object.getOwnPropertyDescriptor(from, key)?.enumerable,
        });
      }
    }
  }
  return to;
};

// Function to prepare a module for CommonJS export
const toCommonJS = (mod) => copyProperties(defineProperty({}, "__esModule", { value: true }), mod);

// parseUrl functionality module
const querystringParser = require("@smithy/querystring-parser");

function parseUrl(url) {
  if (typeof url === "string") {
    return parseUrl(new URL(url));
  }

  const { hostname, pathname, port, protocol, search } = url;
  const query = search ? querystringParser.parseQueryString(search) : undefined;
  
  return {
    hostname,
    port: port ? parseInt(port) : undefined,
    protocol,
    path: pathname,
    query,
  };
}

defineProperty(parseUrl, "name", { value: "parseUrl", configurable: true });

// Module exports
const srcExports = {};
exportProperties(srcExports, { parseUrl: () => parseUrl });
module.exports = toCommonJS(srcExports);
```
