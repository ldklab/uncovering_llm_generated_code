The given Node.js code is a module that exports a function called `parseUrl`. This function can take either a URL string or a URL object as input and returns an object containing parts of the URL: `hostname`, `port`, `protocol`, `path`, and `query`.

Here's a breakdown of the functionality:

- **Utility Functions**: Includes several utility functions for object and property manipulation, such as `__defProp`, `__getOwnPropDesc`, `__getOwnPropNames`, `__hasOwnProp`, `__name`, `__export`, `__copyProps`, and `__toCommonJS`. These handle defining properties, copying properties, and ensuring compatibility with CommonJS and ESM modules.

- **`parseUrl` function**: 
  - Takes a URL which can be a string or URL object.
  - If it's a string, it creates a new `URL` object.
  - Extracts and returns the URL components: `hostname`, `port`, `protocol`, `path`, and `query`.
  - The `query` is parsed using the `parseQueryString` function from the `@smithy/querystring-parser` package.

- **Exporting**: The function `parseUrl` is exported using the custom `__export` and `__toCommonJS` functions, making it compatible with both CommonJS and ESM.

Here's a rewritten version of the original Node.js code:

```javascript
const { parseQueryString } = require("@smithy/querystring-parser");

function parseUrl(url) {
  if (typeof url === "string") {
    return parseUrl(new URL(url));
  }
  const { hostname, pathname, port, protocol, search } = url;
  let query;
  if (search) {
    query = parseQueryString(search);
  }
  return {
    hostname,
    port: port ? parseInt(port) : undefined,
    protocol,
    path: pathname,
    query
  };
}

module.exports = {
  parseUrl
};
```

In this rewrite:
- I've eliminated the custom utility functions and streamlined the code.
- Directly used the `require` function for importing `parseQueryString`.
- Simplified the definition and export of `parseUrl` to make it straightforward and maintainable.