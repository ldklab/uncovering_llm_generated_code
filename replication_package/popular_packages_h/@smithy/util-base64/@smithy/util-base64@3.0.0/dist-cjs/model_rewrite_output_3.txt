The Node.js code defines utility functions to handle module exports and re-exports in a CommonJS environment. Here's a breakdown of its functionality:

1. **__defProp**: A shorthand for `Object.defineProperty`, which is used to define properties on objects.
2. **__getOwnPropDesc**: A shorthand for `Object.getOwnPropertyDescriptor`, used to get the property descriptor for a specific property on an object.
3. **__getOwnPropNames**: A shorthand for `Object.getOwnPropertyNames`, used to get an array of all properties (including non-enumerable and enumerable) found directly on an object.
4. **__hasOwnProp**: A reference to `Object.prototype.hasOwnProperty`, used to check if an object has a specific property as its own (not inherited).
5. **__copyProps**: A utility function to copy properties from a source object (`from`) to a target object (`to`). The function excludes the property with the name given in `except`. It adds properties unless they already exist in the target object or are named in the `except` param.
6. **__reExport**: This function builds on `__copyProps` to re-export all properties from a module to a target object. It can re-export to an additional target if provided.
7. **__toCommonJS**: Converts a module to a CommonJS module, adding an `__esModule` flag indicating ESM compatibility.
8. **Module Logic**: The main part of the script exports all properties from `fromBase64` and `toBase64` modules into `src_exports` and assigns this to `module.exports`. Additionally, it ensures any names are correctly annotated for ECMAScript Module import compatibility.

Below is a possible rewrite of the code, maintaining the same functionality:

```javascript
const defineProperty = Object.defineProperty;
const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
const getOwnPropertyNames = Object.getOwnPropertyNames;
const hasOwnProperty = Object.prototype.hasOwnProperty;

const copyProperties = (target, source, exclude, descriptor) => {
  if (source && (typeof source === 'object' || typeof source === 'function')) {
    for (const key of getOwnPropertyNames(source)) {
      if (!hasOwnProperty.call(target, key) && key !== exclude) {
        defineProperty(target, key, {
          get: () => source[key],
          enumerable: !(descriptor = getOwnPropertyDescriptor(source, key)) || descriptor.enumerable,
        });
      }
    }
  }
  return target;
};

const reExport = (target, mod, secondTarget) => {
  copyProperties(target, mod, "default");
  if (secondTarget) {
    copyProperties(secondTarget, mod, "default");
  }
};

const toCommonJS = (mod) => {
  return copyProperties(defineProperty({}, "__esModule", { value: true }), mod);
};

// src/index.ts
const srcExports = {};
module.exports = toCommonJS(srcExports);
reExport(srcExports, require('././fromBase64'), module.exports);
reExport(srcExports, require('././toBase64'), module.exports);

// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fromBase64,
  toBase64
});
```