The Node.js code above is a module system utility for handling CommonJS and re-exporting elements from different modules. Here's what each part of the code does:

1. **Property and Descriptor Handling:**
   - `__defProp`: A shorthand for `Object.defineProperty`.
   - `__getOwnPropDesc`: A shorthand for `Object.getOwnPropertyDescriptor`, which retrieves the descriptor for a property on an object.
   - `__getOwnPropNames`: A shorthand for `Object.getOwnPropertyNames`, which returns an array of all properties (including non-enumerable ones) found directly upon an object.
   - `__hasOwnProp`: A shorthand for `Object.prototype.hasOwnProperty`, checks if an object has a particular property.

2. **Property Copy Helper:**
   - `__copyProps`: This function copies properties from one object to another, excluding a specific property (usually "default"), while preserving enumerability and using getters.

3. **Re-export Helper:**
   - `__reExport`: This function re-exports all properties from a source module to a target and optionally to a secondary target, excluding the "default" export.

4. **Convert Module to CommonJS:**
   - `__toCommonJS`: Converts an ES module to a CommonJS module by setting `__esModule` to true and copying all properties.

5. **Module Export Logic:**
   - An empty object `src_exports` is created and is then converted into a CommonJS export structure using `__toCommonJS`.
   - The code re-exports elements from two modules (`fromBase64` and `toBase64`) into `src_exports` using `__reExport`.

6. **Annotation for ESM Imports:**
   - A conditional `0 && (module.exports = { fromBase64, toBase64 })` is a trick to annotate or hint the module exports if it were to be represented in ES Module syntax despite being a CommonJS module. This line doesn't execute due to the `0 &&`.

Here is the rewritten version of the code:

```javascript
const defineProperty = Object.defineProperty;
const getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
const getOwnPropertyNames = Object.getOwnPropertyNames;
const hasOwnProperty = Object.prototype.hasOwnProperty;

const copyProperties = (target, source, excludeKey, desc) => {
  if (source && (typeof source === "object" || typeof source === "function")) {
    for (const key of getOwnPropertyNames(source)) {
      if (!hasOwnProperty.call(target, key) && key !== excludeKey) {
        defineProperty(target, key, { 
          get: () => source[key], 
          enumerable: !(desc = getOwnPropertyDescriptor(source, key)) || desc.enumerable 
        });
      }
    }
  }
  return target;
};

const reExport = (target, module, altTarget) => {
  copyProperties(target, module, "default");
  if (altTarget) copyProperties(altTarget, module, "default");
};

const toCommonJS = (module) => copyProperties(defineProperty({}, "__esModule", { value: true }), module);

// src/index.ts
const srcExports = {};
module.exports = toCommonJS(srcExports);
reExport(srcExports, require("././fromBase64"), module.exports);
reExport(srcExports, require("././toBase64"), module.exports);

// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  fromBase64,
  toBase64
});
```