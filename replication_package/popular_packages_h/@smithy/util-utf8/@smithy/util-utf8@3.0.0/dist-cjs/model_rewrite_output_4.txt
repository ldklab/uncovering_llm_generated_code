The provided Node.js code defines utility functions for encoding and decoding UTF-8 strings and Arrays. The functionality includes:

1. **fromUtf8**: Converts a UTF-8 string into a `Uint8Array`.
2. **toUint8Array**: Converts input of different types (string or ArrayBuffer) into a `Uint8Array`.
3. **toUtf8**: Converts a `Uint8Array` into a UTF-8 string.

These functions are organized and exported in a CommonJS module format, which allows them to be used in other JavaScript files.	The module makes use of helper functions for property definition and export functionality.

Here's a simplified rewrite of the code with the same functionality:

```javascript
const bufferFrom = require("@smithy/util-buffer-from");

function fromUtf8(input) {
  const buf = bufferFrom.fromString(input, "utf8");
  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
}

function toUint8Array(data) {
  if (typeof data === "string") {
    return fromUtf8(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
  }
  return new Uint8Array(data);
}

function toUtf8(input) {
  if (typeof input === "string") {
    return input;
  }
  if (typeof input !== "object" || typeof input.byteOffset !== "number" || typeof input.byteLength !== "number") {
    throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
  }
  return bufferFrom.fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
}

module.exports = {
  fromUtf8,
  toUint8Array,
  toUtf8,
};
```

This rewrite keeps the core logic intact while simplifying the surrounding infrastructure.