The provided Node.js code is a module that provides utility functions for converting data between UTF-8 strings and `Uint8Array` objects. The module exports three functions:

1. **fromUtf8**: Converts a UTF-8 encoded string into a `Uint8Array`. It uses a helper function `fromString` from the `@smithy/util-buffer-from` package to create a buffer from the string and then creates a `Uint8Array` from this buffer.

2. **toUint8Array**: Converts a given input (string, `ArrayBufferView`, or `ArrayBuffer`) into a `Uint8Array`. If the input is a string, it uses the `fromUtf8` function. If the input is a buffer view or array, it creates a `Uint8Array` directly.

3. **toUtf8**: Converts a `Uint8Array` back into a UTF-8 encoded string. If the input is already a string, it returns it as-is. It ensures the input is a proper buffer before conversion and throws an error if it is not.

The code defines several utility functions for managing object properties and exports the utility functions in a manner compatible with both CommonJS and ESM.

Here's the rewritten code based on the above explanation:

```javascript
const { fromString, fromArrayBuffer } = require("@smithy/util-buffer-from");

function fromUtf8(input) {
  const buf = fromString(input, "utf8");
  return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
}

function toUint8Array(data) {
  if (typeof data === "string") {
    return fromUtf8(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
  }
  return new Uint8Array(data);
}

function toUtf8(input) {
  if (typeof input === "string") {
    return input;
  }
  if (!(input instanceof Uint8Array)) {
    throw new Error("@smithy/util-utf8: toUtf8 encoder function only accepts string | Uint8Array.");
  }
  return fromArrayBuffer(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
}

module.exports = {
  fromUtf8,
  toUint8Array,
  toUtf8
};
```