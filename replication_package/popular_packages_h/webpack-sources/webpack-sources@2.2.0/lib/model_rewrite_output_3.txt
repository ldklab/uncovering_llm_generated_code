The given Node.js code is designed to lazily define properties on the `exports` object such that the actual module imports are delayed until they are accessed. The `defineExport` function is used to create these lazy-loaded properties. Each property is tied to a function that requires and returns the respective module when the property is accessed for the first time. Once accessed, the function is set to undefined, and the module is cached in the `value` variable for future accesses, ensuring that the module is only required once, thereby enhancing performance.

Here's the rewritten code:

```javascript
/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

function lazyProperty(object, propertyName, initializer) {
	let cachedValue;
	let isInitialized = false;

	Object.defineProperty(object, propertyName, {
		get() {
			if (!isInitialized) {
				cachedValue = initializer();
				isInitialized = true;
			}
			return cachedValue;
		},
		configurable: true
	});
}

lazyProperty(exports, "Source", () => require("./Source"));
lazyProperty(exports, "RawSource", () => require("./RawSource"));
lazyProperty(exports, "OriginalSource", () => require("./OriginalSource"));
lazyProperty(exports, "SourceMapSource", () => require("./SourceMapSource"));
lazyProperty(exports, "CachedSource", () => require("./CachedSource"));
lazyProperty(exports, "ConcatSource", () => require("./ConcatSource"));
lazyProperty(exports, "ReplaceSource", () => require("./ReplaceSource"));
lazyProperty(exports, "PrefixSource", () => require("./PrefixSource"));
lazyProperty(exports, "SizeOnlySource", () => require("./SizeOnlySource"));
lazyProperty(exports, "CompatSource", () => require("./CompatSource"));
```