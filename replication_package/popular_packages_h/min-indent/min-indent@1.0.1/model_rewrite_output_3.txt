The functionality of the given Node.js code is to calculate the minimum indentation level (i.e., the smallest number of leading spaces or tabs) of each line within a provided string. It uses regular expressions and array methods to achieve this:

1. The code is exported as a module that accepts a single argument, `string`.
2. It uses a regular expression to find all leading spaces or tabs at the beginning of each line that is followed by non-space characters (`\S`). This is achieved using the `match` method with the regex `/^[ \t]*(?=\S)/gm`, where the `g` flag stands for global and the `m` flag for multiline.
3. If no matches are found (i.e., all lines are empty or don't start with non-whitespace characters), the function returns 0.
4. If matches are found, the code uses the `reduce` method to iterate through the matches and determine the smallest indentation level, starting the comparison with `Infinity`.
5. It returns the smallest number of leading spaces or tabs found across all lines in the input string.

Here is a possible rewrite of the code based on the above explanation:

```javascript
'use strict';

module.exports = function calculateMinimumIndent(inputString) {
	const indentationMatches = inputString.match(/^[ \t]*(?=\S)/gm);

	if (!indentationMatches) {
		return 0;
	}

	const minimumIndentation = indentationMatches.reduce((currentMin, lineIndent) => {
		return Math.min(currentMin, lineIndent.length);
	}, Infinity);

	return minimumIndentation;
};
```