The provided Node.js function calculates the minimum indentation (count of leading spaces or tabs) of the non-empty lines within a given string. Here's how it works:

1. A regular expression `/^[ \t]*(?=\S)/gm` is used to find all leading spaces or tabs before the first non-space character on each line. This expression:
   - `^[ \t]*` searches for zero or more spaces or tabs at the start of each line.
   - `(?=\S)` is a positive lookahead that ensures there is a non-space character following the matched spaces/tabs, preventing matches on completely empty lines.
   - `g` is the global flag to find all matches, and `m` treats the input as multiline, allowing `^` to match the start of each line.

2. If the `match` method doesn't find any matches, it returns `null`, and consequently, the function returns `0`, indicating there are no lines or all lines are empty.

3. If matches are found, the `reduce` function iterates over them to find the match with the minimal length (`Math.min`). It initializes with `Infinity` to ensure any match will have a smaller length.

Here's a possible rewrite of the code with the same functionality:

```javascript
'use strict';
module.exports = function calculateMinIndentation(inputString) {
	const leadingSpaceMatches = inputString.match(/^[ \t]*(?=\S)/gm);
	
	if (!leadingSpaceMatches) {
		return 0;
	}

	return leadingSpaceMatches.reduce((minIndent, currentMatch) => {
		return Math.min(minIndent, currentMatch.length);
	}, Infinity);
};
```