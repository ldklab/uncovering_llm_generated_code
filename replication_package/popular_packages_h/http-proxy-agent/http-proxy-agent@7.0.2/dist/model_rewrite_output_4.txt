The Node.js code defines a custom HTTP proxy agent `HttpProxyAgent` that extends from `agent-base.Agent`. The agent connects to a specified HTTP proxy server to facilitate proxy HTTP requests. The class handles both HTTP and HTTPS proxies, setting up the connection parameters based on the protocol specified in the proxy URL. Key functionalities include setting request headers, handling connection options, and managing proxy authentication. The connection to the proxy is made using either a `net.Socket` for HTTP or a `tls.Socket` for HTTPS, and the agent ensures proper header management for proxy requests.

Here's a possible rewrite of the code:

```javascript
"use strict";

const net = require("net");
const tls = require("tls");
const debug = require("debug")("http-proxy-agent");
const { once } = require("events");
const { Agent } = require("agent-base");
const { URL } = require("url");

/**
 * The `HttpProxyAgent` class provides an HTTP Agent that connects
 * to a specified HTTP proxy server to proxy HTTP requests.
 */
class HttpProxyAgent extends Agent {
  constructor(proxy, opts = {}) {
    super(opts);
    this.proxy = typeof proxy === "string" ? new URL(proxy) : proxy;
    this.proxyHeaders = opts.headers || {};
    debug("Creating new HttpProxyAgent instance: %o", this.proxy.href);

    const host = (this.proxy.hostname || this.proxy.host).replace(/^\[|\]$/g, "");
    const defaultPort = this.proxy.protocol === "https:" ? 443 : 80;
    const port = this.proxy.port ? parseInt(this.proxy.port, 10) : defaultPort;

    this.connectOpts = {
      ...omit(opts, "headers"),
      host,
      port,
    };
  }

  addRequest(req, opts) {
    req._header = null;
    this.setRequestProps(req, opts);
    super.addRequest(req, opts);
  }

  setRequestProps(req, opts) {
    const { proxy } = this;
    const protocol = opts.secureEndpoint ? "https:" : "http:";
    const hostname = req.getHeader("host") || "localhost";
    const url = new URL(req.path, `${protocol}//${hostname}`);
    if (opts.port !== 80) {
      url.port = String(opts.port);
    }
    req.path = String(url);

    const headers = typeof this.proxyHeaders === "function" ? this.proxyHeaders() : { ...this.proxyHeaders };
    if (proxy.username || proxy.password) {
      const auth = `${decodeURIComponent(proxy.username)}:${decodeURIComponent(proxy.password)}`;
      headers["Proxy-Authorization"] = `Basic ${Buffer.from(auth).toString("base64")}`;
    }
    headers["Proxy-Connection"] = headers["Proxy-Connection"] || (this.keepAlive ? "Keep-Alive" : "close");

    for (const [name, value] of Object.entries(headers)) {
      if (value) {
        req.setHeader(name, value);
      }
    }
  }

  async connect(req, opts) {
    req._header = null;
    if (!req.path.includes("://")) {
      this.setRequestProps(req, opts);
    }

    req._implicitHeader();
    if (req.outputData && req.outputData.length > 0) {
      const first = req.outputData[0].data;
      const endOfHeaders = first.indexOf("\r\n\r\n") + 4;
      req.outputData[0].data = req._header + first.substring(endOfHeaders);
    }

    const createSocket = this.proxy.protocol === "https:" ? tls.connect : net.connect;
    const socket = createSocket(this.connectOpts);
    await once(socket, "connect");
    return socket;
  }
}

HttpProxyAgent.protocols = ["http", "https"];

function omit(obj, ...keys) {
  return Object.entries(obj).reduce((acc, [key, value]) => {
    if (!keys.includes(key)) {
      acc[key] = value;
    }
    return acc;
  }, {});
}

module.exports.HttpProxyAgent = HttpProxyAgent;
```
