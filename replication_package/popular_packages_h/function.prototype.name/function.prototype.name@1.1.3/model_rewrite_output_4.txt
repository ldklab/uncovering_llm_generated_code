The given Node.js code does the following:

1. It begins by requiring necessary modules like `define-properties` and `call-bind`, along with three local modules: `./implementation`, `./polyfill`, and `./shim`.

2. It calls `callBind` on the `implementation` which returns a function (likely with a certain context bound).

3. The `define-properties` library is then used to attach additional properties to this `bound` function. The properties added are:
   - `getPolyfill`: This is assigned the function or object exported from the `./polyfill` module.
   - `implementation`: This is assigned the `./implementation` module export.
   - `shim`: This is assigned the `./shim` module export.

4. Finally, the `bound` function, now enhanced with these three additional properties, is exported as the module's public API.

Here is the rewritten version of the code:

```javascript
'use strict';

const defineProperties = require('define-properties');
const callBind = require('call-bind');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

const boundFunction = callBind(implementation);

defineProperties(boundFunction, {
    getPolyfill,
    implementation,
    shim
});

module.exports = boundFunction;
```