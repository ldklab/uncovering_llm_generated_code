The given Node.js code defines a function named `matchPropertyValue` and exports it as a module. This function is used to map an alias of a property value to its canonical (standardized) value using a predefined mapping. Here's a breakdown of its functionality:

1. **Require a Module:** 
   - It imports (`require`) a module named `./data/mappings.js`, assumed to contain mappings of property names to their respective alias-value mappings.

2. **Define Functionality:**
   - The `matchPropertyValue` function accepts two parameters: `property` and `value`.
   - It accesses a map (`aliasToValue`) corresponding to the given `property` using the imported `propertyToValueAliases`.
   - If there's no map available for a given property, it throws an error indicating an unknown property.
   - If the map exists, it tries to get the canonical value for the provided alias `value`.
   - If a canonical value is found, it returns this value.
   - Otherwise, it throws an error indicating the unknown value for the specified property.

3. **Export Functionality:** 
   - The `matchPropertyValue` function is exported as a module to be used in other parts of the application.

Here's a possible rewrite of the code:

```javascript
'use strict';

const propertyToValueAliases = require('./data/mappings.js');

function matchPropertyValue(property, value) {
    const aliasToValue = propertyToValueAliases.get(property);

    if (!aliasToValue) {
        throw new Error(`Unknown property \`${property}\`.`);
    }

    const canonicalValue = aliasToValue.get(value);

    if (canonicalValue) {
        return canonicalValue;
    }
    
    throw new Error(`Unknown value \`${value}\` for property \`${property}\`.`);
}

module.exports = matchPropertyValue;
```