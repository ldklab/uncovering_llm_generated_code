The functionality of the provided Node.js code is to define a function `matchPropertyValue` which takes a `property` and a `value` as arguments and attempts to match the given value with its canonical representation based on a mapping found in `propertyToValueAliases`. This mapping is supposed to be loaded from an external module file `./data/mappings.js`.

Here is a step-by-step explanation of how the function works:

1. It retrieves a mapping of aliases to canonical values for the provided property using `propertyToValueAliases.get(property)`.
2. If no mapping exists for the given property, it throws an error indicating that the property is unknown.
3. If a mapping exists, it then looks up the provided value within this mapping.
4. If a canonical value for the given alias value is found, it returns this canonical value.
5. If the alias value is not found, it throws an error indicating that the value for the given property is unknown.

Finally, the `matchPropertyValue` function is exported as a module so it can be used in other files.

Here's a possible rewrite of the code according to the above explanation:

```javascript
'use strict';

const propertyToValueMappings = require('./data/mappings.js');

function matchPropertyWithValue(property, value) {
    const aliasToCanonical = propertyToValueMappings.get(property);
    
    if (!aliasToCanonical) {
        throw new Error(`Unknown property \`${property}\`.`);
    }
    
    const canonicalRepresentation = aliasToCanonical.get(value);
    if (canonicalRepresentation) {
        return canonicalRepresentation;
    }
    
    throw new Error(`Unknown value \`${value}\` for property \`${property}\`.`);
}

module.exports = matchPropertyWithValue;
```