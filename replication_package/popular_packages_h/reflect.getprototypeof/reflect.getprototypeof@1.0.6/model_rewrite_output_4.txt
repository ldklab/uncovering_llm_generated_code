The Node.js code is designed to set up and export a function with additional properties. Here's a breakdown of its functionality:

1. It uses strict mode, which is a way to opt into a restricted variant of JavaScript, thereby catching common coding errors and preventing unsafe actions.

2. It imports several modules at the beginning of the script:
   - `callBind`: Likely used to bind functions to a particular context or target.
   - `define-properties`: A utility to define multiple properties on an object, which includes setting the values and descriptors of properties.
   - `implementation`, `getPolyfill`, and `shim`: These are required from local files which add specific functionality related to the behavior being polyfilled or shimmed.

3. `getPolyfill()` is expected to return a function (presumably the polyfill), and this function is bound to the `Reflect` object if it exists in the current environment to provide more robust functionality. If `Reflect` is not available, it's bound to `Object`.

4. The `define` utility is used to append additional properties (`getPolyfill`, `implementation`, and `shim`) to the bound function. This means the result not only acts as a function but also exposes these methods for further utility or introspection.

5. The composed and enhanced bound function is exported as the module's output, making it available for use wherever this module is imported.

Here's a possible rewrite of the code:

```javascript
'use strict';

const callBind = require('call-bind');
const defineProperties = require('define-properties');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

const target = typeof Reflect === 'object' ? Reflect : Object;
const boundFunction = callBind(getPolyfill(), target);

defineProperties(boundFunction, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = boundFunction;
```