(function(global) {
  'use strict';

  const EXP_LIMIT = 9e15;
  const MAX_DIGITS = 1e9;
  const NUMERALS = '0123456789abcdef';
  
  const LN10_STR = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058';
  const PI_STR = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789';

  const DEFAULTS = {
    precision: 20,
    rounding: 4,
    modulo: 1,
    toExpNeg: -7,
    toExpPos: 21,
    minE: -EXP_LIMIT,
    maxE: EXP_LIMIT,
    crypto: false
  };

  let quadrant;
  let external = true;
  let noConflict;

  const P = { name: '[object Decimal]' };

  // Decimal prototype methods and helpers omitted for brevity ...

  function abs(x) {
    return new this(x).abs();
  }

  function acos(x) {
    return new this(x).acos();
  }

  // More static methods analogous to prototype methods...

  function clone() {
    const Decimal = buildDecimal();
    Decimal.config(this);
    return Decimal;
  }

  function buildDecimal() {
    function Decimal(v) {
      if (!(this instanceof Decimal)) return new Decimal(v);
      this.constructor = Decimal;
      
      // Construction logic omitted for brevity...
    }

    Decimal.prototype = P;

    // Decimal constants and configuration
    Decimal.ROUND_UP = 0;
    Decimal.ROUND_DOWN = 1;
    Decimal.ROUND_CEIL = 2;
    Decimal.ROUND_FLOOR = 3;
    Decimal.ROUND_HALF_UP = 4;
    Decimal.ROUND_HALF_DOWN = 5;
    Decimal.ROUND_HALF_EVEN = 6;
    Decimal.ROUND_HALF_CEIL = 7;
    Decimal.ROUND_HALF_FLOOR = 8;
    Decimal.EUCLID = 9;

    Decimal.config = config;
    Decimal.clone = clone;
    Decimal.abs = abs;
    Decimal.acos = acos;
    // More static method assignments...

    return Decimal;
  }

  const Decimal = buildDecimal();

  // Initialize constants
  Decimal.LN10 = new Decimal(LN10_STR);
  Decimal.PI = new Decimal(PI_STR);

  // Export logic, supporting various environments
  if (typeof define === 'function' && define.amd) {
    define(() => Decimal);
  } else if (typeof module !== 'undefined' && module.exports) {
    if (typeof Symbol === 'function') {
      P[Symbol.for('nodejs.util.inspect.custom')] = P.toString;
      P[Symbol.toStringTag] = 'Decimal';
    }
    module.exports = Decimal;
  } else {
    if (!global) {
      global = typeof self !== 'undefined' ? self : window;
    }
    noConflict = global.Decimal;
    Decimal.noConflict = function() {
      global.Decimal = noConflict;
      return Decimal;
    };
    global.Decimal = Decimal;
  }
})(this);
