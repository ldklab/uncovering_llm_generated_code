```javascript
'use strict';

const jsxRuntime = require('react/jsx-runtime');
const React = require('react');

function createScopedAnimate(scope) {
  function scopedAnimate(elementOrSequence, keyframes, options) {
    const animations = animateElements(elementOrSequence, keyframes, options, scope);
    const animation = new GroupPlaybackControls(animations);
    if (scope) {
      scope.animations.push(animation);
    }
    return animation;
  }
  return scopedAnimate;
}

const animate = createScopedAnimate();

function animateElements(elementOrSelector, keyframes, options, scope) {
  // Logic for animating elements
}

function GroupPlaybackControls(animations) {
  this.animations = animations.filter(Boolean);
}

GroupPlaybackControls.prototype.then = function (resolve, reject) {
  return Promise.all(this.animations).then(resolve).catch(reject);
}

GroupPlaybackControls.prototype.play = function () {
  this.runAll("play");
}

GroupPlaybackControls.prototype.runAll = function (methodName) {
  this.animations.forEach((controls) => controls[methodName]());
}

function animateValue(options) {
  return new MainThreadAnimation(options);
}

class MainThreadAnimation {
  constructor(options) {
    this.options = options;
    // Initialize the animation
  }

  play() {
    // Logic to play animation
  }

  stop() {
    // Logic to stop animation
  }
}

// Export `animate` and `animateValue`
module.exports = { animate, animateValue };
```