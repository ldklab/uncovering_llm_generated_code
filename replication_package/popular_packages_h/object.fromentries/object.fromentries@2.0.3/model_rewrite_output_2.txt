The Node.js code is setting up a module that exports a polyfill function. Here’s a breakdown of the functionality:

1. It imports several modules: `define-properties` to define properties on an object, `call-bind` to bind a function with a context, and three custom modules named `implementation`, `polyfill`, and `shim`.

2. It calls `getPolyfill()` to retrieve the polyfill function and then binds that function to the `Object` context using `callBind`.

3. Using the `define-properties` module, it adds additional properties to the polyfill function: `getPolyfill`, `implementation`, and `shim`. These properties are essentially references to the imported modules/functions.

4. Finally, it exports the `polyfill` function as the module’s main export. 

Here's a possible rewrite of the code:

```js
'use strict';

const defineProperties = require('define-properties');
const callBind = require('call-bind');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

const polyfill = callBind(getPolyfill(), Object);

defineProperties(polyfill, {
    getPolyfill: getPolyfill,
    implementation: implementation,
    shim: shim
});

module.exports = polyfill;
```