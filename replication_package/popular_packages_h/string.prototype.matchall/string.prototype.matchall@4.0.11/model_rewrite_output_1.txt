The provided Node.js code sets up a module for the `matchAll` function, which is generally used to match all occurrences of a regex in a string. Here's a breakdown of what the code does:

1. **Imports Required Modules**:
   - `call-bind`: Utilized to bind a function to its call context.
   - `define-properties`: Provides functionality to define properties on an object.
   - Custom modules `implementation`, `polyfill`, and `shim` are also imported. These modules likely contain the core implementation, a compatibility polyfill, and a shim for environments that lack native support.

2. **Binding the Implementation**:
   - `callBind(implementation)` is used to create a bound version of the `matchAll` implementation. This binds the `implementation` function to be called in a specific context.

3. **Defining Properties**:
   - Using `define-properties`, the code adds additional properties to `boundMatchAll`, which include references to the `getPolyfill`, `implementation`, and `shim` functions. This makes these functionalities accessible through the `boundMatchAll` object.

4. **Exports**:
   - The `boundMatchAll` object, now enhanced with additional methods and functionality, is exported as the module's public interface.

Here's a possible rewrite of the Node.js code:

```javascript
'use strict';

const callBind = require('call-bind');
const defineProperties = require('define-properties');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

// Bind the implementation to preserve the original context
const boundMatchAll = callBind(implementation);

// Define additional properties on the bound function
defineProperties(boundMatchAll, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});

// Export the enhanced function as the module's interface
module.exports = boundMatchAll;
```