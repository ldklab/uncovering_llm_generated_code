The provided Node.js code defines and exports a function called `boundMatchAll` that is bound to its `implementation`. Here's the breakdown of its functionality:

1. **Modules Importation:**
   - The `call-bind` and `define-properties` modules are required initially to bind functions and define properties on an object.
   - Custom modules `implementation`, `polyfill`, and `shim` are imported, likely related to a polyfill for a `matchAll` function or method.

2. **Binding Implementation:**
   - The `implementation` module is bound using `callBind`, resulting in a `boundMatchAll` function. This ensures that the `implementation` has a predefined context when invoked.

3. **Define Properties:**
   - Three properties are defined on `boundMatchAll` using the `define` method. These properties provide access to:
     - `getPolyfill`: Method providing the required polyfill logic.
     - `implementation`: The actual implementation logic of the functionality.
     - `shim`: A shim method that might be used to replace or enhance native functionality.

4. **Export:**
   - The `boundMatchAll` function is exported as a module, making it available to be imported and used in other files.

Here's a rewritten version of the code:

```javascript
'use strict';

const callBind = require('call-bind');
const defineProperties = require('define-properties');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

const boundMatchAll = callBind(implementation);

defineProperties(boundMatchAll, {
  getPolyfill,
  implementation,
  shim,
});

module.exports = boundMatchAll;
```