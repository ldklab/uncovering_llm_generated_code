The given Node.js code is a module designed to handle 64-bit integers in JavaScript by creating a `Long` class. JavaScript's native `Number` type is limited to 53-bit precision, but sometimes 64-bit precision is needed, especially in systems programming and when dealing with large integers. This `Long` class represents 64-bit two's-complement integers by splitting them into two 32-bit halves, thus simulating 64-bit integer behavior.

The code also includes methods for arithmetic and bitwise operations, comparisons, and additional utilities like converting to/from different representations (e.g., strings, byte arrays). WebAssembly is optionally used to optimize certain operations for performance, leveraging native integer operations when possible. The class provides both signed and unsigned arithmetic, ensuring flexibility based on the required domain-specific logic.

The code is wrapped in a closure, which helps in structuring the module as a self-contained unit. Different parts of the code define various functionalities such as bitwise operations, arithmetic operations, and conversion utilities, all supporting the manipulation of large integers.

Hereâ€™s a rewritten and organized version of the code:

```javascript
// GENERATED FILE. DO NOT EDIT.
var Long = (function(exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;

  // WebAssembly optimizations for i64 multiplication and divide
  let wasm = null;
  try {
    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
      0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4,
      127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6,
      1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5,
      100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0,
      3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95,
      117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0,
      10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173,
      32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66,
      32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4,
      167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134,
      132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4,
      66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32,
      0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3,
      173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0,
      32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66,
      32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132,
      129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1,
      1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2,
      173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135,
      167, 36, 0, 32, 4, 167, 11
    ])), {}).exports;
  } catch (e) {
    // no wasm support
  }

  function Long(low, high, unsigned) {
    this.low = low | 0;
    this.high = high | 0;
    this.unsigned = !!unsigned;
  }

  // Properties and methods
  Long.prototype.__isLong__ = true;

  Long.isLong = function(obj) {
    return (obj && obj.__isLong__) === true;
  };

  // Utility functions
  function fromBits(lowBits, highBits, unsigned) {
    return new Long(lowBits, highBits, unsigned);
  }

  function fromInt(value, unsigned) {
    const cache = unsigned ? UINT_CACHE : INT_CACHE;

    if (unsigned) {
      value >>>= 0;
      if (cache[value] !== undefined) return cache[value];
      const result = fromBits(value, 0, true);
      cache[value] = result;
      return result;
    } else {
      value |= 0;
      if (cache[value] !== undefined) return cache[value];
      const result = fromBits(value, value < 0 ? -1 : 0, false);
      cache[value] = result;
      return result;
    }
  }

  Long.fromInt = fromInt;

  function fromNumber(value, unsigned) {
    if (isNaN(value)) return unsigned ? UZERO : ZERO;
    if (unsigned && value < 0) return UZERO;
    if (unsigned && value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;
    if (!unsigned && value <= -TWO_PWR_63_DBL) return MIN_VALUE;
    if (!unsigned && value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;
    if (value < 0) return fromNumber(-value, unsigned).neg();
    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);
  }

  Long.fromNumber = fromNumber;

  function fromString(str, unsigned, radix) {
    if (str.length === 0) throw Error('empty string');
    if (typeof unsigned === 'number') {
      radix = unsigned;
      unsigned = false;
    } else {
      unsigned = !!unsigned;
    }

    if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity") return unsigned ? UZERO : ZERO;
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    
    const hasHyphen = str.indexOf('-');
    if (hasHyphen > 0) throw Error('interior hyphen');
    else if (hasHyphen === 0) return fromString(str.substring(1), unsigned, radix).neg();

    const length = str.length;
    let radixToPower = fromNumber(Math.pow(radix, 8));
    let result = ZERO;

    for (let i = 0; i < length; i += 8) {
      let size = Math.min(8, length - i),
          value = parseInt(str.substring(i, i + size), radix);
      
      let power = size < 8 ? fromNumber(Math.pow(radix, size)) : radixToPower;
      result = result.mul(power).add(fromNumber(value));
    }

    result.unsigned = unsigned;
    return result;
  }

  Long.fromString = fromString;

  function fromValue(val, unsigned) {
    if (typeof val === 'number') return fromNumber(val, unsigned);
    if (typeof val === 'string') return fromString(val, unsigned);
    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);
  }

  Long.fromValue = fromValue;

  // Constants
  const INT_CACHE = {};
  const UINT_CACHE = {};
  const TWO_PWR_16_DBL = 1 << 16;
  const TWO_PWR_24_DBL = 1 << 24;
  const TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
  const TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
  const TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
  
  const ZERO = fromInt(0);
  const UZERO = fromInt(0, true);
  const ONE = fromInt(1);
  const UONE = fromInt(1, true);
  const NEG_ONE = fromInt(-1);
  const MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);
  const MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);
  const MIN_VALUE = fromBits(0, 0x80000000 | 0, false);

  Long.ZERO = ZERO;
  Long.UZERO = UZERO;
  Long.ONE = ONE;
  Long.UONE = UONE;
  Long.NEG_ONE = NEG_ONE;
  Long.MAX_VALUE = MAX_VALUE;
  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
  Long.MIN_VALUE = MIN_VALUE;

  // Long prototype methods
  const LongPrototype = Long.prototype;

  LongPrototype.toInt = function() {
    return this.unsigned ? this.low >>> 0 : this.low;
  };

  LongPrototype.toNumber = function() {
    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
  };

  LongPrototype.toString = function(radix) {
    radix = radix || 10;
    if (radix < 2 || 36 < radix) throw RangeError('radix');
    if (this.isZero()) return '0';
    if (this.isNegative()) {
      if (this.eq(MIN_VALUE)) {
        const radixLong = fromNumber(radix),
              div = this.div(radixLong),
              rem = div.mul(radixLong).sub(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.neg().toString(radix);
      }
    }

    const radixToPower = fromNumber(Math.pow(radix, 6), this.unsigned);
    let rem = this;
    let result = '';

    while (true) {
      const remDiv = rem.div(radixToPower),
            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,
            digits = intval.toString(radix);
      rem = remDiv;
      if (rem.isZero()) return digits + result;
      result = '0'.repeat(6 - digits.length) + digits + result;
    }
  };

  LongPrototype.getHighBits = function() {
    return this.high;
  };

  LongPrototype.getHighBitsUnsigned = function() {
    return this.high >>> 0;
  };

  LongPrototype.getLowBits = function() {
    return this.low;
  };

  LongPrototype.getLowBitsUnsigned = function() {
    return this.low >>> 0;
  };

  LongPrototype.getNumBitsAbs = function() {
    if (this.isNegative()) return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
    const val = this.high !== 0 ? this.high : this.low;
    for (let bit = 31; bit > 0; bit--) {
      if ((val & (1 << bit)) !== 0) return this.high !== 0 ? bit + 33 : bit + 1;
    }
  };

  LongPrototype.isZero = function() {
    return this.high === 0 && this.low === 0;
  };

  LongPrototype.eqz = LongPrototype.isZero;

  LongPrototype.isNegative = function() {
    return !this.unsigned && this.high < 0;
  };

  LongPrototype.isPositive = function() {
    return this.unsigned || this.high >= 0;
  };

  LongPrototype.isOdd = function() {
    return (this.low & 1) === 1;
  };

  LongPrototype.isEven = function() {
    return (this.low & 1) === 0;
  };

  LongPrototype.equals = function(other) {
    if (!Long.isLong(other)) other = fromValue(other);
    if (this.unsigned !== other.unsigned &&
        this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;  
    return this.high === other.high && this.low === other.low;
  };

  LongPrototype.eq = LongPrototype.equals;

  LongPrototype.notEquals = function(other) {
    return !this.eq(other);
  };

  LongPrototype.neq = LongPrototype.notEquals;
  LongPrototype.ne = LongPrototype.notEquals;

  LongPrototype.lessThan = function(other) {
    return this.comp(other) < 0;
  };

  LongPrototype.lt = LongPrototype.lessThan;

  LongPrototype.lessThanOrEqual = function(other) {
    return this.comp(other) <= 0;
  };

  LongPrototype.lte = LongPrototype.lessThanOrEqual;
  LongPrototype.le = LongPrototype.lessThanOrEqual;

  LongPrototype.greaterThan = function(other) {
    return this.comp(other) > 0;
  };

  LongPrototype.gt = LongPrototype.greaterThan;

  LongPrototype.greaterThanOrEqual = function(other) {
    return this.comp(other) >= 0;
  };

  LongPrototype.gte = LongPrototype.greaterThanOrEqual;
  LongPrototype.ge = LongPrototype.greaterThanOrEqual;

  LongPrototype.compare = function(other) {
    if (!Long.isLong(other)) other = fromValue(other);
    if (this.eq(other)) return 0;
    const thisNeg = this.isNegative(),
          otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) return -1;
    if (!thisNeg && otherNeg) return 1;
    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1;
    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
  };

  LongPrototype.comp = LongPrototype.compare;

  LongPrototype.negate = function() {
    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;
    return this.not().add(ONE);
  };

  LongPrototype.neg = LongPrototype.negate;

  LongPrototype.add = function(addend) {
    if (!Long.isLong(addend)) addend = fromValue(addend);

    let a48 = this.high >>> 16,
        a32 = this.high & 0xFFFF,
        a16 = this.low >>> 16,
        a00 = this.low & 0xFFFF;

    let b48 = addend.high >>> 16,
        b32 = addend.high & 0xFFFF,
        b16 = addend.low >>> 16,
        b00 = addend.low & 0xFFFF;

    let c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 = a00 + b00;
    c16 = (c00 >>> 16) + a16 + b16;
    c32 = (c16 >>> 16) + a32 + b32;
    c48 = (c32 >>> 16) + a48 + b48;

    return fromBits((c16 << 16) | (c00 & 0xFFFF), (c48 << 16) | (c32 & 0xFFFF), this.unsigned);
  };

  LongPrototype.subtract = function(subtrahend) {
    if (!Long.isLong(subtrahend)) subtrahend = fromValue(subtrahend);
    return this.add(subtrahend.neg());
  };

  LongPrototype.sub = LongPrototype.subtract;

  LongPrototype.multiply = function(multiplier) {
    if (this.isZero()) return this;
    if (!Long.isLong(multiplier)) multiplier = fromValue(multiplier);

    if (wasm) {
      const low = wasm["mul"](this.low, this.high, multiplier.low, multiplier.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }

    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;
    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;
    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;

    if (this.isNegative()) {
      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());
      return this.neg().mul(multiplier).neg();
    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg();

    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);

    let a48 = this.high >>> 16,
        a32 = this.high & 0xFFFF,
        a16 = this.low >>> 16,
        a00 = this.low & 0xFFFF;

    let b48 = multiplier.high >>> 16,
        b32 = multiplier.high & 0xFFFF,
        b16 = multiplier.low >>> 16,
        b00 = multiplier.low & 0xFFFF;

    let c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 = a00 * b00;
    c16 = (c00 >>> 16) + (a16 * b00) + (a00 * b16);
    c32 = (c16 >>> 16) + (a32 * b00) + (a16 * b16) + (a00 * b32);
    c48 = (c32 >>> 16) + (a48 * b00) + (a32 * b16) + (a16 * b32) + (a00 * b48);

    return fromBits((c16 << 16) | (c00 & 0xFFFF), (c48 << 16) | (c32 & 0xFFFF), this.unsigned);
  };

  LongPrototype.mul = LongPrototype.multiply;

  LongPrototype.divide = function(divisor) {
    if (!Long.isLong(divisor)) divisor = fromValue(divisor);

    if (divisor.isZero()) throw Error('division by zero');

    if (wasm) {
      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {
        return this;
      }

      const low = (this.unsigned ? wasm["div_u"] : wasm["div_s"])(this.low, this.high, divisor.low, divisor.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }

    if (this.isZero()) return this.unsigned ? UZERO : ZERO;

    let res = this.unsigned ? UZERO : ZERO;
    let approx, rem, remDiv, delta;
    const remSh = 1;

    if (!this.unsigned) {
      if (this.eq(MIN_VALUE)) {
        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE;
        if (divisor.eq(MIN_VALUE)) return ONE;
        let halfThis = this.shr(remSh);
        approx = halfThis.div(divisor).shl(remSh);
        if (approx.eq(ZERO)) return divisor.isNegative() ? ONE : NEG_ONE;
        rem = this.sub(divisor.mul(approx));
        return approx.add(rem.div(divisor));
      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;

      if (this.isNegative()) {
        return divisor.isNegative() ? this.neg().div(divisor.neg()) : this.neg().div(divisor).neg();
      } else if (divisor.isNegative()) {
        return this.div(divisor.neg()).neg();
      }
    } else {
      if (!divisor.unsigned) divisor = divisor.toUnsigned();
      if (divisor.gt(this)) return UZERO;
      if (divisor.gt(this.shru(remSh))) return UONE;
    }

    rem = this;
    while (rem.gte(divisor)) {
      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
      delta = approx <= 48 ? 1 : Math.pow(2, Math.ceil(Math.log(approx) / Math.LN2) - 48);
      remDiv = rem.div(divisor);
      res = approx * divisor.toNumber();
      rem = rem.sub((approxRes = fromNumber(approx, this.unsigned)).mul(divisor));
      while (approxRes.isZero()) approxRes = ONE;
      res = res.add(approxRes);
    }

    return res;
  };

  LongPrototype.div = LongPrototype.divide;

  LongPrototype.modulo = function(divisor) {
    if (!Long.isLong(divisor)) divisor = fromValue(divisor);

    if (wasm) {
      const low = (this.unsigned ? wasm["rem_u"] : wasm["rem_s"])(this.low, this.high, divisor.low, divisor.high);
      return fromBits(low, wasm["get_high"](), this.unsigned);
    }

    return this.sub(this.div(divisor).mul(divisor));
  };

  LongPrototype.mod = LongPrototype.modulo;
  LongPrototype.rem = LongPrototype.modulo;

  LongPrototype.not = function() {
    return fromBits(~this.low, ~this.high, this.unsigned);
  };

  LongPrototype.countLeadingZeros = function() {
    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;
  };

  LongPrototype.clz = LongPrototype.countLeadingZeros;

  LongPrototype.countTrailingZeros = function() {
    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;
  };

  LongPrototype.ctz = LongPrototype.countTrailingZeros;

  LongPrototype.and = function(other) {
    if (!Long.isLong(other)) other = fromValue(other);
    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
  };

  LongPrototype.or = function(other) {
    if (!Long.isLong(other)) other = fromValue(other);
    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
  };

  LongPrototype.xor = function(other) {
    if (!Long.isLong(other)) other = fromValue(other);
    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
  };

  LongPrototype.shiftLeft = function(numBits) {
    if (Long.isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    return numBits === 0 ? this : numBits < 32 ? fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned) : fromBits(0, this.low << (numBits - 32), this.unsigned);
  };

  LongPrototype.shl = LongPrototype.shiftLeft;

  LongPrototype.shiftRight = function(numBits) {
    if (Long.isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    return numBits === 0 ? this : numBits < 32 ? fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned) : fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);
  };

  LongPrototype.shr = LongPrototype.shiftRight;

  LongPrototype.shiftRightUnsigned = function(numBits) {
    if (Long.isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    return numBits === 0 ? this : numBits < 32 ? fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >>> numBits, this.unsigned) : numBits === 32 ? fromBits(this.high, 0, this.unsigned) : fromBits(this.high >>> (numBits - 32), 0, this.unsigned);
  };

  LongPrototype.shru = LongPrototype.shiftRightUnsigned;
  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;

  LongPrototype.rotateLeft = function(numBits) {
    let b;
    if (Long.isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);

    if (numBits < 32) {
      b = 32 - numBits;
      return fromBits((this.low << numBits) | (this.high >>> b), (this.high << numBits) | (this.low >>> b), this.unsigned);
    }

    numBits -= 32;
    b = 32 - numBits;
    return fromBits((this.high << numBits) | (this.low >>> b), (this.low << numBits) | (this.high >>> b), this.unsigned);
  };

  LongPrototype.rotl = LongPrototype.rotateLeft;

  LongPrototype.rotateRight = function(numBits) {
    let b;
    if (Long.isLong(numBits)) numBits = numBits.toInt();
    numBits &= 63;
    if (numBits === 0) return this;
    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);

    if (numBits < 32) {
      b = 32 - numBits;
      return fromBits((this.high << b) | (this.low >>> numBits), (this.low << b) | (this.high >>> numBits), this.unsigned);
    }

    numBits -= 32;
    b = 32 - numBits;
    return fromBits((this.low << b) | (this.high >>> numBits), (this.high << b) | (this.low >>> numBits), this.unsigned);
  };

  LongPrototype.rotr = LongPrototype.rotateRight;

  LongPrototype.toSigned = function() {
    return this.unsigned ? fromBits(this.low, this.high, false) : this;
  };

  LongPrototype.toUnsigned = function() {
    return this.unsigned ? this : fromBits(this.low, this.high, true);
  };

  LongPrototype.toBytes = function(le) {
    return le ? this.toBytesLE() : this.toBytesBE();
  };

  LongPrototype.toBytesLE = function() {
    const hi = this.high,
          lo = this.low;
    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];
  };

  LongPrototype.toBytesBE = function() {
    const hi = this.high,
          lo = this.low;
    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];
  };

  Long.fromBytes = function(bytes, unsigned, le) {
    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);
  };

  Long.fromBytesLE = function(bytes, unsigned) {
    return new Long(
      bytes[0] | (bytes[1] << 8) | (bytes[2] << 16) | (bytes[3] << 24),
      bytes[4] | (bytes[5] << 8) | (bytes[6] << 16) | (bytes[7] << 24),
      unsigned
    );
  };

  Long.fromBytesBE = function(bytes, unsigned) {
    return new Long(
      (bytes[4] << 24) | (bytes[5] << 16) | (bytes[6] << 8) | bytes[7],
      (bytes[0] << 24) | (bytes[1] << 16) | (bytes[2] << 8) | bytes[3],
      unsigned
    );
  };

  exports.default = Long;
  return "default" in exports ? exports.default : exports;
})({});

if (typeof define === 'function' && define.amd) define([], function() { return Long; });
else if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;
```