The functionality of the provided Node.js code is to map and convert version numbers between Electron and Chromium, based on predefined mappings imported from four different files. Here's what each function does:

1. **`electronToChromium(query)`:** Takes an Electron version as a query and returns the corresponding Chromium version. If the query includes a more specific version (with more than two segments like "1.0.0"), it uses `fullVersions` for a match; otherwise, `versions` is used.

2. **`chromiumToElectron(query)`:** Takes a Chromium version as a query and returns the corresponding Electron version. Similar to `electronToChromium`, it uses `fullChromiumVersions` for more specific queries and `chromiumVersions` for others.

3. **`electronToBrowserList(query)`:** Converts an Electron version to a Browserlist-compatible string for Chrome. It interprets the Electron version and maps it to a Chrome version using the `versions` object.

4. **`getQueryString(query)`:** Utility function that normalizes the query to a string. It handles the case where a query is the number 1 by converting it to "1.0". It also ensures any numerical query is treated as a string.

The module exports the defined conversion functions and the version mapping objects, allowing these functions and objects to be used in other parts of an application that requires knowledge of Electron and Chromium version mappings.

Below is the rewritten code:

```javascript
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

function electronToChromium(query) {
  const number = getQueryString(query);
  return number.includes('.') ? fullVersions[number] : versions[number] || undefined;
}

function chromiumToElectron(query) {
  const number = getQueryString(query);
  return number.includes('.') ? fullChromiumVersions[number] : chromiumVersions[number] || undefined;
}

function electronToBrowserList(query) {
  const number = getQueryString(query);
  return versions[number] ? `Chrome >= ${versions[number]}` : undefined;
}

function getQueryString(query) {
  let number = query;
  if (query === 1) number = "1.0";
  if (typeof query === 'number') number = `${query}`;
  return number;
}

module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  electronToBrowserList,
  chromiumToElectron
};
```