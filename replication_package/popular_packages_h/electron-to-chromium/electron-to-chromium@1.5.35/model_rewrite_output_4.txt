The provided Node.js code is designed to handle version mappings between Electron and Chromium by utilizing several predefined mappings and queries. The functionality is as follows:

1. **Dependencies**: It imports four different version mappings:
   - `versions`: Likely a version mapping between Electron and major Chromium versions.
   - `fullVersions`: A detailed mapping including Electron versions with more precise version numbers.
   - `chromiumVersions`: Likely a mapping of major Chromium versions to certain Electron versions.
   - `fullChromiumVersions`: Another detailed mapping for Chromium versions matching with specific Electron releases.

2. **Functions**:
   - `electronToChromium(query)`: Converts an Electron version to one or more corresponding Chromium versions. It parses the version number and checks whether the query is more specific (e.g., 'x.y.z'), using the appropriate full version mapping if it is.
   
   - `chromiumToElectron(query)`: Maps a Chromium version back to an Electron version. Similar to `electronToChromium`, it distinguishes between major and fully specified versions.
   
   - `electronToBrowserList(query)`: Generates a string that can be used in a browser list indicating compatibility with a version of Chrome greater than or equal to the Chromium version that corresponds to a given Electron version.
   
   - `getQueryString(query)`: Standardizes the query input into a string format. Handles numeric input and certain defaults (e.g., interprets 1 as '1.0').

3. **Exports**: The module exports the mappings and the functions, making them available for use elsewhere.

Here's the rewritten code:

```javascript
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

function electronToChromium(query) {
  const number = standardizeQuery(query);
  return number.includes('.') && number.split('.').length > 2 
    ? fullVersions[number] 
    : versions[number] || undefined;
}

function chromiumToElectron(query) {
  const number = standardizeQuery(query);
  return number.includes('.') && number.split('.').length > 2 
    ? fullChromiumVersions[number] 
    : chromiumVersions[number] || undefined;
}

function electronToBrowserList(query) {
  const number = standardizeQuery(query);
  return versions[number] ? `Chrome >= ${versions[number]}` : undefined;
}

function standardizeQuery(query) {
  if (query === 1) return "1.0";
  return typeof query === 'number' ? String(query) : query;
}

module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  electronToBrowserList,
  chromiumToElectron
};
```