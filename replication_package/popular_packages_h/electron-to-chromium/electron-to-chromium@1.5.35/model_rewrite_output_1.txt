The provided Node.js code is designed to manage versions of Electron and Chromium. It defines several functions to convert between Electron and Chromium versions and provide mappings to browser versions. The functionality summary is as follows:

1. **`electronToChromium(query)`**: Accepts an Electron version `query` and returns a corresponding Chromium version. If the query has more than two version segments separated by a dot (i.e., a full version), it uses the `fullVersions` object; otherwise, it uses the `versions` object. If the version doesn't exist, it returns `undefined`.

2. **`chromiumToElectron(query)`**: Maps a Chromium version `query` back to an Electron version. It behaves similarly to `electronToChromium()` but uses `chromiumVersions` and `fullChromiumVersions`.

3. **`electronToBrowserList(query)`**: Accepts an Electron version `query` and returns the minimum required Chrome version for a browser list configuration string, formatted as "Chrome >= version". If the version isn't found, it returns `undefined`.

4. **`getQueryString(query)`**: Converts numeric queries to a string representation. If the query is `1`, it converts it to `"1.0"` to follow version convention. Generally, it ensures that all numeric inputs are processed as strings.

5. **`module.exports`**: The script exports the defined version maps and conversion functions, allowing them to be used in other parts of an application.

Here is a possible rewrite of this Node.js code:

```javascript
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

const electronToChromium = (query) => {
  const number = getQueryString(query);
  return number.includes('.') ? fullVersions[number] : versions[number];
};

const chromiumToElectron = (query) => {
  const number = getQueryString(query);
  return number.includes('.') ? fullChromiumVersions[number] : chromiumVersions[number];
};

const electronToBrowserList = (query) => {
  const number = getQueryString(query);
  return versions[number] ? `Chrome >= ${versions[number]}` : undefined;
};

const getQueryString = (query) => {
  if (query === 1) return "1.0";
  return typeof query === 'number' ? query.toString() : query;
};

module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  electronToBrowserList,
  chromiumToElectron
};
```