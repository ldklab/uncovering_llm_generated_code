The provided Node.js code is designed to map version numbers between different software products, specifically Electron and Chromium. The code uses four imported data files (`versions`, `full-versions`, `chromium-versions`, and `full-chromium-versions`) which are assumed to store mappings between Electron versions and Chromium versions, and vice versa. The core functionalities include:

1. **electronToChromium**: Converts an Electron version number into a Chromium version number. It first processes the input query to ensure it's a string and decides which data file to reference (either `fullVersions` for detailed versions or `versions` for general versions).

2. **chromiumToElectron**: Converts a Chromium version number back into an Electron version number, similarly analyzing the input query and referencing either `fullChromiumVersions` or `chromiumVersions`.

3. **electronToBrowserList**: Provides a string indicating the minimum compatible version of Chrome for a given Electron version, utilizing the `versions` mapping.

4. **getQueryString**: A helper function to normalize query inputs, specifically ensuring they are treated as strings and handling the edge case where the query is the number 1 by setting it to "1.0".

Lastly, these functions and data files are exported as part of the module for use in other parts of an application.

Below is the rewritten code, maintaining the same functionality and structure:

```javascript
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

function electronToChromium(query) {
  const number = getQueryString(query);
  return number.split('.').length > 2 ? fullVersions[number] : versions[number] || undefined;
}

function chromiumToElectron(query) {
  const number = getQueryString(query);
  return number.split('.').length > 2 ? fullChromiumVersions[number] : chromiumVersions[number] || undefined;
}

function electronToBrowserList(query) {
  const number = getQueryString(query);
  return versions[number] ? `Chrome >= ${versions[number]}` : undefined;
}

function getQueryString(query) {
  let number = query;
  if (query === 1) { number = "1.0"; }
  if (typeof query === 'number') { number = number.toString(); }
  return number;
}

module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  electronToBrowserList,
  chromiumToElectron
};
```