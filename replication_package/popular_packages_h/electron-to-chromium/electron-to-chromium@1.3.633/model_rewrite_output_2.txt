The provided Node.js code defines functionality for converting between Electron versions and Chromium versions and generating browser list configurations based on Electron versions. The code imports version mappings from four separate files and defines functions to handle the conversions based on these mappings. The core part of the code involves the following components:

1. **Imports**: The code imports mapping data from four files: `versions.js`, `full-versions.js`, `chromium-versions.js`, and `full-chromium-versions.js`. These files presumably contain version mappings for Electron and Chromium releases.

2. **Helper Functions**:
    - `getQueryString(query)`: Converts a query input into a string format suitable for further processing, dealing specifically with it if it's a number or the integer 1.

3. **Main Functions**:
    - `electronToChromium(query)`: Converts an Electron version (either a short or full version) to the corresponding Chromium version, using either `fullVersions` or `versions` mappings.
    - `chromiumToElectron(query)`: Converts a Chromium version to an Electron version using either `fullChromiumVersions` or `chromiumVersions`.
    - `electronToBrowserList(query)`: Builds a string for browser list configuration specifying the minimum supported version of Chrome based on an Electron version.

4. **Exports**: The module exports the mapping objects as well as the conversion functions so that other files can use this functionality.

Here is the rewritten code:

```javascript
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

const getQueryString = (query) => {
  if (query === 1) return "1.0";
  return typeof query === 'number' ? query.toString() : query;
};

const electronToChromium = (query) => {
  const versionString = getQueryString(query);
  return versionString.includes('.') ? fullVersions[versionString] : versions[versionString];
};

const chromiumToElectron = (query) => {
  const versionString = getQueryString(query);
  return versionString.includes('.') ? fullChromiumVersions[versionString] : chromiumVersions[versionString];
};

const electronToBrowserList = (query) => {
  const versionString = getQueryString(query);
  return versions[versionString] ? `Chrome >= ${versions[versionString]}` : undefined;
};

module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  chromiumToElectron,
  electronToBrowserList
};
```