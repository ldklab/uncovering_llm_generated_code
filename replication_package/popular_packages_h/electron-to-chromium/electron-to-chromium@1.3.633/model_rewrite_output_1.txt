The functionality of the provided Node.js code is to map version numbers between Electron, Chromium, and BrowserList. It imports version data and provides functions to convert version queries. Here's the breakdown:

1. **Imports**: It imports four objects representing different versions of Electron and Chromium:
   - `versions`: Basic Electron to Chromium versions.
   - `fullVersions`: Full Electron versions.
   - `chromiumVersions`: Basic Chromium to Electron versions.
   - `fullChromiumVersions`: Full Chromium versions.

2. **Functions**:
   - `getQueryString(query)`: Converts a query (which can be a number or a string) into a standardized string format. Specifically, if the query is a `1`, it converts it to `"1.0"`, and if it's a number, it converts it to a string.
   - `electronToChromium(query)`: Maps an Electron version number to a Chromium version. It outputs the full version if it has more than two number components (e.g., `1.0.0`). Otherwise, it uses a simpler version mapping.
   - `chromiumToElectron(query)`: Converts a Chromium version to an Electron version using a similar logic to `electronToChromium`.
   - `electronToBrowserList(query)`: Converts an Electron version to a BrowserList-compatible string in the form "Chrome >= version".

3. **Exports**: The module exports all the imported version objects and the conversion functions to be used in other parts of the application.

Below is the rewritten Node.js code maintaining the same functionality:

```javascript
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

const getQueryString = (query) => {
  return typeof query === 'number' ? query.toString() : query === 1 ? "1.0" : query;
};

const electronToChromium = (query) => {
  const number = getQueryString(query);
  return number.split('.').length > 2 ? fullVersions[number] : versions[number] || undefined;
};

const chromiumToElectron = (query) => {
  const number = getQueryString(query);
  return number.split('.').length > 2 ? fullChromiumVersions[number] : chromiumVersions[number] || undefined;
};

const electronToBrowserList = (query) => {
  const number = getQueryString(query);
  return versions[number] ? `Chrome >= ${versions[number]}` : undefined;
};

module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  chromiumToElectron,
  electronToBrowserList
};
```