The provided Node.js code is designed to export certain components from various modules so that they can be used elsewhere in the application. Here's a breakdown of its functionality:

1. **Module Re-exports**: The code exports all exports from the modules "./lib" and "./parser-options" using the `__exportStar` function. This function takes all exports from these modules and re-exports them, making them available to the code that imports this module.

2. **Named Exports**: The code specifically exports named components, `AST_NODE_TYPES` and `AST_TOKEN_TYPES`, from their respective modules, "./ast-node-types" and "./ast-token-types". These named exports are explicitly defined, and their properties are made available under the same names in the current module.

3. **Namespace Import**: The code imports everything from the "./ts-estree" module and assigns it to a property called `TSESTree`. This is done using the `__importStar` function, which brings in all the exports of the module under a single namespace.

4. **CommonJS Wrappers**: The code provides functions like `__createBinding`, `__setModuleDefault`, `__exportStar`, and `__importStar`, which mimic ES6 module behaviors in a CommonJS environment, making the module compatible with both module systems.

Here is a possible rewrite of the code:

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });

const astNodeTypes = require("./ast-node-types");
const astTokenTypes = require("./ast-token-types");
const lib = require("./lib");
const parserOptions = require("./parser-options");
const tsEstree = require("./ts-estree");

exports.AST_NODE_TYPES = astNodeTypes.AST_NODE_TYPES;
exports.AST_TOKEN_TYPES = astTokenTypes.AST_TOKEN_TYPES;

Object.keys(lib).forEach(key => {
    if (key !== "default" && !Object.prototype.hasOwnProperty.call(exports, key)) {
        exports[key] = lib[key];
    }
});

Object.keys(parserOptions).forEach(key => {
    if (key !== "default" && !Object.prototype.hasOwnProperty.call(exports, key)) {
        exports[key] = parserOptions[key];
    }
});

exports.TSESTree = tsEstree;
```