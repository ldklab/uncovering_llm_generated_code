The provided Node.js code defines an `invariant` function which is a utility to assert conditions in the code. If the given condition is not met (`condition` is falsy), it throws an error with a specific message. The function behaves differently depending on the environment:

1. In a production environment (when `process.env.NODE_ENV` is set to `'production'`), it throws a generic error with the message 'Invariant failed'.
2. In non-production environments, it generates a more detailed error message. If a `message` is provided as a function, it calls this function to get the message; otherwise, it uses the message directly. Then it throws an error including the prefix 'Invariant failed'.

Here's the rewritten code:

```javascript
'use strict';

const isProduction = process.env.NODE_ENV === 'production';
const prefix = 'Invariant failed';

function invariant(condition, message) {
    if (condition) return;

    if (isProduction) {
        throw new Error(prefix);
    }

    const providedMessage = typeof message === 'function' ? message() : message;
    const errorMessage = providedMessage ? `${prefix}: ${providedMessage}` : prefix;

    throw new Error(errorMessage);
}

module.exports = invariant;
```