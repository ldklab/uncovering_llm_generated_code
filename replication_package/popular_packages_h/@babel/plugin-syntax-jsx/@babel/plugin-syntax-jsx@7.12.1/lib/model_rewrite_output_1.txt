The given Node.js code is for a Babel plugin that enables JSX syntax parsing, unless the TypeScript plugin is already in use. Here's a breakdown of its functionality:

1. The file is set up as a module with `exports` and uses ES6 modern import and export syntax.
2. It imports a utility function `declare` from Babel's `@babel/helper-plugin-utils`.
3. The plugin is created by calling the `declare` function, ensuring that it runs with the appropriate Babel API version (minimum version 7).
4. The plugin, named `syntax-jsx`, modifies parser options to add support for JSX syntax:
   - It checks the existing plugins to see if "typescript" is present. If "typescript" is found, it skips any modification because "typescript" supports JSX inherently.
   - If "typescript" is not found, it appends "jsx" to the list of plugins in `parserOpts`, ensuring that JSX syntax can be parsed.

Here is the rewritten code, structured similarly to the original:

```javascript
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const { declare } = require("@babel/helper-plugin-utils");

const _default = declare(api => {
  api.assertVersion(7);

  return {
    name: "syntax-jsx",

    manipulateOptions(opts, parserOpts) {
      if (parserOpts.plugins.some(plugin => (Array.isArray(plugin) ? plugin[0] : plugin) === "typescript")) {
        return;
      }

      parserOpts.plugins.push("jsx");
    }
  };
});

exports.default = _default;
```