The Node.js code is a Babel plugin for enabling JSX syntax support during the parsing phase of JavaScript compilation. It uses the Babel helper utility function `declare` to construct the plugin. The plugin's key functionality lies within the `manipulateOptions` method:

1. It first checks if the user is using a version of Babel that is version 7 or higher.
2. The plugin is named "syntax-jsx".
3. When manipulating parser options, the plugin checks the existing parser plugins to determine if "typescript" is enabled. If "typescript" is found, the plugin exits without doing anything further. This prevents conflicts with TypeScript, which has its handling of JSX.
4. If "typescript" is not detected in the parser plugins, it adds the "jsx" plugin to enable JSX syntax parsing.

Here is a rewritten version of the code:

```js
"use strict";

const { declare } = require("@babel/helper-plugin-utils");

const myJsxSyntaxPlugin = declare(api => {
  api.assertVersion(7);
  
  return {
    name: "syntax-jsx",

    manipulateOptions(opts, parserOpts) {
      // Check if TypeScript is already a parser plugin
      const hasTypeScript = parserOpts.plugins.some(plugin => 
        (Array.isArray(plugin) ? plugin[0] : plugin) === "typescript"
      );

      if (!hasTypeScript) {
        // Add JSX plugin if TypeScript is not present
        parserOpts.plugins.push("jsx");
      }
    }
  };
});

module.exports = myJsxSyntaxPlugin;
```