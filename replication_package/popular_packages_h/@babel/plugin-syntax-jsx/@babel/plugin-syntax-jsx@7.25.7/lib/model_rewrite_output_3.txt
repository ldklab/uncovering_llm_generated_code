The provided Node.js code defines a Babel plugin that adds JSX syntax support to the Babel parser options, but only if the TypeScript plugin is not already being used. Here's a step-by-step explanation of its functionality:

1. **Export Definition**: The code starts by defining a CommonJS style export, which is being assigned the result of a Babel helper function.

2. **Declare Function**: It uses the `declare` function from `@babel/helper-plugin-utils`. This is a common utility for creating Babel plugins that help ensure compatibility with a specific version of Babel.

3. **Version Check**: It checks that the version of Babel being used is version 7 using `api.assertVersion(7)`.

4. **Babel Plugin Definition**: The plugin is named "syntax-jsx".

5. **Manipulate Parser Options**:
   - It includes a function `manipulateOptions`, which takes two arguments: `opts` (options for the plugin itself) and `parserOpts` (options for Babel's parser).
   - This function checks if the `typescript` plugin is present. It does so by iterating over `parserOpts.plugins`. If any plugin named "typescript" is found, it does nothing and exits.
   - Otherwise, it appends the "jsx" plugin to `parserOpts.plugins` to ensure Babel can parse JSX syntax correctly.

6. **Source Map**: At the end, there is a comment that indicates a source map file which can be used for debugging purposes.

Here's the rewritten code:

```javascript
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const { declare } = require("@babel/helper-plugin-utils");

exports.default = declare((api) => {
  api.assertVersion(7);

  return {
    name: "syntax-jsx",
    manipulateOptions(opts, parserOpts) {
      const hasTypeScriptPlugin = parserOpts.plugins.some(plugin =>
        Array.isArray(plugin) ? plugin[0] === "typescript" : plugin === "typescript"
      );

      if (!hasTypeScriptPlugin) {
        parserOpts.plugins.push("jsx");
      }
    }
  };
});

//# sourceMappingURL=index.js.map
```