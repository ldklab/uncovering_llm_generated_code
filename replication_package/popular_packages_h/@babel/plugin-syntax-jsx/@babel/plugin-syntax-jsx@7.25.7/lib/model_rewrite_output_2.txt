The given Node.js code is a Babel plugin that modifies the behavior of the Babel parser. This plugin specifically targets the handling of JSX syntax. Here's an explanation of the functionality:

1. **Module Exports:** The code defines and exports a default module using ES6 module syntax.

2. **Babel Plugin Utils:** It utilizes the `@babel/helper-plugin-utils` to leverage the `declare` function which is used to set up a Babel plugin with a known API version.

3. **Plugin Definition:** The plugin is named "syntax-jsx", and it manipulates the parser options to support JSX syntax.

4. **Version Assertion:** The plugin asserts that the Babel version is 7, ensuring compatibility with the specific version of Babel's API.

5. **Manipulate Options:** The `manipulateOptions` function checks if the parser options contain the "typescript" plugin. If the "typescript" plugin is already present, it does nothing. Otherwise, it adds the "jsx" plugin to the list of parser plugins, enabling support for JSX syntax.

Here's the rewritten version of the code:

```javascript
"use strict";

import { declare } from "@babel/helper-plugin-utils";

export default declare(api => {
  api.assertVersion(7);

  return {
    name: "syntax-jsx",
    manipulateOptions(opts, parserOpts) {
      if (!parserOpts.plugins.some(plugin => {
        return Array.isArray(plugin) ? plugin[0] === "typescript" : plugin === "typescript";
      })) {
        parserOpts.plugins.push("jsx");
      }
    }
  };
});
```
