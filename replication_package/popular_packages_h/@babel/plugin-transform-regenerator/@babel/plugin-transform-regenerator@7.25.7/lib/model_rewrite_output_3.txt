The provided Node.js code is a Babel plugin that modifies JavaScript code using the `babel-helper-plugin-utils` and `regenerator-transform` libraries. It specifically targets call expressions, checking if the `callee` in the expression is a member of `regeneratorRuntime`. If so, it replaces the `regeneratorRuntime` object in such a way to assist with the transformation of generator functions into regenerator runtime syntax.

Here's a rewritten version of the code that maintains the same functionality:

```javascript
"use strict";

import { declare } from "@babel/helper-plugin-utils";
import regeneratorTransform from "regenerator-transform";

export default declare(({ types: t, assertVersion }) => {
  assertVersion(7);

  return {
    name: "transform-regenerator",
    inherits: regeneratorTransform,
    visitor: {
      CallExpression(path) {
        if (this.availableHelper?.("regeneratorRuntime")) {
          const callee = path.get("callee");
          
          if (!callee.isMemberExpression()) return;

          const obj = callee.get("object");

          if (obj.isIdentifier({ name: "regeneratorRuntime" })) {
            const helper = this.addHelper("regeneratorRuntime");

            if (t.isArrowFunctionExpression(helper)) {
              obj.replaceWith(helper.body);
            } else {
              obj.replaceWith(t.callExpression(helper, []));
            }
          }
        }
      }
    }
  };
});
```

This version uses ES module syntax for imports and exports, utilizes optional chaining, and includes the same logic to transform the targeted code constructs. The functionality remains the same as the original code.