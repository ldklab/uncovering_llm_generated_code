The given Node.js code defines a Babel preset for transforming React JSX syntax. It utilizes various Babel plugins to transform JSX into JavaScript that is understood by browsers. Here's a quick breakdown of its functionality:

1. **Imports**: Several @babel packages and plugins are imported to use in the preset. These include plugins to transform JSX, add display names to React components, and optimize React code with pure annotations.

2. **`_interopDefault` Function**: A helper function ensures compatibility for both CommonJS and ES Module imports, particularly handling the default export of these packages.

3. **`normalizeOptions` Function**: A function is defined to structure and validate the options passed to the preset. It assigns default values for certain options like `pragma`, `pragmaFrag`, and `runtime`.

4. **Preset Declaration**: Using `helperPluginUtils.declarePreset`, a preset is declared which receives Babel's API object and options. It ensures Babel is at version 7 or higher and uses `normalizeOptions` to parse the given options. It decides which plugins to include based on the environment (development or production) and the options.

5. **Export**: The preset configuration is exported as default for use with Babel.

Here is the rewritten code:

```javascript
'use strict';

const { declarePreset } = require('@babel/helper-plugin-utils');
const transformReactJSX = require('@babel/plugin-transform-react-jsx');
const transformReactJSXDevelopment = require('@babel/plugin-transform-react-jsx-development');
const transformReactDisplayName = require('@babel/plugin-transform-react-display-name');
const transformReactPure = require('@babel/plugin-transform-react-pure-annotations');
const { OptionValidator } = require('@babel/helper-validator-option');

function _interopDefault(e) {
  return e && e.__esModule ? e : { default: e };
}

const transformReactJSX__default = _interopDefault(transformReactJSX);
const transformReactJSXDevelopment__default = _interopDefault(transformReactJSXDevelopment);
const transformReactDisplayName__default = _interopDefault(transformReactDisplayName);
const transformReactPure__default = _interopDefault(transformReactPure);

new OptionValidator("@babel/preset-react");

function normalizeOptions(options = {}) {
  let { pragma, pragmaFrag } = options;
  const {
    pure,
    throwIfNamespace = true,
    runtime = "classic",
    importSource,
    useBuiltIns,
    useSpread
  } = options;

  if (runtime === "classic") {
    pragma = pragma || "React.createElement";
    pragmaFrag = pragmaFrag || "React.Fragment";
  }
  
  const development = !!options.development;

  return {
    development,
    importSource,
    pragma,
    pragmaFrag,
    pure,
    runtime,
    throwIfNamespace,
    useBuiltIns,
    useSpread
  };
}

const index = declarePreset((api, opts) => {
  api.assertVersion(7);

  const { development, importSource, pragma, pragmaFrag, pure, runtime, throwIfNamespace } = normalizeOptions(opts);

  return {
    plugins: [
      [
        development ? transformReactJSXDevelopment__default.default : transformReactJSX__default.default, 
        {
          importSource,
          pragma,
          pragmaFrag,
          runtime,
          throwIfNamespace,
          pure,
          useBuiltIns: !!opts.useBuiltIns,
          useSpread: opts.useSpread
        }
      ],
      transformReactDisplayName__default.default,
      pure !== false && transformReactPure__default.default
    ].filter(Boolean)
  };
});

exports.default = index;
//# sourceMappingURL=index.js.map
```