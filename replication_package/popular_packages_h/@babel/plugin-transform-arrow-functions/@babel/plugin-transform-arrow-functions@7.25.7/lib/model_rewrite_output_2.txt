The given Node.js code is a Babel plugin that transforms arrow functions into regular function expressions. The code uses `@babel/helper-plugin-utils` to define a Babel plugin with a specific behavior:

1. It ensures compatibility with Babel version 7 by asserting the Babel version.
2. Takes an option called "spec" and uses it to determine if new arrow functions are allowed.
3. Transforms all arrow functions it encounters in the AST (Abstract Syntax Tree) by converting them to function expressions.
4. The plugin's behavior is defined under the `visitor` object, where it specifically handles nodes of type `ArrowFunctionExpression`.

Here's a possible rewrite of the provided code:

```javascript
"use strict";

const { declare } = require("@babel/helper-plugin-utils");

module.exports = declare((api, options) => {
  api.assertVersion(7);

  const noNewArrows = api.assumption("noNewArrows") !== undefined ? api.assumption("noNewArrows") : !options.spec;

  return {
    name: "transform-arrow-functions",
    visitor: {
      ArrowFunctionExpression(path) {
        if (!path.isArrowFunctionExpression()) return;

        path.arrowFunctionToExpression({
          allowInsertArrow: false,
          noNewArrows,
          specCompliant: !noNewArrows
        });
      }
    }
  };
});
```
