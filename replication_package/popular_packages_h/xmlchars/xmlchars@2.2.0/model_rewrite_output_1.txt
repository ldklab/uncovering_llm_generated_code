The provided Node.js code is defining a module with utilities for XML character classes, specifically targeting XML 1.0 and XML namespaces (XMLNS) 1.0. The module is structured to support different editions of the XML specification:

1. **XML 1.0 Utilities**:
   - Supports both the 4th and 5th editions.
   - Provides utilities like regular expression fragments, regex validations, and character lists.
   - Exposes functions to validate whether code points match specific XML productions (e.g., `CHAR`, `S`, `NAME_START_CHAR`, etc.).

2. **XMLNS 1.0 Utilities**:
   - Focuses on the 3rd edition.
   - Similar to the XML 1.0 utilities, it provides fragments, regex validations, and functions for namespace-specific character classes.

3. **Deprecation Warning**: The module logs a console warning indicating its deprecation and suggests a new import path structure for using these utilities.

The code separates utilities based on XML and XMLNS specifications, further organizing them by their respective editions. It defines functions and regular expressions to assist with character validation according to XML standards, leveraging imported modules (`ed4`, `ed5`, `nsed3`) for implementation details.

Here is a possible rewrite of the given code:

```javascript
"use strict";
/**
 * Character classes for XML.
 * @deprecated since 1.3.0. Import from the ``xml`` and ``xmlns`` hierarchies instead.
 * @author Louis-Dominique Dubeau
 * @license MIT
 * @copyright Louis-Dominique Dubeau
 */
Object.defineProperty(exports, "__esModule", { value: true });
const ed4 = require("./xml/1.0/ed4");
const ed5 = require("./xml/1.0/ed5");
const nsed3 = require("./xmlns/1.0/ed3");

console.warn("DEPRECATION WARNING: the xmlchar *module* is deprecated: please replace e.g. require('xmlchars') with require('xmlchars/xml/...')");

const XML_1_0 = {
  ED5: {
    fragments: {
      CHAR: ed5.CHAR,
      S: ed5.S,
      NAME_START_CHAR: ed5.NAME_START_CHAR,
      NAME_CHAR: ed5.NAME_CHAR,
    },
    regexes: {
      CHAR: ed5.CHAR_RE,
      S: ed5.S_RE,
      NAME_START_CHAR: ed5.NAME_START_CHAR_RE,
      NAME_CHAR: ed5.NAME_CHAR_RE,
      NAME: ed5.NAME_RE,
      NMTOKEN: ed5.NMTOKEN_RE,
    },
    lists: {
      S: ed5.S_LIST,
    },
    isChar: ed5.isChar,
    isS: ed5.isS,
    isNameStartChar: ed5.isNameStartChar,
    isNameChar: ed5.isNameChar,
  },
  ED4: {
    fragments: {
      CHAR: ed4.CHAR,
      S: ed4.S,
      BASE_CHAR: ed4.BASE_CHAR,
      IDEOGRAPHIC: ed4.IDEOGRAPHIC,
      COMBINING_CHAR: ed4.COMBINING_CHAR,
      DIGIT: ed4.DIGIT,
      EXTENDER: ed4.EXTENDER,
      LETTER: ed4.LETTER,
      NAME_CHAR: ed4.NAME_CHAR,
    },
    regexes: {
      CHAR: ed4.CHAR_RE,
      S: ed4.S_RE,
      BASE_CHAR: ed4.BASE_CHAR_RE,
      IDEOGRAPHIC: ed4.IDEOGRAPHIC_RE,
      COMBINING_CHAR: ed4.COMBINING_CHAR_RE,
      DIGIT: ed4.DIGIT_RE,
      EXTENDER: ed4.EXTENDER_RE,
      LETTER: ed4.LETTER_RE,
      NAME_CHAR: ed4.NAME_CHAR_RE,
      NAME: ed4.NAME_RE,
      NMTOKEN: ed4.NMTOKEN_RE,
    },
  },
};

const XMLNS_1_0 = {
  ED3: {
    fragments: {
      NC_NAME_START_CHAR: nsed3.NC_NAME_START_CHAR,
      NC_NAME_CHAR: nsed3.NC_NAME_CHAR,
    },
    regexes: {
      NC_NAME_START_CHAR: nsed3.NC_NAME_START_CHAR_RE,
      NC_NAME_CHAR: nsed3.NC_NAME_CHAR_RE,
      NC_NAME: nsed3.NC_NAME_RE,
    },
    isNCNameStartChar: nsed3.isNCNameStartChar,
    isNCNameChar: nsed3.isNCNameChar,
  },
};

exports.XML_1_0 = XML_1_0;
exports.XMLNS_1_0 = XMLNS_1_0;
```