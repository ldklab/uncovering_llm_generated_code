The functionality of the provided Node.js code is to determine if a given value is a regular expression (regex) object. It accomplishes this differently depending on whether the environment supports the `Symbol.toStringTag` property. 

1. **With `Symbol.toStringTag` support**: The code uses a series of checks and a try-catch mechanism to see if executing a regex-like object with a known bad stringifier throws an expected marker exception, indicating that the value is indeed a regex.

2. **Without `Symbol.toStringTag` support**: It falls back on using the object's string representation via `Object.prototype.toString.call()` and checks if it matches the known "[object RegExp]" string.

Here's a rewritten version of the code based on the explanation:

```javascript
'use strict';

const callBound = require('call-bind/callBound');
const hasToStringTag = require('has-tostringtag/shams')();

let has;
let executeRegExp;
let regexExceptionMarker;
let invalidStringifier;

if (hasToStringTag) {
	has = callBound('Object.prototype.hasOwnProperty');
	executeRegExp = callBound('RegExp.prototype.exec');
	regexExceptionMarker = {};

	const throwRegexException = function () {
		throw regexExceptionMarker;
	};
	invalidStringifier = {
		toString: throwRegexException,
		valueOf: throwRegexException
	};

	if (typeof Symbol.toPrimitive === 'symbol') {
		invalidStringifier[Symbol.toPrimitive] = throwRegexException;
	}
}

const objectToString = callBound('Object.prototype.toString');
const getObjectPropertyDescriptor = Object.getOwnPropertyDescriptor;
const classOfRegex = '[object RegExp]';

module.exports = hasToStringTag
	? function isRegex(value) {
		if (!value || typeof value !== 'object') {
			return false;
		}

		const descriptor = getObjectPropertyDescriptor(value, 'lastIndex');
		const hasLastIndexBoolean = descriptor && has(descriptor, 'value');
		if (!hasLastIndexBoolean) {
			return false;
		}

		try {
			executeRegExp(value, invalidStringifier);
		} catch (error) {
			return error === regexExceptionMarker;
		}
	}
	: function isRegex(value) {
		if (!value || (typeof value !== 'object' && typeof value !== 'function')) {
			return false;
		}

		return objectToString(value) === classOfRegex;
	};
```