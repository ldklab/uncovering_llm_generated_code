The provided Node.js code defines a class `SVGO` used to optimize SVG vector graphics files. The main functionalities include:

1. **Initialization**: The `SVGO` class is instantiated with a configuration which is processed through `CONFIG`.

2. **Optimization Process**: The `optimize` method accepts an SVG string and optimization options (info object). It returns a promise that optimizes the SVG after potentially multiple passes:
   - Checks for configuration errors and rejects the promise if any.
   - Performs one or more optimization passes depending on the `multipass` configuration setting (`maxPassCount` is 10 if true).
   - Calls a helper function `_optimizeOnce` which does a single optimization pass.
   - If `datauri` configuration is used, encodes the SVG data as a URI.
   - Upon successful optimization, resolves the promise with the optimized SVG data.

3. **Single Optimization Pass**: The `_optimizeOnce` method processes the SVG:
   - Converts SVG to a JS object using `SVG2JS`.
   - Processes the SVG data through plugins.
   - Converts the JS object back to an SVG string using `JS2SVG`.

4. **SVG Content Item Factory**: The `createContentItem` method creates a JSAPI content item from provided data.

5. **ES Module Compatibility**: The class is exported with both CommonJS and ES module default exports.

Here you have the rewritten code:

```javascript
'use strict';

const CONFIG = require('./svgo/config.js');
const SVG2JS = require('./svgo/svg2js.js');
const PLUGINS = require('./svgo/plugins.js');
const JSAPI = require('./svgo/jsAPI.js');
const { encodeSVGDatauri } = require('./svgo/tools.js');
const JS2SVG = require('./svgo/js2svg.js');

class SVGO {
    constructor(config) {
        this.config = CONFIG(config);
    }

    optimize(svgstr, info = {}) {
        return new Promise((resolve, reject) => {
            if (this.config.error) {
                return reject(this.config.error);
            }

            const config = this.config;
            const maxPassCount = config.multipass ? 10 : 1;
            let counter = 0;
            let prevResultSize = Number.POSITIVE_INFINITY;

            const optimizeOnceCallback = (svgjs) => {
                if (svgjs.error) {
                    return reject(svgjs.error);
                }

                info.multipassCount = counter;

                if (++counter < maxPassCount && svgjs.data.length < prevResultSize) {
                    prevResultSize = svgjs.data.length;
                    this._optimizeOnce(svgjs.data, info, optimizeOnceCallback);
                } else {
                    if (config.datauri) {
                        svgjs.data = encodeSVGDatauri(svgjs.data, config.datauri);
                    }
                    if (info.path) {
                        svgjs.path = info.path;
                    }
                    resolve(svgjs);
                }
            };

            this._optimizeOnce(svgstr, info, optimizeOnceCallback);
        });
    }

    _optimizeOnce(svgstr, info, callback) {
        const config = this.config;

        SVG2JS(svgstr, (svgjs) => {
            if (svgjs.error) {
                return callback(svgjs);
            }

            svgjs = PLUGINS(svgjs, info, config.plugins);
            callback(JS2SVG(svgjs, config.js2svg));
        });
    }

    createContentItem(data) {
        return new JSAPI(data);
    }
}

SVGO.Config = CONFIG;

module.exports = SVGO;
module.exports.default = SVGO;
```