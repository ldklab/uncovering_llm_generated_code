The Node.js code defines a module that exports a function named `promiseRetry`. This function allows the user to repeatedly attempt an asynchronous operation (typically a Promise) with custom retry logic. 

Here's a breakdown of the code's functionality:

1. **Dependencies**: 
   - It imports `errcode` to create error objects with codes and additional properties.
   - It imports `retry` to handle retry operations.

2. **Helper Functions**:
   - `isRetryError`: This function checks if a given error is a retry error, specifically if it has a code `'EPROMISERETRY'` and a `'retried'` property.

3. **`promiseRetry` Function**:
   - It handles the retry mechanism for asynchronous operations.
   - The function accepts two parameters: `fn` (a function) and `options` (configuration for retry).
   - If `fn` is an object and `options` is a function, it swaps them to handle a different calling signature.
   - It initializes a retry operation using the passed `options`.
   - Returns a Promise that attempts to resolve the operation. It uses the `retry` library to repeatedly attempt the operation until it either succeeds or the retry condition fails.
   - If the `fn` callback results in an error marked for retry (`EPROMISERETRY`), the operation is retried.
   - If the retry limit is reached without success, the Promise is rejected with the error.

Here is the rewritten version of the Node.js code:

```javascript
'use strict';

const errcode = require('err-code');
const retry = require('retry');

const hasOwn = Object.prototype.hasOwnProperty;

function isRetryError(err) {
    return err && err.code === 'EPROMISERETRY' && hasOwn.call(err, 'retried');
}

function promiseRetry(fn, options) {
    let temp;
    let operation;

    if (typeof fn === 'object' && typeof options === 'function') {
        temp = options;
        options = fn;
        fn = temp;
    }

    operation = retry.operation(options);

    return new Promise((resolve, reject) => {
        operation.attempt((number) => {
            Promise.resolve()
                .then(() => fn((err) => {
                    if (isRetryError(err)) {
                        err = err.retried;
                    }
                    throw errcode(new Error('Retrying'), 'EPROMISERETRY', { retried: err });
                }, number))
                .then(resolve, (err) => {
                    if (isRetryError(err)) {
                        err = err.retried;
                        if (operation.retry(err || new Error())) {
                            return;
                        }
                    }
                    reject(err);
                });
        });
    });
}

module.exports = promiseRetry;
```