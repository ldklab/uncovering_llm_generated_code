The provided Node.js code defines a function `mergeDescriptors` that copies property descriptors from one object (`source`) to another (`destination`). It allows an optional parameter `overwrite` to control whether existing properties in the `destination` object should be overwritten by properties from the `source`. If `overwrite` is set to `false`, it will skip properties that are already present in the `destination`. The function uses `Object.getOwnPropertyNames` to retrieve all property names (including non-enumerable ones) from the `source` object, then retrieves each property's descriptor using `Object.getOwnPropertyDescriptor`, and defines the property on the `destination` object using `Object.defineProperty`.

Here's a rewritten version of the code:

```javascript
'use strict';

function mergeDescriptors(destination, source, overwrite = true) {
	if (!destination) {
		throw new TypeError('The `destination` argument is required.');
	}

	if (!source) {
		throw new TypeError('The `source` argument is required.');
	}

	Object.getOwnPropertyNames(source).forEach(name => {
		if (overwrite || !Object.hasOwn(destination, name)) {
			const descriptor = Object.getOwnPropertyDescriptor(source, name);
			Object.defineProperty(destination, name, descriptor);
		}
	});

	return destination;
}

module.exports = mergeDescriptors;
```