The provided Node.js code is a module that exports multiple functionalities from different files within a package. This pattern is often used to simplify imports for users of the package by consolidating multiple sub-module exports into one main module export. It uses the `__exportStar` function to import and re-export everything from the specified files or modules, excluding any default exports, into the current module's exports object. The code starts by ensuring that it is running in strict mode to enforce stricter parsing and error handling in JavaScript. 

Here's a possible rewrite of the Node.js code using modern JavaScript syntax:

```javascript
"use strict";

// Export everything from various modules to simplify package import structure.
export * from "./common/attributes";
export * from "./common/ConsoleLogger";
export * from "./common/global-error-handler";
export * from "./common/logging-error-handler";
export * from "./common/NoopLogger";
export * from "./common/time";
export * from "./common/types";
export * from "./ExportResult";
export * from "./version";
export * from "./context/propagation/composite";
export * from "./context/propagation/HttpTraceContext";
export * from "./context/propagation/types";
export * from "./baggage/propagation/HttpBaggage";
export * from "./platform";
export * from "./trace/NoRecordingSpan";
export * from "./trace/Plugin";
export * from "./trace/sampler/AlwaysOffSampler";
export * from "./trace/sampler/AlwaysOnSampler";
export * from "./trace/sampler/ParentBasedSampler";
export * from "./trace/sampler/TraceIdRatioBasedSampler";
export * from "./trace/TraceState";
export * from "./trace/IdGenerator";
export * from "./utils/deep-merge";
export * from "./utils/url";
export * from "./utils/wrap";
```

This rewrite utilizes ES6 module syntax (`export * from`) to achieve the same functionality, assuming this is being used in an environment that supports ES6 modules (such as recent versions of Node.js with the `"type": "module"` specified in `package.json`, or transpiled code). The functionality remains the same, where various modules are re-exported to be available as part of this module's API.