"use strict";

Object.defineProperty(exports, "__esModule", { value: true });

const baggageUtils = require("./baggage/utils");
const W3CBaggagePropagator_1 = require("./baggage/propagation/W3CBaggagePropagator");
const anchored_clock_1 = require("./common/anchored-clock");
const attributes_1 = require("./common/attributes");
const global_error_handler_1 = require("./common/global-error-handler");
const logging_error_handler_1 = require("./common/logging-error-handler");
const time_1 = require("./common/time");
const hex_to_binary_1 = require("./common/hex-to-binary");
const ExportResult_1 = require("./ExportResult");
const platform_1 = require("./platform");
const composite_1 = require("./propagation/composite");
const W3CTraceContextPropagator_1 = require("./trace/W3CTraceContextPropagator");
const rpc_metadata_1 = require("./trace/rpc-metadata");
const AlwaysOffSampler_1 = require("./trace/sampler/AlwaysOffSampler");
const AlwaysOnSampler_1 = require("./trace/sampler/AlwaysOnSampler");
const ParentBasedSampler_1 = require("./trace/sampler/ParentBasedSampler");
const TraceIdRatioBasedSampler_1 = require("./trace/sampler/TraceIdRatioBasedSampler");
const suppress_tracing_1 = require("./trace/suppress-tracing");
const TraceState_1 = require("./trace/TraceState");
const environment_1 = require("./utils/environment");
const merge_1 = require("./utils/merge");
const sampling_1 = require("./utils/sampling");
const timeout_1 = require("./utils/timeout");
const url_1 = require("./utils/url");
const wrap_1 = require("./utils/wrap");
const callback_1 = require("./utils/callback");
const version_1 = require("./version");
const exporter_1 = require("./internal/exporter");

exports.W3CBaggagePropagator = W3CBaggagePropagator_1.W3CBaggagePropagator;
exports.AnchoredClock = anchored_clock_1.AnchoredClock;
exports.isAttributeKey = attributes_1.isAttributeKey;
exports.isAttributeValue = attributes_1.isAttributeValue;
exports.sanitizeAttributes = attributes_1.sanitizeAttributes;
exports.globalErrorHandler = global_error_handler_1.globalErrorHandler;
exports.setGlobalErrorHandler = global_error_handler_1.setGlobalErrorHandler;
exports.loggingErrorHandler = logging_error_handler_1.loggingErrorHandler;
exports.addHrTimes = time_1.addHrTimes;
exports.getTimeOrigin = time_1.getTimeOrigin;
exports.hrTime = time_1.hrTime;
exports.hrTimeDuration = time_1.hrTimeDuration;
exports.hrTimeToMicroseconds = time_1.hrTimeToMicroseconds;
exports.hrTimeToMilliseconds = time_1.hrTimeToMilliseconds;
exports.hrTimeToNanoseconds = time_1.hrTimeToNanoseconds;
exports.hrTimeToTimeStamp = time_1.hrTimeToTimeStamp;
exports.isTimeInput = time_1.isTimeInput;
exports.isTimeInputHrTime = time_1.isTimeInputHrTime;
exports.millisToHrTime = time_1.millisToHrTime;
exports.timeInputToHrTime = time_1.timeInputToHrTime;
exports.hexToBinary = hex_to_binary_1.hexToBinary;
exports.ExportResultCode = ExportResult_1.ExportResultCode;
exports.baggageUtils = baggageUtils;
exports.RandomIdGenerator = platform_1.RandomIdGenerator;
exports.SDK_INFO = platform_1.SDK_INFO;
exports._globalThis = platform_1._globalThis;
exports.getEnv = platform_1.getEnv;
exports.getEnvWithoutDefaults = platform_1.getEnvWithoutDefaults;
exports.hexToBase64 = platform_1.hexToBase64;
exports.otperformance = platform_1.otperformance;
exports.unrefTimer = platform_1.unrefTimer;
exports.CompositePropagator = composite_1.CompositePropagator;
exports.TRACE_PARENT_HEADER = W3CTraceContextPropagator_1.TRACE_PARENT_HEADER;
exports.TRACE_STATE_HEADER = W3CTraceContextPropagator_1.TRACE_STATE_HEADER;
exports.W3CTraceContextPropagator = W3CTraceContextPropagator_1.W3CTraceContextPropagator;
exports.parseTraceParent = W3CTraceContextPropagator_1.parseTraceParent;
exports.RPCType = rpc_metadata_1.RPCType;
exports.deleteRPCMetadata = rpc_metadata_1.deleteRPCMetadata;
exports.getRPCMetadata = rpc_metadata_1.getRPCMetadata;
exports.setRPCMetadata = rpc_metadata_1.setRPCMetadata;
exports.AlwaysOffSampler = AlwaysOffSampler_1.AlwaysOffSampler;
exports.AlwaysOnSampler = AlwaysOnSampler_1.AlwaysOnSampler;
exports.ParentBasedSampler = ParentBasedSampler_1.ParentBasedSampler;
exports.TraceIdRatioBasedSampler = TraceIdRatioBasedSampler_1.TraceIdRatioBasedSampler;
exports.isTracingSuppressed = suppress_tracing_1.isTracingSuppressed;
exports.suppressTracing = suppress_tracing_1.suppressTracing;
exports.unsuppressTracing = suppress_tracing_1.unsuppressTracing;
exports.TraceState = TraceState_1.TraceState;
exports.DEFAULT_ATTRIBUTE_COUNT_LIMIT = environment_1.DEFAULT_ATTRIBUTE_COUNT_LIMIT;
exports.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = environment_1.DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;
exports.DEFAULT_ENVIRONMENT = environment_1.DEFAULT_ENVIRONMENT;
exports.DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = environment_1.DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT;
exports.DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = environment_1.DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT;
exports.parseEnvironment = environment_1.parseEnvironment;
exports.merge = merge_1.merge;
exports.TracesSamplerValues = sampling_1.TracesSamplerValues;
exports.TimeoutError = timeout_1.TimeoutError;
exports.callWithTimeout = timeout_1.callWithTimeout;
exports.isUrlIgnored = url_1.isUrlIgnored;
exports.urlMatches = url_1.urlMatches;
exports.isWrapped = wrap_1.isWrapped;
exports.BindOnceFuture = callback_1.BindOnceFuture;
exports.VERSION = version_1.VERSION;
exports.internal = {
    _export: exporter_1._export,
};
