The Node.js code provided is importing several modules and then extending the Jest `expect` function with custom matchers defined in the `matchers-4fe91ec3.js` module. Here's a breakdown of what each part of the code does:

1. `'use strict';`: This directive is used to enable strict mode, which helps to catch common coding errors and prevent certain unsafe actions.

2. `var matchers = require('./matchers-4fe91ec3.js');`: This line imports a module that likely contains custom Jest matchers. The module is assumed to export an object with a property called `extensions`.

3. The subsequent `require` statements are importing additional modules that might be used by the `matchers` module internally or elsewhere in the test suite. These modules include:
   - `redent`: Used for removing excess indentation.
   - `@adobe/css-tools`: A set of utilities for working with CSS.
   - `dom-accessibility-api`: Provides tools for accessibility auditing in DOM environments.
   - `aria-query`: Used to query ARIA properties and roles.
   - `chalk`: A library for styling terminal strings.
   - `lodash/isEqualWith.js`: A method from lodash for deep equality checks with customization.
   - `css.escape`: A utility for escaping strings for use in CSS.

4. `expect.extend(matchers.extensions);`: This line extends the Jest `expect` functionality with the custom matchers provided by the `matchers-4fe91ec3.js` module. This allows for more specific assertions tailored to the needs of the tests using these matchers.

Here's the rewritten code with these functionalities organized:

```javascript
'use strict';

// Import necessary modules
const matchers = require('./matchers-4fe91ec3.js');
require('redent');
require('@adobe/css-tools');
require('dom-accessibility-api');
require('aria-query');
require('chalk');
require('lodash/isEqualWith.js');
require('css.escape');

// Extend Jest expect with custom matchers
expect.extend(matchers.extensions);
```