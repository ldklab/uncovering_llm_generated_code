The provided Node.js code is a module that offers utilities for encoding and decoding strings with XML and HTML entities. It supports various levels of entity support and encoding modes, allowing flexibility depending on the user's needs. The code imports functions from three separate modules (`decode.js`, `encode.js`, and `escape.js`) and exports a host of functions and constants to work with entities. Key functionalities include:

1. **Entity Levels**:
   - XML: Supports only XML entities.
   - HTML: Supports HTML entities, which are a superset of XML entities.

2. **Encoding Modes**:
   - UTF8: Only essential XML escapes are made.
   - ASCII: Escapes necessary HTML entities and non-ASCII characters.
   - Extensive: Encodes all entities and non-ASCII characters.
   - Attribute: Escapes characters according to HTML attribute rules.
   - Text: Escapes characters according to HTML text rules.

3. **Decoding Functions**:
   - `decode`: Decodes entities in a string with the provided level.
   - `decodeStrict`: Decodes like `decode`, but doesn't allow missing semicolons.
   - Additional utility decoding functions that handle specific decoding tasks.

4. **Encoding Functions**:
   - `encode`: Encodes a string to contain appropriate entity conversions based on the provided mode.
   - Utility functions for specific encoding tasks are exposed for external use.

5. **Legacy Aliases**: Deprecated methods that maintain backward compatibility.

Here's a possible rewrite of the provided code:

```javascript
"use strict";

const decodeModule = require("./decode.js");
const encodeModule = require("./encode.js");
const escapeModule = require("./escape.js");

// Enum for the levels of entity support
var EntityLevel = {
    XML: 0,
    HTML: 1,
};
exports.EntityLevel = EntityLevel;

// Enum for encoding modes
var EncodingMode = {
    UTF8: 0,
    ASCII: 1,
    Extensive: 2,
    Attribute: 3,
    Text: 4,
};
exports.EncodingMode = EncodingMode;

// Decoding functions
function decode(input, options = EntityLevel.XML) {
    const level = typeof options === "number" ? options : options.level;
    if (level === EntityLevel.HTML) {
        const mode = typeof options === "object" ? options.mode : undefined;
        return decodeModule.decodeHTML(input, mode);
    }
    return decodeModule.decodeXML(input);
}

function decodeStrict(input, options = EntityLevel.XML) {
    const normalizedOptions = typeof options === "number" ? { level: options } : options;
    normalizedOptions.mode = normalizedOptions.mode || decodeModule.DecodingMode.Strict;
    return decode(input, normalizedOptions);
}

// Encoding functions
function encode(input, options = EntityLevel.XML) {
    const { mode = EncodingMode.Extensive, level = EntityLevel.XML } = typeof options === "number" ? { level: options } : options;
    switch (mode) {
        case EncodingMode.UTF8:
            return escapeModule.escapeUTF8(input);
        case EncodingMode.Attribute:
            return escapeModule.escapeAttribute(input);
        case EncodingMode.Text:
            return escapeModule.escapeText(input);
        default:
            if (level === EntityLevel.HTML) {
                if (mode === EncodingMode.ASCII) {
                    return encodeModule.encodeNonAsciiHTML(input);
                }
                return encodeModule.encodeHTML(input);
            }
            return escapeModule.encodeXML(input);
    }
}

// Expose functions and constants
exports.decode = decode;
exports.decodeStrict = decodeStrict;
exports.encode = encode;
Object.defineProperty(exports, "encodeXML", { enumerable: true, get: () => escapeModule.encodeXML });
Object.defineProperty(exports, "escapeUTF8", { enumerable: true, get: () => escapeModule.escapeUTF8 });
Object.defineProperty(exports, "escapeAttribute", { enumerable: true, get: () => escapeModule.escapeAttribute });
Object.defineProperty(exports, "escapeText", { enumerable: true, get: () => escapeModule.escapeText });
Object.defineProperty(exports, "encodeHTML", { enumerable: true, get: () => encodeModule.encodeHTML });
Object.defineProperty(exports, "encodeNonAsciiHTML", { enumerable: true, get: () => encodeModule.encodeNonAsciiHTML });
Object.defineProperty(exports, "EntityDecoder", { enumerable: true, get: () => decodeModule.EntityDecoder });
Object.defineProperty(exports, "DecodingMode", { enumerable: true, get: () => decodeModule.DecodingMode });
Object.defineProperty(exports, "decodeXML", { enumerable: true, get: () => decodeModule.decodeXML });
Object.defineProperty(exports, "decodeHTML", { enumerable: true, get: () => decodeModule.decodeHTML });
Object.defineProperty(exports, "decodeHTMLStrict", { enumerable: true, get: () => decodeModule.decodeHTMLStrict });
Object.defineProperty(exports, "decodeHTMLAttribute", { enumerable: true, get: () => decodeModule.decodeHTMLAttribute });

// Legacy aliases for backward compatibility
Object.defineProperty(exports, "encodeHTML4", { enumerable: true, get: () => encodeModule.encodeHTML });
Object.defineProperty(exports, "encodeHTML5", { enumerable: true, get: () => encodeModule.encodeHTML });
Object.defineProperty(exports, "decodeHTML4", { enumerable: true, get: () => decodeModule.decodeHTML });
Object.defineProperty(exports, "decodeHTML5", { enumerable: true, get: () => decodeModule.decodeHTML });
Object.defineProperty(exports, "decodeHTML4Strict", { enumerable: true, get: () => decodeModule.decodeHTMLStrict });
Object.defineProperty(exports, "decodeHTML5Strict", { enumerable: true, get: () => decodeModule.decodeHTMLStrict });
Object.defineProperty(exports, "decodeXMLStrict", { enumerable: true, get: () => decodeModule.decodeXML });
```