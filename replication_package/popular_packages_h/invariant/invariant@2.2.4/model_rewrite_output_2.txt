The Node.js code defines a utility function `invariant` that is used to enforce conditions in the code and throws an error if the condition is not met. This is particularly useful for debugging and identifying state assumptions that should always be true during execution. It supports a formatted message with placeholders (`%s`) that can be replaced with provided arguments to give contextual information about the error. In production mode (when `NODE_ENV` is `'production'`), the detailed error messages are stripped to minimize the output size. If the `format` string is not provided in development mode, an error is thrown to indicate that an error message is necessary. 

Here's a possible rewrite of the given Node.js code, maintaining its functionality:

```javascript
'use strict';

const NODE_ENV = process.env.NODE_ENV;

const invariant = (condition, format, ...args) => {
  if (NODE_ENV !== 'production' && format === undefined) {
    throw new Error('invariant requires an error message argument');
  }
  
  if (!condition) {
    let error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      let argIndex = 0;
      error = new Error(
        format.replace(/%s/g, () => args[argIndex++])
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
};

module.exports = invariant;
```