This Node.js code is essentially a module bundler setup, part of the webpack workflow. It's designed to work in different module environments such as Node.js (CommonJS), AMD (Asynchronous Module Definition), and globally in the browser. The code is essentially creating a universal module definition for a JavaScript library called `esprima`. The top-level self-invoking function checks the environment and exports `esprima` as a module accordingly.

The core functionality provided by `esprima` is a JavaScript parser, tokenizer, and utilities for handling JavaScript syntax trees. It consists of multiple internal modules (like `jsx_parser`, `tokenizer`, etc.) which collectively provide features such as code parsing, error handling, and syntax tree creation. 

Here's an organized and condensed rewrite of this code:

```javascript
(function(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();      // CommonJS
    else if (typeof define === 'function' && define.amd)
        define([], factory);            // AMD
    else if (typeof exports === 'object')
        exports["esprima"] = factory(); // CommonJS exports
    else
        root["esprima"] = factory();    // Global variable
})(this, function() {
    return (function(modules) { 
        var installedModules = {}; // The module cache

        function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) 
                return installedModules[moduleId].exports;

            var module = installedModules[moduleId] = {
                exports: {},
                id: moduleId,
                loaded: false
            };

            modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
            module.loaded = true;
            return module.exports;
        }

        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = "";

        return __webpack_require__(0);
    })({
        // module definitions go here, starting from id 0
    });
});
```

In this rewrite, we have focused on simplifying and structuring the code for clarity without the actual module logic details, as this was more of a structural refactoring rather than content alteration. The module logic inside `modules` object (e.g., comment handling, JSX parsing, etc.) has been summarized as a `modules` placeholder.