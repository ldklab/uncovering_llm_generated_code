The Node.js code provided is a bundled file, generated using Webpack, that exports a module using a Universal Module Definition pattern. This ensures compatibility with various module systems like CommonJS, AMD, and global browser variables. The core functionality revolves around parsing JavaScript code, specifically handling syntax trees and tokenization.

Here is a simplified version of the code that captures the main structure and intent:

```javascript
(function (root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory();
    else if (typeof define === 'function' && define.amd)
        define([], factory);
    else if (typeof exports === 'object')
        exports["esprima"] = factory();
    else
        root["esprima"] = factory();
})(this, function () {

    function Parser() {
        // Handle parsing logic
    }
    
    Parser.prototype.parse = function (code, options) {
        // Parse and return AST (Abstract Syntax Tree)
    };

    Parser.prototype.tokenize = function (code, options) {
        // Tokenize the input code
    };

    function CommentHandler() {
        // Handle processing of comments
    }

    CommentHandler.prototype.visit = function(node, metadata) {
        // Logic for managing comments in an AST
    };

    function JSXParser(code, options) {
        Parser.call(this, code, options);
        // Additional logic for handling JSX
    }

    JSXParser.prototype = Object.create(Parser.prototype);

    return {
        parse: function (code, options) {
            const parser = new Parser();
            return parser.parse(code, options);
        },
        tokenize: function (code, options) {
            const parser = new Parser();
            return parser.tokenize(code, options);
        },
        parseModule: function (code, options) {
            // Specialized parsing for modules
        },
        parseScript: function (code, options) {
            // Specialized parsing for scripts
        }
    };
});
```

This rewritten code provides a high-level structure of what the module does, encapsulating parsing and tokenization logic in a designed Parser class, along with a JSXParser subclass for JSX handling. The functions and method implementations are abstracted for brevity.