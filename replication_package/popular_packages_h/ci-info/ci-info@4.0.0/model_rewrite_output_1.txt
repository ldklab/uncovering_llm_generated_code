The provided Node.js code is designed to detect the presence and environment characteristics of Continuous Integration (CI) systems by analyzing environment variables. The main functionalities of the code can be broken down into several key parts:

1. **Loading Configuration:** It loads a list of CI vendors from a `vendors.json` file and stores them in the `vendors` constant. Each vendor definition includes environment variable names and conditions that indicate the presence of the vendor's CI environment.

2. **Checking CI Environment:** For each vendor, it uses the `checkEnv` function to determine if the environment variables specified in the vendor's configuration are present and in the correct state. Each vendor has a `constant` field which is exported as a boolean indicating whether the CI environment is detected.

3. **Pull Request (PR) Detection:** The script checks if the CI environment is running a PR build based on vendor-specific environment variables and conditions. This is set in the `exports.isPR` property.

4. **Global CI Status:** Independently of individual vendors, it checks several common environment variables associated with CI systems to set a global `exports.isCI` boolean.

5. **Helper Function (`checkEnv`):** The `checkEnv` function checks whether specific environment conditions, such as the presence or specific content of the environment variables, are met to identify the CI environment.

Below is a possible rewrite of the original code:

```javascript
'use strict';

const vendors = require('./vendors.json');
const env = process.env;

// For testing purpose: Export list of vendor constants
Object.defineProperty(exports, '_vendors', {
  value: vendors.map(v => v.constant)
});

exports.name = null;
exports.isPR = null;

// Function to evaluate if environment variables match a condition
function checkEnv(obj) {
  if (typeof obj === 'string') return !!env[obj];

  if ('env' in obj) {
    return env[obj.env] && env[obj.env].includes(obj.includes);
  }

  if ('any' in obj) {
    return obj.any.some(k => !!env[k]);
  }

  return Object.keys(obj).every(k => env[k] === obj[k]);
}

// Main logic to evaluate each vendor
vendors.forEach(vendor => {
  const envs = Array.isArray(vendor.env) ? vendor.env : [vendor.env];
  const isCI = envs.every(checkEnv);

  exports[vendor.constant] = isCI;

  if (isCI) {
    exports.name = vendor.name;

    switch (typeof vendor.pr) {
      case 'string':
        exports.isPR = !!env[vendor.pr];
        break;
      case 'object':
        if ('env' in vendor.pr) {
          exports.isPR = vendor.pr.env in env && env[vendor.pr.env] !== vendor.pr.ne;
        } else if ('any' in vendor.pr) {
          exports.isPR = vendor.pr.any.some(key => !!env[key]);
        } else {
          exports.isPR = checkEnv(vendor.pr);
        }
        break;
      default:
        exports.isPR = null;
    }
  }
});

// Determine if the environment is any CI
exports.isCI = !!(
  env.CI !== 'false' &&
  (env.BUILD_ID ||
  env.BUILD_NUMBER ||
  env.CI ||
  env.CI_APP_ID ||
  env.CI_BUILD_ID ||
  env.CI_BUILD_NUMBER ||
  env.CI_NAME ||
  env.CONTINUOUS_INTEGRATION ||
  env.RUN_ID ||
  exports.name ||
  false)
);
```