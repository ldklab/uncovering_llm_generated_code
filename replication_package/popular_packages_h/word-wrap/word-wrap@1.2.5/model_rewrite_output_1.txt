The provided Node.js code is a utility for wrapping text at a specified width. The key functionalities include:

- **Trimming Whitespace:** The `trimEnd` function removes trailing spaces and tabs from a given string. The `trimTabAndSpaces` function applies `trimEnd` to each line in a multiline string.
  
- **Word Wrapping:** The main exported function wraps input `str` based on given `options`:
  - `width`: Maximum line width before wrapping (default is 50 characters).
  - `indent`: String added to the beginning of each line (default is two spaces).
  - `newline`: String used to separate lines (default is a newline followed by the indent).
  - `escape`: Function applied to each line after wrapping (defaults to an identity function that returns the line unchanged).
  - `cut`: If `true`, allows cutting words when wrapping (default is `false`).
  - `trim`: If `true`, trims whitespace from each line after wrapping using `trimTabAndSpaces`.

The function uses regular expressions to split the string into an array of lines not exceeding the specified width, adds the indent, applies any escape function, and then joins the lines with the specified newline string. If `trim` is enabled, it trims each line using `trimTabAndSpaces`.

Here's a possible rewritten version of the code:

```javascript
function trimEnd(str) {
  let lastCharPos = str.length - 1;
  while (str[lastCharPos] === ' ' || str[lastCharPos] === '\t') {
    lastCharPos -= 1;
  }
  return str.substring(0, lastCharPos + 1);
}

function trimTabAndSpaces(str) {
  return str.split('\n').map(trimEnd).join('\n');
}

module.exports = function(str, options = {}) {
  if (str == null) return str;

  const width = options.width || 50;
  const indent = typeof options.indent === 'string' ? options.indent : '  ';
  const newline = options.newline || '\n' + indent;
  const escape = typeof options.escape === 'function' ? options.escape : str => str;
  
  const cut = options.cut === true;
  const regexPart = cut ? '.{1,' + width + '}' : '.{1,' + width + '}(\\s|$)|[^\\s]+?(\\s|$)';
  const regex = new RegExp(regexPart, 'g');
  
  const lines = str.match(regex) || [];
  let result = lines.map(line => escape(line.trimEnd())).join(newline);

  result = indent + result;
  
  return options.trim ? trimTabAndSpaces(result) : result;
};
```