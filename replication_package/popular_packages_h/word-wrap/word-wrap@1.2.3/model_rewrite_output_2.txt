The given Node.js code is a module that exports a function for wrapping text. This function takes a string `str` and an `options` object as parameters and returns the wrapped text according to the specified options.

Here's the functionality in detail:

1. **Default Options**: If no `options` are provided, it uses defaults for:
   - `width`: Number of characters per line (default is 50).
   - `indent`: Indent string at the beginning of each line (default is two spaces).
   - `newline`: String to use for new line breaks (default is a newline followed by the indent).
   - `escape`: A function to transform lines if needed (default is an identity function that returns the string unchanged).

2. **Regular Expression Construction**: It creates a regex to match up to `width` characters while considering word boundaries unless `options.cut` is `true`, in which case it matches anywhere.

3. **Line Splitting and Processing**:
   - It uses the regular expression to split the input string into lines.
   - Each line is processed to remove trailing newlines and potentially transformed by the `escape` function.
   - Lines are joined together using the specified `newline` string, and each line is prefixed with the `indent`.

4. **Whitespace Trimming**: If `options.trim` is `true`, trailing spaces or tabs at the end of each line are removed.

5. **Identity Function**: A helper function `identity` simply returns the input string, used as the default `escape` function.

Here is the rewritten Node.js code:

```javascript
/*!
 * word-wrap <https://github.com/jonschlinkert/word-wrap>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

module.exports = function wrapText(string, options = {}) {
  if (!string) {
    return string;
  }

  const width = options.width || 50;
  const indent = typeof options.indent === 'string' ? options.indent : '  ';
  const newline = options.newline || '\n' + indent;
  const escape = typeof options.escape === 'function' ? options.escape : str => str;

  let regexPattern = `.{1,${width}}`;
  if (options.cut !== true) {
    regexPattern += '([\\s\u200B]+|$)|[^\\s\u200B]+?([\\s\u200B]+|$)';
  }

  const regex = new RegExp(regexPattern, 'g');
  const lines = string.match(regex) || [];
  
  let result = indent + lines.map(line => {
    if (line.endsWith('\n')) {
      line = line.slice(0, -1);
    }
    return escape(line);
  }).join(newline);

  if (options.trim) {
    result = result.replace(/[ \t]*$/gm, '');
  }

  return result;
};
```