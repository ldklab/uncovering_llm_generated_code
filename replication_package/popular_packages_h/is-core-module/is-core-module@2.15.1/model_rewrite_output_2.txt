The original Node.js code provided is a module that determines if a given module name (`x`) is a "core" module in Node.js for a specific Node.js version (`nodeVersion`). Here’s a detailed explanation of how the code works:

1. **Specifier Version Matching**:
   - The `specifierIncluded` function checks if a given Node.js version (`current`) satisfies a specific version requirement (`specifier`). 
   - It parses both the `current` version and `specifier` into their major, minor, and patch components, and then compares these based on the operation provided (`<`, `>=`, or `=`).

2. **Range Matching**:
   - The `matchesRange` function determines if a given node version satisfies a set of ranges specified using `&&`.
   - It returns `true` if the given `current` version satisfies all individual specifier conditions.

3. **Version Inclusion Check**:
   - The `versionIncluded` function checks if the current Node.js version falls under the specified version constraint, which could be a single version, an array of version ranges, or a boolean.
   - It handles default to the current Node.js environment’s version if `nodeVersion` is not provided.

4. **Checking Core Module**:
   - The `isCore` function uses the `hasOwn` utility to determine if a module `x` exists in the `data` object (imported from `core.json`), which contains core module specifiers.
   - It verifies if the specified version requirements for `x` in `data` are met with regard to `nodeVersion` through the `versionIncluded` function.

---

Here's a rewritten version of the code with the same functionality:

```javascript
'use strict';

const hasOwn = require('hasown');

function specifierIncluded(current, specifier) {
  const nodeParts = current.split('.');
  const [op, versionSpecifier] = specifier.includes(' ') ? specifier.split(' ') : ['=', specifier];
  const versionParts = versionSpecifier.split('.');

  for (let i = 0; i < 3; ++i) {
    const cur = parseInt(nodeParts[i] || 0, 10);
    const ver = parseInt(versionParts[i] || 0, 10);
    if (cur === ver) continue;
    if (op === '<') return cur < ver;
    if (op === '>=') return cur >= ver;
    return false;
  }
  return op === '>=';
}

function matchesRange(current, range) {
  const specifiers = range.split(/ ?&& ?/);
  return specifiers.every(specifier => specifierIncluded(current, specifier));
}

function versionIncluded(nodeVersion, specifierValue) {
  if (typeof specifierValue === 'boolean') {
    return specifierValue;
  }

  const current = nodeVersion || process.versions?.node;

  if (typeof current !== 'string') {
    throw new TypeError('Unable to determine a valid node version');
  }

  if (Array.isArray(specifierValue)) {
    return specifierValue.some(range => matchesRange(current, range));
  }

  return matchesRange(current, specifierValue);
}

const data = require('./core.json');

module.exports = function isCore(x, nodeVersion) {
  return hasOwn(data, x) && versionIncluded(nodeVersion, data[x]);
};
```