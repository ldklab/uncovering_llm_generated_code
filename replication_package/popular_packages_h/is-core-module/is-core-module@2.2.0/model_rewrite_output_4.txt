The Node.js code provided is a module that checks if a given feature 'x' is part of a core set of features for a specified Node.js version. It uses a version specification to determine if the given Node.js version is compatible with a particular feature.

### Explanation:

1. **`specifierIncluded(current, specifier)` Function:**
   - Compares the current Node.js version to a specified version specifier.
   - The specifier can include operators like `<` or `>=` to denote version constraints.
   - It splits the version into parts (major, minor, patch) and compares them based on the operator provided in the specifier.

2. **`matchesRange(current, range)` Function:** 
   - Determines if the current version matches a specified range which may consist of multiple specifiers, combined using "&&".
   - It returns true only if all specifiers in the range are satisfied by the current version.

3. **`versionIncluded(nodeVersion, specifierValue)` Function:**
   - Checks if a specified feature is included for a particular Node.js version.
   - It can handle a single or multiple ranges of versions.
   - If `specifierValue` is a boolean value, it will return that value directly.
   - If `specifierValue` is an object (array), it checks if any of the ranges therein are compatible with the current version.

4. **`isCore(x, nodeVersion)` Function:**
   - Exports this function as a module.
   - Uses the `has` library to check if feature 'x' exists in the `core.json` data file.
   - It then checks if the specified Node.js version is compatible with that feature.

### Rewritten Code:

```javascript
'use strict';

const has = require('has');

// Compare current node version with a specifier like ">=8.0.0"
function specifierIncluded(current, specifier) {
  const nodeParts = current.split('.');
  const parts = specifier.split(' ');
  const op = parts.length > 1 ? parts[0] : '=';
  const versionParts = (parts.length > 1 ? parts[1] : parts[0]).split('.');

  for (let i = 0; i < 3; ++i) {
    const cur = parseInt(nodeParts[i] || 0, 10);
    const ver = parseInt(versionParts[i] || 0, 10);
    if (cur === ver) continue;

    if (op === '<') return cur < ver;
    if (op === '>=') return cur >= ver;

    return false;
  }

  return op === '>=';
}

// Checks if the current version satisfies all provided range conditions
function matchesRange(current, range) {
  const specifiers = range.split(/ ?&& ?/);
  if (specifiers.length === 0) return false;

  for (const specifier of specifiers) {
    if (!specifierIncluded(current, specifier)) {
      return false;
    }
  }

  return true;
}

// Determines if the node version satisfies the specifier value criteria
function versionIncluded(nodeVersion, specifierValue) {
  if (typeof specifierValue === 'boolean') return specifierValue;

  const current = nodeVersion ?? process?.versions?.node;

  if (typeof current !== 'string') {
    throw new TypeError(nodeVersion === undefined 
      ? 'Unable to determine current node version' 
      : 'If provided, a valid node version is required');
  }

  if (specifierValue && typeof specifierValue === 'object') {
    for (const range of specifierValue) {
      if (matchesRange(current, range)) {
        return true;
      }
    }
    return false;
  }

  return matchesRange(current, specifierValue);
}

const data = require('./core.json');

// Main function to check if 'x' is a core feature for the node version
module.exports = function isCore(x, nodeVersion) {
  return has(data, x) && versionIncluded(nodeVersion, data[x]);
};
```