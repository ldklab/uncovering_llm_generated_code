The given Node.js code is an example of how to organize and export functions from different modules. Here's a breakdown of its functionality:

1. It uses the `exports.__esModule = true;` statement to indicate that the module uses ES module exports.

2. It imports specific functionalities from other modules and then exports these functionalities from the current module:
   - `computeAccessibleDescription` is imported from a module named `./accessible-description` and then re-exported.
   - `computeAccessibleName` is imported from a module named `./accessible-name` and then re-exported.
   - `getRole` is imported as a default export from a module named `./getRole` and then re-exported.

3. The code uses a utility function `_interopRequireDefault` to ensure compatibility between CommonJS modules and ES modules. This function checks if the imported module is an ES module before using its default export.

Below is the rewritten version of the Node.js code:

```javascript
"use strict";

exports.__esModule = true;
exports.getRole = exports.computeAccessibleName = exports.computeAccessibleDescription = void 0;

var { computeAccessibleDescription } = require("./accessible-description");
exports.computeAccessibleDescription = computeAccessibleDescription;

var { computeAccessibleName } = require("./accessible-name");
exports.computeAccessibleName = computeAccessibleName;

var _getRole = require("./getRole");
var getRole = _getRole && _getRole.__esModule ? _getRole.default : _getRole;
exports.getRole = getRole;
//# sourceMappingURL=index.js.map
```