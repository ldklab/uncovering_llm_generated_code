The functionality of the given Node.js code is to create and export a bound version of a polyfill function while also exposing related properties such as the polyfill, its implementation, and a shim function. Here's a breakdown of what the code does:

1. It imports several modules: `define-properties`, `call-bind`, `./implementation`, `./polyfill`, and `./shim`.
2. The `getPolyfill` function is called and bound using `callBind`, which essentially prepares a version of the function that is pre-bound to a specific context.
3. The `define` function from `define-properties` is used to attach three additional properties to the `bound` function: `getPolyfill`, `implementation`, and `shim`. These properties reference the `getPolyfill`, `implementation`, and `shim` modules respectively.
4. The `bound` function, with its attached properties, is then exported as the module.

Below is a rewritten version of the Node.js code that performs the same functionality:

```javascript
'use strict';

const define = require('define-properties');
const callBind = require('call-bind');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

// Bind the polyfill function to ensure proper context
const boundPolyfill = callBind(getPolyfill());

// Define properties on the bound function object
define(boundPolyfill, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});

// Export the bound function with additional properties
module.exports = boundPolyfill;
```