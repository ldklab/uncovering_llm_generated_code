The provided Node.js code defines a simple stream utility called `through`, which creates a transform stream that asynchronously processes data chunks. This utility stream re-emits incoming data, making it useful for combining streams or applying simple transformations without changing the structure of stream data flow. Key features include:

- **Writable and Readable Stream**: Serves as both writable and readable, allowing it to write data and emit data.
- **Buffering and Control**: Utilizes a buffer to handle incoming data and controls the flow with pause and resume functionality.
- **Event Management**: Manages 'data', 'end', 'drain', and 'close' events to properly handle stream data and cleanup.
- **Auto-destroy**: Optionally destroys the stream automatically when it's no longer writable or readable.

The stream's core functionality is driven by the `write`, `end`, and `opts` options provided at initialization, where default operations involve queuing and ending the stream data.

Below is the rewritten code:

```javascript
const { Stream } = require('stream');

module.exports = function through(write, end, opts = {}) {
  // Default write and end functions
  write = write || function (data) { this.queue(data); };
  end = end || function () { this.queue(null); };

  let ended = false, destroyed = false, buffer = [], _ended = false;
  const stream = new Stream();

  stream.readable = stream.writable = true;
  stream.paused = false;
  stream.autoDestroy = opts.autoDestroy !== false;

  stream.write = function (data) {
    write.call(this, data);
    return !stream.paused;
  };

  function drain() {
    while (buffer.length && !stream.paused) {
      const data = buffer.shift();
      if (data === null) {
        return stream.emit('end');
      } else {
        stream.emit('data', data);
      }
    }
  }

  stream.queue = stream.push = function (data) {
    if (_ended) return stream;
    if (data === null) _ended = true;
    buffer.push(data);
    drain();
    return stream;
  };

  stream.on('end', function () {
    stream.readable = false;
    if (!stream.writable && stream.autoDestroy) {
      process.nextTick(() => { stream.destroy(); });
    }
  });

  function _end() {
    stream.writable = false;
    end.call(stream);
    if (!stream.readable && stream.autoDestroy) {
      stream.destroy();
    }
  }

  stream.end = function (data) {
    if (ended) return;
    ended = true;
    if (arguments.length) stream.write(data);
    _end();
    return stream;
  };

  stream.destroy = function () {
    if (destroyed) return;
    destroyed = true;
    ended = true;
    buffer.length = 0;
    stream.writable = stream.readable = false;
    stream.emit('close');
    return stream;
  };

  stream.pause = function () {
    if (stream.paused) return;
    stream.paused = true;
    return stream;
  };

  stream.resume = function () {
    if (stream.paused) {
      stream.paused = false;
      stream.emit('resume');
    }
    drain();
    if (!stream.paused) {
      stream.emit('drain');
    }
    return stream;
  };
  
  return stream;
}

module.exports.through = module.exports;
```