The provided code is a Node.js module designed to process, validate, and parse domain names. It uses functions to read domain suffix rules, validate domain formats, and parse domains into their component parts. Hereâ€™s a breakdown of what each part does:

1. **Rules Initialization**: It loads and processes domain suffix rules from a JSON file. It determines whether the rule includes a wildcard or an exception.

2. **Suffix Checking (`internals.endsWith`)**: This utility checks if a string (domain) ends with a given suffix.

3. **Rule Finding (`internals.findRule`)**: It tries to find the most appropriate rule for a given domain. This involves converting the domain and rules to ASCII using the `punycode` library for consistency.

4. **Error Handling**: There are predefined error codes and messages to address various domain name validity issues.

5. **Domain Validation (`internals.validate`)**: This function checks whether a domain meets certain criteria, such as length of the domain and its labels, allowed characters, and proper use of dashes.

6. **Domain Parsing (`exports.parse`)**: The main function for breaking down a domain into its top-level domain (TLD), second-level domain (SLD), and subdomain components, according to the available rules. It also accounts for handling internationalized domain names (IDN).

7. **Public API**:
   - `parse`: Parses a domain name string and returns its components or error details.
   - `get`: Returns the main domain part if the parsing is successful.
   - `isValid`: Checks if the domain adheres to known public suffixes and is valid.

Here is the rewritten code using ES6+ features for clearer syntax and structure:

```javascript
'use strict';

const Punycode = require('punycode');

const internals = {};

// Read rules from file
internals.rules = require('./data/rules.json').map(rule => ({
  rule,
  suffix: rule.replace(/^(\*\.|\!)/, ''),
  punySuffix: -1,
  wildcard: rule.startsWith('*'),
  exception: rule.startsWith('!')
}));

// Check if given string ends with `suffix`
internals.endsWith = (str, suffix) => {
  return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

// Find rule for a given domain
internals.findRule = (domain) => {
  const punyDomain = Punycode.toASCII(domain);
  
  return internals.rules.reduce((memo, rule) => {
    if (rule.punySuffix === -1) {
      rule.punySuffix = Punycode.toASCII(rule.suffix);
    }
    if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {
      return memo;
    }
    
    return rule;
  }, null);
};

// Error codes and messages
exports.errorCodes = {
  DOMAIN_TOO_SHORT: 'Domain name too short.',
  DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',
  LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',
  LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',
  LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',
  LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',
  LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'
};

// Validate domain name and throw if not valid
internals.validate = (input) => {
  const ascii = Punycode.toASCII(input);

  if (ascii.length < 1) return 'DOMAIN_TOO_SHORT';
  if (ascii.length > 255) return 'DOMAIN_TOO_LONG';

  const labels = ascii.split('.');
  for (const label of labels) {
    if (!label.length) return 'LABEL_TOO_SHORT';
    if (label.length > 63) return 'LABEL_TOO_LONG';
    if (label.startsWith('-')) return 'LABEL_STARTS_WITH_DASH';
    if (label.endsWith('-')) return 'LABEL_ENDS_WITH_DASH';
    if (!/^[a-z0-9\-]+$/.test(label)) return 'LABEL_INVALID_CHARS';
  }
};

// Public API

// Parse domain
exports.parse = function (input) {
  if (typeof input !== 'string') {
    throw new TypeError('Domain name must be a string.');
  }

  let domain = input.toLowerCase();

  if (domain.endsWith('.')) {
    domain = domain.slice(0, -1);
  }

  const error = internals.validate(domain);
  if (error) {
    return {
      input,
      error: {
        message: exports.errorCodes[error],
        code: error
      }
    };
  }

  const parsed = {
    input,
    tld: null,
    sld: null,
    domain: null,
    subdomain: null,
    listed: false
  };

  const domainParts = domain.split('.');

  if (domainParts[domainParts.length - 1] === 'local') {
    return parsed;
  }

  const handlePunycode = () => {
    if (!/xn--/.test(domain)) {
      return parsed;
    }
    if (parsed.domain) parsed.domain = Punycode.toASCII(parsed.domain);
    if (parsed.subdomain) parsed.subdomain = Punycode.toASCII(parsed.subdomain);
    return parsed;
  };

  const rule = internals.findRule(domain);

  if (!rule) {
    if (domainParts.length < 2) {
      return parsed;
    }
    parsed.tld = domainParts.pop();
    parsed.sld = domainParts.pop();
    parsed.domain = `${parsed.sld}.${parsed.tld}`;
    if (domainParts.length) {
      parsed.subdomain = domainParts.join('.');
    }
    return handlePunycode();
  }

  parsed.listed = true;

  const tldParts = rule.suffix.split('.');
  const privateParts = domainParts.slice(0, domainParts.length - tldParts.length);

  if (rule.exception) {
    privateParts.push(tldParts.shift());
  }

  parsed.tld = tldParts.join('.');

  if (!privateParts.length) {
    return handlePunycode();
  }

  if (rule.wildcard) {
    tldParts.unshift(privateParts.pop());
    parsed.tld = tldParts.join('.');
  }

  if (!privateParts.length) {
    return handlePunycode();
  }

  parsed.sld = privateParts.pop();
  parsed.domain = `${parsed.sld}.${parsed.tld}`;

  if (privateParts.length) {
    parsed.subdomain = privateParts.join('.');
  }

  return handlePunycode();
};

// Get domain
exports.get = (domain) => {
  if (!domain) {
    return null;
  }
  return exports.parse(domain).domain || null;
};

// Check whether domain belongs to a known public suffix
exports.isValid = (domain) => {
  const parsed = exports.parse(domain);
  return Boolean(parsed.domain && parsed.listed);
};
```