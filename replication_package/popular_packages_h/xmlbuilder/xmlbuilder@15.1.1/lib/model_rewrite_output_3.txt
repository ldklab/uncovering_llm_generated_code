The functionality of the given Node.js code is to provide an interface for creating and manipulating XML documents. It utilizes several XML-related classes and utility functions to manage tasks such as constructing XML elements, handling document declarations, and setting up XML writers. Below is a breakdown of the code's functionalities and the rewritten version:

1. **Module Imports and Definitions**: The code begins by importing various modules necessary for XML document creation and manipulation, such as `XMLDOMImplementation`, `XMLDocument`, `XMLStringWriter`, etc., and utility functions like `assign` and `isFunction`.

2. **Creating XML Documents**: The code exports a function `create` that initializes a new XML document object using a root element name and options for XML declaration and document type declaration (DTD). It throws an error if a root element name is not provided.

3. **Building XML Documents with Callbacks**: The `begin` function creates either a basic XML document or an XML document with callback functionality, useful for processing XML data as itâ€™s being constructed.

4. **XML Writers**: Functions `stringWriter` and `streamWriter` return instances of XML writers that output XML to a string or a stream, respectively.

5. **XML DOM Implementation**: A singleton instance of the XMLDOMImplementation is provided for operations related to XML DOM.

6. **Access to Node Type and Writer State**: The code exports `nodeType` and `writerState` which are likely enums or constants defining various XML node types and writer states, used internally by the XML document classes.

Here's the possible rewritten Node.js code encapsulated in a single markdown code block:

```js
const { assign, isFunction } = require('./Utility');
const XMLDOMImplementation = require('./XMLDOMImplementation');
const XMLDocument = require('./XMLDocument');
const XMLDocumentCB = require('./XMLDocumentCB');
const XMLStringWriter = require('./XMLStringWriter');
const XMLStreamWriter = require('./XMLStreamWriter');
const NodeType = require('./NodeType');
const WriterState = require('./WriterState');

function createXMLDocument(name, xmldec, doctype, options) {
  if (!name) throw new Error("Root element needs a name.");
  options = assign({}, xmldec, doctype, options);
  const doc = new XMLDocument(options);
  const root = doc.element(name);
  if (!options.headless) {
    doc.declaration(options);
    if (options.pubID || options.sysID) {
      doc.dtd(options);
    }
  }
  return root;
}

function beginXMLDocument(options, onData, onEnd) {
  if (isFunction(options)) {
    [onData, onEnd] = [options, onData];
    options = {};
  }
  
  return onData ? new XMLDocumentCB(options, onData, onEnd) : new XMLDocument(options);
}

function createStringWriter(options) {
  return new XMLStringWriter(options);
}

function createStreamWriter(stream, options) {
  return new XMLStreamWriter(stream, options);
}

module.exports = {
  create: createXMLDocument,
  begin: beginXMLDocument,
  stringWriter: createStringWriter,
  streamWriter: createStreamWriter,
  implementation: new XMLDOMImplementation(),
  nodeType: NodeType,
  writerState: WriterState
};
```