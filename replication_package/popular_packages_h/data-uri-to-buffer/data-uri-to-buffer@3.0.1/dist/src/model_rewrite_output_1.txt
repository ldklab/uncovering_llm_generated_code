The Node.js code provided defines a function `dataUriToBuffer` that converts a Data URI into a `Buffer` instance. The function checks if the URI starts with the required "data:" scheme and proceeds to strip out newlines from it. It then divides the URI into metadata and data components around the first comma. The metadata is further divided to determine the media type, encoding (base64 or ascii), and character set. The function finally decodes the "data" part into a `Buffer` using the appropriate encoding and attaches additional metadata properties (`type`, `typeFull`, and `charset`) to the `Buffer` instance before returning it. This functionality is useful for processing Data URIs, which are often used to embed media directly in web pages or other documents.

Here's a rewritten version of the code:

```javascript
"use strict";

/**
 * Converts a Data URI to a Buffer instance.
 *
 * @param {String} uri - The Data URI.
 * @returns {Buffer} - Buffer constructed from the Data URI.
 * @throws {TypeError} - If the URI is not a valid Data URI.
 * @api public
 */
function dataUriToBuffer(uri) {
    // Ensure the URI starts with 'data:'
    if (!/^data:/i.test(uri)) {
        throw new TypeError('`uri` must start with "data:" to be a valid Data URI');
    }

    // Remove any newlines in the URI
    uri = uri.replace(/\r?\n/g, '');

    // Split URI into metadata and data parts
    const firstComma = uri.indexOf(',');
    if (firstComma === -1 || firstComma <= 4) {
        throw new TypeError('malformed data: URI');
    }

    const meta = uri.substring(5, firstComma).split(';');
    let charset = '';
    let base64 = false;
    const type = meta[0] || 'text/plain';
    let typeFull = type;

    // Process additional metadata
    for (let i = 1; i < meta.length; i++) {
        if (meta[i] === 'base64') {
            base64 = true;
        } else {
            typeFull += `;${meta[i]}`;
            if (meta[i].startsWith('charset=')) {
                charset = meta[i].substring(8);
            }
        }
    }

    // Default to US-ASCII charset if none is specified
    if (!meta[0] && !charset) {
        typeFull += ';charset=US-ASCII';
        charset = 'US-ASCII';
    }

    // Decode the data portion
    const encoding = base64 ? 'base64' : 'ascii';
    const data = unescape(uri.substring(firstComma + 1));
    const buffer = Buffer.from(data, encoding);

    // Attach metadata properties to the Buffer
    buffer.type = type;
    buffer.typeFull = typeFull;
    buffer.charset = charset;

    return buffer;
}

module.exports = dataUriToBuffer;
```