The provided Node.js code defines a module that exports a function `dataUriToBuffer`. This function converts a data URI into a `Buffer` instance, making use of two helper functions: `base64ToArrayBuffer` and `stringToBuffer`.

1. **base64ToArrayBuffer(base64)**: This function takes a base64-encoded string, decodes it, and fills an `ArrayBuffer` with the resulting bytes. It can handle padded `=` characters typically used in base64 encoding.

2. **stringToBuffer(str)**: This function creates an `ArrayBuffer` and populates it with the ASCII values of each character in the given string.

3. **dataUriToBuffer(uri)** (exported function): This function is created by invoking `makeDataUriToBuffer` from a common module, passing the two helper functions. The `makeDataUriToBuffer` presumably takes these functions to handle conversion of the raw base64 or string from the data URI into a Buffer.

Here's a rewritten version of the provided code:

```javascript
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dataUriToBuffer = void 0;
const common_1 = require("./common");

// Converts a base64 encoded string to an ArrayBuffer
function base64ToArrayBuffer(base64) {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
    const bytes = [];
    
    for (let i = 0; i < base64.length; i += 4) {
        const idx0 = chars.indexOf(base64.charAt(i));
        const idx1 = chars.indexOf(base64.charAt(i + 1));
        
        const idx2 = base64.charAt(i + 2) === '='
            ? 0
            : chars.indexOf(base64.charAt(i + 2));
            
        const idx3 = base64.charAt(i + 3) === '='
            ? 0
            : chars.indexOf(base64.charAt(i + 3));
        
        const bin0 = (idx0 << 2) | (idx1 >> 4);
        const bin1 = ((idx1 & 15) << 4) | (idx2 >> 2);
        const bin2 = ((idx2 & 3) << 6) | idx3;
        
        bytes.push(bin0);
        if (base64.charAt(i + 2) !== '=') bytes.push(bin1);
        if (base64.charAt(i + 3) !== '=') bytes.push(bin2);
    }
    
    const buffer = new ArrayBuffer(bytes.length);
    const view = new Uint8Array(buffer);
    view.set(bytes);
    
    return buffer;
}

// Converts a string to an ArrayBuffer
function stringToBuffer(str) {
    const buffer = new ArrayBuffer(str.length);
    const view = new Uint8Array(buffer);
    
    for (let i = 0; i < str.length; i++) {
        view[i] = str.charCodeAt(i);
    }
    
    return buffer;
}

// Export a function that converts a data URI `uri` to a Buffer instance
exports.dataUriToBuffer = (0, common_1.makeDataUriToBuffer)({ stringToBuffer, base64ToArrayBuffer });
```