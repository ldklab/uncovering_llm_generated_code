The provided Node.js code is a full implementation of the Moment.js library version 2.29.1. Moment.js is a popular JavaScript library used for parsing, validating, manipulating, and formatting dates. The library handles complex date operations and supports many functionalities, including setting and getting time units (such as years, months, days, etc.), formatting dates according to custom patterns, handling time zones and daylight saving time, and working with relative time formats (such as "2 days ago"). It also supports localization, allowing dates to be formatted according to different locales.

Below is a simplified rewrite of the Moment.js initialization and basic functionalities highlighting the core aspects without the detailed implementation:

```javascript
//! Simplified version of moment.js
//! Provides basic date manipulation functions

(function (global, factory) {
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = factory();
    } else {
        global.moment = factory();
    }
}(this, function () {
    'use strict';

    // Basic internal utility function
    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }
    
    // Basic date manipulation function
    function addDays(date, days) {
        const result = new Date(date);
        result.setDate(result.getDate() + days);
        return result;
    }

    // Basic date formatting function
    function formatDate(date, format) {
        const map = {
            YYYY: date.getFullYear(),
            MM: ('0' + (date.getMonth() + 1)).slice(-2),
            DD: ('0' + date.getDate()).slice(-2),
            HH: ('0' + date.getHours()).slice(-2),
            mm: ('0' + date.getMinutes()).slice(-2),
            ss: ('0' + date.getSeconds()).slice(-2),
        };

        return format.replace(/YYYY|MM|DD|HH|mm|ss/g, match => map[match]);
    }

    // Factory to create a moment-like date object
    function createMoment(config) {
        const date = config ? new Date(config) : new Date();

        return {
            add: function (number, unit) {
                if (unit === 'd') {
                    return createMoment(addDays(date, number));
                }
                // Additional unit handling can be added here
                return this;
            },
            format: function (format) {
                return formatDate(date, format);
            },
            isLeapYear: function () {
                return isLeapYear(date.getFullYear());
            },
        };
    }

    // Main export for the library
    return {
        now: function () { return new Date(); },
        isLeapYear: isLeapYear,
        createMoment: createMoment,
    };

}));
```

This rewrite simplifies the structure significantly, only including the creation and manipulation of dates and basic formatting. This code provides a foundational perspective of how Moment.js functions operate on dates.