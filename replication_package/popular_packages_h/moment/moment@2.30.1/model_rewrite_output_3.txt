The provided code is the complete source code for Moment.js library version 2.30.1. Moment.js is a JavaScript library for parsing, validating, manipulating, and formatting dates and times. The code is organized using an IIFE (Immediately Invoked Function Expression) for encapsulation and compatibility with different module systems.

Core functionalities include:

1. **Cross-environment Compatibility:** The code uses different loading mechanisms to support Node.js (CommonJS), AMD, and browser-based environments.

2. **Date Manipulation:** Moment.js allows operations such as adding, subtracting, comparing dates, and handling different units of time (years, months, days, etc.).

3. **Formatting & Parsing:** It provides utilities to parse strings into date objects and format date objects into strings using tokens that represent various date-time components.

4. **Locale Support:** Moment.js includes extensive localization support, allowing date formatting to conform to local conventions for different regions.

5. **Duration Calculation:** Perform calculations of time intervals in a human-readable format, handling both relative and absolute differences.

6. **Utility Methods:** Includes utility functions such as checking if values are arrays, objects, numbers, or strings, and validating the instances of Moment.js.

7. **Custom Locations (Locales):** Define and update custom locale settings to accommodate region-specific date-time formats and terms.

Here's a possible rewrite of the Moment.js code focusing on date creation and manipulation while maintaining the core utility functions:

```javascript
; (function (global, factory) {
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = factory();
    } else if (typeof define === 'function' && define.amd) {
        define(factory);
    } else {
        global.moment = factory();
    }
}(this, function () {
    'use strict';

    let currentMoment;

    const utils = {
        isArray: input => Array.isArray(input),
        isObject: input => input != null && typeof input === 'object' && !Array.isArray(input),
        isNumber: input => typeof input === 'number',
        hasOwnProp: (obj, key) => Object.prototype.hasOwnProperty.call(obj, key),
    };

    function moment(input) {
        if (!(this instanceof moment)) {
            return new moment(input);
        }
        this._d = new Date(input || Date.now());
        this.isValid();
    }

    moment.prototype.isValid = function () {
        return !isNaN(this._d.getTime());
    };

    moment.prototype.add = function (amount, unit) {
        if (!this.isValid()) return this;
        const value = utils.isNumber(amount) ? amount : 0;
        switch (unit) {
            case 'days':
                this._d.setDate(this._d.getDate() + value);
                break;
            case 'months':
                this._d.setMonth(this._d.getMonth() + value);
                break;
            case 'years':
                this._d.setFullYear(this._d.getFullYear() + value);
                break;
        }
        return this;
    };

    moment.prototype.subtract = function (amount, unit) {
        return this.add(-amount, unit);
    };

    moment.prototype.format = function (formatStr = 'YYYY-MM-DD') {
        if (!this.isValid()) return 'Invalid date';
        const year = this._d.getFullYear();
        const month = String(this._d.getMonth() + 1).padStart(2, '0');
        const day = String(this._d.getDate()).padStart(2, '0');
        return formatStr.replace('YYYY', year).replace('MM', month).replace('DD', day);
    };

    moment.prototype.toDate = function () {
        return new Date(this._d);
    };

    moment.locale = 'en';

    // Expose the factory function
    return moment;
}));
```

This rewritten code highlights the essential features of Moment.js such as date creation, addition/subtraction of date units, and formatting, while keeping utility functions concise and compact. It avoids less commonly used features for brevity, focusing primarily on usage in Node.js and browser environments.