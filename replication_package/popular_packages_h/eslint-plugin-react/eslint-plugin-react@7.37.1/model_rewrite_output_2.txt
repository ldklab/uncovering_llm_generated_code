The given Node.js code is a module that exports a configuration for ESLint configurations related to React. It includes the following functionalities:

1. **Dependencies Importation**: It imports methods to handle objects and a set of React-specific ESLint rules.

2. **Utility Functions**:
   - `filterRules`: This function filters the provided `rules` object based on a given `predicate` function and returns a new object containing only the entries that match the predicate.
   - `configureAsError`: This function is used to configure rule entries as errors in ESLint by mapping rule keys to the integer `2`, which represents an error level.

3. **Rule Configuration**:
   - The `activeRules` are those that are not deprecated.
   - `activeRulesConfig` is a configuration where active rules are set as ESLint errors.

4. **Configuration Objects**:
   - `plugin.configs` contains three predefined configurations: `recommended`, `all`, and `jsx-runtime`. Each configuration specifies certain parser options and the set of rules to enforce.

5. **Exportation**:
   - The resulting configuration is assigned to `module.exports`, making it available for ESLint to use.

Below is the rewritten Node.js code:

```javascript
'use strict';

const fromEntries = require('object.fromentries');
const entries = require('object.entries');

const allRules = require('./lib/rules');

function filterRules(rules, predicate) {
  return fromEntries(entries(rules).filter(([_, rule]) => predicate(rule)));
}

function configureAsError(rules) {
  return fromEntries(Object.keys(rules).map((key) => [`react/${key}`, 2]));
}

const activeRules = filterRules(allRules, (rule) => !rule.meta.deprecated);
const activeRulesConfig = configureAsError(activeRules);

const deprecatedRules = filterRules(allRules, (rule) => rule.meta.deprecated);

const plugins = ['react'];

const plugin = {
  deprecatedRules,
  rules: allRules,
  configs: {
    recommended: {
      plugins,
      parserOptions: {
        ecmaFeatures: { jsx: true },
      },
      rules: {
        'react/display-name': 2,
        'react/jsx-key': 2,
        'react/jsx-no-comment-textnodes': 2,
        'react/jsx-no-duplicate-props': 2,
        'react/jsx-no-target-blank': 2,
        'react/jsx-no-undef': 2,
        'react/jsx-uses-react': 2,
        'react/jsx-uses-vars': 2,
        'react/no-children-prop': 2,
        'react/no-danger-with-children': 2,
        'react/no-deprecated': 2,
        'react/no-direct-mutation-state': 2,
        'react/no-find-dom-node': 2,
        'react/no-is-mounted': 2,
        'react/no-render-return-value': 2,
        'react/no-string-refs': 2,
        'react/no-unescaped-entities': 2,
        'react/no-unknown-property': 2,
        'react/no-unsafe': 0,
        'react/prop-types': 2,
        'react/react-in-jsx-scope': 2,
        'react/require-render-return': 2,
      },
    },
    all: {
      plugins,
      parserOptions: {
        ecmaFeatures: { jsx: true },
      },
      rules: activeRulesConfig,
    },
    'jsx-runtime': {
      plugins,
      parserOptions: {
        ecmaFeatures: { jsx: true },
        jsxPragma: null,
      },
      rules: {
        'react/react-in-jsx-scope': 0,
        'react/jsx-uses-react': 0,
      },
    },
  },
};

plugin.configs.flat = {
  recommended: {
    plugins: { react: plugin },
    rules: plugin.configs.recommended.rules,
    languageOptions: { parserOptions: plugin.configs.recommended.parserOptions },
  },
  all: {
    plugins: { react: plugin },
    rules: plugin.configs.all.rules,
    languageOptions: { parserOptions: plugin.configs.all.parserOptions },
  },
  'jsx-runtime': {
    plugins: { react: plugin },
    rules: plugin.configs['jsx-runtime'].rules,
    languageOptions: { parserOptions: plugin.configs['jsx-runtime'].parserOptions },
  },
};

module.exports = plugin;
```