The given Node.js code is a utility module for reading and writing JSON files, with optional support for graceful-fs, a replacement for the built-in fs module that improves the handling of file system operations. It provides asynchronous and synchronous functions for reading and writing JSON files. It utilizes the `universalify` library to convert callback-based functions to promise-based functions, allowing both async/await and callback usage. 

Key features:
- Uses `graceful-fs` if available, otherwise defaults to `fs`.
- Provides both asynchronous (`readFile`, `writeFile`) and synchronous (`readFileSync`, `writeFileSync`) file operations.
- Handles optional encoding and custom filesystem modules via options.
- Supports JSON parsing with error handling, with an option to throw errors or return null.
- Handles stringification of objects for writing to JSON files.
- Strips UTF-8 byte order markers (BOM) from file contents before parsing JSON.

Here's the rewritten code organizing all the elements described:

```javascript
const universalify = require('universalify');
const { stringify, stripBom } = require('./utils');

let _fs;
try {
  _fs = require('graceful-fs');
} catch {
  _fs = require('fs');
}

async function _readFile(file, options = {}) {
  if (typeof options === 'string') {
    options = { encoding: options };
  }

  const fs = options.fs || _fs;
  const shouldThrow = 'throws' in options ? options.throws : true;

  let data = await universalify.fromCallback(fs.readFile)(file, options);
  data = stripBom(data);

  try {
    return JSON.parse(data, options.reviver || null);
  } catch (err) {
    if (shouldThrow) {
      err.message = `${file}: ${err.message}`;
      throw err;
    } else {
      return null;
    }
  }
}

const readFile = universalify.fromPromise(_readFile);

function readFileSync(file, options = {}) {
  if (typeof options === 'string') {
    options = { encoding: options };
  }

  const fs = options.fs || _fs;
  const shouldThrow = 'throws' in options ? options.throws : true;

  try {
    let content = fs.readFileSync(file, options);
    content = stripBom(content);
    return JSON.parse(content, options.reviver);
  } catch (err) {
    if (shouldThrow) {
      err.message = `${file}: ${err.message}`;
      throw err;
    } else {
      return null;
    }
  }
}

async function _writeFile(file, obj, options = {}) {
  const fs = options.fs || _fs;
  const str = stringify(obj, options);
  await universalify.fromCallback(fs.writeFile)(file, str, options);
}

const writeFile = universalify.fromPromise(_writeFile);

function writeFileSync(file, obj, options = {}) {
  const fs = options.fs || _fs;
  const str = stringify(obj, options);
  fs.writeFileSync(file, str, options);
}

const jsonfile = {
  readFile,
  readFileSync,
  writeFile,
  writeFileSync
};

module.exports = jsonfile;
```