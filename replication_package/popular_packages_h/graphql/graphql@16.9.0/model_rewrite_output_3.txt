The Node.js code essentially exports a large number of functionalities from different modules for use in other parts of an application. These functionalities include constants, types, classes, and functions that are related to GraphQL, a data query language. Using `Object.defineProperty`, the code sets up these exports so that when this module is imported elsewhere, those importing it have access to these specific exports under the `exports` object. The `enumerable: true` flag ensures these properties can be listed in any loops through the object properties, and the `get` function specifies how the property value is obtained, dynamically pulling from various index modules.

Here is the simplified and modernized code using ES6 syntax:

```javascript
'use strict';

import { version, versionInfo } from './version.js';
import { graphql, graphqlSync, defaultFieldResolver, defaultTypeResolver, createSourceEventStream, execute, executeSync, getArgumentValues, getDirectiveValues, responsePathAsArray, subscribe, getVariableValues } from './graphql.js';
import * as TypeIndex from './type/index.js';
import * as LanguageIndex from './language/index.js';
import * as ExecutionIndex from './execution/index.js';
import * as ValidationIndex from './validation/index.js';
import * as ErrorIndex from './error/index.js';
import * as UtilitiesIndex from './utilities/index.js';

export {
  version,
  versionInfo,
  graphql,
  graphqlSync,
  defaultFieldResolver,
  defaultTypeResolver,
  createSourceEventStream,
  execute,
  executeSync,
  getArgumentValues,
  getDirectiveValues,
  responsePathAsArray,
  subscribe,
  getVariableValues,
  ...TypeIndex,
  ...LanguageIndex,
  ...ExecutionIndex,
  ...ValidationIndex,
  ...ErrorIndex,
  ...UtilitiesIndex
};
```

This modernized version uses ES6 `import` and `export` syntax, spreading the imported module objects into the export statement, to achieve the same functionality in a more concise and readable format. Each index module is imported as a namespace import and then spread into the exports, making all its named exports accessible. This approach assumes the modules being imported are structured in a way where their exports can be effectively spread using the `...` operator.