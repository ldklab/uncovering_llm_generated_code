The Node.js code defines a module that checks certain properties related to the names of functions. Here's a breakdown of the functionality:

1. The main function `functionsHaveNames` checks if a function has a name property that is a string. It does this by creating a named function `f` and verifying if `f.name` is a string.

2. It attempts to use `Object.getOwnPropertyDescriptor` to get the property descriptor of the 'length' property of an array. If this action throws an error (as it does in older versions of Internet Explorer where `getOwnPropertyDescriptor` is broken), it sets `gOPD` to `null`.

3. The `functionsHaveConfigurableNames` method determines if named functions also have configurable name properties. For this check, it ensures the `functionsHaveNames` is true and the `gOPD` exists and correctly works. It then checks if the 'name' property of a function descriptor is configurable.

4. The `boundFunctionsHaveNames` method examines if bound functions retain their name properties by using the `bind` method. It verifies that a bound function still has a non-empty name property.

5. Finally, the module exports the `functionsHaveNames` function, which also carries its additional methods as properties.

Here's the rewritten code:

```javascript
'use strict';

// Function to check if functions have a name property
function functionsHaveNames() {
    return typeof (function namedFunction() {}).name === 'string';
}

let getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Validate gOPD works correctly (accounts for older IE's broken implementation)
if (getOwnPropertyDescriptor) {
    try {
        getOwnPropertyDescriptor([], 'length');
    } catch (e) {
        getOwnPropertyDescriptor = null;
    }
}

// Method to check if function names are configurable
functionsHaveNames.functionsHaveConfigurableNames = function checkConfigurableNames() {
    return functionsHaveNames() && getOwnPropertyDescriptor && !!getOwnPropertyDescriptor(function () {}, 'name').configurable;
};

// Method to check if bound functions have names
functionsHaveNames.boundFunctionsHaveNames = function checkBoundFunctionNames() {
    return functionsHaveNames() && typeof Function.prototype.bind === 'function' && (function () {}).bind().name !== '';
};

// Export the function and its methods
module.exports = functionsHaveNames;
```