The Node.js code defines a utility module for checking certain properties related to function names. Here's what each part does:

1. **functionsHaveNames**: A function that checks if JavaScript functions have a `.name` property of type string. It returns `true` if they do.

2. **gOPD (getOwnPropertyDescriptor)**: A variable assigned to the `Object.getOwnPropertyDescriptor` method. It attempts to call this method on an array to check if the environment supports it correctly. If it throws an error (like in IE8), it sets `gOPD` to `null`.

3. **functionsHaveNames.functionsHaveConfigurableNames**: A function that checks if functions both have a `.name` property and if this property is configurable. It uses `gOPD` to determine if `configurable` is `true` for the name property on a generic function.

4. **$bind**: A reference to the `bind` method on `Function.prototype`.

5. **functionsHaveNames.boundFunctionsHaveNames**: A function that checks if bound functions have non-empty `.name` properties, utilizing the native `bind` method.

Finally, the module exports the `functionsHaveNames` function, which serves as the main entry point for these checks.

Here's a possible rewrite of the code:

```javascript
'use strict';

function functionsHaveNames() {
    return typeof function testFunction() {}.name === 'string';
}

let gOPD = Object.getOwnPropertyDescriptor;

if (gOPD) {
    try {
        gOPD([], 'length');
    } catch (e) {
        // Handle broken gOPD in IE8
        gOPD = null;
    }
}

functionsHaveNames.functionsHaveConfigurableNames = function() {
    return functionsHaveNames() && gOPD && !!gOPD(function () {}, 'name').configurable;
};

const $bind = Function.prototype.bind;

functionsHaveNames.boundFunctionsHaveNames = function() {
    return functionsHaveNames() && typeof $bind === 'function' && function f() {}.bind().name !== '';
};

module.exports = functionsHaveNames;
```