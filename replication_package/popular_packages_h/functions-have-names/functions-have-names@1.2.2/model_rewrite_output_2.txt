The Node.js code defines a module that exports a function `functionsHaveNames`. This function checks if the `name` property of a function is of type 'string'. Along with this, it attaches two additional properties to this function:

1. `functionsHaveConfigurableNames`: This is a function that checks if functions have names and whether the names are configurable (if `getOwnPropertyDescriptor` is available and working properly on the current environment).
2. `boundFunctionsHaveNames`: This function checks if the name property remains non-empty when a function is bound with the `Function.prototype.bind` method.

Here's a rewritten version of the original code:

```js
'use strict';

function functionsHaveNames() {
    return typeof function exampleFunction() {}.name === 'string';
}

let getOwnPropertyDesc = Object.getOwnPropertyDescriptor;

if (getOwnPropertyDesc) {
    try {
        getOwnPropertyDesc([], 'length');
    } catch (error) {
        // Internet Explorer 8 has a broken getOwnPropertyDescriptor implementation
        getOwnPropertyDesc = null;
    }
}

functionsHaveNames.functionsHaveConfigurableNames = function functionsHaveConfigurableNames() {
    if (!functionsHaveNames() || !getOwnPropertyDesc) {
        return false;
    }
    const functionDescriptor = getOwnPropertyDesc(function () {}, 'name');
    return !!functionDescriptor && functionDescriptor.configurable;
};

const functionBind = Function.prototype.bind;

functionsHaveNames.boundFunctionsHaveNames = function boundFunctionsHaveNames() {
    if (!functionsHaveNames() || typeof functionBind !== 'function') {
        return false;
    }
    return function exampleBound() {}.bind().name !== '';
};

module.exports = functionsHaveNames;
```