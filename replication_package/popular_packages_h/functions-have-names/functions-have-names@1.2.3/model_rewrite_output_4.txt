The provided Node.js code is a module that checks for certain features of JavaScript functions related to their names. 

1. **Functions Have Names**: The `functionsHaveNames` function checks if named functions have a `name` property of type string, which is a feature in JavaScript that gives functions a name attribute.

2. **Configurable Names**: The `functionsHaveConfigurableNames` method (attached to `functionsHaveNames`) checks if the `name` property on functions is configurable, which means you can change or delete the `name` property. It uses `Object.getOwnPropertyDescriptor` if it's available and working (it handles an exception likely related to older IE versions).

3. **Bound Functions Have Names**: The `boundFunctionsHaveNames` method checks if functions that are bound using `Function.prototype.bind` still maintain a `name` property.

The code conditionally utilizes `Object.getOwnPropertyDescriptor` to avoid issues on certain environments (like older versions of IE) where this might be broken. It also uses `Function.prototype.bind` to test function binding behavior.

Here is the rewritten code:

```javascript
'use strict';

function checkFunctionsHaveNames() {
    return typeof (function namedFunction() {}).name === 'string';
}

function getOwnPropertyDescriptorSafe(obj, prop) {
    try {
        return Object.getOwnPropertyDescriptor(obj, prop);
    } catch (e) {
        return null; // For environments like IE8 where gOPD might be broken
    }
}

function checkFunctionsHaveConfigurableNames() {
    if (!checkFunctionsHaveNames() || !getOwnPropertyDescriptorSafe) {
        return false;
    }
    const desc = getOwnPropertyDescriptorSafe(function () {}, 'name');
    return !!desc && !!desc.configurable;
}

function checkBoundFunctionsHaveNames() {
    const bindFunction = Function.prototype.bind;
    return checkFunctionsHaveNames() && typeof bindFunction === 'function' && (function tempFunction() {}).bind().name !== '';
}

checkFunctionsHaveNames.functionsHaveConfigurableNames = checkFunctionsHaveConfigurableNames;
checkFunctionsHaveNames.boundFunctionsHaveNames = checkBoundFunctionsHaveNames;

module.exports = checkFunctionsHaveNames;
```