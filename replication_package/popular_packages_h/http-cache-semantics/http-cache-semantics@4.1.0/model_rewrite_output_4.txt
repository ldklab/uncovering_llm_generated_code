The provided Node.js code defines a `CachePolicy` class, which is used to handle HTTP caching based on RFC 7234 standards. Here is a concise explanation of its functionality:

1. **Constants and Utility Functions:**
   - **Status Codes Sets:**
     - `statusCodeCacheableByDefault`: A set of HTTP status codes that are cacheable by default according to RFC 7231.
     - `understoodStatuses`: A set of HTTP status codes that the cache can handle.
     - `errorStatusCodes`: A set of server error status codes.
   - **Header Management:**
     - `hopByHopHeaders`: HTTP headers that should not be stored by caches or forwarded to the destination.
     - `excludedFromRevalidationUpdate`: Headers that should not be modified during revalidation.
   - **Utility Function `toNumberOrZero`:** Converts a string to a number, returning zero if itâ€™s not finite.

2. **CacheControl Parsing:**
   - `parseCacheControl`: Parses the Cache-Control header into an object.
   - `formatCacheControl`: Formats cache control directives back into a string.

3. **`CachePolicy` Class:**
   - **Constructor:** Initializes a cache policy instance with request and response headers and other optional parameters.
   - **Methods:**
     - `storable`: Determines if the response can be stored in the cache.
     - `satisfiesWithoutRevalidation`: Checks if a cached response satisfies a request without revalidation.
     - `responseHeaders`: Prepares headers for a response that may be served from the cache.
     - `revalidationHeaders`: Gets headers for revalidating a cache entry.

4. **Cache Management:**
   - `stale`: Determines if a cached response is stale.
   - `revalidatedPolicy`: Combines the previous cached response with new revalidation response data to create a new CachePolicy.

Below is a possible rewrite of the provided code while retaining its functionality:

```javascript
'use strict';

const CACHEABLE_STATUSES = new Set([200, 203, 204, 206, 300, 301, 404, 405, 410, 414, 501]);
const UNDERSTOOD_STATUSES = new Set([200, 203, 204, 300, 301, 302, 303, 307, 308, 404, 405, 410, 414, 501]);
const ERROR_STATUSES = new Set([500, 502, 503, 504]);

const HOP_BY_HOP_HEADERS = {
    date: true,
    connection: true,
    'keep-alive': true,
    'proxy-authenticate': true,
    'proxy-authorization': true,
    te: true,
    trailer: true,
    'transfer-encoding': true,
    upgrade: true,
};

const EXCLUDED_HEADERS = {
    'content-length': true,
    'content-encoding': true,
    'transfer-encoding': true,
    'content-range': true,
};

function parseCacheControl(header) {
    if (!header) return {};
    return header.trim().split(/\s*,\s*/).reduce((acc, part) => {
        const [key, value] = part.split(/\s*=\s*/, 2);
        acc[key] = value === undefined ? true : value.replace(/^"|"$/g, '');
        return acc;
    }, {});
}

function formatCacheControl(cc) {
    const parts = Object.entries(cc).map(([k, v]) => v === true ? k : `${k}=${v}`);
    return parts.length > 0 ? parts.join(', ') : undefined;
}

function isErrorResponse(response) {
    return !response || ERROR_STATUSES.has(response.status);
}

function toNumberOrZero(value) {
    const num = parseInt(value, 10);
    return isFinite(num) ? num : 0;
}

module.exports = class CachePolicy {
    constructor(req, res, options = {}) {
        const { shared = true, cacheHeuristic = 0.1, immutableMinTimeToLive = 86400000, ignoreCargoCult, _fromObject } = options;
        
        if (_fromObject) {
            this._fromObject(_fromObject);
            return;
        }

        if (!res || !res.headers) throw Error('Response headers missing');
        if (!req || !req.headers) throw Error('Request headers missing');

        this._isShared = shared;
        this._cacheHeuristic = cacheHeuristic;
        this._immutableMinTtl = immutableMinTimeToLive;
        this._responseTime = this.now();
        this._status = res.status || 200;
        this._resHeaders = res.headers;
        this._rescc = parseCacheControl(res.headers['cache-control']);
        this._method = req.method || 'GET';
        this._url = req.url;
        this._host = req.headers.host;
        this._noAuthorization = !req.headers.authorization;
        this._reqHeaders = res.headers.vary ? req.headers : null;
        this._reqcc = parseCacheControl(req.headers['cache-control']);

        if (ignoreCargoCult && 'pre-check' in this._rescc && 'post-check' in this._rescc) {
            delete this._rescc['pre-check'];
            delete this._rescc['post-check'];
            delete this._rescc['no-cache'];
            delete this._rescc['no-store'];
            delete this._rescc['must-revalidate'];
            this._resHeaders = { ...this._resHeaders, 'cache-control': formatCacheControl(this._rescc) };
            delete this._resHeaders.expires;
            delete this._resHeaders.pragma;
        }

        if (!res.headers['cache-control'] && /no-cache/.test(res.headers.pragma)) {
            this._rescc['no-cache'] = true;
        }
    }

    now() {
        return Date.now();
    }

    storable() {
        return !this._reqcc['no-store'] &&
               ['GET', 'HEAD', 'POST'].includes(this._method) &&
               understoodStatuses.has(this._status) &&
               !this._rescc['no-store'] &&
               (!this._isShared || !this._rescc.private) &&
               (!this._isShared || this._noAuthorization || this._allowsStoringAuthenticated()) &&
               (this._resHeaders.expires || this._rescc['max-age'] || (this._isShared && this._rescc['s-maxage']) || this._rescc.public || CACHEABLE_STATUSES.has(this._status));
    }

    _allowsStoringAuthenticated() {
        return this._rescc['must-revalidate'] || this._rescc.public || this._rescc['s-maxage'];
    }

    satisfiesWithoutRevalidation(req) {
        if (!req || !req.headers) throw Error('Request headers missing');

        const requestCC = parseCacheControl(req.headers['cache-control']);
        if (requestCC['no-cache'] || /no-cache/.test(req.headers.pragma)) {
            return false;
        }

        if (requestCC['max-age'] && this.age() > requestCC['max-age']) {
            return false;
        }

        if (requestCC['min-fresh'] && this.timeToLive() < 1000 * requestCC['min-fresh']) {
            return false;
        }

        if (this.stale()) {
            const allowsStale = requestCC['max-stale'] &&
                                !this._rescc['must-revalidate'] &&
                                (true === requestCC['max-stale'] || requestCC['max-stale'] > this.age() - this.maxAge());
            if (!allowsStale) {
                return false;
            }
        }

        return this._requestMatches(req, false);
    }

    _requestMatches(req, allowHeadMethod) {
        return (!this._url || this._url === req.url) &&
               this._host === req.headers.host &&
               (!req.method || this._method === req.method || (allowHeadMethod && 'HEAD' === req.method)) &&
               this._varyMatches(req);
    }
    
    _varyMatches(req) {
        if (!this._resHeaders.vary) return true;
        if (this._resHeaders.vary === '*') return false;

        const fields = this._resHeaders.vary.trim().toLowerCase().split(/\s*,\s*/);
        for (const name of fields) {
            if (req.headers[name] !== this._reqHeaders[name]) return false;
        }
        return true;
    }

    responseHeaders() {
        const headers = this._copyWithoutHopByHopHeaders(this._resHeaders);
        const age = this.age();

        if (age > 86400 && !this._hasExplicitExpiration() && this.maxAge() > 86400) {
            headers.warning = (headers.warning ? `${headers.warning}, ` : '') + '113 - "rfc7234 5.5.4"';
        }
        headers.age = `${Math.round(age)}`;
        headers.date = new Date(this.now()).toUTCString();
        return headers;
    }

    _copyWithoutHopByHopHeaders(inHeaders) {
        const headers = {};
        for (const name in inHeaders) {
            if (HOP_BY_HOP_HEADERS[name]) continue;
            headers[name] = inHeaders[name];
        }
        if (inHeaders.connection) {
            for (const name of inHeaders.connection.trim().split(/\s*,\s*/)) {
                delete headers[name];
            }
        }
        if (headers.warning) {
            const warnings = headers.warning.split(/,/).filter(warn => !/^\s*1[0-9][0-9]/.test(warn));
            headers.warning = warnings.join(',').trim();
        }
        return headers;
    }

    age() {
        return toNumberOrZero(this._resHeaders.age) + (this.now() - this._responseTime) / 1000;
    }

    maxAge() {
        if (!this.storable() || this._rescc['no-cache']) return 0;
        if (this._isShared && this._resHeaders['set-cookie'] && !this._rescc.public && !this._rescc.immutable) return 0;
        if (this._resHeaders.vary === '*') return 0;
        
        if (this._isShared) {
            if (this._rescc['proxy-revalidate']) return 0;
            if (this._rescc['s-maxage']) return toNumberOrZero(this._rescc['s-maxage']);
        }
        
        if (this._rescc['max-age']) return toNumberOrZero(this._rescc['max-age']);
        
        const serverDate = this.date();
        if (this._resHeaders.expires) {
            const expires = Date.parse(this._resHeaders.expires);
            if (isNaN(expires) || expires < serverDate) return 0;
            return Math.max(this._immutableMinTtl, (expires - serverDate) / 1000);
        }
        
        if (this._resHeaders['last-modified']) {
            const lastModified = Date.parse(this._resHeaders['last-modified']);
            if (isFinite(lastModified) && serverDate > lastModified) {
                return Math.max(this._immutableMinTtl, ((serverDate - lastModified) / 1000) * this._cacheHeuristic);
            }
        }
        
        return this._immutableMinTtl;
    }

    timeToLive() {
        const age = this.maxAge() - this.age();
        const staleIfErrorAge = age + toNumberOrZero(this._rescc['stale-if-error']);
        const staleWhileRevalidateAge = age + toNumberOrZero(this._rescc['stale-while-revalidate']);
        return Math.max(0, age, staleIfErrorAge, staleWhileRevalidateAge) * 1000;
    }
    
    stale() {
        return this.maxAge() <= this.age();
    }

    revalidationHeaders(req) {
        if (!req || !req.headers) throw Error('Request headers missing');
        const headers = this._copyWithoutHopByHopHeaders(req.headers);

        delete headers['if-range'];

        if (!this._requestMatches(req, true) || !this.storable()) {
            delete headers['if-none-match'];
            delete headers['if-modified-since'];
            return headers;
        }

        if (this._resHeaders.etag) {
            headers['if-none-match'] = headers['if-none-match'] 
                ? `${headers['if-none-match']}, ${this._resHeaders.etag}` 
                : this._resHeaders.etag;
        }

        const forbidsWeakValidators = headers['accept-ranges'] || headers['if-match'] || headers['if-unmodified-since'] || (this._method && this._method !== 'GET');
        if (forbidsWeakValidators) {
            delete headers['if-modified-since'];

            if (headers['if-none-match']) {
                const etags = headers['if-none-match'].split(/,/).filter(etag => !/^\s*W\//.test(etag));
                headers['if-none-match'] = etags.join(',').trim();
            }
        } else if (this._resHeaders['last-modified'] && !headers['if-modified-since']) {
            headers['if-modified-since'] = this._resHeaders['last-modified'];
        }

        return headers;
    }

    revalidatedPolicy(request, response) {
        if (!request || !request.headers) throw Error('Request headers missing');
        
        if (this._useStaleIfError() && isErrorResponse(response)) {
            return { modified: false, matches: false, policy: this };
        }
        
        if (!response || !response.headers) throw Error('Response headers missing');

        let matches = false;
        if (response.status !== undefined && response.status !== 304) {
            matches = false;
        } else if (response.headers.etag && !/^\s*W\//.test(response.headers.etag)) {
            matches = this._resHeaders.etag && this._resHeaders.etag.replace(/^\s*W\//, '') === response.headers.etag;
        } else if (this._resHeaders.etag && response.headers.etag) {
            matches = this._resHeaders.etag.replace(/^\s*W\//, '') === response.headers.etag.replace(/^\s*W\//, '');
        } else if (this._resHeaders['last-modified']) {
            matches = this._resHeaders['last-modified'] === response.headers['last-modified'];
        } else if (!this._resHeaders.etag && !this._resHeaders['last-modified'] && !response.headers.etag && !response.headers['last-modified']) {
            matches = true;
        }

        if (!matches) {
            return {
                policy: new this.constructor(request, response, { shared: this._isShared, cacheHeuristic: this._cacheHeuristic, immutableMinTimeToLive: this._immutableMinTtl }),
                modified: response.status !== 304,
                matches: false,
            };
        }

        const headers = Object.keys(this._resHeaders).reduce((acc, key) => {
            acc[key] = key in response.headers && !EXCLUDED_HEADERS[key] ? response.headers[key] : this._resHeaders[key];
            return acc;
        }, {});

        const newResponse = { ...response, status: this._status, method: this._method, headers };
        
        return {
            policy: new this.constructor(request, newResponse, { shared: this._isShared, cacheHeuristic: this._cacheHeuristic, immutableMinTimeToLive: this._immutableMinTtl }),
            modified: false,
            matches: true,
        };
    }

    static fromObject(obj) {
        return new this(undefined, undefined, { _fromObject: obj });
    }

    _fromObject(obj) {
        if (this._responseTime) throw Error('Reinitialized');
        if (!obj || obj.v !== 1) throw Error('Invalid serialization');
        
        this._responseTime = obj.t;
        this._isShared = obj.sh;
        this._cacheHeuristic = obj.ch;
        this._immutableMinTtl = obj.imm !== undefined ? obj.imm : 86400000;
        this._status = obj.st;
        this._resHeaders = obj.resh;
        this._rescc = obj.rescc;
        this._method = obj.m;
        this._url = obj.u;
        this._host = obj.h;
        this._noAuthorization = obj.a;
        this._reqHeaders = obj.reqh;
        this._reqcc = obj.reqcc;
    }

    toObject() {
        return {
            v: 1,
            t: this._responseTime,
            sh: this._isShared,
            ch: this._cacheHeuristic,
            imm: this._immutableMinTtl,
            st: this._status,
            resh: this._resHeaders,
            rescc: this._rescc,
            m: this._method,
            u: this._url,
            h: this._host,
            a: this._noAuthorization,
            reqh: this._reqHeaders,
            reqcc: this._reqcc,
        };
    }
};
```