The provided Node.js code primarily focuses on creating a function `createJiti` aimed at generating a JITI (Just-In-Time Import) instance. Here's how it functions:

1. **Imports and Variables**:
   - It imports `createRequire` from Node's `module` package to provide CommonJS compatibility.
   - It imports two custom modules from `../dist/jiti.cjs` and `../dist/babel.cjs`.

2. **Error Handling**:
   - It defines a function `onError` that throws errors, allowing for debugging through stack traces.

3. **Dynamic Imports**:
   - The `nativeImport` function is a shorthand for performing dynamic ES module imports.

4. **Creating JITI Instance**:
   - The core `createJiti` function allows creating a JITI instance with specific options.
   - If a `transform` property isn't provided in `opts`, it uses a default `transform`.
   - It returns a JITI instance with customized options, including `onError`, `nativeImport`, and `createRequire`.

5. **Exports**:
   - The `createJiti` function is exported using both the `module.exports` object and a direct property assignment.

Here's a rewrite of the Node.js code:

```javascript
const { createRequire } = require("node:module");
const jitiFactory = require("../dist/jiti.cjs");
const defaultTransform = require("../dist/babel.cjs");

function handleError(error) {
  throw error; // Enables stack trace analysis
}

const dynamicImport = (moduleId) => import(moduleId);

function initializeJiti(moduleId, options = {}) {
  if (!options.transform) {
    options = { ...options, transform: defaultTransform };
  }
  return jitiFactory(moduleId, options, {
    onError: handleError,
    nativeImport: dynamicImport,
    createRequire,
  });
}

module.exports = initializeJiti;
module.exports.initializeJiti = initializeJiti;
```