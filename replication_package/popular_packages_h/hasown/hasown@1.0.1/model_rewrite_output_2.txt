The provided Node.js code defines a utility function `curry` which transforms a given function into a curried version of itself. Currying is a technique where a function, instead of taking all arguments at once, takes the first one and returns a new function that takes the next argument, and so on until all arguments are provided.

Here's a breakdown of how this specific code works:

1. **hasOwn**: A reference to `Object.prototype.hasOwnProperty`, used to check if an object has a specific property.

2. **curry**: This function takes another function `fn` and an optional number `n`. If `n` is not provided, it defaults to the length of `fn`'s expected arguments.

3. **getCurryClosure**: A helper function that closes over any previously provided arguments. It returns a new function (`curryClosure`) which concatenates these arguments with new ones until the number of arguments reaches `n`.

4. **curryClosure**: A function returned by `getCurryClosure`, it gathers arguments until the required number is met and then calls `fn` with all collected arguments.

5. **module.exports**: Exports a curried function that checks if an object has a particular property using `hasOwnProperty`.

Here's a rewritten version of the code:

```javascript
'use strict';

const hasOwnProperty = Object.prototype.hasOwnProperty;

function curry(fn, numArgs) {
    const arity = typeof numArgs === 'number' ? numArgs : fn.length;

    function createCurriedFunction(previousArgs = []) {
        return function curriedFunction(...newArgs) {
            const allArgs = previousArgs.concat(newArgs);

            if (allArgs.length >= arity) {
                return fn.apply(this, allArgs);
            }

            return createCurriedFunction(allArgs);
        };
    }

    return createCurriedFunction();
}

module.exports = curry(function (object, property) {
    return hasOwnProperty.call(object, property);
});
```