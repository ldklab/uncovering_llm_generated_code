The given Node.js code provides a custom `curry` function. Currying is a technique where a function takes multiple arguments one at a time, allowing for the partial application of functions. This specific implementation of currying involves a few key components:

1. **Curry Function**: The primary function `curry` takes another function `fn` and a number `n` as arguments, where `n` is the expected number of arguments for `fn`. If `n` is not explicitly provided, it defaults to the length of `fn`, i.e., the number of parameters the function expects.

2. **Get Curry Closure Function**: This function returns a new function, `curryClosure`, which aggregates arguments over successive calls until the required number `n` of arguments is collected. It uses an initial empty array `prevArgs` to track the collected arguments across these calls.

3. **Curry Closure Function**: This inner function, `curryClosure`, is executed every time more arguments are added through subsequent calls. It checks if the number of collected arguments is less than `n`. If so, it returns itself with the updated arguments. Once the necessary number of arguments is reached or exceeded, it finally calls the original function `fn` with the collected arguments.

4. **Exported Module**: Finally, the curried version of a function that checks if a property exists directly on an object (using `hasOwnProperty`) is exported. This is done by currying the function with two parameters: `object` and `property`.

Here is a possible rewrite of the Node.js code:

```javascript
'use strict';

const { hasOwnProperty } = Object.prototype;

const curry = (fn, n = fn.length) => {
  const getCurryClosure = (prevArgs = []) => (...args) => {
    const allArgs = [...prevArgs, ...args];
    return allArgs.length < n ? getCurryClosure(allArgs) : fn(...allArgs);
  };
  return getCurryClosure();
};

module.exports = curry((object, property) => hasOwnProperty.call(object, property));
```