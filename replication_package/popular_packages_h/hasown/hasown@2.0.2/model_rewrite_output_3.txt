The provided Node.js code is using the `function-bind` module to create a bound version of the `hasOwnProperty` method from Object's prototype. Here's how the code works:

1. `call` is assigned the `call` method from `Function.prototype`. This is used to call functions with a specified `this` value and arguments.
 
2. `$hasOwn` is assigned the `hasOwnProperty` method from `Object.prototype`. This method checks if an object has a property as its own property, rather than inheriting it from the prototype chain.

3. `bind` is required in from the `function-bind` module. This module provides a function to bind context to functions.

4. The module exports a bound version of `hasOwnProperty` using `Function.prototype.call`, where the context is set to the object being checked. Essentially, it exports a function that allows checking if an object has a specified own property, without having to explicitly call `hasOwnProperty` on the object.

Here's a rewritten version of the code organized in a single markdown code block:

```javascript
'use strict';

var callFunction = Function.prototype.call;
var hasOwnMethod = Object.prototype.hasOwnProperty;
var functionBind = require('function-bind');

module.exports = functionBind.call(callFunction, hasOwnMethod);
```