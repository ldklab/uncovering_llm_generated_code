The Node.js code above exports a bound function. Here's what each part of the code does:

1. `'use strict';`: This is a directive that enables the strict mode in JavaScript, which helps catch common errors and promotes safer code by, for example, throwing errors for actions like assigning to undeclared variables.
   
2. `var call = Function.prototype.call;`: This assigns the `call` method from the `Function` prototype to a variable called `call`. This method allows you to call a function with a specified `this` value and individual arguments.

3. `var $hasOwn = Object.prototype.hasOwnProperty;`: This assigns the native `hasOwnProperty` method from the `Object` prototype to a variable called `$hasOwn`. The `hasOwnProperty` method checks if an object has a property defined directly on itself (not via inheritance).

4. `var bind = require('function-bind');`: This imports a module named `function-bind`, which likely provides an implementation of the `Function.prototype.bind` method. This method creates a new function that, when called, has its `this` keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.

5. `module.exports = bind.call(call, $hasOwn);`: This binds the `call` method to the `$hasOwn` method using the imported `function-bind` module. The result is a function that can be used to call the `hasOwnProperty` method on any object in a safe manner. The bound function is then exported from the module, allowing other parts of the application to safely check for ownership of a property on objects.

Here is the rewritten code:

```javascript
'use strict';

const callMethod = Function.prototype.call;
const objectHasOwnProperty = Object.prototype.hasOwnProperty;
const bind = require('function-bind');

// Export a bound version of the hasOwnProperty function
module.exports = bind.call(callMethod, objectHasOwnProperty);
```