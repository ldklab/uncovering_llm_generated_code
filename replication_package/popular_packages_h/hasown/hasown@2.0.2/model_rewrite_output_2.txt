The provided Node.js code utilizes the `bind` method from the `function-bind` module to create a new function that allows checking if a specific property exists directly on an object (not through the prototype chain). Essentially, it's creating a wrapped or bound version of `Object.prototype.hasOwnProperty` that's more reliable for use as a standalone method or when using it in array methods like `Array.prototype.map`.

Here's a breakdown of the code:
- The strict mode is enabled at the start.
- The native `Function.prototype.call` method is stored in the `call` variable.
- `Object.prototype.hasOwnProperty` is stored in the `$hasOwn` variable for checking object properties.
- The `bind` module is required and used to create a new bound function.
- The bound version of `call` with `hasOwnProperty` as the target function is exported, allowing it to be used elsewhere in the application to check for own properties reliably.

Below is the code rewritten from the explanation:

```javascript
'use strict';

var bind = require('function-bind');

// Store Object.prototype.hasOwnProperty for later use
var hasOwnProperty = Object.prototype.hasOwnProperty;

// Bind call method to hasOwnProperty, creating a standalone method
var boundHasOwnProperty = bind.call(Function.prototype.call, hasOwnProperty);

// Export the bound method for checking object properties
module.exports = boundHasOwnProperty;
```