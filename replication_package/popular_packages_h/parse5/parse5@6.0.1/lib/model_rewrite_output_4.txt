The given Node.js code defines three functions that are exported as part of a module: `parse`, `parseFragment`, and `serialize`. These functions utilize `Parser` and `Serializer` classes to process HTML strings or nodes.

1. **parse(html, options):** Takes an HTML string and optional configuration options. It creates a `Parser` object with the given options and uses it to parse the HTML string.

2. **parseFragment(fragmentContext, html, options):** Similar to `parse`, but it allows parsing of HTML fragments, which might not be full HTML documents. If `fragmentContext` is a string, it's treated as the HTML content, and the original `html` argument is utilized as the `options`.

3. **serialize(node, options):** Takes a node and optional configuration options to create a `Serializer` object and convert the node back into an HTML string using the `serialize` method of `Serializer`.

Here's a possible rewrite of the code:

```javascript
'use strict';

const Parser = require('./parser');
const Serializer = require('./serializer');

exports.parse = (html, options) => new Parser(options).parse(html);

exports.parseFragment = (fragmentContext, html, options) => {
    if (typeof fragmentContext === 'string') {
        [fragmentContext, html, options] = [null, fragmentContext, html];
    }
    return new Parser(options).parseFragment(html, fragmentContext);
};

exports.serialize = (node, options) => new Serializer(node, options).serialize();
```