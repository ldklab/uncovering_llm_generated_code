The provided Node.js code is a module that deals with parsing and serializing HTML content. It leverages two hypothetical classes, `Parser` and `Serializer`, which are likely defined in separate files (`parser.js` and `serializer.js`) imported at the top of the code. The module exports three functions: `parse`, `parseFragment`, and `serialize`.

- `parse(html, options)`: This function initializes a new `Parser` instance with given options and invokes its `parse` method on the provided HTML string to get and return the parsed result.

- `parseFragment(fragmentContext, html, options)`: This function is a specialized version of `parse` that allows parsing an HTML fragment. If the `fragmentContext` is a string, it is reassigned to `html`, and the original `html` variable is reassigned to `options`, with `fragmentContext` set to null. It then creates a `Parser` instance and calls its `parseFragment` method with the supplied HTML and fragment context.

- `serialize(node, options)`: This function creates a `Serializer` instance using a given node and options, then calls its `serialize` method to return the serialized HTML string.

Here is a rewritten version of the Node.js code:

```javascript
'use strict';

const Parser = require('./parser');
const Serializer = require('./serializer');

// Exported functions for parsing and serializing
module.exports = {
    parse(html, options) {
        const parser = new Parser(options);
        return parser.parse(html);
    },
    parseFragment(fragmentContext, html, options) {
        if (typeof fragmentContext === 'string') {
            options = html;
            html = fragmentContext;
            fragmentContext = null;
        }
        const parser = new Parser(options);
        return parser.parseFragment(html, fragmentContext);
    },
    serialize(node, options) {
        const serializer = new Serializer(node, options);
        return serializer.serialize();
    }
};
```