The provided Node.js code defines a module which handles HTML parsing and serialization. It exports three main functions: `parse`, `parseFragment`, and `serialize`.

1. `parse(html, options)`: This function takes an HTML string and optional parsing options, creates an instance of `Parser` using these options, and returns the result of parsing the HTML using the `parser.parse` method.

2. `parseFragment(fragmentContext, html, options)`: This function is used to parse an HTML fragment. If the `fragmentContext` is a string, it assumes that it is HTML and adjusts the arguments accordingly. It then creates an instance of `Parser` with any given options and parses the fragment using the `parser.parseFragment` method with the HTML and context.

3. `serialize(node, options)`: This function serializes a DOM node back into an HTML string. It creates an instance of `Serializer` with the node and any serialization options, and then returns the result of calling `serializer.serialize`.

Here's a rewritten version of the Node.js code:

```javascript
'use strict';

const Parser = require('./parser');
const Serializer = require('./serializer');

module.exports = {
    parse(html, options) {
        return new Parser(options).parse(html);
    },

    parseFragment(contextOrHtml, maybeHtml, options) {
        let fragmentContext = null;
        let html = contextOrHtml;

        if (typeof contextOrHtml === 'string') {
            options = maybeHtml;
        } else {
            fragmentContext = contextOrHtml;
            html = maybeHtml;
        }

        return new Parser(options).parseFragment(html, fragmentContext);
    },

    serialize(node, options) {
        return new Serializer(node, options).serialize();
    }
};
```