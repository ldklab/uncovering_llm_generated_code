The provided Node.js code is managing the setup and export of a polyfill for a certain functionality. Here's a breakdown of the code:

1. `'use strict';` - This directive is used to enable strict mode, which helps catch common coding errors and "unsafe" actions.

2. Imports several modules:
   - `define-properties` is imported to define properties on an object.
   - `call-bind` is imported to create a function with a specified `this` value and arguments.
   - A local `implementation` module, which likely contains the core logic of the desired functionality.
   - A local `getPolyfill` module, which can retrieve the appropriate polyfill for the functionality.
   - A local `shim` module, which likely involves applying the polyfill to the environment if necessary.

3. `callBind(getPolyfill(), Object);` - This calls `getPolyfill` to retrieve the polyfill function and then binds it to the `Object` context.

4. `define()` is used to attach additional properties to the `polyfill` function:
   - `getPolyfill`, which provides access to the function that retrieves the polyfill.
   - `implementation`, which exposes the core implementation logic.
   - `shim`, which exposes the functionality to apply the polyfill.

5. The `polyfill` function is exported as the module's public API, now enhanced with additional properties.

Here is a possible rewrite of this code:

```javascript
'use strict';

const defineProperties = require('define-properties');
const callBind = require('call-bind');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

const polyfill = callBind(getPolyfill(), Object);

defineProperties(polyfill, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});

module.exports = polyfill;
```