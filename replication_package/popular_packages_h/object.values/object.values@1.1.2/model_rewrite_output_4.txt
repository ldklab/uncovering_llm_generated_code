The given Node.js code sets up a polyfill for a certain feature by importing and utilizing specific utility functions. Here's the functionality broken down:

1. `define`: This module is used to define properties on objects.
2. `callBind`: This module is utilized to bind a given function to a particular context or object. It is binding the polyfill function to the `Object`.
3. `implementation`, `getPolyfill`, and `shim`: These are imported from local files which likely contain the custom logic for the polyfill implementation, a function to get the appropriate polyfill, and a shim setup, respectively.
4. `polyfill`: This is created by calling `getPolyfill()` and binding its result to `Object` using `callBind`.
5. `define`: This is used again to attach additional properties (`getPolyfill`, `implementation`, and `shim`) to the `polyfill` function.
6. Finally, the `polyfill` function (with additional properties) is exported as a module.

Below is a possible rewrite of this Node.js code:

```javascript
'use strict';

const defineProperties = require('define-properties');
const bindFunction = require('call-bind');

const featureImplementation = require('./implementation');
const fetchPolyfill = require('./polyfill');
const applyShim = require('./shim');

const featurePolyfill = bindFunction(fetchPolyfill(), Object);

defineProperties(featurePolyfill, {
	getPolyfill: fetchPolyfill,
	implementation: featureImplementation,
	shim: applyShim
});

module.exports = featurePolyfill;
```