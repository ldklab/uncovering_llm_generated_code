The given Node.js code dynamically exports a module based on the environment in which it is running, allowing for compatibility with Webpack as well as non-Webpack environments. Here's a breakdown of the functionality:

1. **Conditional `require` Assignment**: 
   - It checks if `__webpack_require__` is a function, which would indicate that the code is being processed by Webpack.
   - If so, it uses `__non_webpack_require__` to reference the non-Webpack version of `require`, allowing for loading modules that should bypass Webpack processing.
   - Otherwise, the standard `require` function is used.

2. **Module Export Logic**:
   - It checks if there is a function called `addon` on the `runtimeRequire`. 
   - If such a function exists, it implies that the platform supports native module resolving, and thus it binds this `addon` method and exports it.
   - If no such function is available, it defaults to exporting the module defined in `./node-gyp-build.js`, which suggests using a precompiled binary for the runtime environment.

The rewritten code below retains the same logic and functionality:

```javascript
const isWebpack = typeof __webpack_require__ === 'function';
const requireFunction = isWebpack ? __non_webpack_require__ : require; // eslint-disable-line

if (typeof requireFunction.addon === 'function') {
  module.exports = requireFunction.addon.bind(requireFunction);
} else {
  module.exports = require('./node-gyp-build.js');
}
```