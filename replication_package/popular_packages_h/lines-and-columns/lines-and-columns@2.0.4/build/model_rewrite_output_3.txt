The provided Node.js code defines a class `LinesAndColumns` that processes a string to keep track of line and column positions based on newline characters (`\n` and `\r\n`). The class provides methods to:

1. **locationForIndex(index):** Determine the line and column location for a given character index. It returns a `{ line, column }` object if the index is valid, or `null` if it is out of bounds.

2. **indexForLocation(location):** Calculate the character index from a given line and column location. It returns the index if the location is within bounds, or `null` for invalid locations.

3. **lengthOfLine(line):** Get the length of a specified line, including the line-ending characters at the end of each line except the last one.

Here's a possible rewrite of the code:

```javascript
"use strict";

class LinesAndColumns {
    constructor(string) {
        this.length = string.length;
        this.offsets = [];
        
        let offset = 0;
        for (let i = 0; i < string.length; i++) {
            if (string[i] === '\n' || (string[i] === '\r' && string[i + 1] !== '\n')) {
                this.offsets.push(offset);
            }
            if (string[i] === '\r' && string[i + 1] === '\n') {
                i++; // Skip the '\n' in '\r\n'
            }
            offset++;
        }
        this.offsets.push(offset); // Push the final offset
    }

    locationForIndex(index) {
        if (index < 0 || index > this.length) return null;

        let line = 0;
        while (this.offsets[line + 1] <= index) {
            line++;
        }
        
        let column = index - this.offsets[line];
        return { line, column };
    }

    indexForLocation({ line, column }) {
        if (line < 0 || line >= this.offsets.length) return null;
        if (column < 0 || column > this.lengthOfLine(line)) return null;

        return this.offsets[line] + column;
    }

    lengthOfLine(line) {
        const offset = this.offsets[line];
        const nextOffset = (line === this.offsets.length - 1)
            ? this.length
            : this.offsets[line + 1];
        return nextOffset - offset;
    }
}

module.exports = { LinesAndColumns };
```