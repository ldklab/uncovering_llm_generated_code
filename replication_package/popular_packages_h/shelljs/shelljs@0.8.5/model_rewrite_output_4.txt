The Node.js script sets up a framework for executing Unix shell commands within the Node.js environment by wrapping Node's API. It leverages the ShellJS library to provide synchronous command execution, glob pattern matching, environment variable manipulation, and configuration management for controlling various behaviors, such as verbosity, error handling, and output silence. 

Here's a breakdown of the script functionality:
1. **Module Loading**: Loads required modules and commands available in the ShellJS library.
2. **Exported Functions**:
   - `exit`: Exits the process with a specified code.
   - `error`: Handles error reporting.
   - `ShellString`: Utility for converting a string into a shell-compatible format.
   - `env`: Provides access to Node.js's `process.env` for reading and writing environment variables.
3. **Pipe-like Operations**: Enables chaining of shell commands in a pipe-like manner using commands like `sed`, `grep`, `cat`, `exec`, `to`, and `toEnd`.
4. **Configuration Management**: Offers various configuration settings like `silent`, `fatal`, `verbose`, and `globOptions` to control behavior during shell command execution.
5. **Reset Functionality**: Provides a `reset` method to revert any custom configuration settings to their default values.

Below is a possible rewrite of the original Node.js code:

```javascript
// ShellJS - Shell commands within Node.js
// License: (c) 2012 Artur Adib - http://github.com/shelljs/shelljs

const common = require('./src/common');
const commands = require('./commands'); // Array of command names

// Load all default commands
commands.forEach(command => require(`./src/${command}`));

// Export the exit function, allowing process termination
exports.exit = process.exit;

// Export error handling utilities
exports.error = require('./src/error');

// Export ShellString utility for shell-compatible strings
exports.ShellString = common.ShellString;

// Export environment variable access
exports.env = process.env;

// Export the configuration object
exports.config = common.config;

// Configuration documentation and examples
//
// - silent: Suppress output if true (default false).
// - fatal: Throw errors on command failures if true (default false).
// - verbose: Log each command if true (default false).
// - globOptions: Options for glob.sync(), {nodir: false} by default.
// - reset(): Reset configuration to default values.

/**
 * ShellJS Configuration Reset
 * Resets all config options to default values.
 */
exports.config.reset = function() {
  exports.config.fatal = false;
  exports.config.silent = false;
  exports.config.verbose = false;
  exports.config.globOptions = {};
};

// Example pipe usage:
// grep('foo', 'file1.txt').sed(/o/g, 'a').to('output.txt');
// echo('files:', ls().grep('o'));
// cat('test.js').exec('node'); // Pipe to exec() call
```