The provided code defines a JavaScript module for compressing and decompressing strings using an LZ-based compression algorithm version 1.4.5. Here is a detailed explanation of its functionality:

1. **Data Structures**: 
   - It utilizes a base64 encoding string `keyStrBase64` and a URI safe encoding string `keyStrUriSafe`.
   - It maintains a reverse dictionary `baseReverseDic` to map characters from the encoding strings to their index positions.

2. **Compression Methods**:
   - `compressToBase64`, `compressToUTF16`, `compressToUint8Array`, `compressToEncodedURIComponent`, and `compress`: These functions compress a given string into different formats like Base64, UTF16, Uint8Array, and URI encoded strings.
   - `_compress`: A helper function used by other compression methods, responsible for executing the actual compression logic using the LZ algorithm.

3. **Decompression Methods**:
   - `decompressFromBase64`, `decompressFromUTF16`, `decompressFromUint8Array`, `decompressFromEncodedURIComponent`, and `decompress`: These functions decompress previously compressed strings in various formats back to their original form.
   - `_decompress`: A helper function similar to `_compress`, used by other decompression methods to perform the actual decompression logic.

4. **Module Export**:
   - The module is set up to be compatible with AMD, Node.js module format, and AngularJS. It exports the `LZString` object based on the environment it is running in.

Here's a possible rewrite of the code with similar functionality:

```javascript
const LZString = (() => {
  const f = String.fromCharCode;
  const keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  const keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
  const baseReverseDic = {};

  function getBaseValue(alphabet, character) {
    if (!baseReverseDic[alphabet]) {
      baseReverseDic[alphabet] = {};
      for (let i = 0; i < alphabet.length; i++) {
        baseReverseDic[alphabet][alphabet[i]] = i;
      }
    }
    return baseReverseDic[alphabet][character];
  }

  function _compress(uncompressed, bitsPerChar, getCharFromInt) {
    if (uncompressed == null) return "";
    let context_dictionary = {},
        context_dictionaryToCreate = {},
        context_c = "",
        context_wc = "",
        context_w = "",
        context_enlargeIn = 2,
        context_dictSize = 3,
        context_numBits = 2,
        context_data = [],
        context_data_val = 0,
        context_data_position = 0,
        ii;

    // Compression process
    for (ii = 0; ii < uncompressed.length; ii++) {
      context_c = uncompressed[ii];
      if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
        context_dictionary[context_c] = context_dictSize++;
        context_dictionaryToCreate[context_c] = true;
      }

      context_wc = context_w + context_c;
      if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
        context_w = context_wc;
      } else {
        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
          for (let i = 0; i < context_numBits; i++) {
            context_data_val = (context_data_val << 1);
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
          }
          let value = context_w.charCodeAt(0);
          for (let i = 0; i < 8; i++) {
            context_data_val = (context_data_val << 1) | (value & 1);
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
          context_enlargeIn--;
          if (context_enlargeIn == 0) {
            context_enlargeIn = Math.pow(2, context_numBits);
            context_numBits++;
          }
          delete context_dictionaryToCreate[context_w];
        } else {
          let value = context_dictionary[context_w];
          for (let i = 0; i < context_numBits; i++) {
            context_data_val = (context_data_val << 1) | (value & 1);
            if (context_data_position == bitsPerChar - 1) {
              context_data_position = 0;
              context_data.push(getCharFromInt(context_data_val));
              context_data_val = 0;
            } else {
              context_data_position++;
            }
            value = value >> 1;
          }
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        context_dictionary[context_wc] = context_dictSize++;
        context_w = String(context_c);
      }
    }

    if (context_w !== "") {
      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
        for (let i = 0; i < context_numBits; i++) {
          context_data_val = (context_data_val << 1);
          if (context_data_position == bitsPerChar - 1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
        }
        let value = context_w.charCodeAt(0);
        for (let i = 0; i < 8; i++) {
          context_data_val = (context_data_val << 1) | (value & 1);
          if (context_data_position == bitsPerChar - 1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }
        context_enlargeIn--;
        if (context_enlargeIn == 0) {
          context_enlargeIn = Math.pow(2, context_numBits);
          context_numBits++;
        }
        delete context_dictionaryToCreate[context_w];
      } else {
        let value = context_dictionary[context_w];
        for (let i = 0; i < context_numBits; i++) {
          context_data_val = (context_data_val << 1) | (value & 1);
          if (context_data_position == bitsPerChar - 1) {
            context_data_position = 0;
            context_data.push(getCharFromInt(context_data_val));
            context_data_val = 0;
          } else {
            context_data_position++;
          }
          value = value >> 1;
        }
      }
      context_enlargeIn--;
      if (context_enlargeIn == 0) {
        context_enlargeIn = Math.pow(2, context_numBits);
        context_numBits++;
      }
    }

    // Mark the end of the stream
    let value = 2;
    for (let i = 0; i < context_numBits; i++) {
      context_data_val = (context_data_val << 1) | (value & 1);
      if (context_data_position == bitsPerChar - 1) {
        context_data_position = 0;
        context_data.push(getCharFromInt(context_data_val));
        context_data_val = 0;
      } else {
        context_data_position++;
      }
      value = value >> 1;
    }

    while (true) {
      context_data_val = (context_data_val << 1);
      if (context_data_position == bitsPerChar - 1) {
        context_data.push(getCharFromInt(context_data_val));
        break;
      } else {
        context_data_position++;
      }
    }

    return context_data.join('');
  }

  function _decompress(length, resetValue, getNextValue) {
    const dictionary = [];
    let next, bits, resb, maxpower, power, c = '',
        enlargeIn = 4, dictSize = 4, numBits = 3, entry = '', result = [], w,
        data = { val: getNextValue(0), position: resetValue, index: 1 };

    for (let i = 0; i < 3; i++) dictionary[i] = i;

    bits = 0;
    maxpower = Math.pow(2, 2);
    power = 1;
    while (power !== maxpower) {
      resb = data.val & data.position;
      data.position >>= 1;
      if (data.position === 0) {
        data.position = resetValue;
        data.val = getNextValue(data.index++);
      }
      bits |= (resb > 0 ? 1 : 0) * power;
      power <<= 1;
    }

    switch (next = bits) {
      case 0:
        bits = 0;
        maxpower = Math.pow(2, 8);
        power = 1;
        while (power !== maxpower) {
          resb = data.val & data.position;
          data.position >>= 1;
          if (data.position === 0) {
            data.position = resetValue;
            data.val = getNextValue(data.index++);
          }
          bits |= (resb > 0 ? 1 : 0) * power;
          power <<= 1;
        }
        c = f(bits);
        break;
      case 1:
        bits = 0;
        maxpower = Math.pow(2, 16);
        power = 1;
        while (power !== maxpower) {
          resb = data.val & data.position;
          data.position >>= 1;
          if (data.position === 0) {
            data.position = resetValue;
            data.val = getNextValue(data.index++);
          }
          bits |= (resb > 0 ? 1 : 0) * power;
          power <<= 1;
        }
        c = f(bits);
        break;
      case 2:
        return "";
    }

    dictionary[3] = w = c;
    result.push(c);

    while (true) {
      if (data.index > length) return "";

      bits = 0;
      maxpower = Math.pow(2, numBits);
      power = 1;
      while (power !== maxpower) {
        resb = data.val & data.position;
        data.position >>= 1;
        if (data.position === 0) {
          data.position = resetValue;
          data.val = getNextValue(data.index++);
        }
        bits |= (resb > 0 ? 1 : 0) * power;
        power <<= 1;
      }

      switch (c = bits) {
        case 0:
          bits = 0;
          maxpower = Math.pow(2, 8);
          power = 1;
          while (power !== maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position === 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize - 1;
          enlargeIn--;
          break;
        case 1:
          bits = 0;
          maxpower = Math.pow(2, 16);
          power = 1;
          while (power !== maxpower) {
            resb = data.val & data.position;
            data.position >>= 1;
            if (data.position === 0) {
              data.position = resetValue;
              data.val = getNextValue(data.index++);
            }
            bits |= (resb > 0 ? 1 : 0) * power;
            power <<= 1;
          }
          dictionary[dictSize++] = f(bits);
          c = dictSize - 1;
          enlargeIn--;
          break;
        case 2:
          return result.join('');
      }

      if (enlargeIn === 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }

      entry = dictionary[c] ? dictionary[c] : (c === dictSize ? w + w[0] : null);
      if (!entry) return null;
      result.push(entry);

      dictionary[dictSize++] = w + entry[0];
      enlargeIn--;

      w = entry;

      if (enlargeIn === 0) {
        enlargeIn = Math.pow(2, numBits);
        numBits++;
      }
    }
  }

  return {
    compressToBase64: (input) => {
      if (input == null) return "";
      const res = _compress(input, 6, (a) => keyStrBase64[a]);
      switch (res.length % 4) {
        case 0: return res;
        case 1: return res + "===";
        case 2: return res + "==";
        case 3: return res + "=";
      }
    },

    decompressFromBase64: (input) => {
      if (input == null) return "";
      return _decompress(input.length, 32, (index) => getBaseValue(keyStrBase64, input[index]));
    },

    compressToUTF16: (input) => {
      if (input == null) return "";
      return _compress(input, 15, (a) => f(a + 32)) + " ";
    },

    decompressFromUTF16: (compressed) => {
      if (compressed == null) return "";
      return _decompress(compressed.length, 16384, (index) => compressed.charCodeAt(index) - 32);
    },

    compressToUint8Array: (uncompressed) => {
      const compressed = LZString.compress(uncompressed);
      const buf = new Uint8Array(compressed.length * 2);
      for (let i = 0, totalLen = compressed.length; i < totalLen; i++) {
        const current_value = compressed.charCodeAt(i);
        buf[i * 2] = current_value >>> 8;
        buf[i * 2 + 1] = current_value % 256;
      }
      return buf;
    },

    decompressFromUint8Array: (compressed) => {
      if (compressed == null) return "";
      const buf = [];
      for (let i = 0; i < compressed.length / 2; i++) {
        buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
      }
      return LZString.decompress(String.fromCharCode.apply(null, buf));
    },

    compressToEncodedURIComponent: (input) => {
      if (input == null) return "";
      return _compress(input, 6, (a) => keyStrUriSafe[a]);
    },

    decompressFromEncodedURIComponent: (input) => {
      if (input == null) return "";
      input = input.replace(/ /g, "+");
      return _decompress(input.length, 32, (index) => getBaseValue(keyStrUriSafe, input[index]));
    },

    compress: (uncompressed) => _compress(uncompressed, 16, (a) => f(a)),

    decompress: (compressed) => {
      if (compressed == null) return "";
      return _decompress(compressed.length, 32768, (index) => compressed.charCodeAt(index));
    }
  };
})();

if (typeof define === 'function' && define.amd) {
  define(() => LZString);
} else if (typeof module !== 'undefined' && module != null) {
  module.exports = LZString;
} else if (typeof angular !== 'undefined' && angular != null) {
  angular.module('LZString', [])
    .factory('LZString', () => LZString);
}
```