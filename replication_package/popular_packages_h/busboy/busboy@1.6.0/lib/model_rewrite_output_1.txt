The Node.js code defines a module that exports a function to create an instance of a specific content type handler based on the `content-type` header from a given configuration object. Here's the breakdown of its functionality:

1. **Utility Function**: 
   - It calls `parseContentType` from `utils.js` to parse and validate the 'content-type' of the headers.

2. **GetInstance Function**:
   - Accepts a configuration object `cfg` that should include HTTP headers.
   - Checks and parses the 'content-type' header to determine which specific type of handler to create.
   - Iterates over predefined handler `TYPES`.
   - Calls a `detect` method on each type to see if it matches the content type.
   - If matched, constructs a configuration object (`instanceCfg`) with optional parameters from `cfg`.
   - Returns an instance of that matched handler type.
   - If no type matches, throws an error indicating an unsupported content type.

3. **TYPES Array**:
   - An array of types (e.g., multipart, urlencoded) explicitly listed, presumably for easy bundling.

4. **Module Export**:
   - Validates the `cfg` object to ensure it contains a 'content-type' header of type string.
   - Calls `getInstance` to obtain the appropriate handler instance or throws an error if `content-type` is missing.

Here is a possible rewrite of the code:

```javascript
'use strict';

const { parseContentType } = require('./utils.js');

function createHandlerInstance(config) {
  const headers = config.headers;
  const contentType = parseContentType(headers['content-type']);
  if (!contentType)
    throw new Error('Malformed content type');

  for (const typeHandler of AVAILABLE_TYPES) {
    if (!typeHandler.detect(contentType))
      continue;

    const handlerConfig = {
      limits: config.limits,
      headers,
      contentType,
      highWaterMark: config.highWaterMark,
      fileHwm: config.fileHwm,
      defCharset: config.defCharset,
      defParamCharset: config.defParamCharset,
      preservePath: config.preservePath || false,
    };

    return new typeHandler(handlerConfig);
  }

  throw new Error(`Unsupported content type: ${headers['content-type']}`);
}

const AVAILABLE_TYPES = [
  require('./types/multipart'),
  require('./types/urlencoded'),
].filter(typeModule => typeof typeModule.detect === 'function');

module.exports = (config) => {
  if (typeof config !== 'object' || config === null)
    config = {};

  if (typeof config.headers !== 'object'
      || config.headers === null
      || typeof config.headers['content-type'] !== 'string') {
    throw new Error('Missing Content-Type');
  }

  return createHandlerInstance(config);
};
```