The provided Node.js code is a module that checks if the JavaScript runtime environment natively supports symbols. Symbols are a primitive data type introduced in ECMAScript 2015 (ES6) and used to create unique identifiers for object properties. Here's a breakdown of the functionality:

1. The module saves the original `Symbol` in a variable `origSymbol`.
2. It requires another module `shams` which likely performs additional checks related to symbol functionality or environment features.
3. It exports a function `hasNativeSymbols` that:
   - Returns `false` if `origSymbol` or `Symbol` is not a function, indicating that Symbols are not supported.
   - Returns `false` if creating a Symbol using either `origSymbol('foo')` or `Symbol('bar')` doesn't return a value of type `'symbol'`.
   - If all checks pass, it calls and returns the result from `hasSymbolSham()`, likely a further check on the Symbol implementation correctness or completeness.

Here's a possible rewrite of the Node.js code:

```javascript
'use strict';

const originalSymbol = global.Symbol;
const checkSymbolSham = require('./shams');

function hasNativeSymbolSupport() {
    if (typeof originalSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof originalSymbol('example') !== 'symbol') return false;
    if (typeof Symbol('test') !== 'symbol') return false;

    return checkSymbolSham();
}

module.exports = hasNativeSymbolSupport;
```