The Node.js code defines a module that checks if the JavaScript environment supports native `Symbol` functionality. It does so by performing the following steps:

1. It stores the original `Symbol` reference from the global object in `origSymbol`.
2. It requires a module named `shams` which presumably checks for a "sham" or polyfill of the `Symbol` function.
3. The function `hasNativeSymbols`:
   - Returns `false` if `origSymbol`, or `Symbol` themselves, are not functions.
   - Returns `false` if calling these with a string does not return a value of type 'symbol'.
   - Finally, it returns `true` if all previous checks are passed and the `shams` module's function returns `true`.

Here's a rewrite of this functionality:

```javascript
'use strict';

const originalSymbol = global.Symbol;
const hasShamSymbol = require('./shams');

module.exports = function detectNativeSymbols() {
    if (typeof originalSymbol !== 'function') { 
        return false; 
    }
    if (typeof Symbol !== 'function') { 
        return false; 
    }
    if (typeof originalSymbol('test') !== 'symbol') { 
        return false; 
    }
    if (typeof Symbol('example') !== 'symbol') { 
        return false; 
    }

    return hasShamSymbol();
};
```