The functionality of the provided Node.js code is to check if the current JavaScript environment has native support for the `Symbol` data type. The code does this by:

1. Storing the original `Symbol` implementation from the global scope.
2. Requiring a module called `shams`, which seems to provide a function to detect 'sham' implementations of `Symbol`.
3. Exporting a function named `hasNativeSymbols` that performs the following checks:
   - It returns `false` if `Symbol` in the global scope is not a function.
   - It returns `false` if the original `Symbol` implementation (`origSymbol`) is not a function.
   - It attempts to create a symbol with the `Symbol` and `origSymbol` functions and returns `false` if the resulting types are not `'symbol'`.
   - Finally, it calls the function provided by the `shams` module to determine if there's a sham Symbol present.

Here is a rewrite of the original Node.js code:

```javascript
'use strict';

const originalSymbol = global.Symbol;
const checkSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
    if (typeof originalSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof originalSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;
    
    return checkSymbolSham();
};
```