The provided Node.js code is a module that checks if the JavaScript environment supports native symbols. It uses the `Symbol` global, which is part of ECMAScript 6 (ES6), to determine if the environment natively supports symbols. Additionally, it includes a check for a potential "sham" or sham implementation of symbols through a require call to another module named `shams`.

Here's a detailed explanation:
1. It first tries to store the native `Symbol` constructor (if available) in the variable `origSymbol`.
2. It imports a `shams` module to check if there is a "fake" or incomplete implementation of symbols.
3. The function `hasNativeSymbols` is exported as a module:
   - It returns `false` if `Symbol` is not a function or if the `origSymbol` stored earlier does not behave as a proper symbol constructor.
   - It uses `Symbol('foo')` and `origSymbol('bar')` to test whether they actually return a value of type `symbol`.
   - If all checks pass, it calls the `hasSymbolSham` function to verify with external shims and finalize the detection.
   
The rewritten code is provided below:

```javascript
'use strict';

const hasSymbolSham = require('./shams');

function hasNativeSymbols() {
    if (typeof Symbol !== 'function') { return false; }
    if (typeof Symbol('foo') !== 'symbol') { return false; }
    
    return hasSymbolSham();
}

module.exports = hasNativeSymbols;
```
