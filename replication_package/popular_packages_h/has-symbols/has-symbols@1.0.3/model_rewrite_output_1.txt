The functionality of the given Node.js code is to determine whether the environment has native support for JavaScript symbols. Hereâ€™s how it works:

1. It checks if the `Symbol` object is available in the current environment and stores its reference in `origSymbol`.
2. It requires a module named `shams` (from the same directory) that likely contains fallbacks or checks related to environments where the native support for symbols is not available.
3. The `hasNativeSymbols` function checks the following:
   - If the `Symbol` type is a function.
   - If creating a symbol with `origSymbol('foo')` and `Symbol('bar')` results in a value of type `'symbol'`.
4. If any of these checks fail, it returns `false`, indicating that the environment does not have native symbol support.
5. If all checks are passed, it calls and returns the result of `hasSymbolSham()`, which likely verifies if any shams (non-native implementations) are present.

Below is the rewrite of the provided code according to the explanation:

```javascript
'use strict';

const origSymbol = typeof Symbol !== 'undefined' && Symbol;
const hasSymbolSham = require('./shams');

function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;

    return hasSymbolSham();
}

module.exports = hasNativeSymbols;
```