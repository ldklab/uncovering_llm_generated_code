The Node.js code defines a module that exports a function called `hasNativeSymbols`. This function checks if the JavaScript environment supports native symbols. It does this by performing several checks:

1. It checks if `Symbol` is available and is of type 'function'.
2. It verifies that calling `Symbol('foo')` results in a value of type 'symbol'.
3. It uses a symbol sham checker, imported as `hasSymbolSham`, to perform additional validation.

If all these checks pass, the function returns `true`, indicating that the environment supports native symbols. Otherwise, it returns `false`.

Below is the rewritten code:

```javascript
'use strict';

const origSymbol = typeof Symbol !== 'undefined' && Symbol;
const hasSymbolSham = require('./shams');

module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;

    return hasSymbolSham();
};
```