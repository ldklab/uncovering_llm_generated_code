This Node.js code provides a custom URL parser that processes URLs into component parts. It offers functionality similar to Node.js's built-in `url` module, but with a custom implementation that allows parsing, transforming, and reconstructing URLs. This URL parser:

1. **Extracts the Protocol:** Determines the protocol of a given URL, checking if it includes double slashes (`//`). 
2. **Processes URL Components:** Uses parsing rules to extract and set different parts of a URL (e.g., host, hostname, pathname, query string, hash).
3. **Handles Relative URLs:** Resolves relative URLs concerning a base URL by using a function that calculates the correct path.
4. **Replicates Browser API:** Mimics the browser's `URL` constructor behavior for compatibility.
5. **Provides String Manipulation Methods:** Offers functions to convert URL objects back into complete URL strings.
6. **Provides Query String Parsing Support:** Through optional functions that parse and stringify query strings.

Here's the rewritten version of the code:

```javascript
'use strict';

const required = require('requires-port');
const qs = require('querystringify');
const slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;
const protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i;
const whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]';
const left = new RegExp('^'+ whitespace +'+');

function trimLeft(str) {
  return (str ? str : '').toString().replace(left, '');
}

const rules = [
  ['#', 'hash'],
  ['?', 'query'],
  function sanitize(address) {
    return address.replace('\\', '/');
  },
  ['/', 'pathname'],
  ['@', 'auth', 1],
  [NaN, 'host', undefined, 1, 1],
  [/:(\d+)$/, 'port', undefined, 1],
  [NaN, 'hostname', undefined, 1, 1]
];

const ignore = { hash: 1, query: 1 };

function lolcation(loc) {
  let globalVar;
  if (typeof window !== 'undefined') globalVar = window;
  else if (typeof global !== 'undefined') globalVar = global;
  else if (typeof self !== 'undefined') globalVar = self;
  else globalVar = {};

  const location = globalVar.location || {};
  loc = loc || location;

  const finaldestination = {}
  , type = typeof loc
  , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

function extractProtocol(address) {
  address = trimLeft(address);
  const match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

function resolve(relative, base) {
  if (relative === '') return base;

  const path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
  , i = path.length
  , last = path[i - 1]
  , unshift = false
  , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

function Url(address, location, parser) {
  address = trimLeft(address);

  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  let relative, extracted, parse, instruction, index, key;
  const instructions = rules.slice()
  , type = typeof location
  , url = this;

  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (let i = 0; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  if (parser) url.query = parser(url.query);

  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();
}

function set(part, value, fn) {
  const url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;
    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;
    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;
    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;
    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;
    case 'pathname':
    case 'hash':
      if (value) {
        const char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;
    default:
      url[part] = value;
  }

  for (let i = 0; i < rules.length; i++) {
    const ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  let query;
  const url = this;
  let protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  let result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set, toString };

Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;

module.exports = Url;
```