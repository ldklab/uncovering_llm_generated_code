The Node.js code defines a function `matchProperty` that takes a `property` string as an argument and attempts to resolve it into a canonical Unicode property name. It uses two sets from external modules: `unicode-canonical-property-names-ecmascript`, which contains canonical Unicode property names, and `unicode-property-aliases-ecmascript`, which maps alias names to canonical property names.

- The function first checks if the `property` is already in the `canonicalProperties` set. If found, it returns the property as it is already canonical.
- If the property isn't canonical, it checks if the `propertyAliases` set contains the given property as an alias. If so, it returns the canonical name associated with that alias.
- If the property isn't found in either set, it throws an error indicating that the property is unknown.

The function `matchProperty` is then exported as a module for use elsewhere.

Here's a rewritten version of the code:

```js
'use strict';

const canonicalProps = require('unicode-canonical-property-names-ecmascript');
const propAliases = require('unicode-property-aliases-ecmascript');

const matchProperty = (property) => {
    if (canonicalProps.has(property)) {
        return property;
    }
    if (propAliases.has(property)) {
        return propAliases.get(property);
    }
    throw new Error(`Unknown property: ${property}`);
};

module.exports = matchProperty;
```