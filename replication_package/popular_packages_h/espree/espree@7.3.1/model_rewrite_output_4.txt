The provided Node.js code is a part of the Espree library, which is a parser for JavaScript. Espree is used mainly for converting parsing results from Acorn (a lightweight ECMAScript parser) into an output format compatible with Esprima, another JavaScript parser. Here's a breakdown of what each part of the code does:

1. **Imports and Initial Setup**: The code starts by importing essential modules:
   - Acorn is used for parsing JavaScript code.
   - The `acorn-jsx` module extends Acorn to understand JSX syntax.
   - Additional modules for managing AST node types and Espree options are also imported.

2. **Parser Initialization**: The code lazily initializes two types of parsers (regular and JSX) using the Acorn parser. It provides logic to select which parser to use based on options specifying whether JSX syntax is enabled.

3. **Tokenization Function**: The `tokenize` function converts a string of JavaScript code into tokens using the appropriate parser. It throws an error if the code is malformed.

4. **Parsing Function**: The `parse` function converts JavaScript code into an Abstract Syntax Tree (AST). It uses the selected parser to transform the input code.

5. **Public API**: The public API exposes the `tokenize` and `parse` functions. It also provides access to the library version, Syntax node types, and information about supported ECMAScript versions.

6. **Syntax and Visitor Keys**: The code exports a deep copy of AST node types and visitor keys used for traversing the AST.

Here's a rewritten version of the described functionality:

```javascript
"use strict";

const acorn = require("acorn");
const jsx = require("acorn-jsx");
const astNodeTypes = require("./lib/ast-node-types");
const espree = require("./lib/espree");
const { getLatestEcmaVersion, getSupportedEcmaVersions } = require("./lib/options");

const parsers = {
    _regular: null,
    _jsx: null,

    get regular() {
        if (!this._regular) {
            this._regular = acorn.Parser.extend(espree());
        }
        return this._regular;
    },

    get jsx() {
        if (!this._jsx) {
            this._jsx = acorn.Parser.extend(jsx(), espree());
        }
        return this._jsx;
    },

    get(options) {
        const useJsx = options?.ecmaFeatures?.jsx;
        return useJsx ? this.jsx : this.regular;
    }
};

function tokenize(code, options = {}) {
    const Parser = parsers.get(options);
    options.tokens = true;
    return new Parser(options, code).tokenize();
}

function parse(code, options = {}) {
    const Parser = parsers.get(options);
    return new Parser(options, code).parse();
}

exports.version = require("./package.json").version;

exports.tokenize = tokenize;

exports.parse = parse;

exports.Syntax = (() => {
    const types = Object.create(null);
    for (const name in astNodeTypes) {
        if (astNodeTypes.hasOwnProperty(name)) {
            types[name] = astNodeTypes[name];
        }
    }
    return Object.freeze(types);
})();

exports.VisitorKeys = require("eslint-visitor-keys").KEYS;

exports.latestEcmaVersion = getLatestEcmaVersion();

exports.supportedEcmaVersions = getSupportedEcmaVersions();
```