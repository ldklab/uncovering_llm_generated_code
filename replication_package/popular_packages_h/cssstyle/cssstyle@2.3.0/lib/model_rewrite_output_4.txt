The given Node.js code defines a JavaScript class `CSSStyleDeclaration`, simulating a part of the CSS Object Model (CSSOM), specifically for managing CSS style declarations in a fashion similar to how browsers manage styles. Here's an explanation of the code's functionality:

1. **Dependencies**: The code imports several modules like `cssom`, and others for handling properties and utilities. These are used to manage and parse CSS properties.

2. **CSSStyleDeclaration Constructor**: Initializes a new instance with properties `_values`, `_importants`, `_length`, and `_onChange`.
   - `_values`: Stores the CSS property values.
   - `_importants`: Tracks whether a property is marked as `!important`.
   - `_length`: Keeps count of the number of properties.
   - `_onChange`: Callback function triggered upon CSS changes.

3. **Methods**:
   - `getPropertyValue(name)`: Returns the value of a CSS property if it's set; otherwise, returns an empty string.
   - `setProperty(name, value, priority)`: Adds or updates a CSS property within the declaration. Handles custom properties and checks property validity using imported property sets.
   - `_setProperty(name, value, priority)`: A helper method for setting properties, including handling property overwrites and invocation of the `_onChange` callback.
   - `removeProperty(name)`: Deletes a property and returns its previous value.
   - `getPropertyPriority(name)`: Gets the priority (e.g., "important") of a specified property.
   - `item(index)`: Retrieves the property name at a specified index.
   - The other functions like `getPropertyCSSValue`, `getPropertyShorthand`, and `isPropertyImplicit` are placeholders for future implementation.

4. **Object Properties and Configurations**:
   - `cssText`: A property getter/setter that deals with the CSS text serialization and parsing.
   - `parentRule`: Returns null, presumably intended to be overridden if needed.
   - `length`: Manages the numeric count of properties, with a setter that can trim excess properties.

5. **Property Definitions**: The code dynamically defines properties on `CSSStyleDeclaration.prototype` using imported property lists to map properties and their camelCased versions to basic descriptors.

6. **Exports**: The `CSSStyleDeclaration` class is exported for use in other modules.

Here's a potential rewrite of that Node.js code:

```js
'use strict';
const CSSOM = require('cssom');
const allProperties = require('./allProperties');
const allExtraProperties = require('./allExtraProperties');
const implementedProperties = require('./implementedProperties');
const { dashedToCamelCase } = require('./parsers');
const getBasicPropertyDescriptor = require('./utils/getBasicPropertyDescriptor');

class CSSStyleDeclaration {
  constructor(onChangeCallback) {
    this._values = {};
    this._importants = {};
    this._length = 0;
    this._onChange = onChangeCallback || (() => {});
  }

  getPropertyValue(name) {
    return this._values.hasOwnProperty(name) ? this._values[name].toString() : '';
  }

  setProperty(name, value, priority = null) {
    if (value === undefined) return;
    if (value === null || value === '') {
      this.removeProperty(name);
      return;
    }
    const isCustomProperty = name.startsWith('--');
    if (isCustomProperty) {
      this._setProperty(name, value, priority);
      return;
    }
    const lowercaseName = name.toLowerCase();
    if (!allProperties.has(lowercaseName) && !allExtraProperties.has(lowercaseName)) return;
    
    this[lowercaseName] = value;
    this._importants[lowercaseName] = priority;
  }

  _setProperty(name, value, priority) {
    if (value === undefined) return;
    if (value === null || value === '') {
      this.removeProperty(name);
      return;
    }
    let index = Array.prototype.indexOf.call(this, name);
    if (this._values[name]) {
      if (index < 0) {
        this[this._length] = name;
        this._length++;
      }
    } else {
      this[this._length] = name;
      this._length++;
    }
    this._values[name] = value;
    this._importants[name] = priority;
    this._onChange(this.cssText);
  }

  removeProperty(name) {
    if (!this._values.hasOwnProperty(name)) return '';

    const prevValue = this._values[name];
    delete this._values[name];
    delete this._importants[name];

    const index = Array.prototype.indexOf.call(this, name);
    if (index >= 0) {
      Array.prototype.splice.call(this, index, 1);
    }

    this._onChange(this.cssText);
    return prevValue;
  }

  getPropertyPriority(name) {
    return this._importants[name] || '';
  }

  getPropertyCSSValue() {
    // Placeholder for future implementation
    return;
  }

  getPropertyShorthand() {
    // Placeholder for future implementation
    return;
  }

  isPropertyImplicit() {
    // Placeholder for future implementation
    return;
  }

  item(index) {
    index = parseInt(index, 10);
    return (index >= 0 && index < this._length) ? this[index] : '';
  }
}

Object.defineProperties(CSSStyleDeclaration.prototype, {
  cssText: {
    get() {
      const properties = [];
      for (let i = 0; i < this._length; i++) {
        const name = this[i];
        const value = this.getPropertyValue(name);
        let priority = this.getPropertyPriority(name);
        if (priority) priority = ` !${priority}`;
        properties.push(`${name}: ${value}${priority};`);
      }
      return properties.join(' ');
    },
    set(value) {
      this._values = {};
      Array.prototype.splice.call(this, 0, this._length);
      this._importants = {};
      let dummyRule;
      try {
        dummyRule = CSSOM.parse(`#bogus{${value}}`).cssRules[0].style;
      } catch (err) {
        return;
      }
      for (let i = 0; i < dummyRule.length; ++i) {
        const name = dummyRule[i];
        this.setProperty(
          name,
          dummyRule.getPropertyValue(name),
          dummyRule.getPropertyPriority(name)
        );
      }
      this._onChange(this.cssText);
    },
    enumerable: true,
    configurable: true,
  },
  parentRule: {
    get() {
      return null;
    },
    enumerable: true,
    configurable: true,
  },
  length: {
    get() {
      return this._length;
    },
    set(value) {
      for (let i = value; i < this._length; i++) {
        delete this[i];
      }
      this._length = value;
    },
    enumerable: true,
    configurable: true,
  },
});

require('./properties')(CSSStyleDeclaration.prototype);

allProperties.forEach(property => {
  if (!implementedProperties.has(property)) {
    const declaration = getBasicPropertyDescriptor(property);
    Object.defineProperty(CSSStyleDeclaration.prototype, property, declaration);
    Object.defineProperty(CSSStyleDeclaration.prototype, dashedToCamelCase(property), declaration);
  }
});

allExtraProperties.forEach(property => {
  if (!implementedProperties.has(property)) {
    const declaration = getBasicPropertyDescriptor(property);
    Object.defineProperty(CSSStyleDeclaration.prototype, property, declaration);
    Object.defineProperty(CSSStyleDeclaration.prototype, dashedToCamelCase(property), declaration);
  }
});

exports.CSSStyleDeclaration = CSSStyleDeclaration;
```