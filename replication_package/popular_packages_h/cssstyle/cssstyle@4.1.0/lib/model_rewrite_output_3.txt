The provided code defines a JavaScript class `CSSStyleDeclaration` that emulates the CSSStyleDeclaration interface from the DOM Level 2 Style specification. This class is responsible for managing CSS properties and their values, similarly to how inline styles and stylesheets manage CSS in web browsers. 

The constructor initializes private properties to store CSS values and their importance level, along with the onChange callback to notify when styles are changed. Notable methods in the class include `getPropertyValue`, `setProperty`, `_setProperty`, and `removeProperty`, which facilitate CSS property retrieval, addition, modification, and deletion, respectively.

Key features of the class:
- `getPropertyValue(name)`: Retrieves the property's value if set, otherwise returns an empty string.
- `setProperty(name, value, priority)`: Sets a CSS property's value with an optional priority, handles custom properties (those starting with '--'), and updates the internal properties if the property is valid.
- `_setProperty(name, value, priority)`: Helper function for setting or updating properties, tracking the change in state and triggering the onChange callback when appropriate.
- `removeProperty(name)`: Deletes a property from the declaration, returning the previous value.

The class also manages the length of the declaration block, supports importing properties from CSSOM, and dynamically creates properties with accessor descriptors for non-implemented properties.

The `cssText` getter and setter provide a means to retrieve the declaration as a CSS text string and parse a CSS string to populate the declaration.

Here's the revised and rewritten code:

```javascript
// Import required modules and utilities
'use strict';
const CSSOM = require('rrweb-cssom');
const allProperties = require('./allProperties');
const allExtraProperties = require('./allExtraProperties');
const implementedProperties = require('./implementedProperties');
const { dashedToCamelCase } = require('./parsers');
const getBasicPropertyDescriptor = require('./utils/getBasicPropertyDescriptor');

// CSSStyleDeclaration class definition
class CSSStyleDeclaration {
  constructor(onChangeCallback) {
    this._values = {};
    this._importants = {};
    this._length = 0;
    this._onChange = onChangeCallback;
    this._setInProgress = false;
  }

  getPropertyValue(name) {
    return this._values.hasOwnProperty(name) ? this._values[name].toString() : '';
  }

  setProperty(name, value, priority = '') {
    if (value === undefined) return;
    if (value === null || value === '') {
      this.removeProperty(name);
      return;
    }
    const isCustomProperty = name.startsWith('--');
    if (isCustomProperty) {
      this._setProperty(name, value, priority);
      return;
    }
    const lowercaseName = name.toLowerCase();
    if (!allProperties.has(lowercaseName) && !allExtraProperties.has(lowercaseName)) return;

    this[lowercaseName] = value;
    this._importants[lowercaseName] = priority;
  }

  _setProperty(name, value, priority) {
    if (value === undefined || value === null || value === '') {
      this.removeProperty(name);
      return;
    }

    const originalText = this._onChange ? this.cssText : null;

    if (!this._values[name]) {
      this[this._length] = name;
      this._length++;
    }
    this._values[name] = value;
    this._importants[name] = priority;

    if (this._onChange && this.cssText !== originalText && !this._setInProgress) {
      this._onChange(this.cssText);
    }
  }

  removeProperty(name) {
    if (!this._values.hasOwnProperty(name)) return '';
    const prevValue = this._values[name];
    delete this._values[name];
    delete this._importants[name];

    const index = Array.prototype.indexOf.call(this, name);
    if (index >= 0) {
      Array.prototype.splice.call(this, index, 1);
    }

    if (this._onChange) this._onChange(this.cssText);
    return prevValue;
  }

  getPropertyPriority(name) {
    return this._importants[name] || '';
  }

  item(index) {
    return this[index] || '';
  }

  get cssText() {
    const properties = [];
    for (let i = 0; i < this._length; i++) {
      const name = this[i];
      const value = this.getPropertyValue(name);
      const priority = this.getPropertyPriority(name) ? ` !${this._importants[name]}` : '';
      properties.push(`${name}: ${value}${priority};`);
    }
    return properties.join(' ');
  }

  set cssText(value) {
    this._values = {};
    Array.prototype.splice.call(this, 0, this._length);
    this._importants = {};
    
    try {
      const dummyRule = CSSOM.parse(`#bogus{${value}}`).cssRules[0].style;
      this._setInProgress = true;
      for (let i = 0; i < dummyRule.length; i++) {
          const name = dummyRule[i];
          this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
      }
    } catch (err) {
      return;
    } finally {
      this._setInProgress = false;
      if (this._onChange) this._onChange(this.cssText);
    }
  }

  get parentRule() {
    return null;
  }

  get length() {
    return this._length;
  }

  set length(value) {
    for (let i = value; i < this._length; i++) {
      delete this[i];
    }
    this._length = value;
  }
}

// Add properties dynamically from allProperties and allExtraProperties
require('./properties')(CSSStyleDeclaration.prototype);

[...allProperties, ...allExtraProperties].forEach((property) => {
  if (!implementedProperties.has(property)) {
    const declaration = getBasicPropertyDescriptor(property);
    Object.defineProperty(CSSStyleDeclaration.prototype, property, declaration);
    Object.defineProperty(CSSStyleDeclaration.prototype, dashedToCamelCase(property), declaration);
  }
});

// Export the CSSStyleDeclaration constructor
exports.CSSStyleDeclaration = CSSStyleDeclaration;
```
