The Node.js code provided serves as a module to manage and export a polyfill along with its implementation and shim. Here's the breakdown of its functionality:

1. It imports necessary dependencies and modules like `call-bind`, `define-properties`, as well as local modules `implementation`, `getPolyfill`, and `shim`.
2. It uses `getPolyfill` to obtain a polyfill function and then binds it using `callBind`, storing the result in the `bound` variable.
3. Additional properties (`getPolyfill`, `implementation`, and `shim`) are defined on the `bound` function using `define-properties`.
4. Finally, it exports the `bound` function, which now has additional properties.

Hereâ€™s a possible rewrite of the code:

```javascript
'use strict';

const callBind = require('call-bind');
const defineProperties = require('define-properties');

const implementation = require('./implementation');
const getPolyfill = require('./polyfill');
const shim = require('./shim');

// Obtain the polyfill and bind it
const boundPolyfill = callBind(getPolyfill());

// Define additional properties on the bound polyfill
defineProperties(boundPolyfill, {
  getPolyfill: getPolyfill,
  implementation: implementation,
  shim: shim
});

// Export the bound polyfill as the module's default export
module.exports = boundPolyfill;
```