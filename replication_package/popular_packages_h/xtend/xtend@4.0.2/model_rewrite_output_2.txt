The provided Node.js code defines a function named `extend` that takes an arbitrary number of objects as arguments and merges their properties into a new object. It then returns this new object. The function essentially performs a shallow copy of properties from each source object to the target object. It ensures that only properties that are directly defined on the source objects, not inherited via the prototype chain, are copied. The function uses `Object.prototype.hasOwnProperty` to filter out inherited properties.

Here is a rewritten version of this Node.js code:

```javascript
module.exports = extend;

function extend(...sources) {
    const target = {};

    sources.forEach(source => {
        Object.keys(source).forEach(key => {
            target[key] = source[key];
        });
    });

    return target;
}
```