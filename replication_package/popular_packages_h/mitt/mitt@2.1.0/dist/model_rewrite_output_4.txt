The Node.js code provided is a simple event emitter module. Here's how it works:

1. **Initialization**: It exports a function that takes an optional argument `n`, which is expected to be a `Map`. If no argument is provided, it defaults to a new `Map` instance. This map is used to store events and their listeners.

2. **Methods**:
   - `on(e, t)`: Adds a listener function `t` to the event `e`. If the event `e` does not already exist in the map, it initializes it with an array containing the listener. If it already exists, it appends the listener to the existing array of listeners for that event.
   - `off(e, t)`: Removes the listener function `t` from the event `e`. It checks if the event exists and removes the listener using `splice` after finding the appropriate index with `indexOf`.
   - `emit(e, t)`: Calls all listener functions associated with the event `e`, passing `t` as an argument. Additionally, if there are listeners for the wildcard event `*`, these are also called with both the event `e` and the data `t`.
  
3. **Wildcard Event**: The code supports a special wildcard event, represented by `"*"`, which will trigger its listeners on every event emit.

Here's a possible rewrite of the code for better readability:

```javascript
module.exports = function (eventsMap) {
    eventsMap = eventsMap || new Map();

    return {
        all: eventsMap,

        on: function (event, listener) {
            if (eventsMap.has(event)) {
                eventsMap.get(event).push(listener);
            } else {
                eventsMap.set(event, [listener]);
            }
        },

        off: function (event, listener) {
            let listeners = eventsMap.get(event);
            if (listeners) {
                const index = listeners.indexOf(listener);
                if (index !== -1) {
                    listeners.splice(index, 1);
                }
            }
        },

        emit: function (event, data) {
            (eventsMap.get(event) || []).slice().forEach(function (listener) {
                listener(data);
            });

            (eventsMap.get("*") || []).slice().forEach(function (generalListener) {
                generalListener(event, data);
            });
        }
    };
};
//# sourceMappingURL=mitt.js.map
```