The provided Node.js code implements a simple event emitter similar to libraries such as `EventEmitter` in Node.js or `mitt`. This event emitter allows you to manage events and their listeners with the following functions:

1. **all**: A Map object that stores event names as keys and arrays of listener functions as values. It is initialized as an empty Map if not provided.

2. **on(event, listener)**: A function to register a listener for a specified event type. It checks if the event already has listeners and appends the new one, or starts a new array with the listener.

3. **off(event, listener)**: A function to remove a listener for a specified event type. If a specific listener is provided, it removes just that listener. Otherwise, it clears all listeners for the event.

4. **emit(event, payload)**: A function that calls all listeners registered for a specific event, passing them the provided payload. It also triggers any listeners registered for the wildcard event `"*"`, passing them both the event name and the payload.

Now, here's a rewritten version of the code with more readable formatting and some minor improvements for clarity:

```javascript
module.exports = function(initMap) {
  const eventMap = initMap || new Map();
  
  return {
    all: eventMap,
    
    on: function(event, listener) {
      const listeners = eventMap.get(event);
      if (listeners) {
        listeners.push(listener);
      } else {
        eventMap.set(event, [listener]);
      }
    },
    
    off: function(event, listener) {
      const listeners = eventMap.get(event);
      if (!listeners) return;
      
      if (listener) {
        const index = listeners.indexOf(listener);
        if (index >= 0) listeners.splice(index, 1);
      } else {
        eventMap.set(event, []);
      }
    },
    
    emit: function(event, payload) {
      const listeners = eventMap.get(event);
      if (listeners) {
        listeners.slice().forEach(fn => fn(payload));
      }
      
      const wildcardListeners = eventMap.get("*");
      if (wildcardListeners) {
        wildcardListeners.slice().forEach(fn => fn(event, payload));
      }
    }
  };
};
```

This rewritten version maintains the same functionality while providing improved readability through better variable naming and straightforward logic flow.