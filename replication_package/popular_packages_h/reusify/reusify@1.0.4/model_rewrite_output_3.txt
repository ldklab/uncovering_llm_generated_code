```javascript
'use strict';

function reusify(Constructor) {
  let head = new Constructor();
  let tail = head;

  function get() {
    let current = head;

    if (current.next) {
      head = current.next;
    } else {
      head = new Constructor();
      tail = head;
    }

    current.next = null;

    return current;
  }

  function release(obj) {
    tail.next = obj;
    tail = obj;
  }

  return {
    get,
    release
  };
}

module.exports = reusify;
```

Explanation:
The `reusify` function creates and manages a pool of reusable objects, constructed using a given `Constructor` function. The pool maintains a linked list of objects, with `head` being the first and `tail` being the last. 

- `get`: Retrieves an object from the pool. It returns the current `head` and if there is a next object in the list, moves the `head` to the next object. If there is no next object (if the list is exhausted), a new object is created and `head` and `tail` are reset to this new object.

- `release`: Adds the provided object back to the pool at the `tail` position, allowing it to be reused by future `get` calls.

The module exports the `reusify` function, which returns an object with `get` and `release` methods to efficiently manage object reuse in applications.