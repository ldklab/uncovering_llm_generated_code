The provided Node.js code sets up the Handlebars library and adds support for custom Handlebars template files with the extensions `.handlebars` and `.hbs`. The code does the following:

1. Requires a version of Handlebars from a specified directory and assigns it to the `handlebars` variable.
2. Imports a `printer` module that provides `PrintVisitor` and `print` functionalities, which are added to the `handlebars` object.
3. Exports the configured `handlebars` object for use in other parts of an application.
4. Defines an `extension` function to compile Handlebars template file contents and set this as the module's export.
5. Modifies Node.js's `require` behavior to support loading files with `.handlebars` and `.hbs` extensions using the custom `extension` function.

Below is the rewritten code:

```javascript
// USAGE:
// const handlebars = require('handlebars');

const fs = require('fs');
const handlebarsModule = require('../dist/cjs/handlebars');
const printer = require('../dist/cjs/handlebars/compiler/printer');

const handlebars = handlebarsModule['default'];
handlebars.PrintVisitor = printer.PrintVisitor;
handlebars.print = printer.print;

module.exports = handlebars;

// Publish a Node.js require() handler for .handlebars and .hbs files
function extension(module, filename) {
  const templateString = fs.readFileSync(filename, 'utf8');
  module.exports = handlebars.compile(templateString);
}

if (typeof require !== 'undefined' && require.extensions) {
  require.extensions['.handlebars'] = extension;
  require.extensions['.hbs'] = extension;
}
```