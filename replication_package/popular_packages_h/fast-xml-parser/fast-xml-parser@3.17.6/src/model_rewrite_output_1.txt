The provided Node.js code is a module that handles parsing XML data with options for validation and customization. Here's a summary of its functionality:

1. **Parsing XML to JSON**: The primary function is `exports.parse`, which takes XML data and converts it to a JSON object. It first validates the XML if the `validationOption` is provided, using a validator module. The function then configures options, converts the XML string to a traversable object, and finally to a JSON object.

2. **Validation**: The code includes XML validation via the `validator.validate()` function, which checks the XML data against specified validation rules and throws an error if validation fails.

3. **Additional Exports**: 
   - Exports functions to convert XML to a Nimn object (`convertTonimn`).
   - Provides access to other functions for converting XML strings to traversal objects and finally to JSON strings.

4. **Utility Functions**: 
   - `print()` is a helper function to print the structure of a parsed XML node for debugging. It recursively prints each node and its children with indentation.

Here's a possible rewrite of the code:

```javascript
'use strict';

const nodeToJson = require('./node2json');
const xmlToNodeobj = require('./xmlstr2xmlnode');
const x2xmlnode = require('./xmlstr2xmlnode');
const { buildOptions } = require('./util');
const validator = require('./validator');

exports.parse = function(xmlData, options, validationOption) {
  if (validationOption) {
    if (validationOption === true) validationOption = {};
    
    const result = validator.validate(xmlData, validationOption);
    if (result !== true) {
      throw new Error(result.err.msg);
    }
  }
  
  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
  
  return nodeToJson.convertToJson(traversableObj, options);
};

exports.convertTonimn = require('../src/nimndata').convert2nimn;
exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
exports.convertToJson = nodeToJson.convertToJson;
exports.convertToJsonString = require('./node2json_str').convertToJsonString;
exports.validate = validator.validate;
exports.j2xParser = require('./json2xml');

exports.parseToNimn = function(xmlData, schema, options) {
  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
};

function print(xmlNode, indentation) {
  if (xmlNode) {
    console.log(`${indentation}{`);
    console.log(`${indentation}  "tagName": "${xmlNode.tagname}",`);
    if (xmlNode.parent) {
      console.log(`${indentation}  "parent": "${xmlNode.parent.tagname}",`);
    }
    console.log(`${indentation}  "val": "${xmlNode.val}",`);
    console.log(`${indentation}  "attrs": ${JSON.stringify(xmlNode.attrsMap, null, 4)},`);

    if (xmlNode.child) {
      console.log(`${indentation}"child": {`);
      const indentation2 = indentation + indentation;
      Object.keys(xmlNode.child).forEach(key => {
        const node = xmlNode.child[key];

        if (Array.isArray(node)) {
          console.log(`${indentation}"${key}" :[`);
          node.forEach(item => {
            print(item, indentation2);
          });
          console.log(`${indentation}],`);
        } else {
          console.log(`${indentation} "${key}" : {`);
          print(node, indentation2);
          console.log(`${indentation}},`);
        }
      });
      console.log(`${indentation}},`);
    }
    console.log(`${indentation}},`);
  }
}
```