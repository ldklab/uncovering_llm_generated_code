The provided Node.js code is a module for parsing XML data into JSON or other formats. The core functionality includes:

1. `parse` Function: This function validates the provided XML data if a `validationOption` is specified and then parses it into a JSON structure. 
   - It uses a helper function `buildOptions` to prepare options.
   - It employs `xmlToNodeobj.getTraversalObj` to convert XML data into an intermediate traversable object.
   - The traversable object is then converted into JSON using `nodeToJson.convertToJson`.

2. Exported Functions/Objects:
   - `convertTonimn`: A function to convert data to Nimn format.
   - `getTraversalObj`: Extracts the traversable object from XML data.
   - `convertToJson`: Converts a traversable object to a JSON object.
   - `convertToJsonString`: Converts data to a JSON string.
   - `validate`: Validates XML data.
   - `j2xParser`: Parser for converting JSON back to XML.
   - `parseToNimn`: Uses `convertTonimn` to convert XML to Nimn format after extracting the traversal object.

3. `print` Function: This is a utility function to log the structure of the XML node in a formatted manner, primarily useful for debugging. It recursively prints the node's tag name, parent, value, attributes, and child nodes.

Here is the rewritten Node.js code in a consolidated manner:

```javascript
'use strict';

const nodeToJson = require('./node2json');
const xmlToNodeobj = require('./xmlstr2xmlnode');
const x2xmlnode = require('./xmlstr2xmlnode');
const buildOptions = require('./util').buildOptions;
const validator = require('./validator');

exports.parse = function(xmlData, options, validationOption) {
  if (validationOption) {
    if (validationOption === true) validationOption = {};
    
    const result = validator.validate(xmlData, validationOption);
    if (result !== true) {
      throw Error(result.err.msg);
    }
  }
  options = buildOptions(options, x2xmlnode.defaultOptions, x2xmlnode.props);
  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
  return nodeToJson.convertToJson(traversableObj, options);
};

exports.convertTonimn = require('../src/nimndata').convert2nimn;
exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
exports.convertToJson = nodeToJson.convertToJson;
exports.convertToJsonString = require('./node2json_str').convertToJsonString;
exports.validate = validator.validate;
exports.j2xParser = require('./json2xml');

exports.parseToNimn = function(xmlData, schema, options) {
  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
};

function print(xmlNode, indentation) {
  if (xmlNode) {
    console.log(indentation + "{");
    console.log(indentation + "  \"tagName\": \"" + xmlNode.tagname + "\", ");
    if (xmlNode.parent) {
      console.log(indentation + "  \"parent\": \"" + xmlNode.parent.tagname + "\", ");
    }
    console.log(indentation + "  \"val\": \"" + xmlNode.val + "\", ");
    console.log(indentation + "  \"attrs\": " + JSON.stringify(xmlNode.attrsMap, null, 4) + ", ");
    
    if (xmlNode.child) {
      console.log(indentation + "\"child\": {");
      const indentation2 = indentation + indentation;
      Object.keys(xmlNode.child).forEach(function(key) {
        const node = xmlNode.child[key];
        
        if (Array.isArray(node)) {
          console.log(indentation + "\"" + key + "\" :[");
          node.forEach(function(item, index) {
            print(item, indentation2);
          });
          console.log(indentation + "],");
        } else {
          console.log(indentation + " \"" + key + "\" : {");
          print(node, indentation2);
          console.log(indentation + "},");
        }
      });
      console.log(indentation + "},");
    }
    console.log(indentation + "},");
  }
}
```