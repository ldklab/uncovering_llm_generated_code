The provided Node.js code is a module that deals with different ECMAScript versions and functions as a compatibility layer. Here's a breakdown of its functionality:

1. **Module Dependencies**: It imports several ECMAScript-related modules (`es5`, `es2015`, `es2016`, `es2017`, `es2018`, and `es2019`) which presumably contain implementations of various ECMAScript features for their respective versions.
   
2. **Assign Function**: A utility function `assign` is imported to copy properties from source objects to a target object. This mimics functionality similar to `Object.assign`.

3. **Collection of ECMAScript Features**: An `ES` object is created to bundle together the various ECMAScript version modules under standardized keys (`ES5`, `ES6`, `ES2015`, etc.).

4. **Property Assignment and Deletion**: The function `assign` copies properties from older ECMAScript versions (`ES5` and `ES2015`) into the main `ES` object. However, a specific property `CheckObjectCoercible` is removed from the `ES` object because it was renamed to `RequireObjectCoercible` in ES6.

5. **Module Export**: Finally, the `ES` object is exported for use in other parts of the application, allowing consumers to access ECMAScript functionalities across different versions.

Rewritten code:

```javascript
'use strict';

const assign = require('./helpers/assign');

const ES5 = require('./es5');
const ES2015 = require('./es2015');
const ES2016 = require('./es2016');
const ES2017 = require('./es2017');
const ES2018 = require('./es2018');
const ES2019 = require('./es2019');

const ES = {
    ES5,
    ES6: ES2015,
    ES2015,
    ES7: ES2016,
    ES2016,
    ES2017,
    ES2018,
    ES2019
};

assign(ES, ES5);
delete ES.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible
assign(ES, ES2015);

module.exports = ES;
```