The Node.js code is organizing and merging different ECMAScript (ES) version modules. Here's a step-by-step explanation of its functionality:

1. It imports a helper method `assign` which is likely used to merge properties of objects.
2. It imports different modules representing ECMAScript specifications from ES5 through ES2019.
3. It creates an `ES` object mapping ES version names to their imported modules.
4. It uses the `assign` method to merge the properties of `ES5` into the `ES` object.
5. It deletes a specific property `CheckObjectCoercible` from the `ES` object, since it has been renamed to `RequireObjectCoercible` in ES6.
6. It merges the properties of `ES2015` (also named as ES6) into the `ES` object, potentially overwriting older features with new ones.
7. Finally, it exports the `ES` object, providing consolidated access to functionalities from multiple ES version specifications.

Here is the rewritten code:

```javascript
'use strict';

const assign = require('./helpers/assign');

const ESModules = {
    ES5: require('./es5'),
    ES2015: require('./es2015'),
    ES2016: require('./es2016'),
    ES2017: require('./es2017'),
    ES2018: require('./es2018'),
    ES2019: require('./es2019')
};

const ES = {
    ...ESModules,
    ES6: ESModules.ES2015,
    ES7: ESModules.ES2016
};

assign(ES, ESModules.ES5);
delete ES.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible
assign(ES, ESModules.ES2015);

module.exports = ES;
```