The given Node.js code implements a utility function to join URL parts into a well-formed URL string. The main functionalities are as follows:

1. **Input Parsing and Validation**: The function `urlJoin` accepts multiple arguments in the form of an array or individual parameters, which are passed to the `normalize` function.

2. **Protocol Handling**: It detects protocols at the start of the URL segments and ensures proper formation according to whether it's a file protocol or another type.

3. **Path Normalization**: Within the URL parts:
   - Leading slashes are removed from all but the first segment.
   - Trailing slashes are removed from all but the last segment, which then has slashes combined.
   - Segments are combined with a single slash.

4. **Query and Hash Handling**: Ensures that a URL doesn't have trailing slashes before query parameters or hashes, and replaces `?` with `&` in the parameters string to handle subsequent parameters correctly.

5. **Error Handling**: Throws an error if any part of the input is not a string.

Hereâ€™s the refactored code:

```javascript
function normalize(strArray) {
  if (strArray.length === 0) return '';

  const resultArray = [];
  
  if (typeof strArray[0] !== 'string') {
    throw new TypeError('Url must be a string. Received ' + strArray[0]);
  }

  if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
    const first = strArray.shift();
    strArray[0] = first + strArray[0];
  }

  strArray[0] = strArray[0].match(/^file:\/\/\//) 
    ? strArray[0].replace(/^([^/:]+):\/*/, '$1:///')
    : strArray[0].replace(/^([^/:]+):\/*/, '$1://');

  strArray.forEach((component, index) => {
    if (typeof component !== 'string') {
      throw new TypeError('Url must be a string. Received ' + component);
    }

    if (component === '') return;
    
    component = index > 0 ? component.replace(/^[\/]+/, '') : component;
    component = index < strArray.length - 1
      ? component.replace(/[\/]+$/, '')
      : component.replace(/[\/]+$/, '/');

    resultArray.push(component);
  });

  let str = resultArray.join('/');
  str = str.replace(/\/(\?|&|#[^!])/g, '$1');
  
  const parts = str.split('?');
  str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');

  return str;
}

export default function urlJoin(...args) {
  const input = typeof args[0] === 'object' ? args[0] : args;
  return normalize(input);
}
```