The provided Node.js code is a module setup that exposes a polyfill function along with related properties and methods. Here's a breakdown of its functionality:

1. It uses strict mode for better error-checking and avoiding commonly-made mistakes.
2. It imports several modules:
   - `define-properties` is used to define properties on an object.
   - `call-bind` is used to create a bound function from a method.
   - Three local modules: `implementation`, `getPolyfill`, and `shim`.
3. `getPolyfill()` is called to get the polyfill function, which is then bound to the `Object`'s context, possibly making it usable as a method on objects.
4. It uses `define()` to attach:
   - `getPolyfill`: A function that returns the polyfill.
   - `implementation`: The actual implementation of the method/polyfill.
   - `shim`: A function that might install the polyfill globally if necessary.
5. Finally, it exports the `polyfill` function, now with those additional properties.

Hereâ€™s a rewritten version of the code using a similar structure:

```javascript
'use strict';

const defineProperties = require('define-properties');
const callBindMethod = require('call-bind');

const implementationModule = require('./implementation');
const getPolyfillFunction = require('./polyfill');
const shimFunction = require('./shim');

const boundPolyfill = callBindMethod(getPolyfillFunction(), Object);

defineProperties(boundPolyfill, {
	getPolyfill: getPolyfillFunction,
	implementation: implementationModule,
	shim: shimFunction
});

module.exports = boundPolyfill;
```