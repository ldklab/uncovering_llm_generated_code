The provided Node.js code defines a set of functionalities to manipulate the terminal cursor, scroll, and erase parts of the terminal screen using ANSI escape codes. The code encompasses three main objects—`cursor`, `scroll`, and `erase`—each containing methods or properties that return strings representing ANSI sequences. Additionally, there's a `beep` constant that triggers a bell sound in the terminal.

1. **Cursor Manipulation (`cursor`)**:
   - `to(x, y)`: Moves the cursor to the specified position (column `x` and row `y`). If `y` isn't provided, it moves only to the specified column.
   - `move(x, y)`: Moves the cursor by the specified x and y offsets.
   - `up`, `down`, `forward`, `backward`: Moves the cursor respectively by a certain number of lines or columns specified by `count`.
   - `nextLine`, `prevLine`: Moves the cursor to the beginning of the next or previous lines.
   - `left`, `hide`, `show`, `save`, `restore`: Respective functionalities to position, hide, show, save, and restore the cursor state.

2. **Scrolling (`scroll`)**:
   - `up`, `down`: Scrolls the terminal screen up or down by a specified number of lines.

3. **Erase Operations (`erase`)**:
   - `screen`, `up`, `down`, `line`, `lineEnd`, `lineStart`: Specific functionalities to clear parts or the entirety of the screen and individual lines.
   - `lines(count)`: Erases multiple lines, traversing upward for the given number.

4. **Beep**:
   - `beep`: Emits a bell/alert sound in the terminal.

The `module.exports` statement makes these functionalities accessible to other files via `require`.

Here is the rewritten code with the same functionality:

```javascript
'use strict';

const ESC = '\x1B';
const CSI = `${ESC}[`;
const beep = '\u0007';

const cursor = {
  to(x, y) {
    return y === undefined ? `${CSI}${x + 1}G` : `${CSI}${y + 1};${x + 1}H`;
  },
  move(x, y) {
    return `${x < 0 ? `${CSI}${-x}D` : x > 0 ? `${CSI}${x}C` : ''}${y < 0 ? `${CSI}${-y}A` : y > 0 ? `${CSI}${y}B` : ''}`;
  },
  up: (count = 1) => `${CSI}${count}A`,
  down: (count = 1) => `${CSI}${count}B`,
  forward: (count = 1) => `${CSI}${count}C`,
  backward: (count = 1) => `${CSI}${count}D`,
  nextLine: (count = 1) => `${CSI}E`.repeat(count),
  prevLine: (count = 1) => `${CSI}F`.repeat(count),
  left: `${CSI}G`,
  hide: `${CSI}?25l`,
  show: `${CSI}?25h`,
  save: `${ESC}7`,
  restore: `${ESC}8`
}

const scroll = {
  up: (count = 1) => `${CSI}S`.repeat(count),
  down: (count = 1) => `${CSI}T`.repeat(count)
}

const erase = {
  screen: `${CSI}2J`,
  up: (count = 1) => `${CSI}1J`.repeat(count),
  down: (count = 1) => `${CSI}J`.repeat(count),
  line: `${CSI}2K`,
  lineEnd: `${CSI}K`,
  lineStart: `${CSI}1K`,
  lines(count) {
    return Array.from({ length: count }, (_, i) => this.line + (i < count - 1 ? cursor.up() : '')).join('') + (count ? cursor.left : '');
  }
}

module.exports = { cursor, scroll, erase, beep };
```