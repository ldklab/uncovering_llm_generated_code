The given Node.js code provides functionalities for parsing JSON with detailed error handling for invalid JSON strings. It includes custom error messages to help pinpoint where the error occurred in the input string and supports preserving newline and indent styles when converting between JSON and JavaScript objects. Here's a high-level breakdown of the main functions:

1. **stripBOM**: Removes the byte order marker from strings, especially important when reading files that could have a BOM character.

2. **parseJson**: Parses a JSON string into a JavaScript object and captures the original formatting (indentation and newlines) for potential use in serializing back to JSON.

3. **parseError**: Processes native JSON parsing errors to provide more context, pinpointing the position of any unexpected tokens or JSON syntax issues.

4. **JSONParseError**: A custom error class that extends `SyntaxError`, which includes additional metadata such as position of the error in the input string and a custom error code.

5. **parseJsonError**: A utility function that wraps `parseJson`, handling exceptions to provide meaningful error messages or transform them into `JSONParseError` if the JSON parsing fails.

6. **noExceptions**: A method for silently attempting to parse JSON without throwing an error on failure.

The code handles different kinds of unexpected tokens and provides a custom error message that includes the problematic part of the input and highlights the exact location of any encountered error, helping developers debug their JSON strings efficiently.

```javascript
'use strict'

const INDENT = Symbol.for('indent')
const NEWLINE = Symbol.for('newline')

const DEFAULT_NEWLINE = '\n'
const DEFAULT_INDENT = '  '
const BOM = /^\uFEFF/
const FORMAT = /^\s*[{[]((?:\r?\n)+)([\s\t]*)/
const EMPTY = /^(?:\{\}|\[\])((?:\r?\n)+)?$/
const UNEXPECTED_TOKEN = /^Unexpected token '?(.)'?(,)? /i

const hexify = (char) => `0x${char.charCodeAt(0).toString(16).toUpperCase().padStart(2, '0')}`

const stripBOM = (txt) => String(txt).replace(BOM, '')

const makeParsedError = (msg, parsing, position = 0) => ({
  message: `${msg} while parsing ${parsing}`,
  position,
})

const parseError = (e, txt, context = 20) => {
  let msg = e.message
  if (!txt) return makeParsedError(msg, 'empty string')
  
  const badTokenMatch = msg.match(UNEXPECTED_TOKEN)
  const badIndexMatch = msg.match(/ position\s+(\d+)/i)

  if (badTokenMatch) {
    msg = msg.replace(
      UNEXPECTED_TOKEN,
      `Unexpected token ${JSON.stringify(badTokenMatch[1])} (${hexify(badTokenMatch[1])})$2 `
    )
  }

  let errIdx
  if (badIndexMatch) {
    errIdx = +badIndexMatch[1]
  } else if (msg.match(/^Unexpected end of JSON.*/i)) {
    errIdx = txt.length - 1
  }

  if (errIdx == null) {
    return makeParsedError(msg, `'${txt.slice(0, context * 2)}'`)
  }

  const start = Math.max(0, errIdx - context)
  const end = Math.min(txt.length, errIdx + context)
  const slice = `${start > 0 ? '...' : ''}${txt.slice(start, end)}${end < txt.length ? '...' : ''}`

  return makeParsedError(msg, `${txt === slice ? '' : 'near '}${JSON.stringify(slice)}`, errIdx)
}

class JSONParseError extends SyntaxError {
  constructor(er, txt, context, caller) {
    const metadata = parseError(er, txt, context)
    super(metadata.message)
    Object.assign(this, metadata)
    this.code = 'EJSONPARSE'
    this.systemError = er
    Error.captureStackTrace(this, caller || this.constructor)
  }

  get name() {
    return this.constructor.name
  }

  set name(n) {}

  get [Symbol.toStringTag]() {
    return this.constructor.name
  }
}

const parseJson = (txt, reviver) => {
  const result = JSON.parse(txt, reviver)
  if (result && typeof result === 'object') {
    const match = txt.match(EMPTY) || txt.match(FORMAT) || [null, '', '']
    result[NEWLINE] = match[1] ?? DEFAULT_NEWLINE
    result[INDENT] = match[2] ?? DEFAULT_INDENT
  }
  return result
}

const parseJsonError = (raw, reviver, context) => {
  const txt = stripBOM(raw)
  try {
    return parseJson(txt, reviver)
  } catch (e) {
    if (typeof raw !== 'string' && !Buffer.isBuffer(raw)) {
      const msg = Array.isArray(raw) && raw.length === 0 ? 'an empty array' : String(raw)
      throw Object.assign(
        new TypeError(`Cannot parse ${msg}`),
        { code: 'EJSONPARSE', systemError: e }
      )
    }
    throw new JSONParseError(e, txt, context, parseJsonError)
  }
}

module.exports = parseJsonError
parseJsonError.JSONParseError = JSONParseError
parseJsonError.noExceptions = (raw, reviver) => {
  try {
    return parseJson(stripBOM(raw), reviver)
  } catch {
    // no exceptions
  }
}
```