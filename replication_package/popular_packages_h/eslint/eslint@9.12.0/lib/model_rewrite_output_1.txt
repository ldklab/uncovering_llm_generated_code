The functionality of the Node.js code provided is as follows:

1. **Imports and Object Destructuring**: The code imports several modules and components related to ESLint functionality. It imports `ESLint` and `shouldUseFlatConfig` from `"./eslint/eslint"`, `LegacyESLint` from `"./eslint/legacy-eslint"`, `Linter` from `"./linter"`, `RuleTester` from `"./rule-tester"`, and `SourceCode` from `"./languages/js/source-code"`.

2. **Function `loadESLint`**: This asynchronous function is designed to dynamically choose between two different ESLint constructors (`ESLint` or `LegacyESLint`) based on the configuration options provided. It accepts an options object, which can include a `useFlatConfig` boolean to explicitly specify the configuration style. If `useFlatConfig` isn't provided, it defaults to the outcome of the `shouldUseFlatConfig()` function, which likely determines whether a flat config should be used based on some external conditions or settings. The function returns the appropriate constructor.

3. **Exports**: The code exports an object containing several components: `Linter`, `loadESLint`, `ESLint`, `RuleTester`, and `SourceCode`. These components can be used by requiring this module in other parts of a larger application.

Here's a rewritten version of the code:

```javascript
"use strict";

// Import necessary modules and functions
const { ESLint, shouldUseFlatConfig } = require("./eslint/eslint");
const { LegacyESLint } = require("./eslint/legacy-eslint");
const { Linter } = require("./linter");
const { RuleTester } = require("./rule-tester");
const { SourceCode } = require("./languages/js/source-code");

/**
 * Selects the correct ESLint class based on configuration options.
 * @param {Object} [options] - Configuration options
 * @param {boolean} [options.useFlatConfig] - Determines if flat config is used
 * @returns {Promise<ESLint|LegacyESLint>} Appropriate ESLint constructor
 */
async function loadESLint({ useFlatConfig } = {}) {
    const configChoice = useFlatConfig ?? (await shouldUseFlatConfig());
    return configChoice ? ESLint : LegacyESLint;
}

// Export modules and functions
module.exports = {
    Linter,
    loadESLint,
    ESLint,
    RuleTester,
    SourceCode
};
```