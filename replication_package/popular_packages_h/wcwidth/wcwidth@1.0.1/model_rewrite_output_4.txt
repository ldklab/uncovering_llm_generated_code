The given Node.js code is a module for calculating the display width of a string in a terminal, commonly referred to as `wcwidth`. This calculation is based on the Unicode specification, which assigns a specific column width to different categories of characters. Here's a breakdown of its functionality:

1. **Defaults Setup**: The code starts by defining some default options using the `defaults` package. These defaults include the width for null (`nul`) and control characters, both set to 0.

2. **Exports**:
   - The main function exported is `wcwidth(str)`, which calculates the width of a string using the default settings.
   - The `config` method allows for overriding default settings by accepting user options, and returns a customized `wcwidth` function.

3. **Character Width Calculation**: The module defines several rules for calculating the width:
   - Null characters have zero width.
   - Control characters return a width of -1.
   - Non-spacing combining characters have zero width.
   - Characters that fall under certain Unicode categories have varying widths, often based on East Asian Width properties (e.g., 'W' or 'F' have a width of 2).

4. **Helper Functions**:
   - `wcswidth(str, opts)`: Iterates over each character in a string, using `wcwidth` to accumulate the total width.
   - `wcwidth(ucs, opts)`: Determines the width for individual Unicode characters based on a set of conditions and predefined widths for character ranges.
   - `bisearch(ucs)`: A binary search function checking whether a character is a non-spacing combining character using the `combining` array.

Here's a possible rewrite of the code implementing the same logic:

```javascript
"use strict";

const defaults = require('defaults');
const combining = require('./combining');

const DEFAULTS = { nul: 0, control: 0 };

function wcwidth(str) {
  return wcswidth(str, DEFAULTS);
}

function config(opts) {
  const mergedOptions = defaults(opts || {}, DEFAULTS);
  return function (str) {
    return wcswidth(str, mergedOptions);
  };
}

function wcswidth(str, opts) {
  if (typeof str !== 'string') {
    return getCharWidth(str, opts);
  }

  let widthSum = 0;
  for (let i = 0; i < str.length; i++) {
    const charWidth = getCharWidth(str.charCodeAt(i), opts);
    if (charWidth < 0) return -1;
    widthSum += charWidth;
  }

  return widthSum;
}

function getCharWidth(ucs, opts) {
  if (ucs === 0) return opts.nul;
  if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control;
  if (isCombiningCharacter(ucs)) return 0;

  return 1 +
    (ucs >= 0x1100 &&
      (ucs <= 0x115f ||
       ucs === 0x2329 || ucs === 0x232a ||
       (ucs >= 0x2e80 && ucs <= 0xa4cf && ucs !== 0x303f) ||
       (ucs >= 0xac00 && ucs <= 0xd7a3) ||
       (ucs >= 0xf900 && ucs <= 0xfaff) ||
       (ucs >= 0xfe10 && ucs <= 0xfe19) ||
       (ucs >= 0xfe30 && ucs <= 0xfe6f) ||
       (ucs >= 0xff00 && ucs <= 0xff60) ||
       (ucs >= 0xffe0 && ucs <= 0xffe6) ||
       (ucs >= 0x20000 && ucs <= 0x2fffd) ||
       (ucs >= 0x30000 && ucs <= 0x3fffd)));
}

function isCombiningCharacter(ucs) {
  let min = 0;
  let max = combining.length - 1;

  if (ucs < combining[0][0] || ucs > combining[max][1]) return false;

  while (max >= min) {
    const mid = Math.floor((min + max) / 2);
    if (ucs > combining[mid][1]) min = mid + 1;
    else if (ucs < combining[mid][0]) max = mid - 1;
    else return true;
  }

  return false;
}

module.exports = wcwidth;
module.exports.config = config;
```