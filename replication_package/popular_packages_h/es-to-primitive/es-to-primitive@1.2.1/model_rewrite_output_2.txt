The functionality of the given Node.js code is as follows:

1. The code imports three modules: `ES5`, `ES6`, and `ES2015` from respective files.
2. It checks whether the function `Object.defineProperty` is available, indicating support for ECMAScript 5 or later.
3. If `Object.defineProperty` is available, it uses it to attach `ES5`, `ES6`, and `ES2015` as non-enumerable properties to the `ES2015` object. This means those properties will not appear during enumeration, such as in `for...in` loops.
4. If `Object.defineProperty` is not available (which means the environment might predate ECMAScript 5), it directly assigns `ES5`, `ES6`, and `ES2015` as enumerable properties to the `ES6` object.
5. Finally, it exports the `ES2015` module, either with these attached properties (nested) or not, depending on the availability of `Object.defineProperty`.

Rewritten code:

```javascript
'use strict';

const ES5 = require('./es5');
const ES6 = require('./es6');
const ES2015 = require('./es2015');

if (Object.defineProperty) {
	// Add non-enumerable properties to ES2015 object
	Object.defineProperty(ES2015, 'ES5', { enumerable: false, value: ES5 });
	Object.defineProperty(ES2015, 'ES6', { enumerable: false, value: ES6 });
	Object.defineProperty(ES2015, 'ES2015', { enumerable: false, value: ES2015 });
} else {
	// Add enumerable properties to ES6 object for environments without defineProperty
	ES6.ES5 = ES5;
	ES6.ES6 = ES6;
	ES6.ES2015 = ES2015;
}

// Export the ES2015 module
module.exports = ES2015;
```