The README.md for the Node.js package outlines the functionality and features of Day.js, a minimalist JavaScript library designed to handle date and time operations. Let's break down its functionalities and features as described in the document:

1. **Overview**:
    - Day.js serves as a lightweight alternative to Moment.js, boasting a small size (approximately 2kB), modern API compatibility with Moment.js, and supports the same date manipulation features. It emphasizes speed and efficiency without sacrificing modern API patterns.

2. **Features**:
    - **Familiar API**: Users of Moment.js can easily transition to Day.js due to its compatible API and patterns.
    - **Immutable**: Day.js instances are immutable; they return new instances with changes rather than altering existing ones.
    - **Chainable**: Operations can be chained together for cleaner and more readable code.
    - **I18n Support**: Day.js supports internationalization, allowing for locale-specific date formatting.
    - **Universal Browser Support**: Works across all modern browsers.

3. **Basic Usage**:
    - Create instances, manipulate dates (addition, subtraction, setting values), formatting, and querying dates similar to Moment.js syntax.
    - Example: `dayjs().startOf('month').add(1, 'day').set('year', 2018).format('YYYY-MM-DD HH:mm:ss');`.

4. **Installation & Documentation**:
    - Can be installed via npm using `npm install dayjs --save`.
    - Detailed documentation is available online, covering API, setup guides, and localization support.

5. **Internationalization (I18n)**:
    - Support for different locales, activated only when used to avoid unnecessary bloat.
    - Allows setting default or instance-specific locales.

6. **Plugins**:
    - Additional functionality can be added through plugins, such as extending format capabilities.

The following code is an implementation of basic functionality for the Day.js library, imitating some of the core features based on the description from the README:

```javascript
/**
 * Simplified version of the Day.js library
 */

// Constructor for Day.js
class DayJS {
  constructor(date) {
    this.date = date ? new Date(date) : new Date();
  }

  startOf(unit) {
    const date = new Date(this.date);
    if (unit === 'month') {
      date.setDate(1);
      date.setHours(0, 0, 0, 0);
    }
    return new DayJS(date);
  }

  add(value, unit) {
    const date = new Date(this.date);
    if (unit === 'day') {
      date.setDate(date.getDate() + value);
    } else if (unit === 'year') {
      date.setFullYear(date.getFullYear() + value);
    }
    return new DayJS(date);
  }

  set(unit, value) {
    const date = new Date(this.date);
    if (unit === 'year') {
      date.setFullYear(value);
    } else if (unit === 'month') {
      date.setMonth(value);
    }
    return new DayJS(date);
  }

  format(formatStr) {
    const yyyy = this.date.getFullYear();
    const mm = (`0${this.date.getMonth() + 1}`).slice(-2);
    const dd = (`0${this.date.getDate()}`).slice(-2);
    const hh = (`0${this.date.getHours()}`).slice(-2);
    const min = (`0${this.date.getMinutes()}`).slice(-2);
    const ss = (`0${this.date.getSeconds()}`).slice(-2);
    // Simplified formatting, only handles 'YYYY-MM-DD HH:mm:ss'
    return formatStr.replace('YYYY', yyyy)
                    .replace('MM', mm)
                    .replace('DD', dd)
                    .replace('HH', hh)
                    .replace('mm', min)
                    .replace('ss', ss);
  }

  isBefore(otherDate) {
    return this.date < new DayJS(otherDate).date;
  }
}

// Usage examples
const dayjs = (date) => new DayJS(date);

console.log(dayjs().startOf('month').add(1, 'day').set('year', 2018).format('YYYY-MM-DD HH:mm:ss'));
console.log(dayjs('2018-08-08').format('YYYY-MM-DD'));
console.log(dayjs().add(1, 'year').format('YYYY-MM-DD'));

// Exports for Node.js
module.exports = { dayjs };
```
This simplified implementation captures some of the core features such as creating dates, manipulating them, formatting them according to a specific pattern, and checking relational conditions with another date. It is designed to mimic the API style of Day.js while providing basic functionality.