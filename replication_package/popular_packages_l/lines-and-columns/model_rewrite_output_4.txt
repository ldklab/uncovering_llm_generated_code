The provided Node.js code defines a `LinesAndColumns` class that helps manage and calculate text positions based on lines and columns. Here's a breakdown of its functionality:

1. **Constructor (`constructor`):** It initializes a new instance of the class with a specific text. It uses this text to compute the start indices of each line, which are stored in the `lineStartIndices` array.

2. **Compute Line Start Indices (`computeLineStartIndices`):** This private method processes the text to find the indices where each new line begins. It adds an initial `0` to the array to mark the start of the text and then scans through the text for newline characters (`'\n'`), adding the index immediately after each newline character to the list.

3. **Location for Index (`locationForIndex`):** This method takes a character index and returns a location object with `line` and `column` properties that match the character's position in the text. If the given index is out of range, it returns `null`.

4. **Index for Location (`indexForLocation`):** Given a location (specified by line and column), this method computes and returns the corresponding character index in the text. If the location is invalid (e.g., out of bounds), it returns `null`.

Here is a possible rewrite of the Node.js code based on the above explanation:

```javascript
// lines-and-columns/index.js

class LinesAndColumns {
  constructor(text) {
    this.text = text;
    this.lineStartIndices = this.computeLineStartIndices();
  }

  computeLineStartIndices() {
    let indices = [0];
    this.text.split('').forEach((char, idx) => {
      if (char === '\n') indices.push(idx + 1);
    });
    return indices;
  }

  locationForIndex(index) {
    if (index < 0 || index >= this.text.length) return null;
    
    let line = 0;
    while (line < this.lineStartIndices.length - 1 && index >= this.lineStartIndices[line + 1]) {
      line++;
    }
    let column = index - this.lineStartIndices[line];
    return { line, column };
  }

  indexForLocation({ line, column }) {
    if (line < 0 || line >= this.lineStartIndices.length) return null;
    
    let index = this.lineStartIndices[line] + column;
    if (index >= this.text.length || (line < this.lineStartIndices.length - 1 && index >= this.lineStartIndices[line + 1])) {
      return null;
    }
    
    return index;
  }
}

export { LinesAndColumns };
```
