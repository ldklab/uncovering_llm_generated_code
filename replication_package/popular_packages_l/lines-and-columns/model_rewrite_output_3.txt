The original Node.js code defines a `LinesAndColumns` class that handles mapping between character indices in a string and their corresponding line and column numbers. It does this by first determining where each line starts in the input text (when initialized) and storing these starting indices. The class includes the following methods:

1. `computeLineStartIndices(text)`: Computes an array where each element is the starting index of a new line in the text. It begins with `0` since the first line starts at the beginning of the text.

2. `locationForIndex(index)`: Given a character index, this method returns an object containing the line and column numbers for that index. If the index is out of bounds, it returns `null`.

3. `indexForLocation({ line, column })`: Given a line and column, this method returns the character index. If the line or column is out of bounds, it returns `null`.

Below is a rewritten version of the original code that performs the same functionality.

```javascript
class LinesAndColumns {
  constructor(text) {
    this.text = text;
    this.lineStartIndices = this._computeLineStartIndices(text);
  }

  _computeLineStartIndices(text) {
    const indices = [0];
    let position = 0;
    while ((position = text.indexOf('\n', position)) !== -1) {
      indices.push(++position);
    }
    return indices;
  }

  locationForIndex(index) {
    if (index < 0 || index >= this.text.length) return null;
    let line = this.lineStartIndices.findIndex((start, i) => 
      index < (this.lineStartIndices[i + 1] || Infinity)
    );
    let column = index - this.lineStartIndices[line];
    return { line, column };
  }

  indexForLocation({ line, column }) {
    if (line < 0 || line >= this.lineStartIndices.length) return null;
    let startIndex = this.lineStartIndices[line];
    let index = startIndex + column;
    if (index >= this.text.length || (line < this.lineStartIndices.length - 1 && index >= this.lineStartIndices[line + 1])) {
      return null;
    }
    return index;
  }
}

export { LinesAndColumns };
```