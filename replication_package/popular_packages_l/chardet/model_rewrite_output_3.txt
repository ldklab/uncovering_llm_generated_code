```javascript
// chardet.js

class Chardet {
  // Detects the encoding of a given buffer
  detect(buffer) {
    return this.analyse(buffer)[0]?.name;  // Returns the encoding name with the highest confidence
  }

  // Asynchronously detects the encoding of a file's content
  async detectFile(filePath, options = {}) {
    const fs = require('fs').promises;
    const buffer = await fs.readFile(filePath);  // Reads the file as a buffer
    // Slices the buffer considering offset and sample size
    return this.detect(buffer.slice(options.offset || 0, (options.sampleSize || buffer.length) + (options.offset || 0)));
  }

  // Synchronously detects the encoding of a file's content
  detectFileSync(filePath, options = {}) {
    const fs = require('fs');
    const buffer = fs.readFileSync(filePath);  // Reads the file synchronously as a buffer
    // Slices the buffer considering offset and sample size
    return this.detect(buffer.slice(options.offset || 0, (options.sampleSize || buffer.length) + (options.offset || 0)));
  }

  // Analyses a buffer and lists possible encodings with confidence levels
  analyse(buffer) {
    // Replace with actual encoding analysis logic
    return [
      { confidence: 90, name: 'UTF-8' },
      { confidence: 20, name: 'windows-1252', lang: 'fr' }
    ];
  }
}

const chardet = new Chardet();
module.exports = chardet;

// Example usage

// Import the chardet library
import chardet from './chardet.js';

// Detect encoding of a string converted to a buffer
const buffer = Buffer.from('hello there!');
const encoding = chardet.detect(buffer);
console.log(`Detected Encoding: ${encoding}`);

// Detect file encoding asynchronously
(async () => {
  const encoding = await chardet.detectFile('/path/to/file');
  console.log(`Detected File Encoding: ${encoding}`);
})();

// Detect file encoding synchronously
const syncEncoding = chardet.detectFileSync('/path/to/file');
console.log(`Synchronously Detected File Encoding: ${syncEncoding}`);

// Analyse encoding possibilities and confidence
const analysisResult = chardet.analyse(buffer);
console.log(`Analysis Result: ${JSON.stringify(analysisResult)}`);

// Example for browsers using Uint8Array
const uintArray = new Uint8Array([0x68, 0x65, 0x6c, 0x6c, 0x6f]);
const browserAnalysis = chardet.analyse(uintArray);
console.log(`Browser Analysis Result: ${JSON.stringify(browserAnalysis)}`);
```