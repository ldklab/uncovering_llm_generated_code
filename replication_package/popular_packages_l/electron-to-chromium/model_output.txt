The `electron-to-chromium` package provides a way to map between versions of Electron and the Chromium versions those Electron versions include. This is useful because Electron, which is used for building cross-platform desktop applications using web technologies, incorporates Chromium, a browser engine. Hence, knowing the exact version of Chromium bundled with a particular Electron version is vital for developers to ensure compatibility and leverage specific browser features.

### Main Features

1. **Data Structures:**
   - `versions`: An object mapping major Electron versions to corresponding major Chromium versions.
   - `fullVersions`: An object mapping specific Electron versions to full Chromium versions.
   - `chromiumVersions`: An object mapping major Chromium versions to the corresponding major Electron versions.
   - `fullChromiumVersions`: An object mapping full Chromium versions to an array of corresponding major Electron versions.

2. **Functions:**
   - `electronToChromium(query)`: Takes either a major or a full Electron version and returns the corresponding Chromium version.
   - `chromiumToElectron(query)`: Takes either a major or a full Chromium version and returns the corresponding Electron version, or an array of Electron versions if the full version is used.
   - `electronToBrowserList(query)`: Returns a Browserslist query for a given major Electron version (deprecated).

3. **Importing Specific Lists:** Developers can import just specific properties if they want to reduce file size, such as `versions`, `fullVersions`, `chromiumVersions`, `fullChromiumVersions`.

4. **Updating:** The `npm run build.js` command fetches updates from Electron's version list, ensuring the mappings stay current.

Here's the implementation of the `electron-to-chromium` package:

```markdown
```js
// electron-to-chromium/index.js
const versions = require('./versions');
const fullVersions = require('./full-versions');
const chromiumVersions = require('./chromium-versions');
const fullChromiumVersions = require('./full-chromium-versions');

function electronToChromium(query) {
  if (fullVersions[query]) {
    return fullVersions[query];
  }
  return versions[query] || undefined;
}

function chromiumToElectron(query) {
  if (fullChromiumVersions[query]) {
    return fullChromiumVersions[query];
  }
  return chromiumVersions[query] || undefined;
}

function electronToBrowserList(query) {
  console.warn('electronToBrowserList is deprecated.');
  const chromeVersion = electronToChromium(query);
  return chromeVersion ? `Chrome >= ${chromeVersion}` : undefined;
}

// export object
module.exports = {
  versions,
  fullVersions,
  chromiumVersions,
  fullChromiumVersions,
  electronToChromium,
  chromiumToElectron,
  electronToBrowserList,
};
```

```js
// electron-to-chromium/versions.js
// Example mapping of Electron major versions to major Chromium versions
module.exports = {
  '1.4': '53',
  '1.5': '54',
};
```

```js
// electron-to-chromium/full-versions.js
// Example mapping of specific Electron versions to full Chromium versions
module.exports = {
  '1.4.11': '53.0.2785.143',
  '1.5.0': '54.0.2840.100',
};
```

```js
// electron-to-chromium/chromium-versions.js
// Example mapping of major Chromium versions to major Electron versions
module.exports = {
  '53': '1.4',
  '54': '1.5',
};
```

```js
// electron-to-chromium/full-chromium-versions.js
// Example mapping of full Chromium versions to arrays of Electron versions
module.exports = {
  '53.0.2785.143': ['1.4.11'],
  '54.0.2840.101': ['1.5.0', '1.5.1'],
};
```

// Add build.js and test scripts if required for updating and testing the package functionality.
```
