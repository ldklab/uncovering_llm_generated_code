The functionality of the provided Node.js code is to create individual modules for various JavaScript Error constructors. Each of these modules exports a default error type which can be utilized by importing the respective file. The package provides a way to access these error constructors easily, and a test script ensures that the exports are correct.

Below is a possible rewrite of the code:

```javascript
// File: index.js
module.exports = global.Error;

// File: eval.js
module.exports = global.EvalError;

// File: range.js
module.exports = global.RangeError;

// File: ref.js
module.exports = global.ReferenceError;

// File: syntax.js
module.exports = global.SyntaxError;

// File: type.js
module.exports = global.TypeError;

// File: uri.js
module.exports = global.URIError;

// File: package.json
{
  "name": "es-errors",
  "version": "1.0.0",
  "description": "A simple cache for a few of the JS Error constructors.",
  "main": "index.js",
  "files": [
    "index.js",
    "eval.js",
    "range.js",
    "ref.js",
    "syntax.js",
    "type.js",
    "uri.js"
  ],
  "scripts": {
    "test": "node test.js"
  },
  "author": "Your Name",
  "license": "MIT"
}

// File: test.js
const assert = require('assert');

const Base = require('./index');
const Eval = require('./eval');
const Range = require('./range');
const Ref = require('./ref');
const Syntax = require('./syntax');
const Type = require('./type');
const URI = require('./uri');

assert.strictEqual(Base, global.Error);
assert.strictEqual(Eval, global.EvalError);
assert.strictEqual(Range, global.RangeError);
assert.strictEqual(Ref, global.ReferenceError);
assert.strictEqual(Syntax, global.SyntaxError);
assert.strictEqual(Type, global.TypeError);
assert.strictEqual(URI, global.URIError);

console.log('All tests passed!');
```