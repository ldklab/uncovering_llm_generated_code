The Node.js script "simple-svgo.js" is a command-line tool that optimizes SVG files using the SVGO library. The script accepts two command-line arguments: the input SVG file and the output filename for the optimized SVG. The process involves the following steps:

1. **Argument Parsing**: The script retrieves command-line arguments to determine the input and output SVG files. If insufficient arguments are provided, it displays a usage message and exits.

2. **Reading SVG File**: The script reads the SVG file specified as the input using `fs.readFile`. If an error occurs while reading the file, it logs the error and exits.

3. **Optimizing SVG**: Using the SVGO library's `optimize` function, the script optimizes the SVG data. It sets `multipass: true` for multiple-pass optimization and uses the default plugin settings (`preset-default`). 

4. **Writing Optimized SVG**: After optimization, it writes the optimized SVG content to the specified output file using `fs.writeFile`. If an error occurs during writing, it logs the error and exits. Upon success, it confirms the operation in the console output.

Additionally, there is an example SVGO configuration (commented out) that adjusts specific plugin settings, such as keeping the `viewBox` attribute and prefixing IDs.

Here's a rewritten version of that code:

```javascript
// simple-svgo.js
const fs = require('fs');
const { optimize } = require('svgo');

// Extract command-line arguments
const [inputFile, outputFile] = process.argv.slice(2);

// Validate the number of arguments
if (!inputFile || !outputFile) {
  console.error('Usage: node simple-svgo.js <input.svg> <output.svg>');
  process.exit(1);
}

// Function to handle file operations and optimization
function optimizeSvg(inputPath, outputPath) {
  fs.readFile(inputPath, 'utf8', (readErr, data) => {
    if (readErr) {
      console.error(`Error reading file ${inputPath}: ${readErr.message}`);
      process.exit(1);
    }

    // Optimize SVG data
    const result = optimize(data, {
      path: inputPath,
      multipass: true,
      plugins: ['preset-default'], // Default optimization plugins
    });

    // Write optimized data to output file
    fs.writeFile(outputPath, result.data, 'utf8', (writeErr) => {
      if (writeErr) {
        console.error(`Error writing file ${outputPath}: ${writeErr.message}`);
        process.exit(1);
      }

      console.log(`Optimized SVG saved to ${outputPath}`);
    });
  });
}

// Invoke the optimization function with specified files
optimizeSvg(inputFile, outputFile);

// Example SVGO configuration (svgo.config.js)
// module.exports = {
//   multipass: true,
//   plugins: [
//     { name: 'removeViewBox', active: false },
//     { name: 'prefixIds', params: { prefix: 'simple-svgo' } },
//   ],
// };
```
