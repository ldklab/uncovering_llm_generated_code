The `tailwind-merge` package is a utility for merging Tailwind CSS classes in JavaScript without causing style conflicts. It takes multiple class strings as input and outputs a single optimized string. This is especially useful when you need to combine multiple class definitions that might have overlapping properties, ensuring that more specific styling takes precedence over less specific ones.

Here's a breakdown of the functionality based on the README:

- **Merging Classes**: The core functionality is to merge multiple Tailwind CSS classes into a single string while resolving any conflicts between overlapping class definitions.
- **Priority Handling**: The package adheres to Tailwind CSS's specificity rules, ensuring that the most specific or latest conflicting class takes precedence.
- **Support for Multiple Versions**: It supports Tailwind CSS from version 3.0 to 3.4. For older versions like Tailwind v2, a specific older package version is recommended.
- **Platform Compatibility**: It is compatible with modern browsers and actively maintained Node.js versions.
- **Type Safety**: The package is fully typed, which aids in better development experience with TypeScript.
- **Bundle Size**: Users can check the bundle size implications of this utility on Bundlephobia, providing insight into how including this package might affect the size of their project.

Given this understanding, here is a simple implementation of a package that provides similar merging functionality:

```javascript
// index.js
function twMerge(...classStrings) {
    const classes = classStrings.flatMap(str => str.split(' '));
    const classMap = {};

    for (let cls of classes) {
        // Separate class and its modifiers (like `hover:`)
        const [modifier, className] = cls.includes(':') 
            ? cls.split(':')
            : [null, cls];
        
        // Consider modifier as part of the key for specificity
        const key = modifier ? `${modifier}:${className}` : className;
        
        // Overwrite any previous classes to ensure specificity
        classMap[key] = cls;
    }
    
    // Return space-separated final classes
    return Object.values(classMap).join(' ');
}

module.exports = { twMerge };

// Usage Example
if (require.main === module) {
    const result = twMerge('px-2 py-1 bg-red hover:bg-dark-red', 'p-3 bg-[#B91C1C]');
    console.log(result); // Output: "hover:bg-dark-red p-3 bg-[#B91C1C]"
}
```

In this simple implementation:
- `twMerge` function accepts multiple strings of classes and splits them into individual classes.
- It creates a `classMap` that overwrites any previous class with the same key, ensuring that the latest declaration takes precedence.
- Keys in `classMap` include the modifier and class name to correctly handle priorities like `hover:bg-`.
- Finally, it returns the values of the `classMap` as a single space-separated string.