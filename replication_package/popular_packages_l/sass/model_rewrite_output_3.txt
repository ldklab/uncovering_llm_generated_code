```javascript
const fs = require('fs');
const path = require('path');

class SassCompiler {
  constructor() {
    // Constructor for setting up initial state if needed
  }

  compileSync(scssFilePath) {
    // Synchronously read SCSS content and compile to CSS
    const scssContent = fs.readFileSync(scssFilePath, 'utf-8');
    return this._transformScssToCss(scssContent);
  }

  async compileAsync(scssFilePath) {
    // Asynchronously read SCSS content and compile to CSS
    const scssContent = await fs.promises.readFile(scssFilePath, 'utf-8');
    return this._transformScssToCss(scssContent);
  }

  _transformScssToCss(scssContent) {
    // Mimic SCSS to CSS transformation
    const fakeCss = scssContent.replace(/;/g, ';\n').replace(/\{ /g, '{\n  ');
    return { css: fakeCss };
  }
}

// Export a single instance of SassCompiler
const sassCompilerInstance = new SassCompiler();
module.exports = sassCompilerInstance;

// CLI handling if script is executed directly
if (require.main === module) {
  const inputFilePath = process.argv[2];
  if (!inputFilePath) {
    console.error('No input file path specified.');
    process.exit(1);
  }

  // Synchronous compilation example
  let output;
  try {
    output = sassCompilerInstance.compileSync(inputFilePath);
    console.log('Compiled CSS:', output.css);
  } catch (error) {
    console.error('Failed to compile SCSS:', error.message);
    process.exit(1);
  }
}
```