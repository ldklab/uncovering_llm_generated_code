The `xtend` package is a utility library designed to extend objects by merging properties from two or more objects into a new object. It takes multiple source objects as arguments and combines their properties into a single new object. If there are conflicting properties (i.e., properties with the same key), the value from the last object with that property in the argument list is used. Importantly, this function does not mutate the original objects; it creates and returns a new object with the combined properties.

Here's how the functionality would be implemented in a Node.js package:

```js
// xtend.js
function extend(...objects) {
  const result = {};

  objects.forEach(obj => {
    if (obj && typeof obj === 'object') {
      Object.keys(obj).forEach(key => {
        result[key] = obj[key];
      });
    }
  });

  return result;
}

module.exports = extend;

// Example usage
if (require.main === module) {
  const extend = require('./xtend');

  const combination = extend({ a: 'a', b: 'c' }, { b: 'b' });
  console.log(combination); // { a: "a", b: "b" }
}
```

In this implementation:
- The `extend` function accepts any number of objects.
- It initializes an empty `result` object.
- It iterates over each object passed as an argument, ensuring the object is valid and of type 'object'.
- It iterates over each key of the current object, and assigns the associated value to the `result` object. This process effectively overwrites any existing property with the same key from earlier objects since objects passed later take precedence.
- Finally, the function returns the `result` object containing the merged properties.