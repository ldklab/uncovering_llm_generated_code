The functionality of the given Node.js code is to define a function `extend`, which takes in multiple objects as arguments and combines their properties into a single object. The function iterates over each provided object, checking if it is an actual object (not `null` and of type 'object'). It then iterates over the keys of each valid object and assigns their values to the result object. If multiple objects have the same property, the value from the last object with that property will overwrite previous values. The module exports the `extend` function for use in other files. Additionally, there is an example usage of the `extend` function, which demonstrates how it combines two objects, overriding duplicate keys with values from the later object.

Here is a rewritten version of this Node.js code:

```javascript
// xtend.js
function extend(...objects) {
  return objects.reduce((result, obj) => {
    if (obj && typeof obj === 'object') {
      Object.keys(obj).forEach(key => {
        result[key] = obj[key];
      });
    }
    return result;
  }, {});
}

module.exports = extend;

// Example usage
if (require.main === module) {
  const extend = require('./xtend');

  const combination = extend({ a: 'a', b: 'c' }, { b: 'b' });
  console.log(combination); // { a: "a", b: "b" }
}
```