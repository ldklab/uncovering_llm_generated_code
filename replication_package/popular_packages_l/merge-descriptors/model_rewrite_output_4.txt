The functionality of the given Node.js code is to merge property descriptors from a source object into a destination object. The function `mergeDescriptors` takes three parameters: `destination` (the target object to receive the properties), `source` (the object whose properties are to be merged), and `overwrite` (a boolean flag to determine if existing properties in the destination should be overwritten). The function ensures both source and destination are non-null objects. It then retrieves both string and symbol keys from the source object and iterates over them. For each key, if overwriting is allowed or if the key does not exist in the destination, it copies the property descriptor from the source to the destination.

Here is the rewritten code:

```javascript
function mergeDescriptors(destination, source, overwrite = true) {
  if (typeof source !== 'object' || source === null) {
    throw new TypeError('Source must be a non-null object');
  }
  if (typeof destination !== 'object' || destination === null) {
    throw new TypeError('Destination must be a non-null object');
  }

  const keys = [...Object.getOwnPropertyNames(source), ...Object.getOwnPropertySymbols(source)];

  for (const key of keys) {
    if (key in destination && !overwrite) {
      continue;
    }
    const descriptor = Object.getOwnPropertyDescriptor(source, key);
    Object.defineProperty(destination, key, descriptor);
  }

  return destination;
}

export default mergeDescriptors;
```