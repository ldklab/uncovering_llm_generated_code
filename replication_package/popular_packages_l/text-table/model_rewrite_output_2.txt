The provided Node.js code is a module that formats a 2D array (`rows`) into a text-based table. It includes customizable options for horizontal separator (`hsep`), column alignment (`align`), and a function to calculate string length (`stringLength`). The table is formatted to ensure columns are aligned according to specified options or default settings.

### Explanation:
1. **`textTable` Function**: The core function that takes `rows` (array of arrays) and optional `opts` to control the formatting.
   - Default separator (`hsep`) is two spaces.
   - `align` can be 'r' for right, 'c' for center, or '.' for decimal, defaulting to left.
   - `stringLength` defaults to measuring the length of the string using a simple character count.

2. **Column Width Calculation**: Determines the maximum width required for each column by examining each item in rows.

3. **`formatCell` Function**: Adjusts the cell content based on its alignment preference:
   - Right (`r`), Center (`c`), Decimal (`.`) alignment or Left (default).
   
4. **`defaultStringLength` Function**: Calculates string length traditionally using `.length`.

5. **Module Export**: The text table function is exported for external use.

Here is a rewritten version of the code that maintains functionality while organizing it cleanly:

```javascript
// text-table/index.js

function textTable(rows, opts = {}) {
    const hsep = opts.hsep || '  ';
    const align = opts.align || [];
    const stringLength = opts.stringLength || defaultStringLength;

    const colWidths = calculateColumnWidths(rows, stringLength);

    return formatRows(rows, colWidths, align, stringLength, hsep);
}

function calculateColumnWidths(rows, stringLength) {
    return rows[0].map((_, colIdx) => {
        return Math.max(...rows.map(row => stringLength(row[colIdx].toString())));
    });
}

function formatRows(rows, colWidths, align, stringLength, hsep) {
    return rows.map(row => {
        return row.map((cell, colIdx) => {
            const cellString = cell.toString();
            const width = colWidths[colIdx];
            return formatCell(cellString, width, align[colIdx], stringLength);
        }).join(hsep);
    }).join('\n');
}

function defaultStringLength(str) {
    return str.length;
}

function formatCell(str, width, alignment, stringLength) {
    const length = stringLength(str);
    const padding = width - length;

    switch (alignment) {
        case 'r':
            return ' '.repeat(padding) + str;
        case 'c':
            const halfPadding = Math.floor(padding / 2);
            return ' '.repeat(halfPadding) + str + ' '.repeat(padding - halfPadding);
        case '.':
            const [intPart, fracPart = ''] = str.split('.');
            const intLength = stringLength(intPart);
            return ' '.repeat(width - intLength - fracPart.length) + str;
        default:
            return str + ' '.repeat(padding);
    }
}

module.exports = textTable;
```
