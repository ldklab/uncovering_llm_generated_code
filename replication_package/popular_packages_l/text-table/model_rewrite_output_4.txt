The Node.js code provided is a simple implementation for generating a text table, where rows of data are formatted into a table-like string representation. The main function `textTable` takes two parameters: `rows`, which is a 2D array containing the table data, and `opts`, an optional configuration object. This function calculates the column widths by determining the longest string in each column, and then formats each cell according to the specified alignment options. The key functionalities include:

1. **Column Width Calculation**: Determine the maximum width required for each column based on the length of the longest entry in that column.
2. **String Length Customization**: Allow customization of the string length calculation function.
3. **Alignment Configuration**: Align cell content based on the provided alignment options for each column. Supported alignments include `'r'` for right, `'c'` for center, and `'.'` for dot alignment (aligning floating numbers by their decimal points).
4. **Text Table Construction**: Construct a text-based table using a specified horizontal separator.

Below is the rewritten code:

```javascript
function textTable(rows, opts = {}) {
    const horizontalSeparator = opts.hsep || '  ';
    const columnAlignment = opts.align || [];
    const calculateStringLength = opts.stringLength || defaultStringLength;

    // Calculate the maximum width for each column
    const columnWidths = rows[0].map((_, columnIndex) => {
        return Math.max(...rows.map(row => calculateStringLength(row[columnIndex].toString())));
    });

    // Build the table using the calculated widths and specified alignments
    return rows.map(row => {
        return row.map((cell, columnIndex) => {
            const cellString = cell.toString();
            const columnWidth = columnWidths[columnIndex];
            return formatCellContent(cellString, columnWidth, columnAlignment[columnIndex], calculateStringLength);
        }).join(horizontalSeparator);
    }).join('\n');
}

function defaultStringLength(string) {
    return string.length;
}

function formatCellContent(string, columnWidth, alignment, calculateStringLength) {
    const contentLength = calculateStringLength(string);
    const paddingSize = columnWidth - contentLength;

    // Handle right, center, dot, and default (left) alignment
    if (alignment === 'r') {
        return ' '.repeat(paddingSize) + string;
    } else if (alignment === 'c') {
        const halfPadding = Math.floor(paddingSize / 2);
        return ' '.repeat(halfPadding) + string + ' '.repeat(paddingSize - halfPadding);
    } else if (alignment === '.') {
        const [integerPart, fractionalPart = ''] = string.split('.');
        const integerLength = calculateStringLength(integerPart);
        return ' '.repeat(columnWidth - integerLength - fractionalPart.length) + string;
    }
    // Default to left alignment
    return string + ' '.repeat(paddingSize);
}

module.exports = textTable;

// Usage example:
// const table = require('./text-table');
// const formattedTable = table(dataArray, optionsObj);
```