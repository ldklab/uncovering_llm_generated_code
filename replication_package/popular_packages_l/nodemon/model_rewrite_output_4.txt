The provided Node.js script implements a simplified version of a tool like "nodemon", which automatically restarts a Node.js application when file changes in the directory are detected. Here's a breakdown of the script's functionality:

1. **Argument Parsing**: The script starts by parsing command-line arguments to determine the script file to run, directories or files to watch, file extensions to monitor for changes, ignored paths, and restart delay.

2. **Initialization and Running**: 
   - It initializes a `Nodemon` class with the parsed arguments.
   - The class starts the given Node.js script, manages auto-restarting the process, and sets up file watching using `chokidar`.

3. **File Watching and Restart**:
   - The script uses `chokidar` to watch specified files and directories for changes. Only changes in files with specified extensions will trigger a restart.
   - Upon detecting a change, the script restarts the Node.js process with a defined delay, terminating the current process using `SIGUSR2` and spawning a new process.

4. **Script Execution**: 
   - The `runNodeScript` method handles killing the existing process and spawning a new one.
   - Ensures the process exits correctly if exited by other signals or errors.

Here is the refactored code:

```javascript
#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const chokidar = require('chokidar');
const path = require('path');
const fs = require('fs');

class Nodemon {
  constructor(script, options = {}) {
    this.script = script;
    this.options = options;
    this.restartDelay = this.options.delay || 1000;
    this.watchExtensions = this.options.ext || 'js,mjs,json';
    this.ignorePaths = this.options.ignore || [];
    this.process = null;
    this.initialStart();
    this.startWatching();
  }

  initialStart() {
    console.log('[nodemon] starting `' + this.script + '`');
    this.runNodeScript();
  }

  startWatching() {
    const watcher = chokidar.watch(this.options.watch || '.', { ignored: this.ignorePaths });
    watcher.on('change', (filePath) => {
      if (this.shouldRestart(filePath)) {
        this.scheduleRestart();
      }
    });
  }

  shouldRestart(filePath) {
    const ext = path.extname(filePath).slice(1);
    return this.watchExtensions.split(',').includes(ext);
  }

  scheduleRestart() {
    if (this.restartTimeout) return;
    this.restartTimeout = setTimeout(() => {
      this.restartTimeout = null;
      this.runNodeScript();
    }, this.restartDelay);
  }

  runNodeScript() {
    if (this.process) {
      this.process.kill('SIGUSR2');
      console.log('[nodemon] restarting due to changes...');
    }
  
    this.process = spawn('node', [this.script], {
      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],
    });

    this.process.on('exit', (code, signal) => {
      if (signal !== 'SIGUSR2') {
        process.exit(code);
      }
    });
  }
}

function parseArguments() {
  const args = process.argv.slice(2);
  let watch, ext, ignore, delay;
  let script = args[0];
  
  args.forEach((arg, idx) => {
    if (arg === '--watch') watch = args[idx + 1];
    if (arg === '--ext') ext = args[idx + 1];
    if (arg === '--ignore') ignore = args[idx + 1];
    if (arg === '--delay') delay = parseFloat(args[idx + 1]) * 1000;
  });

  if (!script) {
    console.error('[nodemon] No script provided.');
    process.exit(1);
  }

  return { script, watch, ext, ignore, delay };
}

function main() {
  const config = parseArguments();
  new Nodemon(config.script, {
    watch: config.watch,
    ext: config.ext,
    ignore: config.ignore,
    delay: config.delay,
  });
}

main();
```