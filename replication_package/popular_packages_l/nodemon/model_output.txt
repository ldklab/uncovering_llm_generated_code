**Functionality Description:**

Nodemon is a utility tool for helping developers who work with Node.js applications. Its core functionality is to automatically restart Node.js applications when file changes are detected in the project directory. This means that developers do not need to manually stop and start their Node.js application each time they make changes to their code, which helps speed up development and testing.

Key features of Nodemon include:
1. **Automatic Restarts:** Nodemon monitors file changes in a specified directory. If it detects any changes in files with watched extensions (like .js by default), it automatically restarts the node application.
2. **Manual Restarts:** Users can manually trigger a restart by typing `rs` when nodemon is running.
3. **Flexible Configuration:** Users can customize which files Nodemon watches and which should be ignored using command line arguments or configuration files (`nodemon.json` or configuration within `package.json`). 
4. **Command-line Execution:** Mainly a command line tool, it wraps the node command and can be used to run Node.js scripts directly.
5. **Custom Signals and Events:** Nodemon can pass custom signals to applications and can trigger custom events/scripts when the state changes (like application restart).
6. **Different File Types:** Besides JavaScript files, Nodemon can be configured to restart applications that involve other file types.
7. **Compatibility with Build Tools:** It's possible to integrate Nodemon with build tools like Gulp and Grunt to automate development workflows.
8. **Customizable Delays and Extensions:** Users can specify extensions for watched files and introduce delays in restarting after detecting file changes to optimize performance during batch file changes.

```javascript
#!/usr/bin/env node

const { execSync, spawn } = require('child_process');
const chokidar = require('chokidar');
const path = require('path');
const fs = require('fs');

class Nodemon {
  constructor(script, options = {}) {
    this.script = script;
    this.options = options;
    this.restartDelay = this.options.delay || 1000;
    this.watchExtensions = this.options.ext || 'js,mjs,json';
    this.ignorePaths = this.options.ignore || [];
    this.process = null;
    this.initialStart();
    this.startWatching();
  }

  initialStart() {
    console.log('[nodemon] starting `' + this.script + '`');
    this.runNodeScript();
  }

  startWatching() {
    const watcher = chokidar.watch(this.options.watch || '.', { ignored: this.ignorePaths });
    watcher.on('change', (filePath) => {
      if (this.shouldRestart(filePath)) {
        this.scheduleRestart();
      }
    });
  }

  shouldRestart(filePath) {
    const ext = path.extname(filePath).slice(1);
    return this.watchExtensions.split(',').includes(ext);
  }

  scheduleRestart() {
    if (this.restartTimeout) return;
    this.restartTimeout = setTimeout(() => {
      this.restartTimeout = null;
      this.runNodeScript();
    }, this.restartDelay);
  }

  runNodeScript() {
    if (this.process) {
      this.process.kill('SIGUSR2');
      console.log('[nodemon] restarting due to changes...');
    }
  
    this.process = spawn('node', [this.script], {
      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],
    });

    this.process.on('exit', (code, signal) => {
      if (signal !== 'SIGUSR2') {
        process.exit(code);
      }
    });
  }
}

function parseArguments() {
  const args = process.argv.slice(2);
  let watch, ext, ignore, delay;
  let script = args[0];
  
  args.forEach((arg, idx) => {
    switch (arg) {
      case '--watch':
        watch = args[idx + 1];
        break;
      case '--ext':
        ext = args[idx + 1];
        break;
      case '--ignore':
        ignore = args[idx + 1];
        break;
      case '--delay':
        delay = parseFloat(args[idx + 1]) * 1000;
        break;
    }
  });

  if (!script) {
    console.error('[nodemon] No script provided.');
    process.exit(1);
  }

  return { script, watch, ext, ignore, delay };
}

function main() {
  const config = parseArguments();
  new Nodemon(config.script, {
    watch: config.watch,
    ext: config.ext,
    ignore: config.ignore,
    delay: config.delay,
  });
}

main();
```