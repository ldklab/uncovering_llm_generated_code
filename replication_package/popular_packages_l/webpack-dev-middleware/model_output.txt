The `webpack-dev-middleware` package is a middleware that integrates with Node.js servers like Express or Fastify to allow serving webpack-generated files directly from memory. This is particularly suited for development environments, as it enables hot module replacement (HMR) and updates files in memory without writing them to disk. Here's an overview of its main functionalities:

1. **In-memory File Handling**: Rather than writing bundled files to disk, this middleware keeps them in memory, which adds speed and avoids file I/O.
2. **Request Handling During Compilation**: When files change and webpack is in "watch mode," the middleware will delay requests until the recompilation is complete, ensuring clients receive the updated files.
3. **API Methods**:
   - `close(callback)`: Stops watching file changes.
   - `invalidate(callback)`: Forces recompilation.
   - `waitUntilValid(callback)`: Executes a callback when the compilation is completed and valid.
   - `getFilenameFromUrl(url)`: Obtains the filename from a URL.
4. **Customization Options**: 
   - HTTP methods it should respond to.
   - Set custom HTTP headers.
   - Configure caching, mime types, ETag generation, last modification checks, etc.
5. **Server-Side Rendering**: Experimental support is offered, where it provides the webpack `stats` and the output filesystem for rendering purposes.
6. **Integration Flexibility**: Designed to work with various Node.js server frameworks like Express, Connect, Hapi, Fastify, etc., by using appropriate wrapping methods for each framework.
7. **Extensible Configuration**: Allows for detailed configuration in terms of which files to write to disk and what file system to use.

Below is the code to implement a simple Node.js application using this middleware:

```js
const express = require('express');
const webpack = require('webpack');
const middleware = require('webpack-dev-middleware');
const path = require('path');

// Sample Webpack Configuration
const webpackConfig = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/dist/',
  },
  mode: 'development',
};

const compiler = webpack(webpackConfig);

const app = express();

// Use webpack-dev-middleware
const devMiddlewareOptions = {
  publicPath: webpackConfig.output.publicPath,
  stats: 'minimal',
  // other options as per the user's need
};

app.use(middleware(compiler, devMiddlewareOptions));

// Example route to demonstrate non-Webpack requests
app.get('/api/data', (req, res) => {
  res.json({ data: 'This is some data' });
});

// Start the server
app.listen(3000, () => {
  console.log('App listening on port 3000');
});
```

In this setup:
- Webpack watches changes made to the entry point (`./src/index.js`).
- The compiled assets are served from memory on a specified `publicPath`.
- We demonstrate how to handle API requests concurrently with serving Webpack bundle resources.
- All changes are captured and refreshed efficiently without involving filesystem writes, suitable for a development workflow.