The given Node.js code sets up an HTTP server using Express and serves a Webpack application in development mode. Here is a breakdown of the functionality:

1. **Express Server**: The code initializes an Express.js server.
2. **Webpack Configuration**: A basic Webpack configuration is defined, which specifies the entry point (`src/index.js`), the output file (`dist/bundle.js`), and the mode (`development`).
3. **Webpack Compiler**: A Webpack compiler instance is created using the configuration.
4. **Webpack Dev Middleware**: The code utilizes `webpack-dev-middleware`, which enables serving the bundled files in-memory with real-time updates during development. It is configured with a minimal statistics output and a public path where the generated files are accessible.
5. **API Route**: It defines an API route (`/api/data`) that responds with a JSON object, simulating a non-Webpack request.
6. **Server Startup**: The server listens on port 3000 and logs a message to the console when it is running.

Below is a possible rewrite of this code:

```javascript
const express = require('express');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const path = require('path');

// Define the Webpack Configuration
const config = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/dist/',
  },
  mode: 'development',
};

const compiler = webpack(config);

const app = express();

// Middleware setup to serve files through webpack-dev-middleware
app.use(
  webpackDevMiddleware(compiler, {
    publicPath: config.output.publicPath,
    stats: 'minimal',
  })
);

// Route for handling sample API requests
app.get('/api/data', (req, res) => res.json({ data: 'This is some data' }));

// Start listening on port 3000
app.listen(3000, () => console.log('App listening on port 3000'));
```