The Node.js code provided creates a simple web server using Express and Webpack. The server is set up to handle Webpack for development purposes using `webpack-dev-middleware`, which serves the files emitted from Webpack over a connect server.

Here's a step-by-step breakdown of the functionality:

1. **Express and Webpack Initialization**:
   - `express` is used to create a web server.
   - `webpack` is used to compile JavaScript modules based on the provided Webpack configuration.
   - `webpack-dev-middleware` allows serving of Webpack bundles directly from the memory, eliminating the need for writing a physical `dist` folder during development.

2. **Sample Webpack Configuration**:
   - It specifies the entry point `./src/index.js`, output file `bundle.js`, and the output directory `/dist`.
   - It operates in development mode.

3. **Middleware Setup**:
   - Uses `webpack-dev-middleware` with customized options (`publicPath` and `stats`) to integrate Webpack with the Express server.
  
4. **Express Route**:
   - A basic route `/api/data` is defined, which returns a JSON object with some hardcoded data, showcasing how the server can handle non-Webpack-related requests.

5. **Server Initialization**:
   - The server listens on port `3000` and logs a message to the console on successful startup.

Here's the rewritten code:

```javascript
const express = require('express');
const webpack = require('webpack');
const webpackDevMiddleware = require('webpack-dev-middleware');
const path = require('path');

const webpackConfig = {
  entry: path.join(__dirname, 'src', 'index.js'),
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
    publicPath: '/dist/',
  },
  mode: 'development',
};

const compiler = webpack(webpackConfig);

const app = express();

app.use(
  webpackDevMiddleware(compiler, {
    publicPath: webpackConfig.output.publicPath,
    stats: 'minimal',
  })
);

app.get('/api/data', (req, res) => {
  res.json({ data: 'This is some data' });
});

app.listen(3000, () => {
  console.log('App listening on port 3000');
});
```