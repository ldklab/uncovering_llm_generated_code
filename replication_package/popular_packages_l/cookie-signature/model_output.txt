The `cookie-signature` Node.js package provides functionality to sign and unsign cookies, which is useful for verifying the integrity and authenticity of a cookie. The signing process attaches a signature to the value of the cookie, ensuring that any alterations to the cookie can be detected.

Here's how the functionality works based on the README:

1. **Sign a Cookie**: The `sign` function creates a signature for a given cookie value using a secret key. This signature is then appended to the cookie value, separated by a period. The signed value serves as a tamper-proof identifier for the cookie.

2. **Unsign a Cookie**: The `unsign` function verifies if a given signed cookie value was signed using a specified secret key. If the signature matches, the function returns the original cookie value. If the signature does not match (or if the data has been tampered with), it returns `false`.

The package uses a cryptographic hashing function to generate the signature, ensuring security in verifying cookie values.

Here's the implementation of the `cookie-signature` package:

```javascript
const crypto = require('crypto');

/**
 * Generates a signed cookie value given a cookie value and a secret.
 * 
 * @param {string} value - The value to sign.
 * @param {string} secret - The secret key for signing.
 * @returns {string} - The signed value.
 */
exports.sign = function(value, secret) {
  const signature = crypto
    .createHmac('sha256', secret)
    .update(value)
    .digest('base64')
    .replace(/=+$/, ''); // Remove any trailing '=' characters
  return `${value}.${signature}`;
};

/**
 * Unsigns and verifies a signed cookie value.
 * 
 * @param {string} signedValue - The signed value.
 * @param {string} secret - The secret key for signing.
 * @returns {string|boolean} - The original value if valid; otherwise false.
 */
exports.unsign = function(signedValue, secret) {
  const lastDot = signedValue.lastIndexOf('.');
  if (lastDot === -1) return false;

  const value = signedValue.slice(0, lastDot);
  const signature = signedValue.slice(lastDot + 1);

  const expectedSignature = crypto
    .createHmac('sha256', secret)
    .update(value)
    .digest('base64')
    .replace(/=+$/, '');

  return signature === expectedSignature ? value : false;
};
```

In the provided code, `crypto.createHmac` is used to create a cryptographic hash of the cookie value using the secret key. The resulting hash is then transformed into a base64 string, and padded characters (`=`) are trimmed. The reusable `sign` and `unsign` methods make the implementation straightforward for developers working with signed cookies.