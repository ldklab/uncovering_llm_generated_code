The `web-streams-polyfill` package provides a polyfill for Web Streams based on the WHATWG specification. The package aims to bring the ReadableStream, WritableStream, and TransformStream interfaces to environments that do not support them natively or provide an alternative implementation. The library targets multiple JavaScript environments and comes in different variants:

1. **web-streams-polyfill**: A ponyfill for ES2015+ environments, which means it provides the stream implementations without altering global objects. Suitable for Node.js applications running on version 6 or above, or for web libraries that support modern browsers.
   
2. **web-streams-polyfill/es5**: A ponyfill for ES5+ environments, targets older Node.js applications or web libraries that support older browsers.

3. **web-streams-polyfill/polyfill**: This variant replaces the native stream implementations for ES2015+ environments. It's intended for web applications on modern browsers and can be included via a script tag.

4. **web-streams-polyfill/polyfill/es5**: A polyfill tailored for ES5+ environments, supporting older browsers.

All variants include TypeScript type definitions that are compatible with the DOM definitions of streams in TypeScript 4.7 or higher.

Compatibility extends to any ES2015 environment for the polyfill and ponyfill variants. The es5 variants additionally demand a global `Promise` and may require a `Promise` polyfill for environments lacking its native support.

The tooling requires Node.js 12 or higher for module importing or requiring. For TypeScript, the module resolution must be set appropriately to `"node16"`, `"nodenext"`, or `"bundler"`.

### Sample Node.js Implementation

```js
// web-streams-polyfill/index.js
class ReadableStream {
  constructor(underlyingSource = {}, strategy = {}) {
    // Initialize a readable stream based on the underlying source and strategy
  }
  
  getReader() {
    // Returns a default reader for the stream
  }
  
  tee() {
    // Splits the stream into two identical streams
  }
}

class WritableStream {
  constructor(underlyingSink = {}, strategy = {}) {
    // Initialize a writable stream based on the underlying sink and strategy
  }

  getWriter() {
    // Returns a default writer for the stream
  }
}

class TransformStream {
  constructor(transformer = {}, writableStrategy = {}, readableStrategy = {}) {
    // Initialize a transform stream with the provided transformer
  }
}

module.exports = {
  ReadableStream,
  WritableStream,
  TransformStream
};

// Usage examples
// Example for Required Node.js Environment Usage
// const streams = require("web-streams-polyfill");
// const readable = new streams.ReadableStream();

// Example for ES Module Usage
// import { ReadableStream } from "web-streams-polyfill";
// const readable = new ReadableStream();
```

This code provides basic implementations of the `ReadableStream`, `WritableStream`, and `TransformStream` classes. Each class should be extended to support the full functionality described in the streams specification, including backpressure handling, queuing strategy, and more. This structure allows the use of the stream classes as a ponyfill, ensuring they can be dynamically included where needed without altering global contexts or functionalities in the Node.js environment or browsers.