The provided Node.js code is a module for serializing JavaScript objects into strings. The code specifically handles various JavaScript data types, including undefined, functions, regular expressions, dates, maps, sets, bigints, URLs, and strings, with certain custom behavior:

1. **escapeString(str)**: This helper function escapes HTML-related and control characters in strings.
2. **serializeValue(value, options)**: This function recursively serializes different types of values. It converts complex types like functions, regular expressions, dates, maps, sets, bigints, and URLs to strings representing their JavaScript expressions. It also escapes strings unless the `unsafe` option is specified.
3. **serialize(object, options)**: This function serializes an entire object. If the `isJSON` option is not set, it represents the object using the serialized entries in a JSON-like format. Otherwise, it uses `JSON.stringify` for a more standard JSON serialization.

Here is a possible rewrite of the code:

```javascript
// serializer.js

// Escapes string to prevent XSS or control character issues
const escapeString = (str) => {
    return str.replace(/</g, '\\u003C')
              .replace(/>/g, '\\u003E')
              .replace(/\//g, '\\u002F')
              .replace(/\n/g, '\\n')
              .replace(/\r/g, '\\r')
              .replace(/\t/g, '\\t');
};

// Recursively serializes each value according to its type
const serializeValue = (value, options = {}) => {
    switch (true) {
        case value === undefined:
            return 'undefined';
        case typeof value === 'function' && !options.ignoreFunction:
            return value.toString();
        case value instanceof RegExp:
            return value.toString();
        case value instanceof Date:
            return `new Date(${JSON.stringify(value.toISOString())})`;
        case value instanceof Map:
            return `new Map(${serializeValue([...value.entries()], options)})`;
        case value instanceof Set:
            return `new Set(${serializeValue([...value.values()], options)})`;
        case typeof value === 'bigint':
            return `BigInt("${value.toString()}")`;
        case value instanceof URL:
            return `new URL(${JSON.stringify(value.toString())})`;
        case typeof value === 'string' && !options.unsafe:
            return JSON.stringify(escapeString(value));
        default:
            return JSON.stringify(value, null, options.space);
    }
};

// Main serialization function for objects
const serialize = (object, options = {}) => {
    const isJSON = options.isJSON === true;
    const serializer = isJSON ? JSON.stringify : (obj) => {
        const entries = Object.entries(obj)
            .map(([key, value]) => `${JSON.stringify(key)}:${serializeValue(value, options)}`)
            .join(',');
        return `{${entries}}`;
    };
    return serializer(object, null, options.space);
};

module.exports = serialize;
```