The given Node.js code defines a module for handling text styling in the terminal using ANSI escape codes, known as "picocolors". Here's a breakdown of its functionality:

1. **Color Support Detection**: The code checks if color output is disabled by looking for an environment variable named `NO_COLOR`. If this variable is not set, colors are supported.

2. **ANSI Code Wrapping**: The `wrapAnsi` function takes ANSI opening and closing codes along with text to wrap the text with these codes if colors are supported.

3. **Formatter Function**: A higher-order function `formatter` is defined which returns another function that injects text into the ANSI codes.

4. **ANSI Code Definitions**: The code defines ANSI codes for text modifiers (like bold, italic), text colors, and background colors in an organized object structure.

5. **Apply Codes**: `applyCodes` is a utility that maps over these ANSI code definitions to create functions which apply the respective styles to text.

6. **Color Application**: The `colors` object is created by merging the styled text functions from the modifiers, colors, and background colors.

7. **createColors Function**: This function allows for dynamic enabling or disabling of colors. If disabled, the functions simply return the input text unmodified.

Here is a possible rewrite of the Node.js code keeping the explained functionality intact:

```javascript
// picocolors.js

const isColorSupported = !process.env.NO_COLOR;

const wrapAnsi = (open, close, txt) => {
  if (!isColorSupported) return txt;
  return `${open}${txt}${close}`;
};

const formatter = (open, close) => txt => wrapAnsi(open, close, txt);

const codes = {
  modifier: {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29]
  },
  color: {
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    blackBright: [90, 39],
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39]
  },
  bgColor: {
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    bgBlackBright: [100, 49],
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49]
  }
};

const applyCodes = codes => Object.fromEntries(
  Object.entries(codes).map(([name, [open, close]]) => [name, formatter(`\x1b[${open}m`, `\x1b[${close}m`)])
);

const colors = {
  ...applyCodes(codes.modifier),
  ...applyCodes(codes.color),
  ...applyCodes(codes.bgColor),
};

const createColors = enabled => enabled ? colors : Object.fromEntries(Object.keys(colors).map(name => [name, s => s]));

export default { ...colors, isColorSupported, createColors };
```