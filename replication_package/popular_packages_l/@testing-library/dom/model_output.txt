The DOM Testing Library is a utility designed to help developers write maintainable tests for their web UI components. The library focuses on simulating how users would interact with the DOM, thereby increasing the reliability and maintainability of test cases. It encourages developers to avoid embedding component implementation details into tests, allowing for more robust refactoring with fewer breakages. The library is lightweight and designed to be used either in a JSDOM environment (commonly used with Jest) or directly in the browser.

The primary features of the library include:

- Querying the DOM for elements in a way that mimics real user interactions, such as clicking buttons or typing into input fields.
- Providing utilities that render DOM nodes, bypassing the need to directly manipulate component instances.
- Adopting guiding principles that emphasize writing tests that closely simulate actual user behavior on the software, ensuring confidence in UI functionality.

Now, we will create a simplified Node.js package that mimics the basic querying functionality of the DOM Testing Library. This package will allow querying elements by text, ID, or tag name in a mock DOM environment.

```js
// dom-testing-library.js

class DOMTestingLibrary {
  constructor(domString) {
    // Create a mock DOM from the input HTML string
    this.dom = new DOMParser().parseFromString(domString, 'text/html');
  }

  // Query elements by text content
  getByText(text) {
    return Array.from(this.dom.body.querySelectorAll("*"))
      .filter(element => element.textContent.includes(text));
  }

  // Query elements by ID
  getById(id) {
    return this.dom.getElementById(id);
  }

  // Query elements by tag name
  getByTagName(tagName) {
    return this.dom.getElementsByTagName(tagName);
  }
}

// USAGE EXAMPLE
const htmlString = `
  <div>
    <h1 id="header">Welcome</h1>
    <p>This is a paragraph of text.</p>
  </div>
`;

const library = new DOMTestingLibrary(htmlString);

const heading = library.getById('header'); // <h1 id="header">Welcome</h1>
const paragraphs = library.getByTagName('p'); // HTMLCollection of <p>
const textElement = library.getByText('Welcome'); // Array containing <h1>

// Export for usage in node environment
module.exports = DOMTestingLibrary;
```

To use this package, you'd first create an instance of `DOMTestingLibrary` with an HTML string as input, then use its methods to perform queries akin to how a user interacts with the page. The provided example demonstrates the method usage for finding elements by text, ID, or tag name within supplied HTML content.