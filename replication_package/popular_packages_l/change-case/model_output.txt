The `change-case` package provides a collection of functions to transform strings between various cases such as `camelCase`, `PascalCase`, `capital case`, `snake_case`, `kebab-case`, `CONSTANT_CASE`, etc. Here's a summary of the functionalities and features described:

### Features
- **Case Transformation Functions**: The package provides methods to convert strings to different naming conventions. Each method converts a string to a specific case style:
  - `camelCase`: Converts to "camelCase".
  - `capitalCase`: Converts to "Capital Case".
  - `constantCase`: Converts to "CONSTANT_CASE".
  - `dotCase`: Converts to "dot.case".
  - `kebabCase`: Converts to "kebab-case".
  - `noCase`: Converts to "no case".
  - `pascalCase`: Converts to "PascalCase".
  - `pascalSnakeCase`: Converts to "Pascal_Snake_Case".
  - `pathCase`: Converts to "path/case".
  - `sentenceCase`: Converts to "Sentence case".
  - `snakeCase`: Converts to "snake_case".
  - `trainCase`: Converts to "Train-Case".

- **Options for Transformation**: Each case transformation function can accept an options object allowing customization such as delimiters, locale-based capitalization, and custom splitting rules.

- **Advanced Configuration**: For certain cases, you can merge ambiguously split characters into tokens, like `V1.2` into `V12` rather than `V1_2` when `mergeAmbiguousCharacters` is set to true.

- **Custom Split Utility**: A `split` utility is exported for custom word splitting. It tokenizes a string into an array of words, which can be modified and joined back together.

### Change Case Keys
- **Object Key Transformation**: Additional functionality to transform keys within JavaScript objects to a desired case. It takes an object and recursively transforms its keys according to a specified case and depth.

### TypeScript and ESM
- Indeed, it is a pure ESM package, meaning it uses modern ES module syntax and includes TypeScript type definitions.

Now, let's implement this functionality in a Node.js package:

```markdown
// change-case/index.js
export const camelCase = (input, options = {}) => convertCase(input, "camel", options);
export const capitalCase = (input, options = {}) => convertCase(input, "capital", options);
export const constantCase = (input, options = {}) => convertCase(input, "constant", options);
export const dotCase = (input, options = {}) => convertCase(input, "dot", options);
export const kebabCase = (input, options = {}) => convertCase(input, "kebab", options);
export const noCase = (input, options = {}) => convertCase(input, "no", options);
export const pascalCase = (input, options = {}) => convertCase(input, "pascal", options);
export const pascalSnakeCase = (input, options = {}) => convertCase(input, "pascalSnake", options);
export const pathCase = (input, options = {}) => convertCase(input, "path", options);
export const sentenceCase = (input, options = {}) => convertCase(input, "sentence", options);
export const snakeCase = (input, options = {}) => convertCase(input, "snake", options);
export const trainCase = (input, options = {}) => convertCase(input, "train", options);

export function split(input) {
  return input.match(/[A-Za-z][a-z]*|[0-9]+/g) || [];
}

function convertCase(input, type, options) {
  const words = split(input);
  return words.map((word, index) => {
    switch (type) {
      case "camel":
        return index === 0 ? word.toLowerCase() : capitalize(word);
      case "capital":
        return capitalize(word);
      case "constant":
        return word.toUpperCase();
      case "dot":
        return word.toLowerCase();
      case "kebab":
        return word.toLowerCase();
      case "no":
        return word.toLowerCase();
      case "pascal":
        return capitalize(word);
      case "pascalSnake":
        return capitalize(word);
      case "path":
        return word.toLowerCase();
      case "sentence":
        return index === 0 ? capitalize(word) : word.toLowerCase();
      case "snake":
        return word.toLowerCase();
      case "train":
        return capitalize(word);
      default:
        return word.toLowerCase();
    }
  }).join(delimiterForType(type, options));
}

function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
}

function delimiterForType(type, options) {
  const delimiters = {
    camel: '',
    capital: ' ',
    constant: '_',
    dot: '.',
    kebab: '-',
    no: ' ',
    pascal: '',
    pascalSnake: '_',
    path: '/',
    sentence: ' ',
    snake: '_',
    train: '-'
  };
  return options.delimiter || delimiters[type];
}

// change-case/keys.js
import * as changeCase from './index.js';

export const camelCase = (obj, depth = 1, options = {}) => transformKeys(obj, changeCase.camelCase, depth, options); 

function transformKeys(obj, transform, depth, options) {
  if (depth < 0 || typeof obj !== 'object' || obj === null) {
    return obj;
  }
  if (Array.isArray(obj)) {
    return obj.map(item => transformKeys(item, transform, depth - 1, options));
  }
  return Object.keys(obj).reduce((acc, key) => {
    acc[transform(key, options)] = transformKeys(obj[key], transform, depth - 1, options);
    return acc;
  }, {});
}
```
This package allows for multiple case transformations with flexible options, including an `options` object, custom word splitting via the `split` function, and object key transformation via `change-case/keys`.