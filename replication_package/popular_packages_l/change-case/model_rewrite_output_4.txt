The Node.js code provided consists of two modules: `change-case/index.js` and `change-case/keys.js`. 

**Functionality Explanation:**

1. **change-case/index.js**:
    - This file provides various functions to convert strings into different case formats such as camelCase, PascalCase, snake_case, etc.
    - Each format has a specific function (e.g., `camelCase`, `capitalCase`) that calls a shared internal function `convertCase`, specifying the desired case format and passing the string input.
    - `convertCase` takes an input string, splits it into separate words, transforms each word based on the specified case type, and then joins them using the appropriate delimiter.
    - It utilizes a helper function `delimiterForType` to determine what character (if any) should be used to separate words in the converted string.
    - Another helper function `capitalize` is used to capitalize the first letter of a word while making other letters lowercase.
    - The `split` function is used to break down the input string into words based on uppercase letters, lowercase letters, and numbers.

2. **change-case/keys.js**:
    - This file deals with transforming the keys of objects to different case formats by importing the case conversion functions from `index.js`.
    - The `transformKeys` function recursively traverses an object (or array) and converts each key using a provided transformation function, such as `camelCase`.
    - It provides an optional depth parameter to control how many levels deep the transformation should be applied.
    - The function is robust enough to handle nested objects and arrays by recursively applying the transformation.

**Rewritten Code:**

```javascript
// change-case/index.js
export const camelCase = (input, options = {}) => convertCase(input, "camel", options);
export const capitalCase = (input, options = {}) => convertCase(input, "capital", options);
export const constantCase = (input, options = {}) => convertCase(input, "constant", options);
export const dotCase = (input, options = {}) => convertCase(input, "dot", options);
export const kebabCase = (input, options = {}) => convertCase(input, "kebab", options);
export const noCase = (input, options = {}) => convertCase(input, "no", options);
export const pascalCase = (input, options = {}) => convertCase(input, "pascal", options);
export const pascalSnakeCase = (input, options = {}) => convertCase(input, "pascalSnake", options);
export const pathCase = (input, options = {}) => convertCase(input, "path", options);
export const sentenceCase = (input, options = {}) => convertCase(input, "sentence", options);
export const snakeCase = (input, options = {}) => convertCase(input, "snake", options);
export const trainCase = (input, options = {}) => convertCase(input, "train", options);

export function split(input) {
  return input.match(/[A-Za-z][a-z]*|[0-9]+/g) || [];
}

function convertCase(input, type, options) {
  const words = split(input);
  const transformedWords = words.map((word, index) => {
    switch (type) {
      case "camel":
        return index === 0 ? word.toLowerCase() : capitalize(word);
      case "capital":
      case "pascal":
      case "pascalSnake":
      case "train":
        return capitalize(word);
      case "constant":
        return word.toUpperCase();
      case "dot":
      case "kebab":
      case "no":
      case "path":
      case "snake":
        return word.toLowerCase();
      case "sentence":
        return index === 0 ? capitalize(word) : word.toLowerCase();
      default:
        return word.toLowerCase();
    }
  });

  return transformedWords.join(delimiterForType(type, options));
}

function capitalize(word) {
  return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
}

function delimiterForType(type, options) {
  const delimiters = {
    camel: '',
    capital: ' ',
    constant: '_',
    dot: '.',
    kebab: '-',
    no: ' ',
    pascal: '',
    pascalSnake: '_',
    path: '/',
    sentence: ' ',
    snake: '_',
    train: '-'
  };
  return options.delimiter || delimiters[type];
}

// change-case/keys.js
import * as changeCase from './index.js';

export const camelCase = (obj, depth = 1, options = {}) => transformKeys(obj, changeCase.camelCase, depth, options);

function transformKeys(obj, transform, depth, options) {
  if (depth < 0 || typeof obj !== 'object' || obj === null) {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(item => transformKeys(item, transform, depth - 1, options));
  }

  return Object.keys(obj).reduce((acc, key) => {
    acc[transform(key, options)] = transformKeys(obj[key], transform, depth - 1, options);
    return acc;
  }, {});
}
```