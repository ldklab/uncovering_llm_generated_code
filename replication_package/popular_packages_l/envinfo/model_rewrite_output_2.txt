The provided Node.js code is designed to gather various system, binary, and browser information from the environment and optionally format it as JSON. Here's a breakdown of its functionality:

1. **Gathering System Information**: The function `gatherSystemInfo()` collects basic system details such as the operating system type and version, CPU model, total memory in gigabytes, and the user's shell environment.

2. **Running Shell Commands**: The `runCommand(cmd)` function executes shell commands and returns their output as a string. If a command fails, it returns "Not Found".

3. **Gathering Binary Information**: The `gatherBinaryInfo()` function collects version numbers of commonly used binaries: Node.js, npm, and Yarn.

4. **Gathering Browser Information**: The `gatherBrowserInfo()` function tries to get the versions of installed browsers, including Chrome, Firefox, and Safari.

5. **Formatting as JSON**: The `formatAsJson(info)` function formats the gathered information as a pretty-printed JSON string.

6. **Running and Configuring the Information Gathering**: The `run(config, options)` function gathers information based on the provided configuration object (`config`) that specifies which types of information to collect: system, binaries, and/or browsers. It can then return this information either as a JSON string or as a JavaScript object.

7. **Display Information**: The `displayInfo()` function is intended to collect all available information and display it as JSON in the console. It is called if the script is run directly.

8. **Exporting Functionality**: The `run` function is exported for use in other modules.

Here is a possible rewrite of this code:

```javascript
// envinfo.js
const { execSync } = require('child_process');
const os = require('os');

const gatherSystemInfo = () => ({
  OS: `${os.type()} ${os.release()}`,
  CPU: os.cpus()[0].model,
  Memory: `${(os.totalmem() / (1024 ** 3)).toFixed(2)} GB`,
  Shell: process.env.SHELL || 'N/A',
});

const runCommand = (cmd) => {
  try {
    return execSync(cmd, { encoding: 'utf8' }).trim();
  } catch {
    return 'Not Found';
  }
};

const gatherBinaryInfo = () => ({
  Node: runCommand('node -v'),
  npm: runCommand('npm -v'),
  Yarn: runCommand('yarn -v'),
});

const gatherBrowserInfo = () => ({
  Chrome: runCommand("google-chrome --version || chrome --version"),
  Firefox: runCommand("firefox --version"),
  Safari: runCommand("safaridriver --version"),
});

const formatAsJson = (info) => JSON.stringify(info, null, 2);

const run = async (config, options = {}) => {
  const info = {};

  if (config.System) info.System = gatherSystemInfo();
  if (config.Binaries) info.Binaries = gatherBinaryInfo();
  if (config.Browsers) info.Browsers = gatherBrowserInfo();

  return options.json ? formatAsJson(info) : info;
};

const displayInfo = () => {
  const config = { System: true, Binaries: true, Browsers: true };
  run(config, { json: true }).then(console.log);
};

if (require.main === module) {
  displayInfo();
}

module.exports = { run };
```