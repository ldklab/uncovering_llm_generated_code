The provided Node.js code is a Webpack configuration file. It sets up Webpack to handle CSS and JavaScript files with different loaders and plugins based on whether you are building for production or development. 

1. **Mode Determination:** The `isProduction` flag checks if Webpack is being run in production mode by checking the `argv.mode` value.
2. **CSS Handling:** 
   - In production, it uses `MiniCssExtractPlugin.loader` to extract CSS into separate files. In development, it uses `style-loader` for inline styles in the DOM.
   - Uses `css-loader` to interpret `@import` and `url()` like `import/require()`.
   - `postcss-loader` applies PostCSS transformations configured by `postcssOptions`, supporting `postcss-preset-env` to convert modern CSS into something most browsers can understand.
3. **JavaScript with CSS Styling Handling:**
   - For files ending in `.style.js`, it uses `style-loader`, `css-loader`, `babel-loader`, and `postcss-loader` to handle styles written in JavaScript.
   - `postcss-loader` is configured to use `postcss-js` as the parser for JavaScript style objects, and it executes the transformations.
4. **Plugins (MiniCssExtractPlugin):** 
   - Extracts CSS to separate files in production mode for optimized file management, using content hashes in filenames to assist with cache busting.

Here's the rewritten code:

```javascript
// webpack.config.js
const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = (env, argv) => {
  const isProd = argv.mode === 'production';

  return {
    mode: isProd ? 'production' : 'development',
    module: {
      rules: [
        {
          test: /\.css$/i,
          use: [
            isProd ? MiniCssExtractPlugin.loader : 'style-loader',
            'css-loader',
            {
              loader: 'postcss-loader',
              options: {
                postcssOptions: {
                  plugins: [
                    'postcss-preset-env'
                  ],
                },
                sourceMap: true,
              },
            },
          ],
        },
        {
          test: /\.style.js$/,
          use: [
            'style-loader',
            'css-loader',
            'babel-loader',
            {
              loader: 'postcss-loader',
              options: {
                postcssOptions: {
                  parser: 'postcss-js',
                },
                execute: true,
              },
            },
          ],
        },
      ],
    },
    plugins: [
      new MiniCssExtractPlugin({
        filename: isProd ? '[name].[contenthash].css' : '[name].css',
      }),
    ],
  };
};
```