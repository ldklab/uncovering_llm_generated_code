The given Node.js code is a simplified implementation of a TypeScript parser that converts TypeScript ASTs to the ESTree format. The code primarily provides functionality to parse TypeScript code strings and optionally generate certain utilities that map TypeScript AST nodes to ESTree nodes and vice versa. Hereâ€™s a detailed explanation of the functionality:

1. **Imports and Options**: The code uses TypeScript's `typescript` library to create and analyze the TypeScript Abstract Syntax Tree (AST). It defines `ParseOptions` to customize the parsing process, with some default options in `PARSE_DEFAULT_OPTIONS`.

2. **Parse Functionality**:
   - The `parse` function takes TypeScript code as a string and returns an object simulating an ESTree-compatible AST using the `ts.createSourceFile` function. 
   - The function considers the provided `ParseOptions` to determine if location (`loc`) or range information should be added to the AST nodes.

3. **Services Generation**:
   - The `parseAndGenerateServices` function parses code similar to `parse` but also generates services like a TypeScript `program` and maps between TypeScript nodes and ESTree nodes using `WeakMap`.

4. **Node Maps**:
   - The `parseWithNodeMaps` function essentially calls `parseAndGenerateServices` and specifically returns the ESTree AST alongside the node maps from TypeScript to ESTree and vice versa.

5. **Exports**: The module exports the parsing functions (`parse`, `parseAndGenerateServices`, and `parseWithNodeMaps`) and `ParseOptions` for external use.

Here's the rewritten code with the same functionality:

```typescript
import * as ts from 'typescript';

interface ParseOptions {
  comment?: boolean;
  debugLevel?: boolean | ('typescript-eslint' | 'eslint' | 'typescript')[];
  errorOnUnknownASTType?: boolean;
  filePath?: string;
  jsx?: boolean;
  loc?: boolean;
  loggerFn?: Function | false;
  range?: boolean;
  tokens?: boolean;
  useJSXTextNode?: boolean;
}

const DEFAULT_PARSE_OPTIONS: ParseOptions = {
  comment: false,
  errorOnUnknownASTType: false,
  filePath: 'estree.ts',
  jsx: false,
  loc: false,
  loggerFn: console.log,
  range: false,
  tokens: false,
  useJSXTextNode: false,
};

interface TSESTree {
  type: string;
  body: any[];
}

function parse(code: string, options: ParseOptions = DEFAULT_PARSE_OPTIONS): TSESTree {
  const sourceFile = ts.createSourceFile(
    options.filePath || 'file.ts',
    code,
    ts.ScriptTarget.Latest,
    true,
    options.jsx ? ts.ScriptKind.TSX : ts.ScriptKind.TS
  );

  const ast: TSESTree = {
    type: 'Program',
    body: [],
  };

  if (options.loc || options.range) {
    // Logic to enrich AST nodes with location/range info
  }

  return ast;
}

interface ParserServices {
  program: ts.Program;
  esTreeNodeToTSNodeMap: WeakMap<any, any>;
  tsNodeToESTreeNodeMap: WeakMap<any, any>;
}

interface ParseAndGenerateServicesResult {
  ast: TSESTree;
  services: ParserServices;
}

function parseAndGenerateServices(
  code: string,
  options: ParseOptions = DEFAULT_PARSE_OPTIONS
): ParseAndGenerateServicesResult {
  const program = ts.createProgram([options.filePath || 'file.ts'], {});
  const typeChecker = program.getTypeChecker();

  const ast = parse(code, options);

  const esTreeNodeToTSNodeMap = new WeakMap();
  const tsNodeToESTreeNodeMap = new WeakMap();

  return {
    ast,
    services: {
      program,
      esTreeNodeToTSNodeMap,
      tsNodeToESTreeNodeMap,
    },
  };
}

interface ParseWithNodeMapsResult {
  ast: TSESTree;
  esTreeNodeToTSNodeMap: WeakMap<any, any>;
  tsNodeToESTreeNodeMap: WeakMap<any, any>;
}

function parseWithNodeMaps(
  code: string,
  options: ParseOptions = DEFAULT_PARSE_OPTIONS
): ParseWithNodeMapsResult {
  const { ast, services } = parseAndGenerateServices(code, options);
  return {
    ast,
    esTreeNodeToTSNodeMap: services.esTreeNodeToTSNodeMap,
    tsNodeToESTreeNodeMap: services.tsNodeToESTreeNodeMap,
  };
}

export { parse, parseAndGenerateServices, parseWithNodeMaps, ParseOptions };
```