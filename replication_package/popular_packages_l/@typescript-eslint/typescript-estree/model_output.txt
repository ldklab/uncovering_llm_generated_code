The TypeScript ESTree package provides functionalities to parse TypeScript source code into an Abstract Syntax Tree (AST) that complies with the ESTree specification. This parser can be integrated into various tools requiring TypeScript parsing capabilities, like ESLint and Prettier.

### Key Functionalities
1. **Parsing TypeScript Code (`parse`)**:
   - Converts TypeScript code into an ESTree-compatible AST.
   - The function `parse` accepts a string of TypeScript code and a set of parsing options.
   - Options allow configuring comments, error handling, JSX parsing, range and location information, logging, and more.
   - Provides defaults for all parse options but allows them to be overridden.

2. **Parsing with TypeScript Services (`parseAndGenerateServices`)**:
   - Similar to `parse`, but also generates type information and node maps using TypeScript's type-checking engine.
   - Includes additional options to manage TypeScript compiler interactions, like handling specific file types/extensions and setting up project references.
   - Returns both the AST and parser services, which include TypeScript programs and AST node maps.

3. **Parsing with Node Maps (`parseWithNodeMaps`)**:
   - Similar to the `parse` function but allows retrieving AST with node maps for direct linking between TypeScript nodes and ESTree nodes.

4. **Type Utilities**:
   - Provides types for AST nodes (`TSESTree`), node types (`AST_NODE_TYPES`), and token types (`AST_TOKEN_TYPES`) to interact with the AST more efficiently.

Here's a sample implementation of the features discussed:

```ts
// TypeScript ESTree parser implementation (simplified for demonstration).

import * as ts from 'typescript';

interface ParseOptions {
  comment?: boolean;
  debugLevel?: boolean | ('typescript-eslint' | 'eslint' | 'typescript')[];
  errorOnUnknownASTType?: boolean;
  filePath?: string;
  jsx?: boolean;
  loc?: boolean;
  loggerFn?: Function | false;
  range?: boolean;
  tokens?: boolean;
  useJSXTextNode?: boolean;
}

const PARSE_DEFAULT_OPTIONS: ParseOptions = {
  comment: false,
  errorOnUnknownASTType: false,
  filePath: 'estree.ts',
  jsx: false,
  loc: false,
  loggerFn: console.log,
  range: false,
  tokens: false,
  useJSXTextNode: false,
};

interface TSESTree {
  // Simulated AST interface
  type: string;
  body: any[];
}

function parse(code: string, options: ParseOptions = PARSE_DEFAULT_OPTIONS): TSESTree {
  // Basic placeholder implementation using TypeScript's TypeChecker with ESTree conversion.
  const sourceFile = ts.createSourceFile(
    options.filePath || 'file.ts',
    code,
    ts.ScriptTarget.Latest,
    true,
    options.jsx ? ts.ScriptKind.TSX : ts.ScriptKind.TS
  );

  // Example conversion to ESTree-compatible AST (simplified)
  const ast: TSESTree = {
    type: 'Program',
    body: [], // Conversion from TypeScript AST to ESTree happens here
  };

  // Add location and range information if requested
  if (options.loc || options.range) {
    // Enrich AST nodes with loc and/or range information
  }

  return ast;
}

interface ParserServices {
  program: ts.Program;
  esTreeNodeToTSNodeMap: WeakMap<any, any>; // Types of nodes omitted for brevity
  tsNodeToESTreeNodeMap: WeakMap<any, any>;
}

interface ParseAndGenerateServicesResult {
  ast: TSESTree;
  services: ParserServices;
}

function parseAndGenerateServices(
  code: string,
  options: ParseOptions = PARSE_DEFAULT_OPTIONS
): ParseAndGenerateServicesResult {
  // Initialize TypeScript program and type checker
  const program = ts.createProgram([options.filePath || 'file.ts'], {});
  const typeChecker = program.getTypeChecker();
  
  // Convert TypeScript AST to ESTree-compatible AST
  const ast = parse(code, options);
  
  // Generate node maps for service utilities
  const esTreeNodeToTSNodeMap = new WeakMap(); // Mock conversion
  const tsNodeToESTreeNodeMap = new WeakMap(); // Mock conversion
  
  return {
    ast,
    services: {
      program,
      esTreeNodeToTSNodeMap,
      tsNodeToESTreeNodeMap,
    },
  };
}

interface ParseWithNodeMapsResult {
  ast: TSESTree;
  esTreeNodeToTSNodeMap: WeakMap<any, any>;
  tsNodeToESTreeNodeMap: WeakMap<any, any>;
}

function parseWithNodeMaps(
  code: string,
  options: ParseOptions = PARSE_DEFAULT_OPTIONS
): ParseWithNodeMapsResult {
  const { ast, services } = parseAndGenerateServices(code, options);
  return {
    ast,
    esTreeNodeToTSNodeMap: services.esTreeNodeToTSNodeMap,
    tsNodeToESTreeNodeMap: services.tsNodeToESTreeNodeMap,
  };
}

export { parse, parseAndGenerateServices, parseWithNodeMaps, ParseOptions };
```

This code serves as a guide for creating a Node.js package that takes TypeScript code and returns an ESTree-compatible AST with options for additional data and services provided by TypeScript.