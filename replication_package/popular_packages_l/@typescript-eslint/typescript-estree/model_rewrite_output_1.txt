The given Node.js code is a simplified TypeScript parser which performs the following main functions:
1. **Parse**: Converts a TypeScript code string into an ESTree-compatible Abstract Syntax Tree (AST). It accepts options to customize parsing behavior such as including comments, JSX support, and location information.
2. **Parse and Generate Services**: Parses TypeScript code while also generating additional services, like a program and node maps, which assist in mapping between ESTree and TypeScript nodes.
3. **Parse with Node Maps**: Combines the parsing functionality with the generation of node maps, returning a structured result that includes the AST as well as the mapping between node types.

Here's a rewritten version of the code:

```javascript
// Simplified TypeScript ESTree parser implementation

import * as ts from 'typescript';

interface ParseOptions {
  comment?: boolean;
  debugLevel?: boolean | ('typescript-eslint' | 'eslint' | 'typescript')[];
  errorOnUnknownASTType?: boolean;
  filePath?: string;
  jsx?: boolean;
  loc?: boolean;
  loggerFn?: Function | false;
  range?: boolean;
  tokens?: boolean;
  useJSXTextNode?: boolean;
}

const PARSE_DEFAULT_OPTIONS: ParseOptions = {
  comment: false,
  errorOnUnknownASTType: false,
  filePath: 'estree.ts',
  jsx: false,
  loc: false,
  loggerFn: console.log,
  range: false,
  tokens: false,
  useJSXTextNode: false,
};

interface TSESTree {
  type: string;
  body: any[];
}

function parse(code: string, options: ParseOptions = PARSE_DEFAULT_OPTIONS): TSESTree {
  const sourceFile = ts.createSourceFile(
    options.filePath || 'file.ts',
    code,
    ts.ScriptTarget.Latest,
    true,
    options.jsx ? ts.ScriptKind.TSX : ts.ScriptKind.TS
  );

  const ast: TSESTree = {
    type: 'Program',
    body: [],  // Placeholder for conversion logic
  };

  if (options.loc || options.range) {
    // Add loc and/or range information
  }

  return ast;
}

interface ParserServices {
  program: ts.Program;
  esTreeNodeToTSNodeMap: WeakMap<any, any>;
  tsNodeToESTreeNodeMap: WeakMap<any, any>;
}

interface ParseAndGenerateServicesResult {
  ast: TSESTree;
  services: ParserServices;
}

function parseAndGenerateServices(
  code: string,
  options: ParseOptions = PARSE_DEFAULT_OPTIONS
): ParseAndGenerateServicesResult {
  const program = ts.createProgram([options.filePath || 'file.ts'], {});
  const typeChecker = program.getTypeChecker();
  
  const ast = parse(code, options);
  
  const esTreeNodeToTSNodeMap = new WeakMap(); // Simplified mock maps
  const tsNodeToESTreeNodeMap = new WeakMap();
  
  return {
    ast,
    services: {
      program,
      esTreeNodeToTSNodeMap,
      tsNodeToESTreeNodeMap,
    },
  };
}

interface ParseWithNodeMapsResult {
  ast: TSESTree;
  esTreeNodeToTSNodeMap: WeakMap<any, any>;
  tsNodeToESTreeNodeMap: WeakMap<any, any>;
}

function parseWithNodeMaps(
  code: string,
  options: ParseOptions = PARSE_DEFAULT_OPTIONS
): ParseWithNodeMapsResult {
  const { ast, services } = parseAndGenerateServices(code, options);
  return {
    ast,
    esTreeNodeToTSNodeMap: services.esTreeNodeToTSNodeMap,
    tsNodeToESTreeNodeMap: services.tsNodeToESTreeNodeMap,
  };
}

export { parse, parseAndGenerateServices, parseWithNodeMaps, ParseOptions };
```