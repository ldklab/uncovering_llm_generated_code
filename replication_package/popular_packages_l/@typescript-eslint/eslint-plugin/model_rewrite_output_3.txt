The given Node.js code is a configuration for a set of ESLint rules and custom rules for TypeScript projects. Here's a breakdown of the functionality:

1. **Module Export (`index.js`)**: The script exports an object containing two main properties: `rules` and `configs`.
   - `rules`: This property includes custom rules that are required from separate files. In this case, there are rules for handling adjacent overload signatures and array types.
   - `configs`: This object contains predefined configurations for ESLint:
     - `recommended`: A set of recommended configurations for TypeScript projects, including the parser and required plugins, along with specific rule settings.
     - `recommended-requiring-type-checking`: Similar to the `recommended` configuration but includes rules that require type information.

2. **Custom Rule Definitions**:
   - Each custom rule has its own JavaScript file.
   - `adjacent-overload-signatures.js`: Ensures TypeScript member overloads are consecutive, classified as a "problem."
   - `array-type.js`: Suggests a consistent array type style using `T[]` or `Array<T>`, classified as a "suggestion" with a fixable option.

3. **ESLint Configuration Template (`.eslintrc.js`)**: Provides a template for an ESLint configuration file that utilizes the TypeScript ESLint parser and plugins. It extends recommended configurations and uses specific rules for TypeScript.

Below is a rewritten version that maintains the functionality:

```javascript
// index.js
module.exports = {
  rules: {
    'adjacent-overload-signatures': require('./rules/adjacent-overload-signatures'),
    'array-type': require('./rules/array-type'),
    // Add more rules as necessary
  },
  configs: {
    recommended: {
      plugins: ['@typescript-eslint'],
      parser: '@typescript-eslint/parser',
      rules: {
        '@typescript-eslint/adjacent-overload-signatures': 'error',
        '@typescript-eslint/array-type': ['error', { default: 'array' }],
        // Configure more rules here
      },
    },
    'recommended-requiring-type-checking': {
      plugins: ['@typescript-eslint'],
      parser: '@typescript-eslint/parser',
      rules: {
        '@typescript-eslint/no-floating-promises': 'error',
        // Add more type-checking rules
      },
    },
  },
};

// rules/adjacent-overload-signatures.js
module.exports = {
  meta: {
    type: 'problem',
    docs: {
      description: 'Require that member overloads be consecutive',
      recommended: true,
    },
    schema: [],
    messages: {
      adjacentOverload: 'All overloads for a member must be consecutive.',
    },
  },
  create(context) {
    return {
      TSEnumDeclaration(node) {
        // Logic to enforce rule
      },
    };
  },
};

// rules/array-type.js
module.exports = {
  meta: {
    type: 'suggestion',
    docs: {
      description: 'Requires using either T[] or Array<T> for arrays',
      recommended: false,
      fixable: 'code',
    },
    schema: [
      {
        enum: ['array', 'generic'],
      },
    ],
  },
  create(context) {
    return {
      TSTypeReference(node) {
        // Implement check and fix logic
      },
    };
  },
};

// .eslintrc.js template
module.exports = {
  parser: '@typescript-eslint/parser',
  plugins: ['@typescript-eslint'],
  extends: [
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
  ],
  rules: {
    '@typescript-eslint/adjacent-overload-signatures': 'error',
    '@typescript-eslint/array-type': 'error',
  },
};
```