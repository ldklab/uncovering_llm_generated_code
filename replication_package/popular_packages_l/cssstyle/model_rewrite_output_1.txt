```javascript
// cssstyle.js
class CSSStyleDeclaration {
  constructor() {
    this.properties = {};
  }

  setProperty(propertyName, value, priority = '') {
    this.properties[propertyName] = {
      value: String(value),
      priority: String(priority)
    };
  }

  getPropertyValue(propertyName) {
    return this.properties[propertyName] ? this.properties[propertyName].value : '';
  }

  getPropertyPriority(propertyName) {
    return this.properties[propertyName] ? this.properties[propertyName].priority : '';
  }

  removeProperty(propertyName) {
    const oldValue = this.getPropertyValue(propertyName);
    delete this.properties[propertyName];
    return oldValue;
  }

  get cssText() {
    return Object.entries(this.properties)
      .map(([prop, { value, priority }]) => `${prop}: ${value}${priority ? ' !' + priority : ''};`)
      .join(' ');
  }
}

module.exports = CSSStyleDeclaration;

// Example usage:
// const CSSStyleDeclaration = require('./cssstyle');
// const style = new CSSStyleDeclaration();
// style.setProperty('color', 'red');
// console.log(style.getPropertyValue('color')); // Outputs: red
// console.log(style.cssText); // Outputs: color: red;
```

Explanation: The Node.js code defines a class `CSSStyleDeclaration` that mimics the behavior of a CSS style declaration object. This class allows you to manage and retrieve CSS properties:

1. **Constructor**: Initializes an empty `properties` object to store CSS properties as key-value pairs.

2. **setProperty**: Adds or updates a CSS property in the `properties` object. It takes three parameters: `propertyName`, `value`, and an optional `priority` (which defaults to an empty string).

3. **getPropertyValue**: Returns the value of a specified CSS property. If the property does not exist, it returns an empty string.

4. **getPropertyPriority**: Returns the priority of a specified CSS property (e.g., `!important`). If the property does not exist, it returns an empty string.

5. **removeProperty**: Removes a CSS property from the `properties` object and returns the value of the deleted property.

6. **cssText**: Generates a CSS style string of all properties in the `properties` object, formatted as CSS would be written (e.g., "color: red;").

The module exports the `CSSStyleDeclaration` class, which can be used to create instances and manage CSS styles programmatically.