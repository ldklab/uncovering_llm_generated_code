The `Ajv JSON Schema Validator` is a Node.js package designed for validating JSON data against a defined schema with high performance. Key features and functionalities of the `Ajv` package include:

1. **JSON Schema Support**: Ajv supports JSON Schema drafts 04, 06, 07, 2019-09, and 2020-12, providing validation for a wide range of standards and extensions. It can also validate JSON Type Definition (JTD) schemas.

2. **Performance**: Ajv is claimed to be the fastest JSON Schema validator, outperforming other validators by generating efficient code to validate data.

3. **Feature-rich**: 
   - **Validation Keywords**: Supports all standard JSON Schema validation keywords.
   - **OpenAPI Extensions**: Supports keywords such as `nullable` and the new `discriminator`.
   - **Remote References**: Allows referring to external schemas, which must be added manually or compiled.
   - **Format Validation**: Checks various formats, extendable through plugins like `ajv-formats`.
   - **Recursive References**: Handles schemas with recursive references.
   - **Error Messages and Internationalization**: Provides detailed error messages with an option for internationalization using `ajv-i18n`.

4. **Data Manipulation**: 
   - **Assigning Defaults and Coercion**: Can assign default values and coerce data types according to schema definitions.
   - **Removing Additional Properties**: Can remove properties not specified in the schema.

5. **Extensibility**: Users can define their own validation keywords or rules.

6. **Asynchronous Operations**: Supports asynchronous validation and loading of schemas.

7. **Environment Support**: Works in both Node.js and browser environments.

8. **User-friendly API**: Offers an easy-to-use API, demonstrated with an example in the README showing how to compile a JSON schema and validate a JSON data object against it.

9. **Installation and Getting Started**: Users can install it via npm and use it in Node.js or as a module in the browser environment. The README gives a basic Node.js script to validate JSON data against a schema using Ajv.

Below is the implementation of Ajv-like JSON schema validator in Node.js:

```javascript
// Custom JSON Schema Validator Implementation with Basic Functionality

class SimpleJsonValidator {
  constructor() {
    this.schemas = {};
  }

  /**
   * Add schemas for remote references
   * @param {string} key - The identifier for the schema
   * @param {object} schema - The JSON schema object
   */
  addSchema(key, schema) {
    this.schemas[key] = schema;
  }

  /**
   * Compile a schema into a validation function
   * @param {object} schema - The JSON schema to compile
   * @returns {function} - A validation function for the schema
   */
  compile(schema) {
    return data => this.validate(schema, data);
  }

  /**
   * Validate data against a schema
   * @param {object} schema - The JSON schema
   * @param {object} data - The JSON data to validate
   * @returns {boolean} - True if valid, otherwise false
   */
  validate(schema, data) {
    if (schema.type && typeof data !== schema.type) {
      return false;
    }

    if (schema.properties) {
      for (let key in schema.properties) {
        if (!this.validate(schema.properties[key], data[key])) {
          return false;
        }
      }
    }

    if (schema.required) {
      for (let key of schema.required) {
        if (!(key in data)) {
          return false;
        }
      }
    }

    if (schema.additionalProperties === false) {
      for (let key in data) {
        if (!(key in schema.properties)) {
          return false;
        }
      }
    }

    return true;
  }
}

// Usage Example
const validator = new SimpleJsonValidator();
const schema = {
  type: "object",
  properties: {
    foo: { type: "integer" },
    bar: { type: "string" },
  },
  required: ["foo"],
  additionalProperties: false,
};

const data = {
  foo: 1,
  bar: "abc",
};

const validate = validator.compile(schema);
const isValid = validate(data);
console.log(isValid ? "Valid!" : "Invalid!");

```
This implementation is a simplified version of a JSON schema validator focusing on covering basic validation checks such as type checking, required fields, and additional property handling. For full functionality as provided by Ajv, additional complexity would be needed to handle formats, complex data structures, references, and more.