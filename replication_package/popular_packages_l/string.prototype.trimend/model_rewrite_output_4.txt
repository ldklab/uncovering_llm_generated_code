The provided Node.js code defines a function `trimEnd` that removes trailing whitespace from a string. It includes a list of all whitespace characters and creates a regular expression to capture trailing whitespace at the end of a string. The function `trimEnd` converts the input value to a string and uses the `String.prototype.replace` method with the regular expression to remove any trailing whitespace.

Additionally, the code includes a `shim` function, which adds the `trimEnd` method to the `String.prototype` if it doesn't already exist. This allows the use of `trimEnd` on all string instances as a native method.

The code module exports the `trimEnd` function and the `shim` function, enabling them to be used in other modules.

Here is the rewritten version of the code:

```javascript
'use strict';

const toStr = Object.prototype.toString;
const replace = String.prototype.replace;
const whitespace = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF';
const wsRegexEnd = new RegExp('[' + whitespace + ']+$');

function trimEnd(value) {
    if (value === undefined || value === null) {
        throw new TypeError('Cannot convert undefined or null to object');
    }
    return String(value).replace(wsRegexEnd, '');
}

function shimTrimEnd() {
    if (!String.prototype.trimEnd) {
        String.prototype.trimEnd = function() {
            return trimEnd(this);
        };
    }
}

module.exports = trimEnd;
module.exports.shim = shimTrimEnd;
```