```javascript
// index.js

class MiddlewareEndpoint {
    constructor() {
        console.log("MiddlewareEndpoint: Initialized");
    }

    // Middleware function to handle request and response
    handleRequest(req, res, next) {
        // Log and modify request if necessary
        console.log("MiddlewareEndpoint: Handling request");

        // Check if the URL contains "old-endpoint" and replace it
        if (req.url.includes("old-endpoint")) {
            req.url = req.url.replace("old-endpoint", "new-endpoint");
            console.log(`MiddlewareEndpoint: Updated request URL to ${req.url}`);
        }

        // Proceed to the next middleware
        next();
    }
}

// Example Middleware Factory Function
function exampleMiddleware() {
    return (req, res, next) => {
        const middlewareEndpoint = new MiddlewareEndpoint();
        middlewareEndpoint.handleRequest(req, res, next);
    };
}

// Export the middleware function for use in other parts of the application
module.exports = {
    exampleMiddleware
};

// Example usage in an Express application:
// const express = require('express');
// const { exampleMiddleware } = require('./index');
// const app = express();
// app.use(exampleMiddleware());
// app.get('/new-endpoint', (req, res) => {
//     res.send('This is the new endpoint');
// });
// app.listen(3000, () => {
//     console.log('Server is running on port 3000');
// });
```

The functionality of this code is to create a middleware for an Express.js application that intercepts incoming requests. The `MiddlewareEndpoint` class logs its initialization and handles requests by potentially modifying the request URL if it includes the string "old-endpoint", changing it to "new-endpoint". The modified request is then passed to the next middleware in the stack with the help of the `next()` function. The `exampleMiddleware` function acts as a factory function to generate this middleware, which can then be used in an Express.js app. The module exports this middleware function, allowing it to be imported and used elsewhere. The example usage section demonstrates how to integrate this middleware within an Express.js application.