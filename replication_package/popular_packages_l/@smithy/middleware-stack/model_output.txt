The `@smithy/middleware-stack` is a Node.js package that provides an implementation of a middleware stack, which is a structure designed to manage middleware functions in a specified order throughout a request's lifecycle. The middleware stack splits the request lifecycle into five steps: initialize, serialize, build, finalizeRequest, and deserialize. Middleware can be added to any of these steps and can alter the request or response as it moves through each of these phases.

Here is a breakdown of the package's functionality:

1. **Middleware Steps**: 
   - `initialize`: Preparing the input, setting default options, and computing parameters.
   - `serialize`: Input validation and HTTP request construction.
   - `build`: Further modification to the serialized request.
   - `finalizeRequest`: Completing request preparations such as signing.
   - `deserialize`: Converting raw responses into structured data.

2. **Adding Middleware**: 
   - **Absolute Location**: Middleware can be added to a specific step with an optional priority ('high', 'low'), determining its execution order within the step.
   - **Relative Location**: Middleware can be added in relation to another middleware, specifically, before or after it.

3. **Removing Middleware**: 
   - Middleware can be removed by its name.
   - Tags can be used to categorize middleware, allowing multiple middleware to be removed based on a tag.

Below is the implementation of this functionality in a Node.js package:

```markdown
// index.js
class MiddlewareStack {
  constructor() {
    this.steps = {
      initialize: [],
      serialize: [],
      build: [],
      finalizeRequest: [],
      deserialize: []
    };
  }

  add(middleware, { step, priority = 'normal', name, tags = [] }) {
    if (!this.steps[step]) {
      throw new Error(`Invalid step: ${step}`);
    }
    const middlewareEntry = { middleware, priority, name, tags };
    this.steps[step].push(middlewareEntry);

    if (priority === 'high') {
      this.steps[step].sort((a, b) => (b.priority === 'high' ? 1 : -1));
    } else if (priority === 'low') {
      this.steps[step].sort((a, b) => (a.priority === 'low' ? 1 : -1));
    }
  }

  addRelativeTo(middleware, { relation, toMiddleware, step }) {
    const stepMiddlewares = this.steps[step];
    if (!stepMiddlewares) {
      throw new Error(`Invalid step: ${step}`);
    }
    const index = stepMiddlewares.findIndex(mw => mw.name === toMiddleware);
    if (index === -1) {
      throw new Error(`Middleware not found: ${toMiddleware}`);
    }

    const position = relation === 'before' ? index : index + 1;
    stepMiddlewares.splice(position, 0, { middleware });
  }

  remove(name) {
    for (const step in this.steps) {
      this.steps[step] = this.steps[step].filter(mw => mw.name !== name);
    }
  }

  removeByTag(tag) {
    for (const step in this.steps) {
      this.steps[step] = this.steps[step].filter(mw => !mw.tags.includes(tag));
    }
  }

  async resolve(handler, context = {}) {
    for (const stepName of Object.keys(this.steps)) {
      for (const { middleware } of this.steps[stepName]) {
        handler = middleware(handler, context);
      }
    }
    return handler;
  }
}

module.exports = { MiddlewareStack };

// Example usage
const stack = new MiddlewareStack();

const sampleMiddleware = (next, context) => async (args) => {
  console.log('Sample Middleware');
  return next(args);
};

stack.add(sampleMiddleware, { step: 'initialize', name: 'sampleMiddleware' });

stack.resolve((args) => {
  console.log('Final Handler');
})(null);
```