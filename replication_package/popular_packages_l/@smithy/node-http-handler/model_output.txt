The `@smithy/node-http-handler` package provides a request handler for Node.js that utilizes the built-in `http`, `https`, and `http2` modules. The purpose of this package is to handle HTTP requests made by SDK clients generated by Smithy, which is an open-source framework for building clients and servers. This handler is intended to be the default for handling HTTP requests in such environments.

The handler can determine which of the native Node.js modules (`http`, `https`, `http2`) to use based on the given request, thus allowing it to handle various types of HTTP communication scenarios, including both standard HTTP/HTTPS requests and those requiring the efficiency of HTTP/2.

Here's a code implementation of the described functionality:

```javascript
const http = require('http');
const https = require('https');
const http2 = require('http2');

class NodeHttpHandler {
  constructor() {
    this.httpAgent = new http.Agent({});
    this.httpsAgent = new https.Agent({});
    this.http2SessionCache = new Map();
  }

  handle(request) {
    return new Promise((resolve, reject) => {
      let { protocol, hostname, port, path, method, headers, body } = request;
      const isSecureProtocol = /^https/.test(protocol);
      let httpRequest;
      
      if (isSecureProtocol) {
        if (protocol === 'https:') {
          const options = {
            hostname, port, path, method, headers,
            agent: this.httpsAgent
          };
          httpRequest = https.request(options);
        } else if (protocol === 'https2:') {
          let client = this.http2SessionCache.get(hostname);
          if (!client) {
            client = http2.connect(`${protocol}//${hostname}:${port}`);
            this.http2SessionCache.set(hostname, client);
          }
          httpRequest = client.request({ ':method': method, ':path': path, ...headers });
        }
      } else {
        const options = {
          hostname, port, path, method, headers,
          agent: this.httpAgent
        };
        httpRequest = http.request(options);
      }

      httpRequest.on('response', (response) => {
        const data = [];
        response.on('data', chunk => data.push(chunk));
        response.on('end', () => {
          resolve({
            statusCode: response.statusCode,
            headers: response.headers,
            body: Buffer.concat(data)
          });
        });
      });

      httpRequest.on('error', (err) => {
        reject(err);
      });

      if (body) {
        httpRequest.write(body);
      }
      
      httpRequest.end();
    });
  }
}

module.exports = { NodeHttpHandler };
```

This implementation provides a basic `NodeHttpHandler` class that:
- Configures HTTP/HTTPS agents for reuse of TCP connections.
- Implements logic to handle HTTP/HTTPS requests using the appropriate Node.js modules.
- Includes basic HTTP/2 handling with session caching to avoid repeated connections.
- Handles responses by collecting data chunks and resolving with the complete response.

This is a simplified version of how an HTTP request handler might be structured in a package like `@smithy/node-http-handler`.