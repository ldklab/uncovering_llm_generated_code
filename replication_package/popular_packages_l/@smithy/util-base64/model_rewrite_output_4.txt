The Node.js code provided defines a utility for Base64 encoding and decoding. It contains three main components:

1. **`package.json`**: This is a configuration file that specifies metadata about the utility package, such as its name (`@smithy/util-base64`), version, testing script, author, license, and repository information.

2. **`index.js`**: This module contains a class `UtilBase64` with two static methods:
   - `encode(input)`: Accepts a Buffer object and returns its Base64 encoded string. If the input is not a Buffer, it throws an error.
   - `decode(base64String)`: Accepts a Base64 encoded string and returns it as a Buffer object. It throws an error if the input is not a string.
   Both methods ensure that the input is of the correct type before proceeding with the encoding or decoding.

3. **`test.js`**: This script imports the `UtilBase64` module and uses Node.js's built-in `assert` module to perform basic testing:
   - Tests the encoding function by encoding a string "Hello, world!" and verifying that the output matches the expected Base64 string.
   - Tests the decoding function by decoding a Base64 string back to "Hello, world!" and validating the result.

Here is the rewritten code in a single markdown code block:

```json
// package.json
{
  "name": "@smithy/util-base64",
  "version": "1.0.0",
  "description": "Utility functions for Base64 encoding and decoding",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yourusername/util-base64.git"
  },
  "keywords": ["base64", "encoding", "decoding", "utility"],
  "author": "Your Name",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yourusername/util-base64/issues"
  },
  "homepage": "https://github.com/yourusername/util-base64#readme"
}

// index.js
class UtilBase64 {
  static encode(input) {
    if (Buffer.isBuffer(input)) {
      return input.toString('base64');
    }
    throw new Error('Input must be a Buffer');
  }

  static decode(base64String) {
    if (typeof base64String === 'string') {
      return Buffer.from(base64String, 'base64');
    }
    throw new Error('Input must be a Base64 encoded string');
  }
}

module.exports = UtilBase64;

// test.js
const UtilBase64 = require('./index');
const assert = require('assert');

// Test Encoding
try {
  const originalBuffer = Buffer.from('Hello, world!');
  const encoded = UtilBase64.encode(originalBuffer);
  console.log('Encoded:', encoded);
  assert.strictEqual(encoded, originalBuffer.toString('base64'));
} catch (error) {
  console.error('Encoding failed:', error);
}

// Test Decoding
try {
  const base64String = 'SGVsbG8sIHdvcmxkIQ==';
  const decoded = UtilBase64.decode(base64String);
  console.log('Decoded:', decoded.toString());
  assert.strictEqual(decoded.toString(), 'Hello, world!');
} catch (error) {
  console.error('Decoding failed:', error);
}
```