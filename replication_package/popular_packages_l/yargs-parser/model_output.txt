The `yargs-parser` package is a command line argument parser for Node.js, which is used internally by the `yargs` library. It offers the capability to convert command line arguments into a structured object that is easier to work with in JavaScript. The parser supports various options for customizing how arguments are interpreted and converted.

**Functionality Overview:**

1. **Basic Usage:** The parser can handle both strings and arrays of arguments. When provided with command line arguments, it parses these into an object with key-value pairs for flags and values. It treats arguments without a preceding dash as positional arguments, stored in an array keyed by `_`.

2. **Deno and ESM Support:** As of version 19, `yargs-parser` also supports importing in Deno and as an ES module in Node.js, allowing for more versatile application in various JavaScript runtimes and module systems.

3. **Options Configuration:** The parser can be customized with a range of options:
   - **Alias:** Specify aliases for arguments.
   - **Array:** Define keys that should be treated as arrays.
   - **Boolean:** Parse certain arguments as boolean values.
   - **Coerce:** Provide custom functions to transform argument values.
   - **Config:** Parse arguments from configuration files or objects.
   - **Count:** Treat flags as counters (e.g., `-vvv` equates to `{ v: 3 }`).
   - **Default:** Establish default values for certain keys.
   - **Normalize:** Normalize path values.
   - **String and Number:** Force arguments to be parsed as strings or numbers.

4. **Detailed Parsing:** In addition to basic parsing, a detailed method returns comprehensive information about the parsed arguments, including aliases, configurations, errors, and any new arguments induced by defaults.

5. **Configuration Options:** Users can enable or disable various transformations that occur during parsing:
   - **Short Option Groups:** Treats grouped single-dash options as separate booleans.
   - **Camel-Case Expansion:** Allows hyphenated arguments to have camelCase aliases.
   - **Boolean Negation and Negation Prefix:** Manage how `--no-` prefixed arguments are handled.
   - **Flags for Arrays:** Adjust behavior for arrays, such as combining array values from different sources.
   - **Halt at Non-Option:** Stops parsing further arguments when encountering a non-option.

6. **Advanced Configuration:** Fine-tunes handling of duplicated arguments, unknown options, and how arguments with dots or dashes in their keys are processed.

Below is a simple implementation of a minimal `yargs-parser` functionality in Node.js. This implementation parses command-line arguments into an object with options for basic types like boolean, number, and string parsing. Advanced configurations and methods like `detailed` are omitted for simplicity.

```markdown
```javascript
class YargsParser {
  constructor() {
    this.defaults = {
      boolean: [],
      number: [],
      string: [],
    };
  }

  parse(args, opts = {}) {
    const options = { ...this.defaults, ...opts };
    let result = { _: [] };

    if (typeof args === 'string') {
      args = args.split(' ');
    }

    args.forEach((arg, index) => {
      if (arg.startsWith('--')) {
        this.parseLongOption(arg, args, index, options, result);
      } else if (arg.startsWith('-')) {
        this.parseShortOption(arg, args, index, options, result);
      } else {
        result._.push(this.castValue(arg, options));
      }
    });

    return result;
  }

  parseLongOption(arg, args, index, options, result) {
    const [key, value] = arg.slice(2).split('=');
    this.setArgValue(key, value, args, index, options, result);
  }

  parseShortOption(arg, args, index, options, result) {
    const chars = arg.slice(1).split('');
    chars.forEach(char => {
      this.setArgValue(char, null, args, index, options, result);
    });
  }

  setArgValue(key, value, args, index, options, result) {
    if (options.boolean.includes(key)) {
      result[key] = value !== undefined ?
        this.castValue(value, options) :
        !args[index + 1] || (args[index + 1] && args[index + 1][0] === '-') ?
          true : this.castValue(args[++index], options);
    } else if (options.number.includes(key)) {
      result[key] = this.castValue(value !== undefined ? value : args[++index], options);
    } else if (options.string.includes(key)) {
      result[key] = value !== undefined ? value : args[++index];
    } else {
      result[key] = value !== undefined ? this.castValue(value, options) : this.castValue(args[++index], options);
    }
  }

  castValue(value, options) {
    if (!isNaN(value) && options.number) {
      return parseFloat(value);
    }
    return value;
  }
}

module.exports = (args, opts) => {
  const parser = new YargsParser();
  return parser.parse(args, opts);
};

// Example usage:
// const argv = require('./yargs-parser')('--foo=33 --bar hello'.split(' '), { boolean: ['verbose'], number: ['foo'] });
// console.log(argv);
```
```