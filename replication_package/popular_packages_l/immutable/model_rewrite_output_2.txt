The provided Node.js code implements a basic version of immutable data structures similar to those found in the Immutable.js library. The code includes two classes: `ImmutableMap` and `ImmutableList`. Here's a breakdown of their functionalities:

1. **ImmutableMap**:
   - Stores key-value pairs in an internal `_data` object.
   - `get(key)`: Retrieves the value associated with the provided key.
   - `set(key, value)`: Returns a new `ImmutableMap` with the updated key-value pair if there is a change; otherwise, it returns the original map.
   - `equals(otherMap)`: Compares two maps and returns `true` if they have identical keys and corresponding values.

2. **ImmutableList**:
   - Maintains a list of values in an internal `_data` array.
   - `get(index)`: Fetches the value at the specified index.
   - `push(...values)`: Creates a new `ImmutableList` with additional values appended to the end.
   - `unshift(...values)`: Returns a new `ImmutableList` with values added to the beginning.
   - `concat(...lists)`: Merges multiple lists into a new `ImmutableList`.

Here's a rewritten version of the code:

```javascript
class ImmutableMap {
  constructor(initialObject = {}) {
    this._data = initialObject;
  }

  get(key) {
    return this._data[key];
  }

  set(key, value) {
    if (this.get(key) === value) return this;
    return new ImmutableMap({ ...this._data, [key]: value });
  }

  equals(otherMap) {
    const thisKeys = Object.keys(this._data);
    const otherKeys = Object.keys(otherMap._data);
    return thisKeys.length === otherKeys.length &&
           thisKeys.every(key => this._data[key] === otherMap._data[key]);
  }
}

class ImmutableList {
  constructor(initialArray = []) {
    this._data = initialArray;
  }

  get(index) {
    return this._data[index];
  }

  push(...values) {
    return new ImmutableList([...this._data, ...values]);
  }

  unshift(...values) {
    return new ImmutableList([...values, ...this._data]);
  }

  concat(...lists) {
    const combinedData = lists.reduce((acc, list) => {
      return acc.concat(list._data);
    }, this._data);
    return new ImmutableList(combinedData);
  }
}

// Example usage:
const map1 = new ImmutableMap({ a: 1, b: 2, c: 3 });
const map2 = map1.set('b', 50);
console.log(map1.get('b')); // 2
console.log(map2.get('b')); // 50

const list1 = new ImmutableList([1, 2, 3]);
const list2 = list1.push(4, 5, 6);
console.log(list2.get(3)); // 4

module.exports = {
  ImmutableMap,
  ImmutableList,
};
```