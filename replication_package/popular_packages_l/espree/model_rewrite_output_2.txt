The Node.js code defines a JavaScript parser class named `EspreeParser` which utilizes the `Acorn` library to parse JavaScript code. The `EspreeParser` class has methods for both parsing entire scripts (`parse`) and tokenizing code (`tokenize`). The class also keeps track of supported ECMAScript versions and exposes a placeholder method `VisitorKeys`.

- `EspreeParser.constructor`: Initializes the parser with default values and supported ECMAScript versions.
- `parse`: Method for parsing a given JavaScript code string with options for ECMAScript version, source type, range, location, comments, and tokens.
- `tokenize`: Method for generating tokens from a given JavaScript code string with options for ECMAScript version and tokens.
- `VisitorKeys`: Provides an empty placeholder for eslint-compatible visitor keys.
- The parser instance is exported with binding for `parse` and `tokenize` methods.

Here's a possible rewrite of the provided code:

```javascript
import { Parser } from 'acorn';

class JavaScriptParser {
    constructor() {
        this.version = '1.0.0';
        this.supportedEcmaVersions = [3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];
        this.latestEcmaVersion = '16';
    }

    parse(code, options = {}) {
        const configuration = {
            ...options,
            ecmaVersion: options.ecmaVersion ?? 5,
            sourceType: options.sourceType ?? 'script',
            ranges: options.ranges ?? false,
            locations: options.locations ?? false,
            onComment: options.comment ? [] : undefined,
            onToken: options.tokens ? [] : undefined,
        };
        return Parser.parse(code, configuration);
    }

    tokenize(code, options = {}) {
        const configuration = {
            ...options,
            ecmaVersion: options.ecmaVersion ?? 5,
            onToken: options.tokens ? [] : undefined,
        };
        return Parser.tokenize(code, configuration).tokens;
    }

    getVisitorKeys() {
        // Functionality for providing visitor keys.
        return {}; // Mimics eslint visitor keys.
    }
}

export const espreeInstance = new JavaScriptParser();
espreeInstance.parse = espreeInstance.parse.bind(espreeInstance);
espreeInstance.tokenize = espreeInstance.tokenize.bind(espreeInstance);

export default espreeInstance;
```