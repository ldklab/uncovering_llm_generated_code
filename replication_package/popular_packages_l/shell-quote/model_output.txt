The `shell-quote` package provides two primary functionalities: parsing and quoting shell commands.

1. **quote(args):** This function takes an array of arguments and returns a single string that represents a safely quoted version of these arguments for use in shell commands. It ensures that each argument is quoted properly so that they can be interpreted correctly in a shell environment.

2. **parse(cmd, env={}):** This function parses a quoted shell command string into an array of arguments. It also supports environment variable interpolation, where variables in the form of `$VARNAME` or `${VARNAME}` are replaced by values provided in the `env` object. The function can handle shell operators (like `||`, `>`, etc.), returning these as objects with an `op` key. Additionally, if a comment is present in the command (denoted by `#`), it includes the comment in the result as an object with a `comment` key.

Here's the code for the `shell-quote` package implementation:

```js
// quote.js
function quote(args) {
    return args.map(arg => {
        if (/[\s'"\$`]/.test(arg)) {
            return "'" + arg.replace(/'/g, "'\\''") + "'";
        }
        return arg;
    }).join(' ');
}

module.exports = quote;

// parse.js
function parse(cmd, env = {}, opts = { escape: '\\' }) {
    const result = [];
    const re = /'[^']*'|"[^"]*"|\S+/g;
    let match;

    while ((match = re.exec(cmd)) !== null) {
        let part = match[0];
        if (part[0] === '"' || part[0] === "'") {
            part = part.slice(1, -1);
        }
        part = part.replace(new RegExp(`\\${opts.escape}`, 'g'), '');

        if (part.includes('=')) {
            let [key, value] = part.split('=');
            if (value.startsWith("$") && env.hasOwnProperty(value.slice(1))) {
                value = env[value.slice(1)];
            }
            result.push(`${key}=${value}`);
        } else if (part.startsWith("$") && env.hasOwnProperty(part.slice(1))) {
            result.push(env[part.slice(1)]);
        } else {
            result.push(part);
        }
    }

    return result;
}

module.exports = parse;

// index.js
const quote = require('./quote');
const parse = require('./parse');

module.exports = { quote, parse };
```

To create and use the package, you can organize the above code into separate files (`quote.js`, `parse.js`, and `index.js`), and then require the desired functionalities using:

```js
var quote = require('shell-quote').quote;
var parse = require('shell-quote').parse;
```

This provides a comprehensive set of tools for safely transforming arrays into shell-safe strings and parsing complex shell command strings into their constituent arguments.