The `jest-docblock` package provides functionality to handle docblocks in code files. A docblock is a comment block that appears at the top of a code file and can include metadata in the form of pragmas. The package facilitates:

1. **Extraction of Docblocks**: It can identify and return the top-level docblock from a given code string.
2. **Stripping Docblocks**: It removes the top-level docblock and returns the rest of the code.
3. **Parsing Docblocks**: It breaks down the content of a docblock into pragmas (key-value pairs) where each pragma is identified by the `@` symbol in the comment block.
4. **Parsing with Comments**: Similar to parsing docblocks but also includes the main content (comments) of the docblock.
5. **Printing Docblocks**: It creates a new docblock string from provided comments and pragmas.

Here's the implementation of this package:

```javascript
// jest-docblock.js

function extract(contents) {
  const match = contents.match(/^\s*\/\*\*([\s\S]*?)\*\//);
  return match ? match[0] : '';
}

function strip(contents) {
  return contents.replace(/^\s*\/\*\*([\s\S]*?)\*\/\s*/, '');
}

function parse(docblock) {
  const lines = docblock.split('\n').map(line => line.trim());
  const pragmas = {};
  lines.forEach(line => {
    const pragmaMatch = line.match(/^@\w+/);
    if (pragmaMatch) {
      const key = pragmaMatch[0].slice(1);
      const value = line.substring(pragmaMatch[0].length).trim();
      if (pragmas[key]) {
        if (Array.isArray(pragmas[key])) {
          pragmas[key].push(value);
        } else {
          pragmas[key] = [pragmas[key], value];
        }
      } else {
        pragmas[key] = value;
      }
    }
  });
  return pragmas;
}

function parseWithComments(docblock) {
  const pragmas = parse(docblock);
  const commentLines = docblock.split('\n').map(line => line.trim());
  const comments = commentLines.filter(line => !line.startsWith('@')).join(' ').replace(/\/\*\*|\*\//g, '').trim();
  return { comments, pragmas };
}

function print({ comments = '', pragmas = {} }) {
  const pragmaLines = Object.entries(pragmas)
    .map(([key, value]) => {
      if (Array.isArray(value)) {
        return value.map(val => ` * @${key} ${val}`).join('\n');
      }
      return ` * @${key} ${value}`;
    })
    .join('\n');
  const commentLines = comments.split('\n').map(line => ` * ${line}`).join('\n');
  return `/**\n${commentLines}\n${pragmaLines ? '\n' + pragmaLines : ''}\n */`;
}

module.exports = {
  extract,
  strip,
  parse,
  parseWithComments,
  print,
};
```

To use the package, create a file named `jest-docblock.js` with the above code and `require` it in your project. You can then call the exposed functions as demonstrated in the usage section of the README.