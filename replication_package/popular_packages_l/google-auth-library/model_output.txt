The functionality described in the `Google Auth Library` for Node.js enables developers to authenticate to various Google Cloud services using OAuth 2.0, JSON Web Tokens (JWT), Application Default Credentials (ADC), and other methods. Here's a comprehensive breakdown of the primary functionalities:

1. **Installation and Initialization:**
   - Use `npm install google-auth-library` to integrate the library into your Node.js project.

2. **Ways to Authenticate:**
   - **Application Default Credentials:** Automatically use credentials on Google Cloud to authenticate calls.
   - **OAuth 2.0:** Obtain and manage tokens for authentication by end-users, refreshing tokens automatically when necessary.
   - **JSON Web Tokens (JWT):** Use for server-to-server communication with a service account.
   - **Google Compute:** Authenticate directly with a Google Cloud service account for server interactions.
   - **Workload Identity Federation and Workforce Identity Federation:** Access Google Cloud resources from non-Google Cloud platforms (AWS, Azure, etc.) via federation.
   - **Impersonated Credentials Client:** Perform operations on behalf of another service account.
   - **Downscoped Client:** Restrict IAM permissions with short-lived credentials.

3. **Implementing OAuth 2.0:**
   - Create an OAuth2 client with credentials (client ID, client secret, and redirect URL).
   - Obtain authorization by generating a URL, receiving an authorization code, and exchanging it for access and refresh tokens.
   - Handle token events and refresh tokens as required.

4. **JSON Web Tokens:**
   - Download JSON credentials from the Google Developers Console.
   - Use these credentials to create a JWT client for server-to-server requests.

5. **Using External Identities:**
   - Manage identity federation from AWS, Azure, or any OIDC-compliant provider to access Google resources.
   - Create configuration files with `gcloud CLI` to manage authentication.

6. **Workload and Workforce Identity Federation:**
   - Manage user and service identity for cross-platform access.
   - Use identity federation to access services in a secure manner without relying on long-term credentials.

7. **Handling ID Tokens:**
   - Fetch and verify ID Tokens for applications like Cloud Run and IAP (Identity-Aware Proxy) to ensure secure access to services and resources.

8. **Downscoped Client:**
   - Create downscoped tokens with Credential Access Boundaries to restrict the permissions available to short-lived credentials, ensuring least privilege.

9. **Working with API Keys and Proxies:**
   - Support for passing an API Key along with authentication requests and configuring a proxy server via environment variables.

```markdown
// server.js
const { GoogleAuth, OAuth2Client, JWT, Compute, ExternalAccountClient, Impersonated, DownscopedClient } = require('google-auth-library');
const http = require('http');
const url = require('url');
const open = require('open');
const destroyer = require('server-destroy');

async function useAppDefaultCredentials() {
  const auth = new GoogleAuth({
    scopes: 'https://www.googleapis.com/auth/cloud-platform'
  });
  const client = await auth.getClient();
  const projectId = await auth.getProjectId();
  const res = await client.request({ url: `https://dns.googleapis.com/dns/v1/projects/${projectId}` });
  console.log(res.data);
}

async function useOAuth2() {
  const keys = require('./oauth2.keys.json');
  const oAuth2Client = new OAuth2Client(
      keys.web.client_id,
      keys.web.client_secret,
      keys.web.redirect_uris[0]
  );

  const authorizeUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: 'https://www.googleapis.com/auth/userinfo.profile',
  });

  return new Promise((resolve, reject) => {
    const server = http.createServer(async (req, res) => {
      if (req.url.indexOf('/oauth2callback') > -1) {
        const qs = new url.URL(req.url, 'http://localhost:3000').searchParams;
        const code = qs.get('code');
        res.end('Authentication successful! Please return to the console.');
        server.destroy();

        const r = await oAuth2Client.getToken(code);
        oAuth2Client.setCredentials(r.tokens);
        resolve(oAuth2Client);
      }
    }).listen(3000, () => open(authorizeUrl, {wait: false}).then(cp => cp.unref()));
    destroyer(server);
  });
}

async function useJSONWebToken() {
  const keys = require('./jwt.keys.json');
  const client = new JWT({
    email: keys.client_email,
    key: keys.private_key,
    scopes: ['https://www.googleapis.com/auth/cloud-platform'],
    subject: '',
  });
  const res = await client.request({ url: `https://dns.googleapis.com/dns/v1/projects/${keys.project_id}` });
  console.log(res.data);
}

async function useWorkloadFederation() {
  const jsonConfig = require('/path/to/config.json');
  const client = ExternalAccountClient.fromJSON(jsonConfig);
  client.scopes = ['https://www.googleapis.com/auth/cloud-platform'];
  const projectId = await client.getProjectId();
  const res = await client.request({ url: `https://storage.googleapis.com/storage/v1/b?project=${projectId}` });
  console.log(res.data);
}

async function useImpersonatedCredentials() {
  const auth = new GoogleAuth();
  const client = await auth.getClient();
  const targetClient = new Impersonated({
    sourceClient: client,
    targetPrincipal: 'impersonated-account@projectID.iam.gserviceaccount.com',
    lifetime: 30,
    delegates: [],
    targetScopes: ['https://www.googleapis.com/auth/cloud-platform']
  });

  const res = await targetClient.request({ url: `https://www.googleapis.com/storage/v1/b?project=anotherProjectID` });
  console.log(res.data);
}

async function useDownscopedClient() {
  const cab = {
    accessBoundary: {
      accessBoundaryRules: [
        {
          availableResource: '//storage.googleapis.com/projects/_/buckets/bucket_name',
          availablePermissions: ['inRole:roles/storage.objectViewer'],
          availabilityCondition: {
            expression: `resource.name.startsWith('projects/_/buckets/bucket_name/objects/customer-a')`
          }
        },
      ],
    },
  };

  const googleAuth = new GoogleAuth({ scopes: ['https://www.googleapis.com/auth/cloud-platform'] });
  const client = await googleAuth.getClient();
  const cabClient = new DownscopedClient(client, cab);

  const refreshedAccessToken = await cabClient.getAccessToken();
  console.log('Access Token:', refreshedAccessToken.token);
}

// To use one of the above functions, call it here, e.g.:
useAppDefaultCredentials().catch(console.error);
```
