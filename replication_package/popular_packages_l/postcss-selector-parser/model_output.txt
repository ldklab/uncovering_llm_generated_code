The `postcss-selector-parser` package is a Node.js package designed to parse and process CSS selector strings with a focus on flexibility and extensibility. Below is a summary of its functionality as described in the README:

### Functionality

1. **Installation**: The package can be installed using npm with the command `npm install postcss-selector-parser`.

2. **Parsing and Transforming Selectors**:
    - It provides functionality to parse a string of CSS selectors and then work with those selectors using a callback function. 
    - The callback function can traverse the selector nodes using a method called `walk`, which allows you to perform operations on each selector.
    - In the example, it logs each selector string to the console.

3. **Normalization of Selector Whitespace**:
    - The package offers a method to remove unnecessary whitespace from selector strings using `processSync`.
    - This method takes a selector string and an options object, where `lossless: false` specifies that whitespace should be minimized.

4. **Async Processing**:
    - There is support for asynchronous processing via `parser.process`, which returns a Promise that resolves with the processed selector string.

### Implementation

Here is the code for a Node.js package that implements the above functionality:

```js
// Import necessary modules
const parser = require('postcss-selector-parser');

// Function to transform selectors by walking and logging each one
const transform = selectors => {
    selectors.walk(selector => {
        console.log(String(selector)); // Perform desired action on each selector node
    });
};

// Synchronous processing example with transformation
const transformed = parser(transform).processSync('h1, h2, h3');
console.log('Transformed (Synchronous):', transformed);

// Function to normalize selectors, removing extra whitespace
const normalizeSelectors = (selectorString) => {
    return parser().processSync(selectorString, { lossless: false });
};

// Example usage of normalization
const normalized = normalizeSelectors('h1, h2, h3');
console.log('Normalized:', normalized);

// Asynchronous processing example
const asyncProcess = async (selectorString) => {
    try {
        const result = await parser().process(selectorString);
        console.log('Async Processed Result:', result);
    } catch (error) {
        console.error('Error in async processing:', error);
    }
};

// Example usage of asynchronous processing
asyncProcess('div, span, a');
```

This code provides basic functionality to transform, normalize, and asynchronously process CSS selectors, reflecting the capabilities described in the README for the `postcss-selector-parser` package.