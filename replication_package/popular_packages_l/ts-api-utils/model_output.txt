The Node.js package "TypeScript API Utils" provides utility functions for working with TypeScript's API. This package is a successor to `tsutils` and aims to simplify working with TypeScript programmatically by providing a set of utility functions to process and analyze TypeScript code. It includes a sample function `forEachToken` for traversing tokens within TypeScript code.

The package is a TypeScript-focused utility library that can be installed via npm and then imported into a TypeScript project. The core functionality expected includes a suite of helpful TypeScript API utility functions. For the purpose of demonstration, we'll create a single function `forEachToken` that iterates over tokens in a TypeScript source file.

Below is the implementation of this functionality:

```markdown
// package.json
{
  "name": "ts-api-utils",
  "version": "1.0.0",
  "description": "Utility functions for working with TypeScript's API",
  "main": "index.js",
  "types": "index.d.ts",
  "scripts": {
    "build": "tsc",
    "test": "mocha --require ts-node/register test/**/*.test.ts"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/JoshuaKGoldberg/ts-api-utils.git"
  },
  "keywords": [
    "typescript",
    "utilities",
    "api"
  ],
  "author": "Joshua K Goldberg",
  "license": "MIT",
  "dependencies": {
    "typescript": "^5.0.0"
  },
  "devDependencies": {
    "ts-node": "^10.0.0",
    "mocha": "^9.0.0"
  }
}

// tsconfig.json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}

// src/index.ts
import * as ts from "typescript";

/**
 * Iterates over each token in a TypeScript source file.
 * @param sourceFile The source file to scan.
 * @param callback A function to call for each token found.
 */
export function forEachToken(sourceFile: ts.SourceFile, callback: (node: ts.Node) => void): void {
  const scan = (node: ts.Node) => {
    if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {
      callback(node);
    }
    ts.forEachChild(node, scan);
  };
  scan(sourceFile);
}

// Example usage
const code = `const x = 42;`;

const sourceFile = ts.createSourceFile("example.ts", code, ts.ScriptTarget.ESNext, true);
forEachToken(sourceFile, (node) => {
  console.log(`Found token: ${ts.SyntaxKind[node.kind]}`);
});

// index.d.ts
export declare function forEachToken(sourceFile: import("typescript").SourceFile, callback: (node: import("typescript").Node) => void): void;

// test/forEachToken.test.ts
import { forEachToken } from "../src";
import * as ts from "typescript";
import { expect } from "chai";

describe("forEachToken", () => {
  it("should traverse all tokens in a source file", () => {
    const code = "const x = 42;";
    const sourceFile = ts.createSourceFile("test.ts", code, ts.ScriptTarget.ES2015);
    const tokens: string[] = [];

    forEachToken(sourceFile, (node) => {
      tokens.push(ts.tokenToString(node.kind) || "unknown");
    });

    expect(tokens).to.deep.equal(["const", "identifier", "=", "numeric_literal", ";"]);
  });
});
```

This code block defines a Node.js package that utilizes TypeScript to write utility functions for processing TypeScript code. The `forEachToken` function is defined to process each token node within a TypeScript source file, providing a framework for extending with additional utility functions using the TypeScript API.