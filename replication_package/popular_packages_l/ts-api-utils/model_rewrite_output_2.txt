```json
// package.json
{
  "name": "ts-api-utils",
  "version": "1.0.0",
  "description": "Utility functions for working with TypeScript's API",
  "main": "index.js",
  "types": "index.d.ts",
  "scripts": {
    "build": "tsc",
    "test": "mocha --require ts-node/register test/**/*.test.ts"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/JoshuaKGoldberg/ts-api-utils.git"
  },
  "keywords": [
    "typescript",
    "utilities",
    "api"
  ],
  "author": "Joshua K Goldberg",
  "license": "MIT",
  "dependencies": {
    "typescript": "^5.0.0"
  },
  "devDependencies": {
    "ts-node": "^10.0.0",
    "mocha": "^9.0.0"
  }
}
```

```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "**/*.spec.ts"]
}
```

```typescript
// src/index.ts
import * as ts from "typescript";

/**
 * Iterates over each token in a TypeScript source file.
 * @param sourceFile The source file to scan.
 * @param callback A function to call for each token found.
 */
export function iterateTokens(sourceFile: ts.SourceFile, callback: (node: ts.Node) => void): void {
  const scanner = (node: ts.Node) => {
    if (node.kind >= ts.SyntaxKind.FirstToken && node.kind <= ts.SyntaxKind.LastToken) {
      callback(node);
    }
    ts.forEachChild(node, scanner);
  };
  scanner(sourceFile);
}

// Example usage
const codeExample = `const x = 42;`;

const exampleSourceFile = ts.createSourceFile("example.ts", codeExample, ts.ScriptTarget.ESNext, true);
iterateTokens(exampleSourceFile, (node) => {
  console.log(`Found token: ${ts.SyntaxKind[node.kind]}`);
});
```

```typescript
// index.d.ts
export declare function iterateTokens(sourceFile: import("typescript").SourceFile, callback: (node: import("typescript").Node) => void): void;
```

```typescript
// test/iterateTokens.test.ts
import { iterateTokens } from "../src";
import * as ts from "typescript";
import { expect } from "chai";

describe("iterateTokens", () => {
  it("should traverse all tokens in a source file", () => {
    const testCode = "const x = 42;";
    const sourceFile = ts.createSourceFile("test.ts", testCode, ts.ScriptTarget.ES2015);
    const tokensList: string[] = [];

    iterateTokens(sourceFile, (node) => {
      tokensList.push(ts.tokenToString(node.kind) || "unknown");
    });

    expect(tokensList).to.deep.equal(["const", "identifier", "=", "numeric_literal", ";"]);
  });
});
```