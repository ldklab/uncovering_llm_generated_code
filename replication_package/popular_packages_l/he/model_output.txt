The `he` package is an HTML entity encoder/decoder written in JavaScript, meant for use in different JavaScript environments like Node.js, browsers, and others. It provides functionality to encode and decode all standardized named character references as per HTML specifications and handles edge cases similar to how a browser would handle them. The package also supports astral Unicode symbols and can be adapted to different use cases with various options.

### Key Features and API:

1. **Installation**: The package is available through npm, Bower, Component, or via a direct script tag in the browser. It's compatible with Node.js, various JavaScript engines, and environments.

2. **API Methods**:
   - **`he.version`**: Provides the package version.
   - **`he.encode(text, options)`**: Encodes a string of text into HTML entities based on options provided. Major options include:
     - `useNamedReferences`: Whether to use named entities like `&copy;`.
     - `decimal`: Whether to use decimal escapes instead of hexadecimal.
     - `encodeEverything`: Whether to encode all symbols.
     - `strict`: Whether to throw errors on invalid characters.
     - `allowUnsafeSymbols`: Allows certain characters that are unsafe in HTML by default.
   
   - **`he.decode(html, options)`**: Decodes HTML entities back into characters. Important options include:
     - `isAttributeValue`: Handles decoding differently if the context is within an attribute.
     - `strict`: Similar to encode, determines the error handling.

   - **`he.escape(text)`**: Escapes characters `&`, `<`, `>`, `"`, `‚Äô`, and `` ` `` for safe use in HTML.
   - **`he.unescape`**: Alias for `decode`.

3. **Customization**:
   Global default settings for encoding and decoding can be overridden by setting options on `he.encode.options` or `he.decode.options`.

4. **Command Line Usage**: The package provides a CLI for encoding and decoding:

   - Encode: `$ he --encode 'string'`
   - Decode: `$ he --decode 'HTML'`

5. **Use Cases**:
   - Encoding and decoding HTML content within JavaScript applications.
   - Quick encoding/decoding tasks directly from the command line.

6. **Support and Testing**: The library is verified against multiple environments and browser versions, assuring compatibility and reliability. It includes unit tests and code coverage to maintain quality.

Here is the implementation of the described functionality:

```markdown
// he.js

const he = {
  version: '1.0.0',
  encode: function(text, options = {}) {
    const useNamedReferences = options.useNamedReferences || false;
    const decimal = options.decimal || false;
    const encodeEverything = options.encodeEverything || false;
    const strict = options.strict || false;
    const allowUnsafeSymbols = options.allowUnsafeSymbols || false;

    const namedEntities = {
      '¬©': '&copy;',
      '‚â†': '&ne;',
      'ùåÜ': '&#x1D306;'
    };

    let encodedText = '';
    for (const char of text) {
      let code = char.codePointAt(0);
      if (useNamedReferences && namedEntities[char]) {
        encodedText += namedEntities[char];
      } else if ((code < 32 || code > 126) || encodeEverything) {
        encodedText += decimal ? `&#${code};` : `&#x${code.toString(16).toUpperCase()};`;
      } else if ((strict && char === '\0') || (!allowUnsafeSymbols && /[&<>"'`]/.test(char))) {
        throw new Error('Invalid character.');
      } else {
        encodedText += char;
      }
    }
    return encodedText;
  },
  decode: function(html, options = {}) {
    const isAttributeValue = options.isAttributeValue || false;
    const strict = options.strict || false;

    const namedEntities = {
      '&copy;': '¬©',
      '&ne;': '‚â†',
      '&#x1D306;': 'ùåÜ'
    };

    return html.replace(/&(?:#x[0-9A-Fa-f]+|#[0-9]+|[a-zA-Z]+);/g, match => {
      if (namedEntities[match]) return namedEntities[match];
      
      let num;
      if (match.startsWith('&#x')) {
        num = parseInt(match.slice(3, -1), 16);
      } else if (match.startsWith('&#')) {
        num = parseInt(match.slice(2, -1), 10);
      }

      if (num && (num < 32 || num > 126)) {
        return String.fromCodePoint(num);
      } else if (strict) {
        throw new Error('Invalid character reference.');
      }
      return match;
    });
  },
  escape: function(text) {
    return text.replace(/[&<>"'`]/g, function(match) {
      switch (match) {
        case '&': return '&amp;';
        case '<': return '&lt;';
        case '>': return '&gt;';
        case '"': return '&quot;';
        case "'": return '&#x27;';
        case '`': return '&#x60;';
      }
    });
  }
};

module.exports = he;
```