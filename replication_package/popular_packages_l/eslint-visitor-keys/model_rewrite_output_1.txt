The Node.js code defines a module that provides tools to work with AST (Abstract Syntax Tree) node visitor keys. Here's a breakdown of its components:

1. **KEYS**: An `Object.freeze`d object which defines a set of default visitor keys for certain node types within an AST. This example includes keys for `AssignmentExpression` and `MethodDefinition`.

2. **getKeys function**: This function takes a node object as input and returns an array of its own keys, excluding those that start with underscores (`_`) or are `'parent'`, `'leadingComments'`, or `'trailingComments'`.

3. **unionWith function**: This function accepts an object (`additionalKeys`) and returns a new object that merges `additionalKeys` with the predefined `KEYS`. If both `additionalKeys` and `KEYS` have the same key, the values (arrays) are combined with unique elements.

4. **Exports**: The module exports `KEYS`, `getKeys`, and `unionWith` for use in other files.

5. **Examples**: The code includes example usages demonstrating how to use `getKeys` and `unionWith`.

Below is the rewritten code in one markdown code block:

```javascript
// eslint-visitor-keys/index.js

const KEYS = Object.freeze({
    AssignmentExpression: ["left", "right"],
    MethodDefinition: ["key", "value"]
});

function getKeys(node) {
    if (node == null) {
        return [];
    }
    return Object.keys(node).filter(key => (
        !key.startsWith("_") && !['parent', 'leadingComments', 'trailingComments'].includes(key)
    ));
}

function unionWith(additionalKeys) {
    const result = {};
    for (const key in additionalKeys) {
        result[key] = additionalKeys[key];
    }
    for (const key in KEYS) {
        if (!result.hasOwnProperty(key)) {
            result[key] = KEYS[key];
        } else {
            result[key] = [...new Set([...result[key], ...KEYS[key]])];
        }
    }
    return result;
}

module.exports = {
    KEYS,
    getKeys,
    unionWith
};

// Usage Example:
const node = {
    type: "AssignmentExpression",
    left: { type: "Identifier", name: "foo" },
    right: { type: "Literal", value: 0 }
};
console.log(getKeys(node)); // Output: ["type", "left", "right"]

console.log(unionWith({
    MethodDefinition: ["decorators"]
})); // Output: { ..., MethodDefinition: ["decorators", "key", "value"], ... }
```