The Node.js package "Source Map Support" facilitates enhanced error stack tracing for JavaScript code that has been compiled from other programming languages into JavaScript using source maps. This feature is especially useful with languages such as TypeScript or CoffeeScript, where the compiled code might not correspond directly line-for-line with the original source code. This package utilizes the V8 stack trace API and the source-map module to translate stack traces from compiled JavaScript back to their original form, improving readability and debuggability. The core functionality allows for:

1. **Installation and Integration**: 
   - Can be used via the Node.js CLI with `node -r source-map-support/register compiled.js`.
   - Can be included programmatically at the start of your JS files using `require('source-map-support').install();`.

2. **Customization**:
   - Handles uncaught exceptions similar to Node's default, with options to modify this behavior.
   - Custom source map retrieval can be implemented, e.g., from memory instead of the filesystem.
   - Environment specification for browser or Node.js usage.
   - Inline source maps can be activated using `hookRequire`.

3. **Browser Support**:
   - Functions with pre-existing source map support in browsers when used alongside tools like Browserify.
   - Compatible with AMD loaders such as RequireJS for modular JavaScript loading in browsers.
   
4. **Options**: It provides flexibility to modify its default behavior through options such as disabling its default exception handler, custom source map retrieval functions, or specifying the runtime environment.

Here is the implementation of a simplified version of this package:

```javascript
const fs = require('fs');
const path = require('path');
const sourceMap = require('source-map');

class SourceMapSupport {
  constructor() {
    this.sourceMaps = {};
  }

  loadSourceMap(filePath, mapPath) {
    const mapContent = fs.readFileSync(mapPath, 'utf8');
    const consumer = new sourceMap.SourceMapConsumer(JSON.parse(mapContent));
    this.sourceMaps[filePath] = consumer;
  }

  mapTrace(stack) {
    return stack.split('\n').map((line) => {
      const match = line.match(/\((.*):(\d+):(\d+)\)$/);
      if (!match) return line;
      const [_, file, lineNum, colNum] = match;
      const consumer = this.sourceMaps[file];
      if (!consumer) return line;
      const pos = consumer.originalPositionFor({
        line: parseInt(lineNum, 10),
        column: parseInt(colNum, 10)
      });
      if (!pos.source) return line;
      return line.replace(path.basename(file) + `:${lineNum}:${colNum}`, pos.source + `:${pos.line}:${pos.column}`);
    }).join('\n');
  }

  install() {
    const originalPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (err, structuredStackTrace) => {
      const stack = originalPrepareStackTrace
        ? originalPrepareStackTrace(err, structuredStackTrace)
        : structuredStackTrace.map((callSite) => {
          return `    at ${callSite}`;
        }).join('\n');

      return this.mapTrace(stack);
    };
  }
}

const sourceMapSupport = new SourceMapSupport();

function install(options = {}) {
  const defaultOptions = {
    handleUncaughtExceptions: true,
    retrieveSourceMap: null,
    environment: 'auto',
    hookRequire: false
  };

  const finalOptions = Object.assign({}, defaultOptions, options);

  if (finalOptions.retrieveSourceMap) {
    sourceMapSupport.loadSourceMap = finalOptions.retrieveSourceMap;
  }

  sourceMapSupport.install();

  if (finalOptions.handleUncaughtExceptions) {
    process.on('uncaughtException', (err) => {
      console.error(err.stack);
      process.exit(1);
    });
  }
}

module.exports = {
  install,
  SourceMapSupport
};
```