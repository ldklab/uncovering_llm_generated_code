The `GraphQL.js` package is a JavaScript implementation of the GraphQL query language, initially developed by Facebook. This library is used for defining a GraphQL schema and executing queries on that schema. Here's a breakdown of its key functionalities:

1. **Installing the Package**: You can install `GraphQL.js` via npm or yarn to use it in your Node.js projects.

2. **Building a Type Schema**: The library allows you to build a GraphQL schema consisting of types and resolvers. A type schema is a structured definition that maps your application's data and functions to the GraphQL type system. In a simple example, a `GraphQLSchema` is created with one `GraphQLObjectType` having a field `hello` that resolves to a constant value `'world'`.

3. **Serving Queries**: With a defined type schema, you can serve queries. The `graphql` function is used to execute queries against the schema. It processes the query string, validates it, and then executes it against the defined schema, returning the results or errors in a promise.

4. **Handling Query Errors**: If a query includes fields not defined in the schema, the `graphql` function will return an error indicating which field is invalid and where.

5. **Production Considerations**: It's recommended to set `NODE_ENV=production` in production environments for performance enhancements by disabling some checks that are useful during development.

6. **Using in Different Environments**: GraphQL.js is versatile and can be used both in Node.js server environments and client-side JavaScript, such as that within a browser. It is compatible with module bundlers like webpack and rollup.

7. **Contributing and Development**: The repository welcomes contributions, and contributors need to sign an agreement due to the project being managed by EasyCLA. It also has experimental features for testing upcoming proposals in the GraphQL specification.

Below is a simple implementation of the functionality described:

```javascript
// Import necessary functions and types from the 'graphql' package
import {
  graphql,
  GraphQLSchema,
  GraphQLObjectType,
  GraphQLString,
} from 'graphql';

// Define a simple GraphQL type schema
const schema = new GraphQLSchema({
  // Define the Query type, which is the entry point for queries
  query: new GraphQLObjectType({
    name: 'RootQueryType',  // Naming the query type
    fields: {  // Define available fields for this query type
      hello: {
        type: GraphQLString,  // Specify that 'hello' returns a String
        resolve() {
          return 'world';  // Resolve function returns a constant value
        },
      },
    },
  }),
});

// Define a GraphQL query
const source = '{ hello }';  // Query string asking for 'hello' field

// Execute the query against the defined schema
graphql({ schema, source }).then((result) => {
  // Log the result { data: { hello: "world" } }
  console.log(result);
}).catch(error => console.error(error));

// Define a query that will cause an error
const errorSource = '{ BoyHowdy }';  // 'BoyHowdy' is not a defined field

// Execute the query that will produce an error
graphql({ schema, errorSource }).then((result) => {
  // Expect an error message about the invalid field
  console.log(result);
}).catch(error => console.error(error));
```

This code demonstrates how to use the GraphQL.js library to define a schema and query that schema, including handling potential errors if an undefined field is queried.