The Node.js code is a cryptographic utility module designed for performing various cryptographic operations using the native `crypto` library. It includes functionalities for:

1. Creating a SHA-256 hash of the input data.
2. Generating an HMAC using the SHA-512 algorithm.
3. Encoding and decoding data in Base64 format.
4. Encrypting and decrypting text using AES-256-CBC encryption.

The code includes a usage example that demonstrates how to create a hash digest and an HMAC digest, and how to encrypt and decrypt a message using a random secret key.

Hereâ€™s a possible rewrite of the code in a more organized manner:

```json
// package.json
{
  "name": "crypto-native-wrapper",
  "version": "1.0.0",
  "main": "index.js",
  "type": "module"
}
```

```javascript
// index.js
import { createHash, createHmac, randomBytes, createCipheriv, createDecipheriv } from 'crypto';

// Function to create a SHA-256 hash
export function sha256(data) {
  return createHash('sha256').update(data).digest('hex');
}

// Function to create an HMAC using SHA-512
export function hmacSHA512(data, key) {
  return createHmac('sha512', key).update(data).digest('hex');
}

// Function to encode data to Base64
export function base64Encode(data) {
  return Buffer.from(data).toString('base64');
}

// Function to decode data from Base64
export function base64Decode(data) {
  return Buffer.from(data, 'base64').toString('utf8');
}

// AES encryption setup
const algorithm = 'aes-256-cbc';

// Function to encrypt text using AES-256-CBC
export function encryptAES(text, secret) {
  const iv = randomBytes(16);
  const cipher = createCipheriv(algorithm, Buffer.from(secret, 'hex'), iv);
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  return iv.toString('hex') + ':' + encrypted;
}

// Function to decrypt text encrypted using AES-256-CBC
export function decryptAES(encryptedText, secret) {
  const textParts = encryptedText.split(':');
  const iv = Buffer.from(textParts.shift(), 'hex');
  const encryptedTextBuff = Buffer.from(textParts.join(':'), 'hex');
  const decipher = createDecipheriv(algorithm, Buffer.from(secret, 'hex'), iv);
  let decrypted = decipher.update(encryptedTextBuff, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  return decrypted;
}

// Usage example:
const message = 'Hello';
const nonce = '123';
const path = '/api/endpoint';
const privateKey = 'a1b2c3d4';

// SHA-256 hash computation
const hashDigest = sha256(nonce + message);
console.log('Hash Digest:', hashDigest);

// HMAC-SHA512 digest computation
const hmacDigest = base64Encode(hmacSHA512(path + hashDigest, privateKey));
console.log('HMAC Digest:', hmacDigest);

// AES-256-CBC encryption and decryption
const secretKey = randomBytes(32).toString('hex');
const encryptedMessage = encryptAES('my message', secretKey);
console.log('Encrypted Message:', encryptedMessage);

const decryptedMessage = decryptAES(encryptedMessage, secretKey);
console.log('Decrypted Message:', decryptedMessage);
```