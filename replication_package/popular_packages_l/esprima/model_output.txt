The Esprima package is a JavaScript library used to perform lexical analysis (tokenization) and syntactic analysis (parsing) of ECMAScript (JavaScript) programs. Below is a summary of its key functionalities:

1. **ECMAScript 2017 Support**: Esprima supports ECMAScript 2017, allowing it to parse JavaScript code conforming to the ECMAScript 8th Edition specification.

2. **Syntax Tree Format**: It generates a syntax tree in a format that is compatible with the ESTree specification, which standardizes the structure of the syntax tree for ECMAScript.

3. **JSX Support**: The library provides experimental support for JSX, which is a syntax extension used in React applications.

4. **Node Location Tracking**: It offers optional tracking of the syntax nodes' locations, which can include both index-based and line-column-based positions in the source code.

5. **Testing and Coverage**: Esprima has been heavily tested with around 1500 unit tests ensuring full coverage, making it reliable for parsing JavaScript code.

### API
The package provides an API through which users can tokenize or parse JavaScript code:
- **Tokenization**: Breaks down the input code into a series of tokens (e.g., keywords, identifiers, punctuators, etc.). For example, the input `const answer = 42;` becomes an array of tokens including type and value pairs.
- **Parsing**: Converts JavaScript code into an Abstract Syntax Tree (AST) that represents the structure of the code, showing elements like variable declarations and expressions.

Here is an example of how the Esprima package is used:
- The `tokenize` method returns an array of tokens for the provided JavaScript code.
- The `parseScript` method returns the AST for the provided code fragment.

Now, here is a basic implementation of the described functionality:

```javascript
// File: index.js
const TokenTypes = {
    Keyword: 'Keyword',
    Identifier: 'Identifier',
    Punctuator: 'Punctuator',
    Numeric: 'Numeric'
};

class Esprima {
    // Simple tokenizer for demonstration purposes
    tokenize(program) {
        let tokens = [];
        const tokenRegExp = /\s*(=>|const|var|{|}|\=|\d+|[A-Za-z_]\w*)\s*/g; // Simplified

        program.replace(tokenRegExp, (match, token) => {
            let type;
            if (/const|var/.test(token)) type = TokenTypes.Keyword;
            else if (/=/.test(token)) type = TokenTypes.Punctuator;
            else if (/\d+/.test(token)) type = TokenTypes.Numeric;
            else type = TokenTypes.Identifier;

            tokens.push({ type, value: token });
        });

        return tokens;
    }

    // Simple parser for demonstration purposes
    parseScript(program) {
        let tokens = this.tokenize(program);
        let body = [];
        let tokenIndex = 0;

        function parseVariableDeclaration() {
            const token = tokens[tokenIndex++];
            if (token.type === TokenTypes.Keyword && token.value === 'const') {
                const idToken = tokens[tokenIndex++];
                const eqToken = tokens[tokenIndex++];
                const numToken = tokens[tokenIndex++];
                
                if (idToken.type === TokenTypes.Identifier && 
                    eqToken.value === '=' && 
                    numToken.type === TokenTypes.Numeric) {
                    return {
                        type: 'VariableDeclaration',
                        declarations: [
                            {
                                type: 'VariableDeclarator',
                                id: { type: 'Identifier', name: idToken.value },
                                init: { type: 'Literal', value: Number(numToken.value) }
                            }
                        ],
                        kind: 'const'
                    };
                }
            }
            throw new Error('Unexpected token');
        }

        while (tokenIndex < tokens.length) {
            body.push(parseVariableDeclaration());
        }

        return {
            type: 'Program',
            body: body,
            sourceType: 'script'
        };
    }
}

// Exporting the class for usage
module.exports = Esprima;

// Usage Example
if (require.main === module) {
    const esprima = new Esprima();
    const program = 'const answer = 42';
    console.log(esprima.tokenize(program));
    console.log(esprima.parseScript(program));
}
```

This is a basic implementation, focusing on a simple case for demonstration purposes. A real-world implementation would require more comprehensive handling of ECMAScript syntax and features.