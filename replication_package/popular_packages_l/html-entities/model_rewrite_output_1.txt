The provided Node.js code defines a set of functions to encode and decode HTML entities in a string. Here's a breakdown of its functionality:

1. **Character Maps**:
   - `htmlCharacterMap`: Maps special characters to their corresponding HTML entity representations (e.g., `&` to `&amp;`).
   - `reverseHtmlCharacterMap`: Automatically generated map that reverses the `htmlCharacterMap`, making it easy to decode entities back to their original characters.

2. **Encoding Function (`encode`)**:
   - Takes a string and an options object.
   - Encodes special characters (`<`, `>`, `&`, `"`, `'`) to their HTML entities based on the specified encoding `mode`. Currently, it only supports the `specialChars` mode.
   - Returns the encoded string.

3. **Decoding Function (`decode`)**:
   - Takes a string and an options object.
   - Decodes HTML entities back to their original characters using a regular expression that matches entity patterns like `&...;`.
   - Returns the decoded string.

4. **Single Entity Decoder (`decodeEntity`)**:
   - Takes a single HTML entity and an options object.
   - Decodes the entity back to its original character using the `reverseHtmlCharacterMap`.
   - Returns the character or returns the entity unchanged if a match isn't found.

The code also uses default options for handling the encoding and decoding processes.

Here's the rewritten code:

```javascript
// Character maps for HTML encoding and decoding
const htmlCharacterMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&apos;',
};

const reverseHtmlCharacterMap = Object.fromEntries(
  Object.entries(htmlCharacterMap).map(([key, value]) => [value, key])
);

// Function to encode special HTML characters in a string
function encode(text, options = {}) {
  const { mode = 'specialChars' } = options;
  const entityMap = mode === 'specialChars' ? htmlCharacterMap : {};
  return text.replace(/[<>&"']/g, (char) => entityMap[char] || char);
}

// Function to decode HTML entities in a string
function decode(text, options = {}) {
  const entityMap = reverseHtmlCharacterMap;
  return text.replace(/&[^;\s]*;?/g, (entity) => entityMap[entity] || entity);
}

// Function to decode a single HTML entity
function decodeEntity(entity, options = {}) {
  return reverseHtmlCharacterMap[entity] || entity;
}

export { encode, decode, decodeEntity };
```