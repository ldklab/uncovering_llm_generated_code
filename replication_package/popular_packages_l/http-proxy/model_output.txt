The `node-http-proxy` package is a flexible, programmable HTTP proxy library for Node.js that also supports WebSockets. It's useful for creating reverse proxies and load balancers. The package provides the ability to create a proxy server that can forward HTTP and HTTPS requests to a target server. It allows developers to apply custom logic for handling requests, modify outgoing requests' headers, and alter incoming responses. Key functionalities include the ability to handle WebSocket connections, rewrite request headers, use different protocols (HTTP/HTTPS/WSS), and manage errors. The proxy can be easily configured and extended using APIs to listen for various events like `error`, `proxyReq`, and `proxyRes`, and also includes options for SSL handling, timeouts, and more.

Here's a basic implementation of a proxy server using `node-http-proxy`.

```javascript
const http = require('http');
const httpProxy = require('http-proxy');

// Create a proxy server with various options
const proxy = httpProxy.createProxyServer({
  target: 'http://localhost:9000',  // target host to proxy to
  ws: true,  // enable websocket proxying
  changeOrigin: true,  // changes the origin of the host header to the target URL
  xfwd: true  // adds x-forward headers
});

// Listen to the `error` event on `proxy`.
proxy.on('error', (err, req, res) => {
  console.error('Proxy encountered an error:', err);
  res.writeHead(500, {
    'Content-Type': 'text/plain'
  });
  res.end('Something went wrong. Proxy error.');
});

// Optionally modify the proxy request before sending it.
proxy.on('proxyReq', (proxyReq, req, res, options) => {
  proxyReq.setHeader('X-Special-Proxy-Header', 'foobar');
});

// Create a server that proxies your HTTP request
const server = http.createServer((req, res) => {
  proxy.web(req, res, { target: 'http://localhost:9000' });
});

// Listen for the `upgrade` event on `server` and proxy WebSocket requests
server.on('upgrade', (req, socket, head) => {
  proxy.ws(req, socket, head);
});

// Start the server on port 8000
server.listen(8000, () => {
  console.log('Proxy server is listening on http://localhost:8000');
});

// Create your target server
http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.write('Request successfully proxied!' + '\n' + JSON.stringify(req.headers, true, 2));
  res.end();
}).listen(9000, () => {
  console.log('Target server is listening on http://localhost:9000');
});
```

This implementation sets up a basic proxy server that listens on port 8000 and forwards requests to a target server running on port 9000. The proxy server can handle WebSocket connections and demonstrates basic error handling and header modification using events provided by `node-http-proxy`. The setup also includes a target server for testing the proxy server's capabilities.