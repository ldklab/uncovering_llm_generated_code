The `es-to-primitive` package implements the ECMAScript `ToPrimitive` abstract operation. This operation is used to convert objects to primitive values, such as a string, number, or symbol, using a specific algorithm defined in ECMAScript specifications.

### Key Functionalities:

1. **Different Versions**:
    - The package provides implementation for ES5 and ES2015 (ES6) versions of `ToPrimitive`.
    - The default export corresponds to the latest version of the abstract operation, while specific versions can be accessed through `es5` and `es2015` properties.

2. **Conversion Logic**:
    - For objects, it tries to convert them to a primitive value by calling preferable object methods like `valueOf` or `toString`.
    - For arrays, dates, functions, and symbols, it returns appropriate string representations or values by calling the corresponding methods.
    - If an object is wrapped around a symbol (e.g., `Object(Symbol())`), it extracts the symbol.

3. **Usage Example**:
    - The package is used to convert various data types and assert their primitive conversions using the `assert` module.

### Implementation:

```js
'use strict';

function toPrimitive(input, preferredType) {
    if (typeof input !== 'object' || input === null) {
        return input; // Primitive values are returned as-is.
    }
    var methodNames = preferredType === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
    for (var i = 0; i < methodNames.length; i++) {
        var method = input[methodNames[i]];
        if (typeof method === 'function') {
            var result = method.call(input);
            if (typeof result !== 'object' || result === null) {
                return result;
            }
        }
    }
    throw new TypeError("Cannot convert object to primitive value");
}

function toPrimitiveES5(input) {
    return toPrimitive(input); // ES5 primarily uses the same logic.
}

function toPrimitiveES2015(input) {
    return toPrimitive(input); // ES2015 uses the same logic but may have additional types.
}

module.exports = toPrimitiveES2015; // Default export is the latest version.
module.exports.es5 = toPrimitiveES5;
module.exports.es2015 = toPrimitiveES2015;

// Example Usage
if (require.main === module) {
    const assert = require('assert');

    assert(toPrimitive(function () {}) === String(function () {}));
    
    const date = new Date();
    assert(toPrimitive(date) === String(date));
    
    assert(toPrimitive({ valueOf: function () { return 3; } }) === 3);
    
    assert(toPrimitive(['a', 'b', 3]) === String(['a', 'b', 3]));
    
    const sym = Symbol();
    assert(toPrimitive(Object(sym)) === sym);
}
```

In this implementation, the package exports the `toPrimitiveES2015` function by default and provides `es5` and `es2015` specific versions as properties. The code uses utility logic to convert objects to primitive values following ECMAScript specifications.