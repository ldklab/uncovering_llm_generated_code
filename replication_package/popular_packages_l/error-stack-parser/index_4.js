// error-stack-parser.js

class StackFrame {
    constructor({ functionName, fileName, lineNumber, columnNumber, isNative = false, isEval = false, isConstructor = false, args = [] }) {
        // Initialize the StackFrame object with properties related to a call stack frame
        this.functionName = functionName;
        this.fileName = fileName;
        this.lineNumber = lineNumber;
        this.columnNumber = columnNumber;
        this.isNative = isNative;
        this.isEval = isEval;
        this.isConstructor = isConstructor;
        this.args = args;
    }
}

class ErrorStackParser {
    static parse(error) {
        // Ensure the provided error object has a stack property
        if (!error || typeof error.stack !== 'string') {
            throw new Error('Given error must have a stack');
        }

        // Break down the stack string into individual lines and process each line
        return error.stack.split('\n').map(line => {
            // Attempt to extract function name, file name, line number, and column number using regex
            const matchedData = line.match(/at (\S+) \((.*):(\d+):(\d+)\)/) || line.match(/at (.*):(\d+):(\d+)/);
            
            // If the line doesn't match either regex format, return null
            if (!matchedData) return null;

            // Extract matched elements and assign defaults for non-capturing groups
            const [_, functionName = 'unknown', fileName, lineNumber, columnNumber] = matchedData;

            // Create and return a new StackFrame object with extracted information
            return new StackFrame({
                functionName,
                fileName,
                lineNumber: parseInt(lineNumber, 10),
                columnNumber: parseInt(columnNumber, 10),
                isNative: line.includes('[native code]'),
                isEval: line.includes('eval'),
            });
        }).filter(frame => frame); // Filter out any null frames generated by unmatched lines
    }
}

// Export the StackFrame and ErrorStackParser classes for use in other modules
module.exports = { StackFrame, ErrorStackParser };
