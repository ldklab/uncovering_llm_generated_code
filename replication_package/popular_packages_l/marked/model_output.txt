The `Marked` package is a fast and lightweight markdown parser and compiler for Node.js and web browsers. It transpires markdown text into HTML format, providing flexibility for various use cases such as working on the server side, integrating with client-side applications, or running directly from the command line interface (CLI).

### Key Features:
- **Performance:** It is optimized for speed, ensuring fast parsing without lengthy blocking operations.
- **Compatibility:** Works with all current and Long-Term Support (LTS) versions of Node.js, and is capable of running in modern browsers. Does not support IE11.
- **Flexibility:** It is a low-level compiler, meaning it does not cache data and processes inputs promptly.
- **Comprehensive Markdown Support:** Implements a complete set of markdown features according to supported standards and specifications.
  
### Installation Options:
1. **CLI:** Can be installed globally via npm for command-line usage.
   ```sh
   npm install -g marked
   ```
2. **In-Browser:** Can be installed as a package for in-browser usage.
   ```sh
   npm install marked
   ```

### Usage Examples:
- **Warning:** The package does not sanitize HTML output, so it is recommended to use a sanitization library like DOMPurify to prevent XSS and other vulnerabilities.
    ```js
    DOMPurify.sanitize(marked.parse(`<img src="x" onerror="alert('not happening')">`));
    ```
  
- **CLI Example:**
    ```bash
    $ marked -o hello.html
    hello world
    ^D
    $ cat hello.html
    <p>hello world</p>
    ```

- **Browser Usage:**
    ```html
    <!doctype html>
    <html>
    <head>
      <meta charset="utf-8"/>
      <title>Marked in the browser</title>
    </head>
    <body>
      <div id="content"></div>
      <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
      <script>
        document.getElementById('content').innerHTML =
          marked.parse('# Marked in the browser\n\nRendered by **marked**.');
      </script>
    </body>
    </html>
    ```
    Or using ES module:
    ```html
    <script type="module">
      import { marked } from "https://cdn.jsdelivr.net/npm/marked/lib/marked.esm.js";
      document.getElementById('content').innerHTML =
        marked.parse('# Marked in the browser\n\nRendered by **marked**.');
    </script>
    ```

Marked is licensed under the MIT License, with contributions primarily made by Christopher Jeffrey and others since 2011.

```javascript
// index.js

// This package is a simple Node.js application leveraging marked to parse markdown to HTML.

const marked = require('marked');
const fs = require('fs');
const path = require('path');
const DOMPurify = require('dompurify'); // For demonstration, assumes server-side DOMPurify usage
const { JSDOM } = require('jsdom');

// Function to parse markdown file content
function parseMarkdownFile(filePath) {
  // Read markdown from a file
  fs.readFile(filePath, { encoding: 'utf8' }, (err, data) => {
    if (err) {
      console.error('Error reading markdown file:', err);
      return;
    }

    // Parse markdown to HTML
    let htmlOutput = marked.parse(data);

    // Create a DOM environment to use DOMPurify
    const window = new JSDOM('').window;
    const sanitize = DOMPurify(window);

    // Sanitize the HTML output
    const cleanHTML = sanitize.sanitize(htmlOutput);
    console.log('Sanitized HTML Output:', cleanHTML);

    // Optionally, write the HTML output to a file
    const outputFilePath = path.join(__dirname, 'output.html');
    fs.writeFile(outputFilePath, cleanHTML, (err) => {
      if (err) {
        console.error('Error writing HTML file:', err);
      } else {
        console.log('HTML file written successfully:', outputFilePath);
      }
    });
  });
}

// Command line interface to process files
const args = process.argv.slice(2);
if (args.length > 0) {
  parseMarkdownFile(args[0]);
} else {
  console.error('Usage: node index.js <markdown-file-path>');
}

// CLI usage: node index.js example.md
// Will parse the example.md file and output sanitized HTML into output.html
```