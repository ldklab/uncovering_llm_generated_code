The provided Node.js code defines a utility for JSON schema validation using the `ajv` library. Here's a breakdown of its functionality:

1. **Validation Initialization**: 
    - An instance of `Ajv` is created for schema validation.
    - A boolean flag `validationDisabled` is initialized to manage if validations should be skipped.

2. **validate Function**:
    - This function validates an input `options` object against a provided JSON `schema`.
    - It supports an optional `configuration` argument to customize the error reporting.
    - If validation is disabled (via `validationDisabled`), the function immediately returns.
    - Errors are thrown if the `options` do not comply with the schema, formatting them with optional custom formatting (`postFormatter`).

3. **Validation Control Functions**:
    - `disableValidation()` and `enableValidation()` switch the `validationDisabled` flag on and off, respectively.
    - `needValidate()` returns the current validation state (inverted `validationDisabled`).

4. **Environment Variable Check**:
    - Automatic check of the environment variable `SKIP_VALIDATION`.
    - If set to a truthy value (e.g., "yes", "true"), validation is disabled.

Here's a possible rewrite of the Node.js code with the same functionality:

```javascript
// schema-utils.js
import Ajv from 'ajv';

const ajv = new Ajv();
let validationDisabled = false;

export function validate(schema, options, configuration = {}) {
  if (validationDisabled) return;

  const {
    name = "Object",
    baseDataPath = "configuration",
    postFormatter = (formattedError, error) => formattedError
  } = configuration;

  const validator = ajv.compile(schema);
  const isValid = validator(options);

  if (!isValid) {
    let errorMessage = `Invalid ${baseDataPath} object. ${name} has been initialized using a ${baseDataPath} object that does not match the API schema.\n`;
    errorMessage += validator.errors.map(error => ` - ${baseDataPath}${error.dataPath} ${error.message}`).join("\n");

    validator.errors.forEach(error => {
      errorMessage = postFormatter(errorMessage, error);
    });

    throw new Error(errorMessage);
  }
}

export function disableValidation() {
  validationDisabled = true;
}

export function enableValidation() {
  validationDisabled = false;
}

export function needValidate() {
  return !validationDisabled;
}

// Handle automatic validation disable based on environment variable
const SHOULD_SKIP_VALIDATION = ["yes", "y", "true", "1", "on"];
const skipValidationFlag = process.env.SKIP_VALIDATION || "";
if (SHOULD_SKIP_VALIDATION.includes(skipValidationFlag.toLowerCase())) {
  disableValidation();
}
```