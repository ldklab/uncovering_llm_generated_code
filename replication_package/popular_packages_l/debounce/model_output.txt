The `debounce` Node.js package provides a utility function to delay the execution of a given function until a specified amount of time has passed since its last invocation. This is particularly useful for events that fire frequently, such as resizing a window or key presses, where you only want to execute the function after the event has finished firing.

Key features include:

- **Debounce a function call:** It delays the function execution until the specified `wait` milliseconds have passed since the last time the debounced function was called.
- **Immediate Execution Option:** By setting the `immediate` option to `true`, the function can be executed at the beginning of the delay interval, which can be beneficial for actions like preventing double-clicks.
- **Control Methods:**
  - **`.clear()`**: Cancels any pending execution, ensuring the function will not be invoked.
  - **`.flush()`**: Executes the function immediately only if there are pending executions and resets the timer.
  - **`.trigger()`**: Executes the function immediately and resets the timer, unlike `flush`, it does not require pending executions.

Below is an implementation of the described `debounce` functionality:

```javascript
// debounce.js

function debounce(fn, wait, options = {}) {
    let timeout, result;
    const immediate = options.immediate;

    function debounced(...args) {
        if (timeout) {
            clearTimeout(timeout);
        }

        if (immediate && !timeout) {
            result = fn.apply(this, args);
        } else {
            timeout = setTimeout(() => {
                result = fn.apply(this, args);
                timeout = null;
            }, wait);
        }

        return result;
    }

    debounced.clear = function () {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
    };

    debounced.flush = function () {
        if (timeout) {
            clearTimeout(timeout);
            result = fn.apply(this);
            timeout = null;
        }
    };

    debounced.trigger = function () {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        result = fn.apply(this);
    };

    return debounced;
}

export default debounce;

// index.js (Usage Example)

import debounce from './debounce.js';

function resize() {
    console.log('height', window.innerHeight);
    console.log('width', window.innerWidth);
}

window.onresize = debounce(resize, 200);

// To clear the scheduled execution
// window.onresize.clear();

// To flush the scheduled execution
// window.onresize.flush();

// To trigger and reset the timer
// window.onresize.trigger();
```

This code defines a `debounce` function that takes a function `fn`, a wait time `wait`, and an optional configuration object `options`. It returns a debounced function enriched with methods `clear`, `flush`, and `trigger` for additional control over the scheduling. The `debounce` implementation ensures that the provided `fn` is executed according to the debounce logic, helping to optimize performance and prevent excessive event handling.