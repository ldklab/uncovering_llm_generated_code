```javascript
// debounce.js

function debounce(fn, wait, options = {}) {
    let timeout, result;
    const immediate = options.immediate;

    function debounced(...args) {
        if (timeout) {
            clearTimeout(timeout);
        }

        if (immediate && !timeout) {
            result = fn.apply(this, args);
        } else {
            timeout = setTimeout(() => {
                result = fn.apply(this, args);
                timeout = null;
            }, wait);
        }

        return result;
    }

    debounced.clear = function () {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
    };

    debounced.flush = function () {
        if (timeout) {
            clearTimeout(timeout);
            result = fn.apply(this);
            timeout = null;
        }
    };

    debounced.trigger = function () {
        if (timeout) {
            clearTimeout(timeout);
            timeout = null;
        }
        result = fn.apply(this);
    };

    return debounced;
}

export default debounce;

// index.js (Usage Example)

import debounce from './debounce.js';

function resize() {
    console.log('height', window.innerHeight);
    console.log('width', window.innerWidth);
}

window.onresize = debounce(resize, 200);

// To clear the scheduled execution
// window.onresize.clear();

// To flush the scheduled execution
// window.onresize.flush();

// To trigger and reset the timer
// window.onresize.trigger();
```