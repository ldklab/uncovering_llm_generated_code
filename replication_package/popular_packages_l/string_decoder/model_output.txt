The `string_decoder` package replicates the `string_decoder` module found in Node.js core, particularly from version v8.9.4. It provides the functionality needed to accurately convert `Buffer` objects into strings, taking into account any partial multi-byte sequences in UTF-8, UTF-16, or Base64 encoded text, and is intended for use in userland (non-core, user-installed Node.js environments).

### Features and Use-Cases

1. **Buffer to String Conversion**: The primary use of this module is to handle conversion of `Buffer` contents into strings, similar to calling `Buffer.toString()`. It deals with character encodings such as UTF-8, UTF-16, and Base64.

2. **Handles Incomplete Characters**: When dealing with streams of data (such as streaming from a network socket), a buffer might not contain complete characters at the end. The `string_decoder` takes care of these partial characters, waiting until the next buffer arrives to complete the character.

3. **Semantic Versioning**: Starting from version 1.0.0, the project adheres to semantic versioning.

4. **Integration with Node Versions**: The package version aligns with respective Node.js versions ensuring compatibility and consistent feature sets. 

5. **Maintenance by Streams Working Group**: This project is maintained by the Streams Working Group, which handles stream-related features of Node.js including documentation, issue resolution, and future enhancements of the streaming API.

6. **Code Updates via Build Scripts**: The package contains scripts to update the code by pulling directly from the official Node.js repository to ensure it remains in sync with Node.js core developments.

Below is the code for a simple implementation of the `string_decoder` Node.js package:

```javascript
// string_decoder/index.js
'use strict';

const { StringDecoder } = require('string_decoder');

// StringDecoder implementation
function createStringDecoder(encoding = 'utf8') {
  return new StringDecoder(encoding);
}

// Example usage
const utf8Decoder = createStringDecoder('utf8');
const buffer = Buffer.from([0xe2, 0x82, 0xac]); // Partial euro sign character
const incompleteString = utf8Decoder.write(buffer.slice(0, 2));
const completeString = utf8Decoder.end(buffer.slice(2));

console.log('Incomplete:', incompleteString); // Incomplete: ''
console.log('Complete:', completeString); // Complete: 'â‚¬'

// Exported module functions
module.exports = {
  createStringDecoder
};
```

### Usage
You can use the `createStringDecoder` function to instantiate a decoder with the desired encoding (default is `utf8`), and then use the decoder's `write` and `end` methods to process buffers and obtain complete strings even if the data was incomplete at first. This utility is particularly helpful for applications dealing with raw data streams where characters might be split across buffers, ensuring the conversion to strings handles all character boundary issues correctly.