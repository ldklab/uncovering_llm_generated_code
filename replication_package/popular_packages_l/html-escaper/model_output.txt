The `html-escaper` package provides utilities to escape and unescape HTML entities in strings, ensuring the process is safe and doesn't inadvertently create security issues such as cross-site scripting (XSS). 

### Functionality

1. **Escape Function**: 
   - Takes a string with potentially dangerous characters (e.g., `<`, `>`, `&`, `'`, `"`) and converts them to their HTML-encoded equivalents (e.g., `&lt;`, `&gt;`, `&amp;`, `&#39;`, `&quot;`). 

2. **Unescape Function**: 
   - Transforms an HTML-encoded string back into the original string by converting HTML entities back to characters (e.g., `&lt;` back to `<`, etc.).

The package emphasizes capturing all relevant characters in a string in one go, rather than performing character-by-character replacements, which could lead to errors and vulnerabilities, as illustrated by the examples in the README.

### Implementation

Here's the code for the `html-escaper` package:

```markdown
// html-escaper.js
const escapeMap = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  "'": '&#39;',
  '"': '&quot;'
};

const unescapeMap = {
  '&amp;': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&#39;': "'",
  '&quot;': '"'
};

const escaper = /[&<>'"]/g;
const unescaper = /&(amp|lt|gt|#39|quot);/g;

function escape(str) {
  return str.replace(escaper, match => escapeMap[match]);
}

function unescape(str) {
  return str.replace(unescaper, match => unescapeMap[match]);
}

export { escape, unescape };
```

### Usage

To use this module, you can import the `escape` and `unescape` functions in your project as follows:

```js
import { escape, unescape } from './html-escaper.js';

const dangerousString = '<script>alert("danger")</script>';
const escapedString = escape(dangerousString);
console.log(escapedString); // &lt;script&gt;alert(&quot;danger&quot;)&lt;/script&gt;

const originalString = unescape(escapedString);
console.log(originalString); // <script>alert("danger")</script>
```

This implementation ensures a secure and effective way to handle HTML escaping and unescaping, preventing potential security vulnerabilities.