The ws library for Node.js provides a straightforward, high-performance WebSocket implementation for both client and server. It supports the WebSocket protocol's HyBi drafts 07-12 and 13-17. Here is a breakdown of its key features and examples of usage:

1. **Installation**: You can install the package using `npm install ws`. To improve performance, you can optionally install `bufferutil` which speeds up operations related to data frame encoding/decoding.

2. **WebSocket Compression**: The library supports the `permessage-deflate` extension for compression, though itâ€™s disabled by default server-side and enabled client-side due to added performance overhead and potential memory issues.
   
3. **Usage**:
   - **Creating WebSocket Clients**: Create a client instance to connect and communicate with a WebSocket server.
   - **Creating WebSocket Servers**: Instantiate a WebSocket server to listen for incoming connections and messages.
   - **Handling Errors**: Attach error listeners to both server and client for error management.
   - **Broadcasting Messages**: Servers can broadcast messages to all or specific connected clients.

4. **Examples**:
   - Text and binary data can be sent and received.
   - Servers can integrate with an external HTTP/S server.
   - Clients can authenticate before a full handshake.
   - Handling multiple WebSocket paths with a single HTTP/S server.
   - Implement round-trip time measurement using message timestamps.
   - Include Node.js streams API for further interaction.

5. **Managing Connections**: Use heartbeat or ping/pong frames to check client/server connection health and automatically close unresponsive connections.

6. **Bridge Proxy Connections**: When connecting via a proxy, you can customize agent settings using external packages like `https-proxy-agent` or `socks-proxy-agent`.

Below is a simple implementation illustrating basic server and client setup using the `ws` library:

```js
// ws-server.js
const { WebSocketServer } = require('ws');

// Create a WebSocket server on port 8080
const wss = new WebSocketServer({ port: 8080 });

// Listen for connection events
wss.on('connection', (ws) => {
  ws.on('error', console.error);
  
  // Respond to received messages
  ws.on('message', (message) => {
    console.log('Received:', message);
    // Echo the message back to the client
    ws.send(`Echo: ${message}`);
  });

  // Send a message to the client upon connection
  ws.send('Hello! Message From Server!!');
});

console.log('WebSocket server is listening on ws://localhost:8080');

// ws-client.js
const WebSocket = require('ws');

// Connect to the WebSocket server
const ws = new WebSocket('ws://localhost:8080');

// Handle possible connection errors
ws.on('error', console.error);

// Once connection is open, send a message to the server
ws.on('open', () => {
  console.log('Connected to server');
  ws.send('Hello, Server!');
});

// Listen for messages from the server
ws.on('message', (message) => {
  console.log('Server says:', message);
});

// Handle connection close events
ws.on('close', () => {
  console.log('Disconnected from server');
});
```

This example shows a simple WebSocket server that echoes messages back to any connected client and a client that sends a message to the server upon connecting and logs messages received from the server.