The Node.js code provided consists of two separate scripts: one for a WebSocket server (`ws-server.js`) and another for a WebSocket client (`ws-client.js`). 

The server script performs the following actions:
- Creates a WebSocket server that listens on port 8080.
- Waits for client connections and, upon connection, sends an initial welcome message to the client.
- Listens for any messages from the connected client, logs them to the console, and then echoes the message back to the client prefixed with the string `Echo: `.
- Logs any errors that occur during the connection.

The client script:
- Connects to the WebSocket server running on `ws://localhost:8080`.
- Sends an initial message `Hello, Server!` to the server once the connection is established.
- Listens for messages from the server and logs them to the console.
- Handles and logs any errors that might occur during the connection.
- Logs a message when the connection to the server is closed.

Below is the rewritten code incorporating the same functionality:

```javascript
// ws-server.js
const { WebSocketServer } = require('ws');

const wss = new WebSocketServer({ port: 8080 });

wss.on('connection', (ws) => {
  ws.on('error', console.error);

  ws.on('message', (message) => {
    console.log('Received:', message);
    ws.send(`Echo: ${message}`);
  });

  ws.send('Hello! Message From Server!!');
});

console.log('WebSocket server is listening on ws://localhost:8080');

// ws-client.js
const WebSocket = require('ws');

const ws = new WebSocket('ws://localhost:8080');

ws.on('error', console.error);

ws.on('open', () => {
  console.log('Connected to server');
  ws.send('Hello, Server!');
});

ws.on('message', (message) => {
  console.log('Server says:', message);
});

ws.on('close', () => {
  console.log('Disconnected from server');
});
```