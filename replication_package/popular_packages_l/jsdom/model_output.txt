The jsdom package for Node.js is a JavaScript implementation of various web standards, primarily adhering to the WHATWG DOM and HTML specifications. Its objective is to mimic a web browser environment sufficiently to enable developers to test and scrape web applications outside of an actual browser, particularly in a Node.js context. The package is notably used by creating instances of the `JSDOM` class, which emulates a browser-like environment for HTML strings.

Key features and usage include:

1. **Basic Usage:** You create a new `JSDOM` instance by passing an HTML string. This instance provides properties like `window`, which you can use to interact with the DOM as if you were in a web browser.

2. **Customizing JSDOM:** You can pass configuration options such as `url` for the document, `referrer`, `contentType`, `includeNodeLocations` for debugging, and `storageQuota` which sets limits on `localStorage` and `sessionStorage`.

3. **Executing Scripts:** While scripts in the HTML are not executed by default to maintain security, developers can choose to enable this behavior using the `runScripts` option. Caution is advised when enabling script execution with untrusted content.

4. **Pretending to be Visual:** Although jsdom doesn't perform actual rendering, it can be configured to behave as if it is a visual browser which can impact the result of APIs such as `document.hidden`.

5. **Loading Subresources:** You can control the loading of frames, scripts, stylesheets, and images just like a real browser might, using the `resources` option.

6. **Virtual Consoles and Cookie Jars:** jsdom can mimic a browser console and supports cookie management for documents, allowing you to handle and inspect console outputs and cookies.

7. **Additional Features:** Includes methods for serializing the HTML, locating nodes in the source document, and interfacing with Node.js's VM module. Convenience APIs allow loading from URLs or files, and jsdom provides the `fragment` utility for simpler HTML parsing tasks.

8. **Caveats:** It doesn't handle certain browser-specific features like visual rendering or navigation, among others. There are workarounds and community discussions for these limitations.

Below is a simple implementation illustrating the basic creation and customization of a `JSDOM` instance in a Node.js package:

```js
// index.js
const jsdom = require("jsdom");
const { JSDOM } = jsdom;

// Basic usage example
const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`);
console.log(dom.window.document.querySelector("p").textContent); // "Hello world"

// Customizing jsdom
const customizedDom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {
  url: "https://example.org/",
  referrer: "https://example.com/",
  contentType: "text/html",
  includeNodeLocations: true,
  storageQuota: 10000000
});

console.log(customizedDom.window.location.href); // "https://example.org/"
console.log(customizedDom.window.document.referrer); // "https://example.com/"

// Script execution example with "dangerously"
const scriptedDom = new JSDOM(`<body>
  <div id="content"></div>
  <script>document.getElementById("content").append(document.createElement("hr"));</script>
</body>`, { runScripts: "dangerously" });

console.log(scriptedDom.window.document.getElementById("content").children.length); // 1

// Pretending to be a visual browser
const visualDom = new JSDOM(``, { pretendToBeVisual: true });
visualDom.window.requestAnimationFrame(timestamp => {
  console.log(timestamp > 0); // true
});

// Example for subresource loading with custom resource loader
const resourceLoader = new jsdom.ResourceLoader({
  proxy: "http://127.0.0.1:9001",
  strictSSL: false,
  userAgent: "Mozilla/5.0"
});

const resourceDom = new JSDOM(`<!DOCTYPE html><img src="foo.jpg">`, { resources: resourceLoader });
console.log(resourceDom.window.document.querySelector("img").src);
```

This code provides examples of initializing a basic JSDOM object, customizing it, running scripts on it, pretending it is a visual browser, and fetching subresources with specific configurations.