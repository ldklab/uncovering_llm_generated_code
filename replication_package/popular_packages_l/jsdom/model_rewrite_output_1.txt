The given Node.js code demonstrates various functionalities of the `jsdom` library, which is used to simulate a browser environment in a Node.js application. The code shows multiple use cases:

1. **Basic Example**: Creates a simple DOM with a paragraph element and logs its text content.
2. **Customization**: Creates a DOM with specific customization options such as a set URL, referrer, content type, node locations, and storage quota.
3. **Script Execution**: Demonstrates how to execute scripts within the DOM using the "dangerously" option, which allows JavaScript execution within the DOM.
4. **Visual Browser Simulation**: Simulates a browser with `pretendToBeVisual` to support visual operations and logs the result of a requestAnimationFrame call.
5. **Resource Loading Simulation**: Sets up a custom resource loader with proxy settings and other options to simulate the loading of subresources like images.

Here's a possible rewrite of the code incorporating the same functionality:

```javascript
// index.js
const jsdom = require("jsdom");
const { JSDOM } = jsdom;

// Basic usage example
const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`);
console.log(dom.window.document.querySelector("p").textContent); // Outputs: "Hello world"

// Customizing jsdom
const customizedDom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {
  url: "https://example.org/",
  referrer: "https://example.com/",
  contentType: "text/html",
  includeNodeLocations: true,
  storageQuota: 10000000
});

console.log(customizedDom.window.location.href); // Outputs: "https://example.org/"
console.log(customizedDom.window.document.referrer); // Outputs: "https://example.com/"

// Script execution example with "dangerously"
const scriptedDom = new JSDOM(`<body>
  <div id="content"></div>
  <script>document.getElementById("content").append(document.createElement("hr"));</script>
</body>`, { runScripts: "dangerously" });

console.log(scriptedDom.window.document.getElementById("content").children.length); // Outputs: 1

// Pretending to be a visual browser
const visualDom = new JSDOM(``, { pretendToBeVisual: true });
visualDom.window.requestAnimationFrame(timestamp => {
  console.log(timestamp > 0); // Outputs: true
});

// Example for subresource loading with custom resource loader
const resourceLoader = new jsdom.ResourceLoader({
  proxy: "http://127.0.0.1:9001",
  strictSSL: false,
  userAgent: "Mozilla/5.0"
});

const resourceDom = new JSDOM(`<!DOCTYPE html><img src="foo.jpg">`, { resources: resourceLoader });
console.log(resourceDom.window.document.querySelector("img").src); // Outputs: the resolved src attribute of the image
```