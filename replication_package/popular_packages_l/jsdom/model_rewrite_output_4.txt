The Node.js code uses the `jsdom` library to create and manipulate an in-memory DOM, similar to how a web browser processes and handles HTML documents. Here's a breakdown of what the code does:

1. **Basic Usage**: It creates a simple DOM with an HTML paragraph containing "Hello world" and logs the text content of the paragraph to the console.

2. **Customizing jsdom**: It demonstrates how to create a customized DOM, where you can specify options like the URL, referrer, content type, the inclusion of node locations for debugging, and a storage quota for the browser-like environment. It logs the URL and referrer to show the specified properties are applied.

3. **Script Execution**: It shows how you can create a DOM that executes scripts inline using the `"dangerously"` option. The script adds a horizontal rule (`<hr>`) inside a `<div>`, and the length of the children of the `<div>` is logged to confirm the script execution.

4. **Pretending to Be a Visual Browser**: This example enables the `pretendToBeVisual` mode, which simulates a visual rendering environment. It uses `requestAnimationFrame` to demonstrate this feature, logging a timestamp to confirm that the environment behaves like a visual browser.

5. **Subresource Loading**: Illustrates setting up a custom resource loader with the ability to specify options like a proxy server, SSL settings, and user agent. It logs the source of an image to demonstrate the loader's configuration.

Here is the rewritten code organized in one markdown block:

```javascript
const jsdom = require("jsdom");
const { JSDOM, ResourceLoader } = jsdom;

// Basic usage example
const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`);
console.log(dom.window.document.querySelector("p").textContent); // "Hello world"

// Customizing jsdom
const customizedDom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`, {
  url: "https://example.org/",
  referrer: "https://example.com/",
  contentType: "text/html",
  includeNodeLocations: true,
  storageQuota: 10000000
});

console.log(customizedDom.window.location.href); // "https://example.org/"
console.log(customizedDom.window.document.referrer); // "https://example.com/"

// Script execution example with "dangerously"
const scriptedDom = new JSDOM(`<body>
  <div id="content"></div>
  <script>document.getElementById("content").append(document.createElement("hr"));</script>
</body>`, { runScripts: "dangerously" });

console.log(scriptedDom.window.document.getElementById("content").children.length); // 1

// Pretending to be a visual browser
const visualDom = new JSDOM(``, { pretendToBeVisual: true });
visualDom.window.requestAnimationFrame(timestamp => {
  console.log(timestamp > 0); // true
});

// Example for subresource loading with custom resource loader
const resourceLoader = new ResourceLoader({
  proxy: "http://127.0.0.1:9001",
  strictSSL: false,
  userAgent: "Mozilla/5.0"
});

const resourceDom = new JSDOM(`<!DOCTYPE html><img src="foo.jpg">`, { resources: resourceLoader });
console.log(resourceDom.window.document.querySelector("img").src);
```