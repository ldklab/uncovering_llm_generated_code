The Node.js package described in the README.md is a plugin for ESLint, specifically designed to include JavaScript-specific configurations. The plugin provides two main configurations for ESLint: `recommended` and `all`.

### Key Functionalities:

1. **Configurations:**
   - **`recommended` Configuration**: It enables a set of rules that are recommended by the ESLint team. This configuration serves as a more focused and generally accepted style guide for JavaScript, replacing the older `"eslint:recommended"` configuration.
   - **`all` Configuration**: It enables all ESLint rules, providing comprehensive linting, serving as a replacement for `"eslint:all"`.

2. **Installation**: The plugin can be installed as a development dependency via npm with the command `npm install @eslint/js -D`.

3. **Usage**: 
   - By importing the configurations from this plugin in an ESLint configuration file (e.g., `eslint.config.js`), users can apply these configurations to JavaScript files in their project.
   - Users can either apply the `recommended` or `all` configurations to all `.js` files. They can also override specific rules; for instance, changing `no-unused-vars` from an error to a warning.

4. **Example ESLint Configurations**: The README provides examples of how to apply these configurations in different scenarios, with the possibility of overriding specific rules as desired.

Here is the implementation of the package based on the functionality described:

```javascript
// file: index.js

// Mock ESLint configuration objects to mimic rule configurations
const recommendedRules = {
    "no-unused-vars": "error",
    "eqeqeq": "error",
    "curly": "error",
    // Other recommended rules...
};

const allRules = {
    "no-unused-vars": "error",
    "eqeqeq": "error",
    "curly": "error",
    "semi": "error",
    "no-console": "warn",
    // All other ESLint rules...
};

// Plugin exports
const jsPlugin = {
    configs: {
        recommended: {
            rules: recommendedRules
        },
        all: {
            rules: allRules
        }
    }
};

// Export the plugin
module.exports = jsPlugin;
```

This implementation demonstrates how you might structure the `@eslint/js` package. The `recommended` and `all` configurations are simply JavaScript objects mimicking ESLint rule settings, including examples such as `"no-unused-vars"`, `"eqeqeq"`, and `"curly"`. These configurations can be imported and utilized within an ESLint configuration file (`eslint.config.js`) to manage linting across JavaScript files in a project.