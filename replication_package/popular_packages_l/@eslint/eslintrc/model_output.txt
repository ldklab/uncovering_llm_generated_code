The ESLintRC Library package is designed to assist in transitioning ESLint configurations from the traditional ESLintRC format to a more modern flat configuration format, as used by ESLint's evolving configuration ecosystem. This utility, called `FlatCompat`, is specifically developed for, and should be used within, the ESLint environment.

### Key Features:
- **FlatCompat Constructor:** 
  - This utility allows for the conversion of configuration settings typical of the legacy ESLint RC configurations to the flat style.
  - It requires the `baseDirectory` and optionally can specify `resolvePluginsRelativeTo`, `recommendedConfig`, and `allConfig`. These configurations help locate plugin paths and set default ESLint rules.

- **Configuration Translation:**
  - `extends()`: This method mimics the ESLintRC-style `extends` property, facilitating inheritance from other configurations.
  - `env()`: This method translates environment settings (`es2020`, `node`, etc.) specified in ESLintRC.
  - `plugins()`: It supports plugins translation from RC to flat configuration.
  - `config()`: A comprehensive method that translates entire configurations from the legacy to the flat format.

- **ESM and CommonJS Support:**
  - The library supports both ESM and CommonJS module systems for including and exporting configurations.
  - Both formats allow using `FlatCompat` similarly, with syntax differences pertaining to module imports and exports.

This tool is particularly useful for developers who are maintaining ESLint configurations and need a bridge to migrate over to the newer flat configuration system while ensuring compatibility and functionality remain intact.

```js
// Implementation of the ESLintRC Library

class FlatCompat {
    constructor({ baseDirectory = process.cwd(), resolvePluginsRelativeTo, recommendedConfig, allConfig }) {
        this.baseDirectory = baseDirectory;
        this.resolvePluginsRelativeTo = resolvePluginsRelativeTo || baseDirectory;
        this.recommendedConfig = recommendedConfig;
        this.allConfig = allConfig;
    }

    extends(...configs) {
        // Simulate extending ESLint configuration
        return configs.map(config => ({ type: 'extends', name: config }));
    }

    env(environments) {
        // Translate environment settings from legacy ESLint RC to flat config
        return [{ type: 'env', environments }];
    }

    plugins(...plugins) {
        // Convert plugins list from RC to flat configuration
        return [{ type: 'plugins', plugins }];
    }

    config(configuration) {
        const { plugins, extends: extendConfig, env, rules } = configuration;

        const configArray = [];

        if (plugins) {
            configArray.push(...this.plugins(...plugins));
        }

        if (extendConfig) {
            configArray.push(...this.extends(extendConfig));
        }

        if (env) {
            configArray.push(...this.env(env));
        }

        if (rules) {
            configArray.push({ type: 'rules', rules });
        }

        return configArray;
    }
}

// Usage Example (ESM)

import js from "@eslint/js";
import path from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const compat = new FlatCompat({
    baseDirectory: __dirname,
    resolvePluginsRelativeTo: __dirname,
    recommendedConfig: js.configs.recommended, // Example recommended config
    allConfig: js.configs.all                 // Example 'all' config
});

export default [
    ...compat.extends("standard", "example"),
    ...compat.env({
        es2020: true,
        node: true
    }),
    ...compat.plugins("airbnb", "react"),
    ...compat.config({
        plugins: ["airbnb", "react"],
        extends: "standard",
        env: {
            es2020: true,
            node: true
        },
        rules: {
            semi: "error"
        }
    })
];

// Usage Example (CommonJS)

const js = require("@eslint/js");
const path = require("path");

const compatCommonJS = new FlatCompat({
    baseDirectory: __dirname,
    resolvePluginsRelativeTo: __dirname,
    recommendedConfig: js.configs.recommended,
    allConfig: js.configs.all
});

module.exports = [
    ...compatCommonJS.extends("standard", "example"),
    ...compatCommonJS.env({
        es2020: true,
        node: true
    }),
    ...compatCommonJS.plugins("airbnb", "react"),
    ...compatCommonJS.config({
        plugins: ["airbnb", "react"],
        extends: "standard",
        env: {
            es2020: true,
            node: true
        },
        rules: {
            semi: "error"
        }
    })
];
```