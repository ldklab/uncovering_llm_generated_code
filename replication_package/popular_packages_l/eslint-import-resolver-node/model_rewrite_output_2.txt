The provided Node.js code defines a custom module resolution plugin intended for use with `eslint-plugin-import`. This code consists of two parts: the `index.js` file and a `package.json` file.

### Explanation

1. **`index.js` Functionality:**
    - The `nodeResolver` function is designed to resolve module paths in a Node.js environment. It uses the `resolve` library to find the full path to a given module.
    - This function accepts an optional `customOptions` parameter to allow modification of the default resolution settings like `extensions`, `paths`, and `moduleDirectory`.
    - The main operation is carried out in the `resolve` method within the returned object, which:
      - Constructs a set of options for resolution, including the base directory (`basedir`) derived from the provided file path or the current working directory.
      - Attempts to synchronize resolve the `source` module path using the `resolve.sync` method.
      - Returns an object indicating if the module was found and the resolved path, or simply that the module was not found.

2. **`package.json` Functionality:**
    - Metadata about the package, including its name, version, description, entry point (`index.js`), keywords, dependencies, author, and license.
    - This package specifies a dependency on the `resolve` library version `^1.20.0`.

### Rewritten Code

```json
// package.json
{
  "name": "eslint-import-resolver-node",
  "version": "1.0.0",
  "description": "Node-style module resolution plugin for eslint-plugin-import.",
  "main": "index.js",
  "keywords": [
    "eslint",
    "import",
    "resolve",
    "plugin"
  ],
  "dependencies": {
    "resolve": "^1.20.0"
  },
  "author": "Your Name",
  "license": "MIT"
}
```

```javascript
// index.js
const resolve = require('resolve');

function nodeResolver(customOptions = {}) {
  const defaultOptions = {
    extensions: ['.js'],
    paths: [],
    moduleDirectory: ['node_modules'],
  };

  const options = { ...defaultOptions, ...customOptions };

  return {
    interfaceVersion: 2,
    resolve(source, file) {
      const basedir = file ? file.substring(0, file.lastIndexOf('/')) : process.cwd();
      const opts = { ...options, basedir };

      try {
        const resolvedPath = resolve.sync(source, opts);
        return { found: true, path: resolvedPath };
      } catch {
        return { found: false };
      }
    },
  };
}

module.exports = { nodeResolver };
```