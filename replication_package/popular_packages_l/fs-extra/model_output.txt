The `fs-extra` package for Node.js extends the native `fs` module with additional functionality and also supports promises for asynchronous methods. It is intended to be a drop-in replacement for `fs`, meaning it can be used in place of `fs` with minimal changes to existing code. Additionally, `fs-extra` includes methods for performing file system operations that are not present in the core `fs` module, such as:

- Copying files and directories
- Ensuring that files and directories exist
- Moving files and directories
- Reading and writing JSON files
- Removing files and directories
- Checking if a path exists

These methods are available in both asynchronous and synchronous forms. When using asynchronous methods, you can choose between using callbacks or promises, and `async/await` syntax can also be used. Synchronous methods will throw an error if an operation fails. 

The package leverages the `graceful-fs` module to handle `EMFILE` errors, which occur when too many file descriptors are open simultaneously.

Here is a basic implementation of this functionality using native Node.js:

```javascript
// fs-extra.js
const fs = require('fs');
const path = require('path');
const util = require('util');
const gracefulFs = require('graceful-fs');

gracefulFs.gracefulify(fs);

const copy = util.promisify(fs.copyFile);
const pathExists = async (p) => !!(await util.promisify(fs.access)(p).then(() => true).catch(() => false));

const copySync = (src, dest) => {
  fs.copyFileSync(src, dest);
};

const ensureDir = async (dirPath) => {
  await fs.promises.mkdir(dirPath, { recursive: true });
};

const ensureDirSync = (dirPath) => {
  fs.mkdirSync(dirPath, { recursive: true });
};

const remove = async (dirPath) => {
  await fs.promises.rm(dirPath, { recursive: true, force: true });
};

const removeSync = (dirPath) => {
  fs.rmSync(dirPath, { recursive: true, force: true });
};

const outputFile = async (filePath, data) => {
  await ensureDir(path.dirname(filePath));
  await fs.promises.writeFile(filePath, data);
};

const outputFileSync = (filePath, data) => {
  ensureDirSync(path.dirname(filePath));
  fs.writeFileSync(filePath, data);
};

// Expose promisified fs methods
module.exports = {
  ...fs.promises,
  copy,
  copySync,
  ensureDir,
  ensureDirSync,
  remove,
  removeSync,
  outputFile,
  outputFileSync,
  pathExists,
};
```

In this implementation:

- **copy**: Asynchronously copies a file from a source to a destination.
- **copySync**: Synchronously copies a file.
- **ensureDir**: Asynchronously ensures a directory exists, creating it if necessary.
- **ensureDirSync**: Synchronously ensures a directory exists, creating it if necessary.
- **remove**: Asynchronously removes a directory or file recursively.
- **removeSync**: Synchronously removes a directory or file recursively.
- **outputFile**: Asynchronously creates a file and writes data to it, also ensuring the directory exists.
- **outputFileSync**: Synchronously creates a file and writes data to it, also ensuring the directory exists.
- **pathExists**: Asynchronously checks if a path exists.

These methods provide the added functionality that `fs-extra` is known for, allowing for a straightforward file and directory manipulation.