The functionality described in the `array-buffer-byte-length` package is quite simple. It aims to determine the byte length of an `ArrayBuffer` in JavaScript. Typically, an `ArrayBuffer` object has a `.byteLength` property that directly provides this information. However, this package goes a step further by also handling scenarios where the input is not an `ArrayBuffer`, returning `NaN` in such cases. This ensures the function is robust and doesn't assume that the input will always be valid `ArrayBuffer`.

Hereâ€™s the breakdown of what the package does:
1. **Input Validation**: It checks whether the input is an `ArrayBuffer`. If not, it returns `NaN`.
2. **Byte Length Retrieval**: If the input is a valid `ArrayBuffer`, it simply returns the `.byteLength` property of the buffer.

Below is the Node.js package implementation for this functionality:

```javascript
// index.js

function byteLength(buffer) {
    if (!(buffer instanceof ArrayBuffer)) {
        return NaN;
    }
    return buffer.byteLength;
}

module.exports = byteLength;

// test.js

const assert = require('assert');
const byteLength = require('./index');

try {
    assert.equal(byteLength([]), NaN, 'an array is not an ArrayBuffer, yields NaN');
    assert.equal(byteLength(new ArrayBuffer(0)), 0, 'ArrayBuffer of byteLength 0, yields 0');
    console.log('All tests passed');
} catch (error) {
    console.error('A test failed:', error.message);
}

// package.json

{
  "name": "array-buffer-byte-length",
  "version": "1.0.0",
  "description": "Get the byte length of an ArrayBuffer, even in engines without a .byteLength method.",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "keywords": [
    "ArrayBuffer",
    "byteLength"
  ],
  "author": "",
  "license": "MIT"
}
```

To use the package:
1. Install the package using `npm install`.
2. Use the `byteLength` function to get the byte length of an `ArrayBuffer` or receive `NaN` for invalid inputs.
3. Run tests using `npm test` to ensure everything is functioning correctly.