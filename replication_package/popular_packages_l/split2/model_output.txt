The `split2` Node.js package is a stream transformer that operates on streams to break them into lines or process them into objects. It's essentially used to "split" a readable stream into smaller chunks, such that each output chunk represents a line from the input stream. This package is similar to the `split` module by @dominictarr but uses Node.js's core `Transform` stream, thereby device-independent and system-compatible.

### Core Functionality

1. **Line Splitting:**
   - The primary function of `split2` is to break a stream into separate lines. 
   - You can pass a `matcher` argument as a `String` or `RegExp` to specify how input data should be split, defaulting to splitting by line endings (`/\r?\n/`).

2. **Error Handling & Options:**
   - `maxLength` and `skipOverflow` options allow managing memory by controlling internal buffer size and behavior when the buffer limit is exceeded.
   - `maxLength`: When set, it limits the buffer size. Exceeding emits an error (unless `skipOverflow` is true, which causes it to skip the line).

3. **Transform Stream Integration:**
   - Because `split2` is built on top of Node.js's `Transform`, it accepts all options available for `Transform` streams.

4. **Destruction Handling:**
   - Implementing `.destroy` checks helps manage resource cleanup by emitting `close` events.

5. **Mapper Function for JSON:**
   - `split2` can take a function as a second argument to transform each line.
   - A common use case is reading Newline Delimited JSON (NDJSON), where each line of input is parsed as JSON and converted to JavaScript objects.

6. **Error Propagation in Transform:**
   - Unlike the original `split` module, this does not catch exceptions from the mapper function. Users should manage exceptions themselves, allowing better custom error handling.

Here's a basic implementation:

```js
const { Transform } = require('stream');

class Split2 extends Transform {
  constructor(matcher = /\r?\n/, mapper, options = {}) {
    super({ readableObjectMode: !!mapper, ...options });
    this.matcher = matcher;
    this.mapper = mapper;
    this.buf = '';
    this.maxLength = options.maxLength;
    this.skipOverflow = options.skipOverflow || false;
  }

  _transform(chunk, encoding, callback) {
    this.buf += chunk.toString();

    let lines = this.buf.split(this.matcher);
    this.buf = lines.pop();

    for (let line of lines) {
      if (this.maxLength && line.length > this.maxLength) {
        if (!this.skipOverflow) return callback(new Error('Line exceeded maxLength'));
        continue; // Skip long lines if skipOverflow is true
      }
      
      if (this.mapper) {
        try {
          line = this.mapper(line);
        } catch (err) {
          return callback(err);
        }
      }

      this.push(line);
    }

    callback();
  }

  _flush(callback) {
    if (this.buf) {
      let line = this.buf;
      if (this.maxLength && line.length > this.maxLength) {
        if (!this.skipOverflow) return callback(new Error('Line exceeded maxLength'));
      } else {
        try {
          if (this.mapper) line = this.mapper(line);
          this.push(line);
        } catch (err) {
          return callback(err);
        }
      }
    }
    callback();
  }
  
  destroy() {
    // Emit close event for the stream
    this.emit('close');
    // Execute cleanup if required
    super.destroy();
  }
}

module.exports = (matcher, mapper, options) => new Split2(matcher, mapper, options);
```

This code defines a `Split2` class that extends from Node.js's `Transform` stream to implement the functionality described in the README. It involves managing buffer memory, applying line split logic, and supporting customizable transformation through a mapping function.