The Node.js package `object-is` is an ES2015-compliant shim that replicates the behavior of the `Object.is` method, which is a more precise equality comparison method than the strict equality operator (`===`). Specifically, it correctly handles cases involving `NaN` and determines that `-0` and `+0` are not equal, which `===` does not differentiate.

### Functionality Explained

- **Equivalent to `===`**: `Object.is` behaves like the strict equality operator (`===`) for most types of values.
- **NaN Comparison**: Unlike `===`, which evaluates `NaN === NaN` as `false`, `Object.is(NaN, NaN)` evaluates to `true`.
- **Zero Differentiation**: While `===` considers `-0` and `+0` as equal, `Object.is` treats them as distinct values so `Object.is(-0, +0)` returns `false`.

### Usage

- To use this package, first install it via npm and require it in your code.
- Apply the `Object.is` function to compare different types of data.

### Tests

The package comes with device tests that validate its behavior for both primitive and object values, including corner cases like arrays and zero values, as well as special number scenarios (e.g., `NaN`, `Infinity`).

Here is the implementation for the `object-is` package:

```javascript
// object-is/index.js
function objectIs(x, y) {
  if (x === y) {
    // +0 and -0 are considered different.
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // NaN is considered equal to NaN.
    return x !== x && y !== y;
  }
}

module.exports = objectIs;

// tests/test.js (Mocha and Assert are typically used for testing)
const assert = require('assert');
const objectIs = require('../index');

describe('Object.is', function() {
  it('should handle normal equality', function() {
    assert.ok(objectIs());
    assert.ok(objectIs(undefined));
    assert.ok(objectIs(undefined, undefined));
    assert.ok(objectIs(null, null));
    assert.ok(objectIs(true, true));
    assert.ok(objectIs(false, false));
    assert.ok(objectIs('foo', 'foo'));
  });

  it('should handle object references', function() {
    const arr = [1, 2];
    assert.ok(objectIs(arr, arr));
    assert.equal(objectIs(arr, [1, 2]), false);
  });

  it('should handle special numbers', function() {
    assert.ok(objectIs(0, 0));
    assert.ok(objectIs(-0, -0));
    assert.equal(objectIs(0, -0), false);
    assert.ok(objectIs(NaN, NaN));
  });

  it('should handle infinities', function() {
    assert.ok(objectIs(Infinity, Infinity));
    assert.ok(objectIs(-Infinity, -Infinity));
  });
});

// package.json
{
  "name": "object-is",
  "version": "1.0.0",
  "description": "ES2015-compliant shim for Object.is",
  "main": "index.js",
  "scripts": {
    "test": "mocha tests/test.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/es-shims/object-is.git"
  },
  "keywords": ["Object.is", "ECMAScript", "shim", "polyfill"],
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "mocha": "^6.0.0"
  }
}
```

This code provides a polyfill for `Object.is`, along with a simple test suite using Mocha and Assert to verify its correctness compared to the standard ECMAScript specification.