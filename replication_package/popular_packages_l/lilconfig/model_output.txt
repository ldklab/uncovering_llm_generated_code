The `lilconfig` package is a zero-dependency library designed to facilitate the discovery and loading of your application's configuration files. It's similar to `cosmiconfig`, offering a streamlined API to integrate configuration file searching and loading within your Node.js applications without external dependencies.

### Key Functionalities:

1. **Installation**:
   - You can install the package using npm: `npm install lilconfig`.

2. **Functions and Usage**:
   - **Async API**: `lilconfig` is used to create an async configuration loader.
     - Usage: `lilconfig('appname', options).search()`
     - It returns a promise that resolves to a `LilconfigResult` which contains the configuration and its file path.
   - **Sync API**: `lilconfigSync` is for synchronous configuration loading.
     - Usage: `lilconfigSync('appname', options).load(pathToConfig)`
     - It directly returns a `LilconfigResult`.

3. **Options**:
   - `stopDir`: Defines the directory where the search should stop.
   - `searchPlaces`: Specifies the list of filenames to look for configuration.
   - `ignoreEmptySearchPlaces`: If true, skips over empty configuration files.
   - Other options include configuration caching, loaders for different file types, custom file transformation, and targeting specific package properties.

4. **ESM Support**: ESM configuration files can only be loaded using the async API.

5. **Differences from `cosmiconfig`**: 
   - Lilconfig does not natively support YAML files but allows adding custom loaders for additional file types.

6. **Custom Loaders**: 
   - Allows you to define custom functions to parse different types of configuration files, such as YAML, by specifying an appropriate loader function.

### Code Implementation:

```javascript
// lilconfig.js

import fs from 'fs';
import path from 'path';

const defaultLoaders = {
    '.json': JSON.parse,
    noExt: JSON.parse
};

export function lilconfig(appName, options = {}) {
    const {
        stopDir = '/',
        searchPlaces = [],
        ignoreEmptySearchPlaces = false,
        loaders = defaultLoaders
    } = options;

    async function search() {
        for (const searchPlace of searchPlaces) {
            const configPath = path.resolve(stopDir, searchPlace);
            if (!fs.existsSync(configPath)) continue;

            const content = await fs.promises.readFile(configPath, 'utf-8');
            if (!ignoreEmptySearchPlaces || content.trim() !== '') {
                const ext = path.extname(searchPlace) || 'noExt';
                const loader = loaders[ext] || loaders.noExt;
                return { config: loader(content), filepath: configPath };
            }
        }
        return null;
    }

    return { search };
}

export function lilconfigSync(appName, options = {}) {
    const {
        stopDir = '/',
        searchPlaces = [],
        ignoreEmptySearchPlaces = false,
        loaders = defaultLoaders
    } = options;

    function load(filepath) {
        const content = fs.readFileSync(filepath, 'utf-8');
        if (!ignoreEmptySearchPlaces || content.trim() !== '') {
            const ext = path.extname(filepath) || 'noExt';
            const loader = loaders[ext] || loaders.noExt;
            return { config: loader(content), filepath };
        }
        return null;
    }

    return { load };
}

// Example Usage
// const { lilconfig, lilconfigSync } = require('./lilconfig.js');
// or if using ESModules: import { lilconfig, lilconfigSync } from './lilconfig.js';
```