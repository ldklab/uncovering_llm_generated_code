The `ansi-colors` package is a Node.js library that enables you to style terminal strings with ANSI escape codes, providing colors and text styling options. Here's a summary of its key features and functionalities:

1. **Installation**: The package can be easily installed via npm.

2. **Fast and Dependency-free**: It claims to be the fastest library of its kind, 10-20 times faster than alternatives like `chalk`, with zero dependencies, making it lightweight.

3. **Drop-in Replacement**: It is designed to be a drop-in replacement for `chalk`, ensuring compatibility for users familiar with `chalk`.

4. **Safe to Use**: It doesn't modify `String.prototype`, unlike some other libraries, which makes it safe from side effects.

5. **Color and Style Support**:
   - Provides functions to color text: `red`, `green`, `cyan`, `yellow`, etc.
   - Supports background colors and bright versions of text and background colors.
   - Offers text styles like `bold`, `italic`, `underline`, `strikethrough`, etc.
   - Nested styles are possible without rendering bugs.
   - Chaining color functions to combine multiple styles, e.g., `c.bold.red`.

6. **Toggle Color Support**: Allows toggling of colors on or off based on terminal support.

7. **Remove ANSI Codes**: Provides functionality to remove ANSI codes from strings to strip coloring (via the `unstyle` method).

8. **Custom Aliases and Themes**:
   - Users can create aliases for styles to simplify usage.
   - Supports custom themes that are essentially collections of these aliases with specific color/style configurations.

9. **Performance**: Extensive benchmarks show its superior performance, especially in constrained environments.

Here is the complete code implementation of the `ansi-colors` package as described:

```javascript
const styles = {
  // Modifier codes
  reset: [0, 0],
  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],

  // Color codes
  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],

  // Bright color codes
  blackBright: [90, 39],
  redBright: [91, 39],
  greenBright: [92, 39],
  yellowBright: [93, 39],
  blueBright: [94, 39],
  magentaBright: [95, 39],
  cyanBright: [96, 39],
  whiteBright: [97, 39],

  // Background color codes
  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49],

  // Bright background color codes
  bgBlackBright: [100, 49],
  bgRedBright: [101, 49],
  bgGreenBright: [102, 49],
  bgYellowBright: [103, 49],
  bgBlueBright: [104, 49],
  bgMagentaBright: [105, 49],
  bgCyanBright: [106, 49],
  bgWhiteBright: [107, 49]
};

function applyStyle(style, str) {
  if (!this.enabled || !str) return str;
  const open = `\u001b[${style[0]}m`;
  const close = `\u001b[${style[1]}m`;
  return open + str + close;
}

function createColors() {
  const colors = { enabled: true };

  for (let key in styles) {
    styles[key].forEach((value, i) => {
      styles[key][i] = `\u001b[${value}m`;
    });

    colors[key] = applyStyle.bind({ enabled: true }, styles[key]);
  }

  colors.unstyle = str => str.replace(/\u001b\[\d+m/g, '');

  colors.alias = (name, style) => {
    colors[name] = style;
  };

  colors.theme = theme => {
    for (let key in theme) {
      colors[key] = theme[key];
    }
  };
  
  return colors;
}

module.exports = createColors();
```
