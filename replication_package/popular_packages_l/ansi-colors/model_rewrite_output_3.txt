The Node.js code provided creates a utility for styling terminal output using ANSI escape codes. It defines a set of styles that include text modifiers (like bold, italic), foreground colors, and background colors in both normal and bright variations. The functionality is encapsulated in a `createColors` function, which initializes these styles enabling colored text output to the console.

### Explanation:
1. **Styles Definition**: 
   - The `styles` object maps style names to pairs of ANSI escape codes. The first element of each pair activates the style while the second one deactivates it.
   
2. **applyStyle Function**:
   - This function applies the provided style to a given string. It is invoked only if styling is enabled (`this.enabled` is true). It returns the string wrapped in the appropriate ANSI codes for the specified style.

3. **createColors Function**:
   - Initializes the coloring capability by creating a `colors` object with a property `enabled` (set to true by default).
   - For each style in `styles`, it converts ANSI codes into string format and assigns a bound `applyStyle` function to the corresponding property on the `colors` object.
   - Provides utility methods:
     - `unstyle`: Removes any styling (ANSI codes) from a string.
     - `alias`: Allows assigning an arbitrary name to an existing style.
     - `theme`: Allows the application of a custom theme by assigning new styles to `colors`.

4. **Module Export**: 
   - The function `createColors` is executed, and its result (the configured `colors` object) is exported for use in other modules.

Below is the rewritten version of the original Node.js code with the same functionality.

```javascript
const styles = {
  reset: [0, 0],
  bold: [1, 22],
  dim: [2, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  hidden: [8, 28],
  strikethrough: [9, 29],
  black: [30, 39],
  red: [31, 39],
  green: [32, 39],
  yellow: [33, 39],
  blue: [34, 39],
  magenta: [35, 39],
  cyan: [36, 39],
  white: [37, 39],
  gray: [90, 39],
  grey: [90, 39],
  blackBright: [90, 39],
  redBright: [91, 39],
  greenBright: [92, 39],
  yellowBright: [93, 39],
  blueBright: [94, 39],
  magentaBright: [95, 39],
  cyanBright: [96, 39],
  whiteBright: [97, 39],
  bgBlack: [40, 49],
  bgRed: [41, 49],
  bgGreen: [42, 49],
  bgYellow: [43, 49],
  bgBlue: [44, 49],
  bgMagenta: [45, 49],
  bgCyan: [46, 49],
  bgWhite: [47, 49],
  bgBlackBright: [100, 49],
  bgRedBright: [101, 49],
  bgGreenBright: [102, 49],
  bgYellowBright: [103, 49],
  bgBlueBright: [104, 49],
  bgMagentaBright: [105, 49],
  bgCyanBright: [106, 49],
  bgWhiteBright: [107, 49]
};

function applyStyle(style, str) {
  if (!this.enabled || !str) return str;
  const [openCode, closeCode] = style;
  const open = `\u001b[${openCode}m`, close = `\u001b[${closeCode}m`;
  return open + str + close;
}

function createColors() {
  const colors = { enabled: true };

  for (let key in styles) {
    styles[key] = styles[key].map(code => `\u001b[${code}m`);
    colors[key] = applyStyle.bind({ enabled: true }, styles[key]);
  }

  colors.unstyle = str => str.replace(/\u001b\[\d+m/g, '');

  colors.alias = (name, style) => {
    colors[name] = style;
  };

  colors.theme = theme => {
    for (let key in theme) {
      colors[key] = theme[key];
    }
  };

  return colors;
}

module.exports = createColors();
```