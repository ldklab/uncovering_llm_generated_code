The `es-abstract` package provides implementations of ECMAScript's spec abstract operations. These operations are pivotal components of the JavaScript specification, ensuring that JavaScript engines can perform fundamental tasks consistently across different implementations and environments.

### Key Features:

1. **Multiple Versions**:
   - The package provides implementations of abstract operations for various ECMAScript editions (like ES5, ES2015, ES2016, etc.). This allows developers to access specific abstract operations scoped to the behavior of a particular ECMAScript edition.

2. **Deep Imports Encouraged**:
   - Each abstract operation is available through deep imports. For instance, to access the `Call` operation from ES2020, you would use `es-abstract/2020/Call`. This approach is encouraged to optimize your application's bundle size and improve performance.

3. **Main Export Alternative**:
   - While deep imports are recommended, all operations are also accessible via non-deep entry points under named exports like `es5`, `es2015`, and so on. However, these non-deep entry points are set to be deprecated in future major releases.

4. **Example Usage**:
   - You can require the package to use available operations such as checking if a value is callable:
     ```js
     var ES = require('es-abstract');
     var assert = require('assert');

     assert(ES.isCallable(function () {})); // returns true
     assert(!ES.isCallable(/a/g));          // returns false
     ```

5. **Testing**:
   - The package includes a testing setup. After cloning the repository and running `npm install`, you can execute `npm test` to run the provided test suite, ensuring the operations work as intended.

6. **Security Reporting**:
   - For reporting vulnerabilities, you can contact the package maintainer or use the provided Tidelift security page. 

Here is the implementation of a simplified version of the `es-abstract` package focusing on the `isCallable` operation.

```markdown
// Directory structure:
// es-abstract/
// ├── index.js
// ├── isCallable.js
// ├── 2020/
// │   └── Call.js
// ├── package.json
// └── test/
//     └── test.js

// package.json
{
  "name": "es-abstract",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "node test/test.js"
  },
  "devDependencies": {
    "assert": "^1.5.0"
  }
}

// index.js
const isCallable = require('./isCallable');

module.exports = {
  isCallable: isCallable
};

// isCallable.js
function isCallable(value) {
  return typeof value === 'function';
}

module.exports = isCallable;

// 2020/Call.js
function Call(fn, thisArg, argsList) {
  if (!isCallable(fn)) {
    throw new TypeError(fn + ' is not callable');
  }
  return fn.apply(thisArg, argsList);
}

module.exports = Call;

// test/test.js
const assert = require('assert');
const ES = require('../index');

assert(ES.isCallable(function () {}));
assert(!ES.isCallable(/a/g));

console.log('All tests passed');
```

This code implements a basic version of the `es-abstract` package with a simple `isCallable` operation and demonstrates how to include and test it.