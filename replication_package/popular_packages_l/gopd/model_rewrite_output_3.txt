The provided Node.js code defines a polyfill for `Object.getOwnPropertyDescriptor`, which is a built-in JavaScript method used to return the descriptor for a given property of an object. The functionality of the code can be broken down as follows:

1. **Feature detection**: The variable `supportsDescriptors` checks if `Object.getOwnPropertyDescriptor` is supported.

2. **Polyfill definition**: 
   - The function `getOwnPropertyDescriptorIEPolyfill` acts as a fallback implementation for environments that do not support the native `Object.getOwnPropertyDescriptor`. It first checks if the input is `null` or `undefined`, throwing a `TypeError` if so.
   - If the input is valid, it verifies if the object directly owns the property named `prop`. If the property does exist on the object, it constructs and returns a generic descriptor object indicating the property is writable, enumerable, and configurable, with its current value.
   - If the property is not directly present, it simply returns `undefined`.

3. **Conditional Assignment**: Based on whether descriptors are supported, `gOPD` is assigned either the native `Object.getOwnPropertyDescriptor` or the IE polyfill.

4. **Module Export**: Finally, the module exports this `gOPD` function, facilitating its use in other parts of an application.

Below is a possible rewrite of the Node.js code, capturing this functionality:

```javascript
// gopd.js
'use strict';

// Check if the environment supports Object.getOwnPropertyDescriptor
const hasNativeSupport = Boolean(Object.getOwnPropertyDescriptor);

// Polyfill for environments that lack descriptor support
function polyfillGetOwnPropertyDescriptor(obj, prop) {
	if (obj == null) {
		throw new TypeError('Cannot convert undefined or null to object');
	}
	const objectified = Object(obj);

	if (!Object.prototype.hasOwnProperty.call(objectified, prop)) {
		return undefined;
	}

	return {
		value: objectified[prop],
		writable: true,
		enumerable: true,
		configurable: true
	};
}

// Use the native method if available, otherwise fallback to polyfill
const getOwnPropertyDescriptor = hasNativeSupport ? Object.getOwnPropertyDescriptor : polyfillGetOwnPropertyDescriptor;

// Export the chosen method
module.exports = getOwnPropertyDescriptor;
```