The provided Node.js code defines a class `Entities` that handles encoding and decoding of HTML and XML entities. Here's a summary of each method's functionality:

1. **Constructor**: Initializes two mappings:
   - `htmlEntitiesMap` for HTML entity encoding, which includes characters like `&`, `<`, `>`, etc., and specific UTF-8 characters like `ü` and `ÿ`.
   - `xmlEntitiesMap` for XML entity encoding, handling characters `&`, `<`, `>`, etc.

2. **escapeUTF8(str)**: Escapes the `&` character in a given string using HTML entity encoding.

3. **encodeXML(str)**: Encodes XML special characters (`&`, `<`, `>`, `"`, `'`) in a given string to their corresponding XML entities.

4. **encodeHTML(str)**: Encodes certain characters (`&`, `<`, `>`, `"`, `'`, `ü`, `ÿ`) to HTML entities using `htmlEntitiesMap`.

5. **decodeXML(str)**: Decodes XML entities in a string back to their original characters using a reverse mapping of `xmlEntitiesMap` and a regex pattern.

6. **decodeHTML(str)**: Decodes HTML entities in a string back to their original characters using a reverse mapping of `htmlEntitiesMap` and a regex pattern.

7. **decodeEntities(str, reverseMap, regex)**: Helper method used by `decodeXML` and `decodeHTML` to replace encoded entities with corresponding characters, using a reverse map and a regex pattern for matching entities.

8. **reverseMap(map)**: Generates a reverse mapping from an entity map, allowing entity names to be mapped back to their original characters.

Here is a possible rewrite of the Node.js code based on this functionality:

```javascript
// entities.js

class Entities {
  constructor() {
    this.htmlEntitiesMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&apos;',
      'ü': '&uuml;',
      'ÿ': '&yuml;',
    };
    this.xmlEntitiesMap = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      '\'': '&apos;',
    };
  }

  escapeUTF8(str) {
    return str.replace(/[&]/g, this.htmlEntitiesMap['&']);
  }

  encodeXML(str) {
    return str.replace(/[&<>"']/g, char => this.xmlEntitiesMap[char]);
  }

  encodeHTML(str) {
    return str.replace(/[&<>"'üÿ]/g, char => this.htmlEntitiesMap[char] || char);
  }

  decodeXML(str) {
    return this.decodeEntities(str, this.reverseMap(this.xmlEntitiesMap), /&(?:#(\d+)|#x([a-fA-F0-9]+)|(\w+));/g);
  }

  decodeHTML(str) {
    return this.decodeEntities(str, this.reverseMap(this.htmlEntitiesMap), /&(?:#(\d+)|#x([a-fA-F0-9]+)|(\w+));/g);
  }

  decodeEntities(str, reverseMap, regex) {
    return str.replace(regex, (match, dec, hex, named) => {
      if (dec) return String.fromCharCode(dec);
      if (hex) return String.fromCharCode(parseInt(hex, 16));
      return reverseMap[named] || match;
    });
  }

  reverseMap(map) {
    const reverseMap = {};
    for (const key in map) {
      reverseMap[map[key].slice(1, -1)] = key;
    }
    return reverseMap;
  }
}

module.exports = new Entities();
```