The `ipaddr.js` library is designed for manipulating IP addresses (both IPv4 and IPv6) in JavaScript environments such as Node.js and web browsers. Here's a breakdown of its functionality:

1. **Validation and Parsing**: The library provides methods to validate IP addresses and CIDR notations. Methods such as `ipaddr.isValid` and `ipaddr.isValidCIDR` check if a given string is a valid IP address or CIDR notation, respectively. The `ipaddr.parse` method parses a string into an IP address object, throwing an error if invalid.

2. **IPv4 and IPv6 Classes**: The library defines two main classes, `ipaddr.IPv4` and `ipaddr.IPv6`, which represent IPv4 and IPv6 addresses. These classes provide methods to:
   - Determine the address type (`addr.kind()` returns `"ipv4"` or `"ipv6"`).
   - Convert the address to a string (`addr.toString()`) or to a normalized string for IPv6 (`addr.toNormalizedString()`).
   - Match the address against CIDR ranges or lists (`addr.match()`).

3. **Special Ranges and Reserved Addresses**: The library can determine if an IP address falls within certain predefined special ranges, such as loopback or multicast, using the `range()` method.

4. **Byte Representation**: The library can convert IP addresses to and from their byte representations. The `toByteArray()` method returns an array of bytes representing the address, and `fromByteArray()` reconstructs an address object from a byte array.

5. **IPv4-Mapped IPv6 Addresses**: Provides methods like `isIPv4MappedAddress()` and `toIPv4Address()` to handle IPv4-mapped IPv6 addresses, facilitating the conversion between the two formats.

6. **Subnet and Broadcast Address Calculations**: For IPv4, the library includes methods to calculate subnet masks (`subnetMaskFromPrefixLength`), broadcast addresses (`broadcastAddressFromCIDR`), and network addresses (`networkAddressFromCIDR`) based on CIDR notation.

Below is the complete code for this library:

```javascript
// ipaddr.js
class IPv4 {
  constructor(octets) {
    if (octets.length !== 4) {
      throw new Error('Invalid IPv4 address');
    }
    this.octets = octets;
  }

  kind() {
    return 'ipv4';
  }

  toString() {
    return this.octets.join('.');
  }

  toByteArray() {
    return this.octets.slice();
  }

  static isValid(str) {
    return str.match(/^(\d{1,3}\.){3}\d{1,3}$/);
  }

  static parse(str) {
    if (!IPv4.isValid(str)) {
      throw new Error('Invalid IPv4 address');
    }
    return new IPv4(str.split('.').map(Number));
  }

  static subnetMaskFromPrefixLength(prefixLength) {
    if (prefixLength < 0 || prefixLength > 32) {
      return null;
    }
    const mask = (0xFFFFFFFF << (32 - prefixLength)) >>> 0;
    return new IPv4([
      (mask >>> 24) & 0xFF,
      (mask >>> 16) & 0xFF,
      (mask >>> 8) & 0xFF,
      mask & 0xFF
    ]).toString();
  }

  static broadcastAddressFromCIDR(cidr) {
    const [ipStr, prefixLength] = cidr.split('/');
    const ip = IPv4.parse(ipStr);
    const networkAddress = ip.toByteArray().map((b, i) => b & ((0xFF << (8 - (i * 8) >= prefixLength ? 0 : 8)) & 0xFF));
    const broadcastAddress = networkAddress.map((b, i) => b | ((0xFF >>> (i * 8 >= prefixLength ? 8 : 0))));
    return new IPv4(broadcastAddress).toString();
  }

  static networkAddressFromCIDR(cidr) {
    const [ipStr, prefixLength] = cidr.split('/');
    const ip = IPv4.parse(ipStr);
    const mask = (0xFFFFFFFF << (32 - +prefixLength)) >>> 0;
    const networkAddress = ip.toByteArray().map((b, i) => b & ((mask >>> (3 - i) * 8) & 0xFF));
    return new IPv4(networkAddress).toString();
  }
}

class IPv6 {
  constructor(parts, zoneId = '') {
    if (parts.length !== 8) {
      throw new Error('Invalid IPv6 address');
    }
    this.parts = parts;
    this.zoneId = zoneId;
  }

  kind() {
    return 'ipv6';
  }

  toString() {
    const partsStr = this.parts.map(part => part.toString(16)).join(':');
    return partsStr.replace(/(:|^)(0+(:|$)){2,}/, '::') + (this.zoneId ? `%${this.zoneId}` : '');
  }

  toNormalizedString() {
    return this.parts.map(part => part.toString(16).padStart(4, '0')).join(':');
  }

  toByteArray() {
    const bytes = [];
    this.parts.forEach(part => {
      bytes.push((part >> 8) & 0xFF);
      bytes.push(part & 0xFF);
    });
    return bytes;
  }

  static isValid(str) {
    return str.match(/^(([0-9a-fA-F]{1,4}(::?|(?<!^):(?!.)):){0,6}(?:(?(1)|::)?[0-9a-fA-F]{1,4}))$/);
  }

  static parse(str) {
    if (!IPv6.isValid(str)) {
      throw new Error('Invalid IPv6 address');
    }
    const zoneId = str.includes('%') ? str.split('%')[1] : '';
    const parts = str.split(/::?|:/).map(part => parseInt(part.padStart(4, '0'), 16));
    if (str.includes('::')) {
      parts.splice(parts.indexOf(0), 0, ...new Array(8 - parts.length).fill(0));
    }
    return new IPv6(parts, zoneId);
  }
}

const ipaddr = {
  isValid(str) {
    return IPv4.isValid(str) || IPv6.isValid(str);
  },

  isValidCIDR(cidr) {
    const [ipStr, prefixLength] = cidr.split('/');
    return this.isValid(ipStr) && prefixLength.match(/^\d+$/) && +prefixLength >= 0;
  },

  parse(str) {
    if (IPv4.isValid(str)) {
      return IPv4.parse(str);
    } else if (IPv6.isValid(str)) {
      return IPv6.parse(str);
    } else {
      throw new Error('Invalid IP address');
    }
  },

  process(str) {
    const addr = this.parse(str);
    // Convert IPv4-mapped IPv6 to IPv4 if applicable
    if (addr.kind() === 'ipv6' && addr.parts.slice(0, 6).every(part => part === 0) && addr.parts[6] === 0xFFFF) {
      return new IPv4(addr.parts.slice(6).map(part => part >>> 8));
    }
    return addr;
  }
};

// Export for CommonJS environments
if (typeof module !== 'undefined' && module.exports) {
  module.exports = ipaddr;
}
```

This code defines a library that handles IP address parsing, manipulation, and validation, supporting both IPv4 and IPv6 addressing schemes. The two main classes, `IPv4` and `IPv6`, encapsulate relevant properties and methods. The global methods provide additional functionality for generic operations, such as parsing strings, checking validity, and processing special address formats.