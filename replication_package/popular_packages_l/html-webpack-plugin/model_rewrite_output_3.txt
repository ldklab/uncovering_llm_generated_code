The provided Node.js code is a Webpack configuration file that sets up a simple build process for a web application. It includes the following functionality:

1. **Entry Point:** The configuration defines an entry point (`./src/index.js`) which is the initial file that Webpack will look for to start building the dependency graph.

2. **Output Configuration:** Webpack is configured to output the bundled files to a `dist` directory with the filename `bundle.js`.

3. **Plugins:** The `HtmlWebpackPlugin` is used to generate an `index.html` file based on a provided template (`./src/template.html`). This plugin also allows configuring HTML aspects like the title, adding a favicon, setting meta tags, and controlling how scripts are injected into the HTML file. Additionally, it minifies the HTML by collapsing whitespace and removing comments.

4. **Development Server:** The Webpack Dev Server is set up to serve content from the `dist` directory, with gzip compression enabled and it listens on port `8080`.

Here's a possible rewrite of the provided Node.js code:

```javascript
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  },
  plugins: [
    new HtmlWebpackPlugin({
      title: 'Webpack Plugin Example',
      template: './src/template.html',
      filename: 'index.html',
      favicon: './src/favicon.ico',
      meta: {
        description: 'Sample project using html-webpack-plugin'
      },
      inject: true,
      scriptLoading: 'defer',
      minify: {
        collapseWhitespace: true,
        removeComments: true
      }
    })
  ],
  devServer: {
    contentBase: path.join(__dirname, 'dist'),
    compress: true,
    port: 8080
  }
};
```