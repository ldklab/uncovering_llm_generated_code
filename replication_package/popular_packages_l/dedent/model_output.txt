The `dedent` package is a utility tool for managing and formatting multi-line strings in JavaScript or TypeScript. Its main function is to remove unnecessary indentation that often appears when using template literals for multi-line strings. This ensures that strings remain readable in the source code but do not include the extra spaces when stored in variables or logged to the console.

### Functionality:

1. **Basic Usage**: 
   - `dedent` can be used as a tagged template literal to strip indentation from multi-line strings while maintaining their natural formatting in the source code.
   - As a function: it can also process strings passed directly to it without using template literals.

2. **Trimming**:
   - It automatically trims leading and trailing lines to prevent any unwanted newline characters at the beginning or end of your strings.

3. **Customization**:
   - `dedent` provides a `withOptions` method that allows users to customize how special characters are handled within strings. This method returns a new `dedent` function with the specified options.
   - `escapeSpecialCharacters` is one such option. It dictates if dedent should escape special characters, like the dollar sign (`$`), which are often used in tagged template literals. The default behavior is to escape special characters when `dedent` is used as a tagged template literal but not as a function.

4. **Reusable Configurations**:
   - Users can create new `dedent` functions with specific options and reuse them across multiple calls to maintain consistent string processing behavior.

Now, let's implement this functionality in a Node.js package:

```javascript
function dedent(strings, ...values) {
  const raw = typeof strings === 'string' ? [strings] : strings.raw;

  let result = '';
  for (let i = 0; i < raw.length; i++) {
    result += raw[i]
      // Replace escaped newlines with empty strings
      .replace(/\\n[ \t]*/g, '')
      // Append the value if it exists
      + (values[i] || '');
  }

  // Strip out indentation
  const lines = result.split('\n');
  const minIndent = lines.reduce((minIndent, line) => {
    if (line.trim() === '') return minIndent;
    const matches = line.match(/^(\s*)/);
    const indent = matches ? matches[0].length : 0;
    return line && (indent < minIndent || minIndent === null) ? indent : minIndent;
  }, null);

  const dedentedText = minIndent !== null
    ? lines.map(line => line.slice(minIndent)).join('\n')
    : result;

  return dedentedText.trim();
}

dedent.withOptions = function(options = {}) {
  const { escapeSpecialCharacters = true } = options;

  return function(strings, ...values) {
    let finalStrings = strings;
    if (escapeSpecialCharacters) {
      finalStrings = strings.map((str) => str.replace(/([$`\\])/g, '\\$1'));
    }
    return dedent(finalStrings, ...values);
  };
};

// Export as default to mimic ES Module default export behavior
module.exports = dedent;

// Usage example
function usageExample() {
  const first = dedent`A string that gets so long you need to break it over
                       multiple lines. Luckily dedent is here to keep it
                       readable without lots of spaces ending up in the string
                       itself.`;

  const second = dedent`
    Leading and trailing lines will be trimmed, so you can write something like
    this and have it work as you expect:

      * how convenient it is
      * that I can use an indented list
         - and still have it do the right thing

    That's all.
  `;

  const third = dedent(`
    Wait! I lied. Dedent can also be used as a function.
  `);

  return first + "\n\n" + second + "\n\n" + third;
}

console.log(usageExample());
```

This Node.js package implements a `dedent` function that can strip the extra leading spaces and maintain the cleanliness of multi-line strings in your code. It also offers a way to configure the escaping of special characters, ensuring flexibility in dealing with potential issues when working with template strings.