The given Node.js code is an AWS SDK middleware module for handling HTTP host headers. It is implemented using TypeScript and includes functionality to ensure that the host header is correctly set in an HTTP request object if it's missing, without overriding any existing host headers. The codebase is organized into a TypeScript configuration, package dependencies, and a Jest test suite. The middleware modifies the request's headers to include a host field based on the request's endpoint URL. If the host field already exists in the request headers, it remains unchanged. Here's an organized rewrite of the provided Node.js code:

```json
// package.json
{
  "name": "@aws-sdk/middleware-host-header",
  "version": "1.0.0",
  "main": "build/index.js",
  "scripts": {
    "build": "tsc",
    "test": "jest"
  },
  "devDependencies": {
    "typescript": "^4.0.0",
    "jest": "^27.0.0",
    "@types/jest": "^27.0.0"
  },
  "dependencies": {
    "@aws-sdk/types": "^3.0.0"
  }
}
```

```json
// tsconfig.json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "strict": true,
    "outDir": "build"
  },
  "include": ["src/**/*"]
}
```

```typescript
// src/index.ts
import {
  BuildMiddleware,
  FinalizeHandlerArguments,
  HttpRequest,
  MetadataBearer
} from "@aws-sdk/types";

export const hostHeaderMiddleware = (): BuildMiddleware<any, any> => (
  next,
  context
) => async (args: FinalizeHandlerArguments<any>): Promise<{ response: MetadataBearer }> => {
  const { request } = args;
  if (HttpRequest.isInstance(request)) {
    updateHostHeader(request);
  }
  return next(args);
};

const updateHostHeader = (request: HttpRequest) => {
  if (!request.headers.host) {
    const url = new URL(request.endpoint);
    request.headers.host = url.host;
  }
};
```

```typescript
// Jest Test (src/index.test.ts)
import { hostHeaderMiddleware } from "./index";
import { HttpRequest } from "@aws-sdk/types";

describe("hostHeaderMiddleware", () => {
  it("should add host header if not present", async () => {
    const request = new HttpRequest({ method: "GET", protocol: "https:", path: "/", hostname: "example.com", query: {} });
    const next = jest.fn((args) => Promise.resolve({ response: {} }));

    await hostHeaderMiddleware()(next, {})( { request } );

    expect(request.headers.host).toBe("example.com");
  });
  
  it("should not override existing host header", async () => {
    const request = new HttpRequest({
      method: "GET",
      protocol: "https:",
      path: "/",
      hostname: "example.com",
      query: {},
      headers: {
        host: "predefined-host.com"
      }
    });
    const next = jest.fn((args) => Promise.resolve({ response: {} }));

    await hostHeaderMiddleware()(next, {})( { request } );

    expect(request.headers.host).toBe("predefined-host.com");
  });
});
```