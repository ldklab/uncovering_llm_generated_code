```json
{
  "name": "@aws-sdk/region-config-resolver",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT"
}
```

```javascript
// index.js
module.exports = {
  resolveRegionFromEnv,
  validateRegion,
  getRegionEndpoint,
  listAvailableRegions
};

const availableRegions = [
  'us-east-1', 'us-west-2', 'eu-west-1', // ... other regions
];

function resolveRegionFromEnv() {
  return process.env.AWS_REGION || process.env.AWS_DEFAULT_REGION || null;
}

function validateRegion(region) {
  if (!region || !availableRegions.includes(region)) {
    throw new Error(`Invalid AWS region: ${region}`);
  }
  return true;
}

function getRegionEndpoint(region) {
  if (!region) {
    throw new Error("Region is required to get endpoint.");
  }
  return `https://service.${region}.amazonaws.com`;
}

function listAvailableRegions() {
  return availableRegions;
}

// Example usage
try {
  const region = resolveRegionFromEnv();
  validateRegion(region);
  console.log(`Using region: ${region}`);
  console.log(`Endpoint: ${getRegionEndpoint(region)}`);
  console.log(`Available regions: ${listAvailableRegions().join(', ')}`);
} catch (error) {
  console.error(error.message);
}
```

The code is part of a Node.js package designed to resolve, validate, and manage AWS regions. It exports four functions: `resolveRegionFromEnv`, `validateRegion`, `getRegionEndpoint`, and `listAvailableRegions`. 

- **resolveRegionFromEnv**: Fetches the AWS region from environment variables `AWS_REGION` or `AWS_DEFAULT_REGION`.
- **validateRegion**: Checks if a given region is valid by comparing it against a predefined list of supported regions.
- **getRegionEndpoint**: Constructs an AWS service endpoint URL based on the provided region.
- **listAvailableRegions**: Returns the list of all regions supported by this package.

An example usage section demonstrates how to use these functions to fetch and validate an AWS region, retrieve its endpoint, and list all available regions, handling errors if any step fails.