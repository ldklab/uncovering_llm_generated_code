The `@aws-sdk/region-config-resolver` is a Node.js package used internally for handling AWS region configurations. As the README suggests, this package is likely part of AWS's SDK internals, providing utility functions to resolve configurations related to AWS regions.

The package's main purpose is to provide "utilities for AWS region config resolvers." This implies that it includes functionality to handle, format, validate, or otherwise manipulate AWS region-related configurations. Based on standard practices for such utilities, possible functionalities could include parsing region data, determining endpoints, validating region names, or loading region information from environment variables or configuration files.

Now, I will provide the code for such a package with basic utility functions that align with the presumed functionality described above.

```javascript
// package.json
{
  "name": "@aws-sdk/region-config-resolver",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT"
}

// index.js
module.exports = {
  resolveRegionFromEnv,
  validateRegion,
  getRegionEndpoint,
  listAvailableRegions
};

// Supported regions example
const availableRegions = [
  'us-east-1', 'us-west-2', 'eu-west-1', // ... other regions
];

function resolveRegionFromEnv() {
  // Retrieve the AWS region from environment variables
  return process.env.AWS_REGION || process.env.AWS_DEFAULT_REGION || null;
}

function validateRegion(region) {
  // Validate if the region is part of supported AWS regions
  if (!region || !availableRegions.includes(region)) {
    throw new Error(`Invalid AWS region: ${region}`);
  }
  return true;
}

function getRegionEndpoint(region) {
  // Resolve the endpoint for a given region (assuming region format is sensible)
  if (!region) {
    throw new Error("Region is required to get endpoint.");
  }
  // A mock example of generating endpoint; real logic might be more complex
  return `https://service.${region}.amazonaws.com`;
}

function listAvailableRegions() {
  // Return a list of regions this package supports
  return availableRegions;
}

// Example usage (this is for illustration and not part of the module itself)
try {
  const region = resolveRegionFromEnv();
  validateRegion(region);
  console.log(`Using region: ${region}`);
  console.log(`Endpoint: ${getRegionEndpoint(region)}`);
  console.log(`Available regions: ${listAvailableRegions().join(', ')}`);
} catch (error) {
  console.error(error.message);
}
```

This package provides utility functions to work with AWS region configurationsâ€”including resolving from environment variables, validating regions, retrieving region endpoints, and listing available regions.