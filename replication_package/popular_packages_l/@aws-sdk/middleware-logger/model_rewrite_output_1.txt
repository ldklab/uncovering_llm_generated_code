The provided Node.js code defines a `LoggerMiddleware` class that acts as a middleware for logging HTTP requests and responses, as well as any errors that occur during the process. The `LoggerMiddleware` is intended to be used with AWS SDK clients or any other system that uses middleware stacks.

### Explanation:

1. **LoggerMiddleware Class**: This class is instantiated with a logger object, which defaults to the console. It provides logging functionalities for capturing request arguments, response results, and errors.

2. **applyMiddlewareToStack(stack)**: This method adds the `loggerMiddleware` function to a middleware stack. It's configured to be applied at the 'initialize' step, with a high priority and tagged as 'LOGGER_MIDDLEWARE'.

3. **loggerMiddleware(next, context)**: The core middleware function which:
   - Logs the incoming request arguments.
   - Calls the next middleware or handler in the stack.
   - Logs the response if the call is successful, or logs an error if it fails.

4. **getLoggerMiddleware(logger)**: A factory function that creates an instance of `LoggerMiddleware` and returns an object with an `applyToStack` method for integrating the middleware into a middleware stack.

5. **Exports**: `getLoggerMiddleware` is exported for use by other modules.

6. **Usage**: Illustrates how the `LoggerMiddleware` can be integrated into an AWS SDK client by using `getLoggerMiddleware(console)` function.

```javascript
// index.js

class LoggerMiddleware {
  constructor(logger = console) {
    this.logger = logger;
  }

  applyMiddlewareToStack(stack) {
    stack.add(this.loggerMiddleware.bind(this), {
      step: 'initialize',
      tags: ['LOGGER_MIDDLEWARE'],
      name: 'loggerMiddleware',
      priority: 'high',
    });
  }

  async loggerMiddleware(next, context) {
    return async (args) => {
      this.logRequest(args, context);
      try {
        const result = await next(args);
        this.logResponse(result, context);
        return result;
      } catch (err) {
        this.logError(err, context);
        throw err;
      }
    };
  }

  logRequest(args, context) {
    this.logger.info(`Request: ${JSON.stringify(args)}`, { context });
  }

  logResponse(result, context) {
    this.logger.info(`Response: ${JSON.stringify(result)}`, { context });
  }

  logError(error, context) {
    this.logger.error(`Error: ${error}`, { context });
  }
}

function getLoggerMiddleware(logger) {
  const loggerMiddleware = new LoggerMiddleware(logger);
  return {
    applyToStack: loggerMiddleware.applyMiddlewareToStack.bind(loggerMiddleware),
  };
}

module.exports = { getLoggerMiddleware };

// Usage example for a middleware stack
// const { getLoggerMiddleware } = require('./index');
// const { Client } = require('some-aws-sdk-client');

// const client = new Client({
//   region: 'us-west-2',
// });

// client.middlewareStack.use(getLoggerMiddleware(console));
```