The provided Node.js code is designed to load AWS credentials from environment variables or a credentials file. Here's the functionality of each part of the code:

1. **Constants Setup**: Define file paths for the default AWS credentials and config files in the user's home directory.
2. **Environment Variable Loading**: The `loadFromEnv` function attempts to retrieve AWS credentials from environment variables `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`. If both are available, it returns them; otherwise, it returns null.
3. **Credentials File Loading**: The `loadFromCredentialsFile` function checks if the provided file path exists and reads its contents. It uses regex to extract values for `aws_access_key_id` and `aws_secret_access_key`. It returns these credentials if found; otherwise, null.
4. **Default Provider Function**: The `defaultProvider` function first attempts to load credentials using `loadFromEnv`. If unavailable, it tries `loadFromCredentialsFile` using the specified file path or defaults. If credentials cannot be retrieved through these means, it rejects with an error indicating no credentials were found.
5. **Usage Example**: Demonstrates using the `defaultProvider` function to attempt loading credentials and handling the successful or error state with respective console output.

Here is the rewritten Node.js code:

```javascript
const fs = require('fs');
const path = require('path');

// Constants for Default File Paths
const DEFAULT_CREDENTIALS_FILEPATH = path.join(process.env.HOME || process.env.USERPROFILE, '.aws', 'credentials');

// Function to load credentials from environment variables
const loadCredentialsFromEnv = () => {
    const { AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY } = process.env;
    return AWS_ACCESS_KEY_ID && AWS_SECRET_ACCESS_KEY ?
        { accessKeyId: AWS_ACCESS_KEY_ID, secretAccessKey: AWS_SECRET_ACCESS_KEY } : null;
};

// Function to load credentials from specified file
const loadCredentialsFromFile = (filepath) => {
    if (fs.existsSync(filepath)) {
        const contents = fs.readFileSync(filepath, 'utf-8');
        const accessKeyId = contents.match(/aws_access_key_id\s*=\s*(.*)/)?.[1];
        const secretAccessKey = contents.match(/aws_secret_access_key\s*=\s*(.*)/)?.[1];
        return accessKeyId && secretAccessKey ? { accessKeyId, secretAccessKey } : null;
    }
    return null;
};

// Default provider to fetch AWS credentials
const getDefaultProvider = ({ filepath = DEFAULT_CREDENTIALS_FILEPATH } = {}) => {
    return new Promise((resolve, reject) => {
        let credentials = loadCredentialsFromEnv();
        if (credentials) return resolve(credentials);

        credentials = loadCredentialsFromFile(filepath);
        if (credentials) return resolve(credentials);

        reject(new Error('No credentials found'));
    });
};

// Usage demonstration
getDefaultProvider()
    .then(credentials => console.log('Loaded credentials:', credentials))
    .catch(error => console.error('Failed to load credentials:', error));
```