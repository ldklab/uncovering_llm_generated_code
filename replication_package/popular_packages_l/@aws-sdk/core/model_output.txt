The `@aws-sdk/core` package is part of the AWS SDK for JavaScript (v3) and offers core functionalities required by AWS SDK clients. It is designed to be automatically installed as a transitive dependency by the AWS SDK client packages, so developers using these clients do not need to install `@aws-sdk/core` directly.

### Key Aspects of `@aws-sdk/core`:

1. **Modularization:** The package is structured as a collection of submodules for better modularization. This design optimizes initialization speed in Node.js and helps maintain consistency across core dependencies.

2. **Submodule Organization:** Submodules within the package are organized through the `exports` field in the `package.json`, allowing each submodule to be distributed and used independently. This is supported natively by modern JavaScript bundlers like Node.js, webpack, and esbuild, and can be enabled for React Native with some configuration.

3. **Submodule Guidelines:**
   - Each submodule is defined in a directory under `./src/submodules/<MODULE_NAME>/` with an `index.ts` file.
   - Submodules should not import directly from other submodules using relative paths. Instead, they should use scoped import paths.
   - The linter ensures that each submodule is correctly set up in `package.json` and relevant `tsconfig.json` files.

4. **When to Create a Submodule:**
   - A core submodule should be created if the functionality is commonly needed by multiple AWS SDK clients. For instance, XML serialization is an example of core functionality.
   - If a feature is specific to certain clients and not widely applicable, it should be developed as a standalone package rather than a submodule.

The package thus facilitates a streamlined and efficient way to share common functionalities among multiple AWS SDK clients while maintaining a high level of modularization.

```markdown
// Given explanation, here's a basic structure to implement the functionality in a Node.js package

// File: package.json
{
  "name": "@aws-sdk/core",
  "version": "1.0.0",
  "description": "Core functionalities for AWS SDK for JavaScript (v3).",
  "main": "dist/index.js",
  "exports": {
    "./submodules/sample": "./dist/submodules/sample/index.js"
  },
  "scripts": {
    "build": "node build.js",
    "lint": "eslint ./src --fix"
  },
  "dependencies": {
    // Core dependencies
  },
  "devDependencies": {
    "eslint": "^8.0.0",
    "typescript": "^4.5.2"
  }
}

// File: build.js
const fs = require('fs');
const path = require('path');

function build() {
  const srcPath = path.resolve(__dirname, 'src');
  const distPath = path.resolve(__dirname, 'dist');

  if (!fs.existsSync(distPath)){
    fs.mkdirSync(distPath, { recursive: true });
  }

  // Copy submodule contents to dist
  fs.readdirSync(path.join(srcPath, 'submodules')).forEach(module => {
    const moduleSrc = path.join(srcPath, 'submodules', module);
    const moduleDist = path.join(distPath, 'submodules', module);

    if (!fs.existsSync(moduleDist)){
      fs.mkdirSync(moduleDist, { recursive: true });
    }

    fs.copyFileSync(path.join(moduleSrc, 'index.ts'), path.join(moduleDist, 'index.js'));
  });
}

// Perform build logic
build();

// File: .eslintrc.js
module.exports = {
  parser: '@typescript-eslint/parser',
  extends: ['plugin:@typescript-eslint/recommended'],
  rules: {
    'no-relative-imports': 'error'
  }
};

// File: src/submodules/sample/index.ts
// Sample submodule implementation
export const helloWorld = () => "Hello, World from @aws-sdk/core!";

// Note: Real implementation should follow AWS development practices with proper TypeScript setup, linting, testing, etc.
```

This code block provides the basic setup for creating a Node.js package similar to `@aws-sdk/core`, structuring it to work with submodules, providing example paths, and including basic TypeScript and lint configurations. The actual implementation details would depend on more specific requirements of the package.