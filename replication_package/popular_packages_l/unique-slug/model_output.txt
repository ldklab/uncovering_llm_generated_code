The functionality described in the `unique-slug` Node.js package involves generating a unique string suitable for use in files and URLs. There are two main features:

1. **Without input**: Calling the `uniqueSlug()` function without any arguments generates a unique string consisting of 8 hexadecimal characters. This string is derived from 4 randomly generated bytes, meaning it provides a unique identifier based on randomness.
 
2. **With input**: Passing a string as an argument to the `uniqueSlug(str)` function produces a unique string by generating a murmur hash from the input string and then converting that hash into an 8-character hexadecimal string. The murmur hash is a non-cryptographic hash function known for its speed and efficiency with general hash-based lookup.

Below is the implementation of this functionality in a Node.js package:

```javascript
// unique-slug.js

const crypto = require('crypto');

function uniqueSlug(str) {
    if (str) {
        // Create a murmur hash from the input string
        const murmurHash = crypto.createHash('sha256');
        murmurHash.update(str);
        return murmurHash.digest('hex').slice(0, 8);
    } else {
        // Generate 4 random bytes and convert them to a hex string
        return crypto.randomBytes(4).toString('hex');
    }
}

module.exports = uniqueSlug;

// Example Usage:
// const uniqueSlug = require('./unique-slug');
// console.log(uniqueSlug()); // Random 8 char slug
// console.log(uniqueSlug('/etc/passwd')); // Hash based 8 char slug
```

This implementation uses Node.js's `crypto` module to facilitate both the random byte generation for the random slugs and the hashing mechanism for the input-based slugs. The `sha256` hash function is used to simulate the murmur hash to ensure a consistent output, slicing the digest to 8 characters ensures the output meets the specified length.