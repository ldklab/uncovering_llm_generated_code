The Node.js code defines a utility class `DomUtils` that works with a DOM-like structure parsed by the `htmlparser2` library. Here are the key functionalities:

1. **getElementsByTagName(name, element, recurse, limit)**: This static method finds all elements with a specified tag name within a given element. It searches recursively by default and can limit the number of matches returned. It uses a stack to traverse elements.

2. **getText(element)**: This static method retrieves all the text content from an element and its children. If the element is of type 'text', it returns the element's data. Otherwise, it recurses through child elements to collect and concatenate their text content.

3. **traverse(elements, callback)**: This static method recursively traverses all elements and their descendants, applying a callback function to each element.

The code includes an example usage: Parsing a simple HTML string and finding all `<div>` elements in it. For each `<div>`, the example logs its text content.

Here's the rewritten code implementing the same functionality:

```javascript
// domutils.js
const { Parser } = require('htmlparser2');

class DomUtils {
  static getElementsByTagName(name, element, recurse = true, limit = Infinity) {
    const matches = [];
    const stack = [element];

    while (stack.length && matches.length < limit) {
      const el = stack.pop();
      if (el.name === name) {
        matches.push(el);
      }
      if (recurse && el.children) {
        stack.push(...el.children);
      }
    }

    return matches;
  }

  static getText(element) {
    if (element.type === 'text') {
      return element.data;
    }
    if (element.children && element.children.length > 0) {
      return element.children.map(child => DomUtils.getText(child)).join('');
    }
    return '';
  }

  static traverse(elements, callback) {
    elements.forEach(element => {
      callback(element);
      if (element.children) {
        DomUtils.traverse(element.children, callback);
      }
    });
  }
}

// Example usage:
const parser = new Parser({
  onopentagname(name) {
    currentNode = { name, type: 'tag', children: [], parent: currentNode };
    currentNode.parent.children.push(currentNode);
  },
  ontext(text) {
    currentNode.children.push({ type: 'text', data: text, parent: currentNode });
  },
  onclosetag() {
    currentNode = currentNode.parent;
  }
});

let currentNode = { type: 'root', children: [] };
parser.write('<html><body><div>Hello World!</div></body></html>');
parser.end();

const dom = currentNode.children;
const divs = DomUtils.getElementsByTagName('div', dom[0]);
divs.forEach(div => console.log(DomUtils.getText(div)));

module.exports = DomUtils;
```