The `yaml` library for Node.js provides comprehensive functionality for handling YAML data, a popular human-readable data serialization format. This library supports both YAML 1.1 and YAML 1.2 specifications and is capable of parsing, modifying, and writing YAML with rich support for comments and blank lines. Additionally, it has no external dependencies, making it well-suited for use in both Node.js and modern browser environments.

### Key Features

1. **YAML Version Support**: It supports both YAML 1.1 and YAML 1.2 versions and all common data schemas.

2. **Parse & Stringify**:
   - `parse(str, reviver?, options?)`: Parses a YAML string into a JavaScript value.
   - `stringify(value, replacer?, options?)`: Converts a JavaScript value into a YAML-formatted string.

3. **Document API**:
   - Provides a `Document` class that you can use to manipulate YAML documents, access anchors, directives, content nodes, and handle errors or warnings.
   - Functions like `isDocument`, `parseAllDocuments`, and `parseDocument` are provided for document manipulation.

4. **Content Nodes**:
   - Offers functions to identify YAML node types and create or manipulate scalar values, collections, maps, sequences, aliases, and pairs.
   - The `visit` function allows for node traversal and modification.

5. **Lexer/Parser/Composer**:
   - Provides a lower-level API for handling YAML structure including lexer, parser, and composer functionalities to process tokens.

6. **Command-line Tool**: The library also includes a command-line tool for YAML processing.

7. **TypeScript Support**: The library includes TypeScript typings support, compatible with TypeScript version 3.9 and newer.

Here's a simple implementation of a Node.js package that captures this functionality using JavaScript:

```js
// index.js

const fs = require('fs');

class Yaml {
  constructor() {}

  static parse(yamlString) {
    // A simple YAML parser for demo purposes, converts basic YAML strings to JavaScript objects.
    try {
      const lines = yamlString.trim().split('\n');
      const result = {};
      let currentKey = null;

      for (const line of lines) {
        if (line.includes(':')) {
          const [key, value] = line.split(':').map(str => str.trim());
          currentKey = key;
          result[key] = value || [];
        } else if (currentKey) {
          result[currentKey].push(line.trim());
        }
      }

      return result;
    } catch (error) {
      console.error('Failed to parse YAML string:', error);
      return null;
    }
  }

  static stringify(jsObject) {
    // A simple JavaScript object to YAML string converter for demo purposes.
    try {
      let yamlString = '';
      for (const [key, value] of Object.entries(jsObject)) {
        if (Array.isArray(value)) {
          yamlString += `${key}:\n`;
          value.forEach(item => {
            yamlString += `  - ${item}\n`;
          });
        } else {
          yamlString += `${key}: ${value}\n`;
        }
      }
      return yamlString;
    } catch (error) {
      console.error('Failed to stringify object:', error);
      return '';
    }
  }
}

// Usage examples:
const yamlString = `
YAML:
  - A human-readable data serialization language
  - https://en.wikipedia.org/wiki/YAML
`;

const parsedData = Yaml.parse(yamlString);
console.log('Parsed Data:', parsedData);

const jsObject = {
  number: 3,
  plain: 'string',
  block: ['two', 'lines']
};

const stringifiedYaml = Yaml.stringify(jsObject);
console.log('Stringified YAML:', stringifiedYaml);

// Exporting for module usage
module.exports = Yaml;
```

This code provides basic functionality for parsing and stringifying YAML data, consistent with some of the features described but in a simplified form without full YAML 1.2 syntax compliance or detailed error handling features found in a comprehensive library like the actual `yaml` npm package.