The provided Node.js code defines a lightweight class `MomentLite` for date manipulation, implemented as a simplified alternative to the popular Moment.js library. The functionality of the class includes:

1. **Constructor (`constructor`)**: Accepts a date input, either as a string or a Date object, and initializes a new date object. It throws an error if the input date is invalid.

2. **Static Method (`now`)**: Returns a new instance of `MomentLite` initialized to the current date and time.

3. **Format Method (`format`)**: Formats the date into a string representation using `Intl.DateTimeFormat`. It currently supports basic formatting including year, month, day, hour, minute, and second.

4. **Add Method (`add`)**: Modifies the instance's date by adding a specified amount of time in a specified unit (seconds, minutes, hours, or days).

5. **Subtract Method (`subtract`)**: Similar to `add`, but subtracts the specified amount and unit of time from the date.

6. **Validation Method (`isValid`)**: Checks if the instance's date is valid or not.

7. **ISO String Method (`toISOString`)**: Converts the date to an ISO 8601 string format.

Here is the refactored version of the code:

```javascript
// moment-lite.js

class MomentLite {
  constructor(date) {
    this.date = new Date(date);
    if (isNaN(this.date)) {
      throw new Error('Invalid date');
    }
  }

  static now() {
    return new MomentLite(new Date());
  }

  format() {
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    };
    return new Intl.DateTimeFormat('default', options).format(this.date);
  }

  add(amount, unit) {
    const unitMillisecondsMap = {
      seconds: 1000,
      minutes: 1000 * 60,
      hours: 1000 * 60 * 60,
      days: 1000 * 60 * 60 * 24,
    };

    const ms = unitMillisecondsMap[unit];
    if (!ms) {
      throw new Error('Invalid unit');
    }

    this.date = new Date(this.date.getTime() + amount * ms);
    return this;
  }

  subtract(amount, unit) {
    return this.add(-amount, unit);
  }

  isValid() {
    return !isNaN(this.date);
  }

  toISOString() {
    return this.date.toISOString();
  }
}

// Usage example
const myDate = new MomentLite('2023-10-12');
console.log(myDate.format()); // Outputs the formatted date
myDate.add(2, 'days');
console.log(myDate.toISOString()); // Date increased by 2 days

module.exports = MomentLite;
```