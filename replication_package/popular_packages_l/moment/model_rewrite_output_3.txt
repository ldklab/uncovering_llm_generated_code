The `MomentLite` class in the provided code is a simple date manipulation library similar to `Moment.js` but with limited functionality. 

### Features:
1. **Constructor**: Initializes an instance with a date, validates it, and throws an error if the date is invalid.
2. **Static Method `now()`**: Returns a new `MomentLite` instance representing the current date and time.
3. **Method `format(formatString)`**: Formats the date using `Intl.DateTimeFormat`. It ignores the `formatString` parameter and only uses a predefined format.
4. **Method `add(amount, unit)`**: Adds a specified amount of time to the date. Supported units are `seconds`, `minutes`, `hours`, and `days`. Throws an error for unsupported units.
5. **Method `subtract(amount, unit)`**: Subtracts a specified amount of time from the date by internally calling the `add()` method with a negative amount.
6. **Method `isValid()`**: Checks if the date is valid.
7. **Method `toISOString()`**: Returns the date in ISO 8601 format.

### Usage:
The code demonstrates how to create an instance of `MomentLite`, format and manipulate dates, and output the results.

Here is the rewritten version of the Node.js code:

```javascript
// moment-lite.js

class MomentLite {
  constructor(date) {
    this.date = new Date(date);
    if (isNaN(this.date)) {
      throw new Error('Invalid date');
    }
  }

  static now() {
    return new MomentLite(new Date());
  }

  format() {
    const options = {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    };
    return new Intl.DateTimeFormat('default', options).format(this.date);
  }

  add(amount, unit) {
    const unitMilliseconds = {
      seconds: 1000,
      minutes: 60 * 1000,
      hours: 60 * 60 * 1000,
      days: 24 * 60 * 60 * 1000
    };

    if (!(unit in unitMilliseconds)) {
      throw new Error('Invalid unit');
    }

    this.date = new Date(this.date.getTime() + amount * unitMilliseconds[unit]);
    return this;
  }

  subtract(amount, unit) {
    return this.add(-amount, unit);
  }

  isValid() {
    return !isNaN(this.date);
  }

  toISOString() {
    return this.date.toISOString();
  }
}

// Usage example
const myDate = new MomentLite('2023-10-12');
console.log(myDate.format()); // Outputs the formatted date
myDate.add(2, 'days');
console.log(myDate.toISOString()); // Date increased by 2 days

module.exports = MomentLite;
```