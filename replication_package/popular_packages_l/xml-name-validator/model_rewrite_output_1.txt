The given Node.js code is a module that validates XML names and qualified names based on the XML specification. Here's a breakdown of its functionality:

1. **isNameStartChar Function**: This function checks if a given character can be the starting character of an XML name. It considers a range of Unicode characters including uppercase and lowercase letters, underscores, and characters in specified Unicode blocks.

2. **isNameChar Function**: This function extends the isNameStartChar function to also include characters that can appear anywhere in an XML name after the first character. This includes digits, hyphens, periods, and additional Unicode characters.

3. **name Function**: This function validates whether a given string is a valid XML name. It checks if the first character of the string is a valid start character by using isNameStartChar, and all subsequent characters must be valid using isNameChar.

4. **qname Function**: This function validates whether a given string is a valid qualified XML name (QName). A QName may have a prefix and local part, separated by a colon. Thus, the string is split at colons, and each part must be a valid name. There must be at most one colon in the string.

5. **Module Exports**: The module exports the `name` and `qname` functions, making them available for use in other files.

Here is the rewritten code:

```javascript
"use strict";

function isNameStartChar(c) {
  const ranges = [
    ['A', 'Z'], ['a', 'z'], ['\u00C0', '\u00D6'], ['\u00D8', '\u00F6'], ['\u00F8', '\u02FF'],
    ['\u0370', '\u037D'], ['\u037F', '\u1FFF'], ['\u200C', '\u200D'], ['\u2070', '\u218F'],
    ['\u2C00', '\u2FEF'], ['\u3001', '\uD7FF'], ['\uF900', '\uFDCF'], ['\uFDF0', '\uFFFD'],
    ['\u10000', '\uEFFFF']
  ];
  return ranges.some(([start, end]) => c >= start && c <= end) || c === '_';
}

function isNameChar(c) {
  const specialChars = ['-', '.', '\u00B7'];
  const ranges = [
    ['0', '9'], ['\u0300', '\u036F'], ['\u203F', '\u2040']
  ];
  return isNameStartChar(c) || specialChars.includes(c) ||
    ranges.some(([start, end]) => c >= start && c <= end);
}

function name(str) {
  if (!str || !isNameStartChar(str.charAt(0))) return false;
  return Array.from(str).every((char, index) => index === 0 || isNameChar(char));
}

function qname(str) {
  const parts = str.split(':');
  if (parts.length > 2) return false;
  return parts.every(part => name(part) && part !== '');
}

module.exports = {
  name,
  qname
};
```