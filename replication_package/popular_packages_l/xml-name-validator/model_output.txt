The package `xml-name-validator` provides functionality to validate if a given string adheres to the `Name` or `QName` productions as defined in the XML Namespaces specification.

### Explanation:

1. **Name Validation (`name` function):**
   - Checks if the input string matches the XML `Name` production, which is a valid XML element name. It must start with a letter or underscore and can contain letters, digits, hyphens, underscores, colons, and periods. 
   - Examples of valid names include: `x`, `:`, `a:0`, `a:b:c`.
   - Invalid examples include: `\`, `'`, `0`, `a!`.

2. **Qualified Name Validation (`qname` function):**
   - Checks if the input string matches the XML `QName` production, which further restricts the XML `Name` for use in namespaces. A `QName` consists of an optional prefix and a local part, separated by a colon.
   - Valid examples include: `x`, `a0`, `a:b`.
   - Invalid examples include: `:a`, `:b`, `a:b:c`, and `a:0`.

Below is the implementation code for the described package:

```js
// xml-name-validator/index.js

"use strict";

function isNameStartChar(c) {
  return (
    (c >= 'A' && c <= 'Z') ||
    (c >= 'a' && c <= 'z') ||
    c === '_' ||
    (c >= '\u00C0' && c <= '\u00D6') ||
    (c >= '\u00D8' && c <= '\u00F6') ||
    (c >= '\u00F8' && c <= '\u02FF') ||
    (c >= '\u0370' && c <= '\u037D') ||
    (c >= '\u037F' && c <= '\u1FFF') ||
    (c >= '\u200C' && c <= '\u200D') ||
    (c >= '\u2070' && c <= '\u218F') ||
    (c >= '\u2C00' && c <= '\u2FEF') ||
    (c >= '\u3001' && c <= '\uD7FF') ||
    (c >= '\uF900' && c <= '\uFDCF') ||
    (c >= '\uFDF0' && c <= '\uFFFD') ||
    (c >= '\u10000' && c <= '\uEFFFF')
  );
}

function isNameChar(c) {
  return (
    isNameStartChar(c) ||
    (c >= '0' && c <= '9') ||
    c === '-' ||
    c === '.' ||
    c === '\u00B7' ||
    (c >= '\u0300' && c <= '\u036F') ||
    (c >= '\u203F' && c <= '\u2040')
  );
}

function name(str) {
  if (!str || !isNameStartChar(str.charAt(0))) {
    return false;
  }
  for (let i = 1; i < str.length; i++) {
    if (!isNameChar(str.charAt(i))) {
      return false;
    }
  }
  return true;
}

function qname(str) {
  const parts = str.split(':');
  if (parts.length > 2) {
    return false;
  }
  return parts.every((part) => name(part) && part !== '');
}

module.exports = {
  name,
  qname
};
```

This code allows users to check if a string is valid according to the XML name and qualified name rules specified. The `name` function checks for valid XML basic names, while the `qname` function checks for qualified names, considering an optional prefix separated by a colon.