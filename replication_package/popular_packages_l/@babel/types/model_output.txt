The functionality described in the Node.js package README.md for `@babel/types` is a utility library specifically designed for managing AST (Abstract Syntax Tree) nodes. It is part of the Babel toolchain, which is used primarily for transforming JavaScript code. This package provides utilities for building, validating, and transforming AST nodes, similar to the utility functions provided by Lodash but tailored for ASTs. This makes it easier for developers to programmatically generate and manipulate JavaScript code structures.

Below is an example of how to create a simple Node.js package that uses `@babel/types` to manipulate AST nodes. This code will demonstrate installing the package, creating a simple utility to build an AST node, and then printing this node as a string.

```javascript
// package.json
{
  "name": "babel-types-example",
  "version": "1.0.0",
  "description": "A simple example using @babel/types to manipulate AST nodes",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "devDependencies": {
    "@babel/types": "^7.0.0"
  }
}

// index.js
const babelTypes = require('@babel/types');

// Define a simple code transformation utility
function createVariableDeclaration(variableName, value) {
  const identifier = babelTypes.identifier(variableName);
  const numericLiteral = babelTypes.numericLiteral(value);
  const variableDeclarator = babelTypes.variableDeclarator(identifier, numericLiteral);
  return babelTypes.variableDeclaration('let', [variableDeclarator]);
}

// Demonstrate creating an AST node for `let x = 10;`
const astNode = createVariableDeclaration('x', 10);
console.log(JSON.stringify(astNode, null, 2));

// Output the generated code as a string (just illustrative, as @babel/generator is needed for full code generation)
console.log('AST Node:', astNode.type);

// To transpile or generate code from this AST you would typically use additional packages like @babel/generator
// This package does not provide code generation functionality by itself
```

To run this example, first ensure you have Node.js installed, then:

1. Create the files with the content specified above (`package.json` and `index.js`).
2. Open a terminal in the directory containing these files.
3. Run `npm install` to install `@babel/types`.
4. Run `npm start` to execute the example and see the output.

This showcases the creation of a simple variable declaration in the AST form, using `@babel/types`. For full transformation capabilities, including generating code from ASTs, additional Babel packages would be required.