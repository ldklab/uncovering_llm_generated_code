The functionality described in the README.md file is for a Babel plugin named `@babel/plugin-syntax-import-meta`. This plugin enables Babel, a JavaScript compiler, to parse the `import.meta` syntax in JavaScript files. However, it does not transform the `import.meta` syntax, it merely allows Babel to recognize and understand this syntax during the parsing stage.

The `import.meta` is a feature that provides metadata specific to the current module. It is part of the ES Module specification, and different JavaScript environments may offer various properties on the `import.meta` object. 

The package is intended to be used during development and build processes, hence the installation using the `--save-dev` flag. This suggests the plugin is added as a development dependency, which is typically the case for tools like Babel that are used to transform source code during development.

Below is the code for the package in a single block:

```javascript
// package.json
{
  "name": "@babel/plugin-syntax-import-meta",
  "version": "1.0.0",
  "description": "Babel plugin to allow parsing of import.meta syntax",
  "main": "lib/index.js",
  "keywords": ["babel-plugin", "syntax", "import.meta"],
  "author": "Babel Team",
  "license": "MIT",
  "devDependencies": {
    "@babel/core": "^7.0.0"
  }
}

// lib/index.js
module.exports = function ({ types: t }) {
  return {
    name: "syntax-import-meta",
    manipulateOptions(opts, parserOpts) {
      // Adding importMeta to parser plugins to allow parsing
      parserOpts.plugins.push("importMeta");
    }
  };
};

// .babelrc
{
  "plugins": ["@babel/plugin-syntax-import-meta"]
}

// Installation instruction scripts
// Run these commands in your terminal in the project directory to install

// Option 1: Using npm
// npm install --save-dev @babel/plugin-syntax-import-meta

// Option 2: Using yarn
// yarn add @babel/plugin-syntax-import-meta --dev
```

This code outlines the package.json for this Babel plugin, the main logic of the plugin itself in `lib/index.js` (where it adds support for parsing `import.meta`), and a `.babelrc` configuration that shows how to include the plugin in a Babel setup. Installation instructions using npm or yarn are also provided.