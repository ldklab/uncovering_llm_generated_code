The Node.js package `@babel/plugin-transform-react-jsx` is a Babel plugin designed to transform JSX syntax into standard React function calls. This is particularly useful for projects that make use of React because React components can be written using the more convenient and readable JSX syntax, which resembles HTML, and this plugin will convert that syntax into the JavaScript function calls that React understands.

The package can be installed via npm or yarn as a development dependency, since it's part of the build process and not required for production use.

Here's a simple implementation of this package:

```js
// index.js
const babel = require('@babel/core');

// This is a simple Babel plugin that mimics transforming JSX into React.createElement calls
function jsxTransformPlugin() {
  return {
    visitor: {
      JSXElement(path) {
        // Simplified transformation from JSX to React.createElement
        const reactCreateElement = createElementFromJSX(path.node);
        path.replaceWith(reactCreateElement);
      },
    },
  };
}

// Utility function to mock `React.createElement`
function createElementFromJSX(jsxNode) {
  const type = jsxNode.openingElement.name.name;
  const props = jsxNode.openingElement.attributes.reduce((acc, attr) => {
    acc[attr.name.name] = attr.value.type === 'JSXExpressionContainer' ? attr.value.expression : attr.value;
    return acc;
  }, {});
  const children = jsxNode.children.map(child => {
    if (child.type === 'JSXText') {
      return child.value;
    }
    return createElementFromJSX(child);
  });

  return {
    type: 'CallExpression',
    callee: {
      type: 'MemberExpression',
      object: { type: 'Identifier', name: 'React' },
      property: { type: 'Identifier', name: 'createElement' },
    },
    arguments: [
      { type: 'StringLiteral', value: type },
      { type: 'ObjectExpression', properties: Object.entries(props).map(([key, value]) => ({
          type: 'ObjectProperty',
          key: { type: 'Identifier', name: key },
          value: value.type ? value : { type: 'StringLiteral', value },
        })),
      },
      ...children,
    ],
  };
}

// Example usage
const code = `
  const element = (
    <div className="container">
      Hello, <strong>world!</strong>
    </div>
  );
`;

const output = babel.transformSync(code, {
  plugins: [jsxTransformPlugin],
});

console.log(output.code);
```

This code defines a simple Babel plugin called `jsxTransformPlugin` which transforms JSX elements into `React.createElement` calls. The plugin processes each `JSXElement` by converting it using a helper function `createElementFromJSX`, which constructs a new Abstract Syntax Tree (AST) node representing the `React.createElement` call. The `createElementFromJSX` function handles simple JSX elements and their attributes and children, although this implementation is a basic mock and does not cover all JSX features.
