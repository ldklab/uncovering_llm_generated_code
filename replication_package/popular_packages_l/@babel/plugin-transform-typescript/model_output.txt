The Node.js package `@babel/plugin-transform-typescript` is a Babel plugin that transforms TypeScript code into ECMAScript Next (ES.next) JavaScript code. This means that the plugin is designed to take TypeScript syntax and transpile it into the latest JavaScript syntax that a JavaScript engine can execute. This transformation is necessary because the TypeScript language includes features such as type annotations and other syntax that are not natively supported by JavaScript engines. By using `@babel/plugin-transform-typescript`, developers can write applications in TypeScript and have Babel convert their code to a JavaScript version that utilizes the newest available features of the language.

To use this package, it needs to be installed in the developer’s project. It can be installed using either the `npm` or `yarn` package manager, with the `--save-dev` or `--dev` flag indicating that the dependency is needed only for the development phase of the project.

Since the functionality described is about installation and usage rather than implementation, the following code will demonstrate how to set up Babel with this plugin in a Node.js project, including sample configurations.

```markdown
# Directory structure:
# .
# ├── package.json
# ├── babel.config.json
# └── src
#     └── index.ts

# package.json
{
  "name": "babel-typescript-transform",
  "version": "1.0.0",
  "description": "Transform TypeScript using Babel",
  "main": "dist/index.js",
  "scripts": {
    "build": "babel src --out-dir dist"
  },
  "devDependencies": {
    "@babel/cli": "^7.21.3",
    "@babel/core": "^7.21.3",
    "@babel/plugin-transform-typescript": "^7.21.3",
    "@babel/preset-env": "^7.21.3"
  }
}

# babel.config.json
{
  "presets": [
    "@babel/preset-env"
  ],
  "plugins": [
    "@babel/plugin-transform-typescript"
  ]
}

# src/index.ts
const greeting: string = "Hello, TypeScript!";
console.log(greeting);

# Commands to execute
# Install dependencies
npm install

# This will compile TypeScript in `src/` to JavaScript in `dist/`
npm run build
```

This setup includes a `package.json` file that lists `@babel/plugin-transform-typescript`, `@babel/core`, `@babel/cli`, and `@babel/preset-env` as development dependencies. A `babel.config.json` is used to configure Babel presets and plugins. Finally, there is a simple TypeScript file in the `src` directory that will be transpiled into JavaScript when running `npm run build`, demonstrating the transformation of TypeScript to ES.next.