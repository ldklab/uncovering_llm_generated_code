The `@babel/helper-compilation-targets` package provides helper functions that assist with determining and managing compilation targets within Babel. While the README.md provided is brief and doesn't delve into specific details or use cases, it implies that the package contains utility functions useful for handling how Babel will compile code for different environments and targets, such as different versions of Node.js or various web browsers.

To implement something similar, we would create a simple package that provides functions to check compatibility of JavaScript features with specified environments, list supported features for a target environment, and configure compilation targets for Babel.

Here's how the implementation might look in Node.js:

```javascript
// package.json
{
  "name": "@babel/helper-compilation-targets",
  "version": "1.0.0",
  "main": "index.js",
  "description": "Helper functions on Babel compilation targets",
  "scripts": {
    "test": "node tests.js"
  },
  "author": "",
  "license": "MIT"
}

// index.js
const browserslist = require('browserslist');
const compatData = require('@mdn/browser-compat-data');
const { features } = compatData.javascript;

function getCompilationTargets(query) {
  return browserslist(query);
}

function isFeatureSupported(feature, query) {
  const targets = getCompilationTargets(query);
  
  if (!(feature in features)) {
    throw new Error(`Unknown feature: ${feature}`);
  }
  
  return targets.every(target => {
    const [browser, version] = target.split(' ');
    return features[feature].__compat.support[browser] &&
           features[feature].__compat.support[browser].version_added <= parseFloat(version);
  });
}

function listSupportedFeatures(query) {
  const targets = getCompilationTargets(query);
  const supportedFeatures = [];

  for (let feature in features) {
    if (isFeatureSupported(feature, query)) {
      supportedFeatures.push(feature);
    }
  }

  return supportedFeatures;
}

module.exports = {
  getCompilationTargets,
  isFeatureSupported,
  listSupportedFeatures
};

// tests.js
const {
  getCompilationTargets,
  isFeatureSupported,
  listSupportedFeatures
} = require('./index');

const testQuery = '> 0.25%, not dead';

console.log('Compilation Targets:', getCompilationTargets(testQuery));
console.log('Is arrow functions supported:', isFeatureSupported('arrow-functions', testQuery));
console.log('Supported features:', listSupportedFeatures(testQuery));
```

This code defines three functions for the mock package:
- `getCompilationTargets`: Returns a list of environments that match a given browserslist query.
- `isFeatureSupported`: Checks if a specific JavaScript feature is supported in all environments specified by the query.
- `listSupportedFeatures`: Lists all features supported across the compilation targets defined by the query.

The `tests.js` file then demonstrates how these functions can be used. This is a simplified version and assumes installations of `browserslist` and `@mdn/browser-compat-data` for compatibility data.