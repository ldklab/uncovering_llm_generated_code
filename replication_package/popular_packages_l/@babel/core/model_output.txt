The Node.js package described is `@babel/core`, which is the main Babel compiler package. Babel is a popular JavaScript compiler that is widely used for converting ECMAScript 2015+ code into a backward-compatible version of JavaScript, making it run smoothly in older environments.

The functionality of `@babel/core` includes:

1. **Compilation**: It transforms JavaScript code by parsing it into an Abstract Syntax Tree (AST), processing it through a series of plugins (or transformations), and generating code from the transformed AST.

2. **Plugin System**: It allows users to create and use custom transformations through the use of plugins.

3. **Configuration**: It can be configured via a `.babelrc` file, in `package.json`, or programmatically to adjust how the transformation process should occur.

4. **Code Transformation**: Its primary role is to enable developers to use the latest JavaScript features, which are transformed (transpiled) down to a syntax or feature level that older browsers can understand.

5. **Integration with Build Tools**: `@babel/core` is often used in combination with other tools such as Webpack, Rollup, etc., as part of a larger build process to automate the transformation of the code base.

The `README.md` provides a quick reference to install the package using either npm or yarn, both popular package managers in the JavaScript ecosystem. Additionally, it directs users to the Babel website for detailed documentation.

Below is the code for a simple Node.js package that uses `@babel/core` to perform a basic transformation, converting newer JavaScript syntax into older syntax using the async/await sugar as an example:

```js
const babel = require('@babel/core');

// Sample ES6+ code using async/await to be transformed
const asyncCode = `
async function fetchData(url) {
  const response = await fetch(url);
  return response.json();
}
`;

// Babel configuration to specify plugins/presets for transformation
const babelOptions = {
  presets: ['@babel/preset-env'], // Use the env preset to transform modern JavaScript into ES5
};

// Function to transform code
function transformCode(code) {
  babel.transform(code, babelOptions, (err, result) => {
    if (err) {
      console.error('Error transforming code:', err);
      return;
    }
    console.log('Transformed code:', result.code);
  });
}

// Execute the transformation
transformCode(asyncCode);
```

To run this example:

1. Ensure you have Node.js installed on your machine.
2. Save the above code into a file, e.g., `transform.js`.
3. Install `@babel/core` and `@babel/preset-env` by running `npm install @babel/core @babel/preset-env --save-dev`.
4. Execute the file with Node.js: `node transform.js`.

This setup will take a string of JavaScript code and transform it using Babel with the specified presets, logging the transformed output to the console.