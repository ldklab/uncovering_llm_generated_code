The functionality described in the README is for a Babel plugin called `@babel/plugin-transform-async-to-generator`. This plugin transforms JavaScript async functions into ES2015 generator functions. This can be useful for compatibility with environments that support generators but not async functions. 

The README provides installation instructions using both npm and yarn, suggesting that it should be installed as a development dependency.

Now, let's implement a simplified version of what this Babel plugin might do in terms of transforming async functions to generator functions. Note that this is a conceptual implementation and may not cover all edge cases or perfectly replicate Babel's behavior.

```javascript
const babel = require("@babel/core");
const syntaxAsyncFunctions = require("@babel/plugin-syntax-async-functions");
const { types: t } = require("@babel/core");

function asyncToGenerator() {
  return {
    inherits: syntaxAsyncFunctions.default,
    visitor: {
      FunctionDeclaration(path) {
        if (!path.node.async) return;

        const asyncFunction = path.node;
        const generatorFunction = t.functionDeclaration(
          asyncFunction.id,
          asyncFunction.params,
          asyncFunction.body,
          true // to indicate it's a generator
        );
        
        // Replace the async function with a generator function
        path.replaceWith(generatorFunction);
      },
      FunctionExpression(path) {
        if (!path.node.async) return;

        const asyncFunction = path.node;
        const generatorFunction = t.functionExpression(
          asyncFunction.id,
          asyncFunction.params,
          asyncFunction.body,
          true // to indicate it's a generator
        );
        
        // Replace the async function with a generator function
        path.replaceWith(generatorFunction);
      },
      ArrowFunctionExpression(path) {
        if (!path.node.async) return;

        const asyncFunction = path.node;
        const generatorFunction = t.arrowFunctionExpression(
          asyncFunction.params,
          asyncFunction.body,
          true // to indicate it's a generator
        );
        
        // Replace the async function with a generator function
        path.replaceWith(generatorFunction);
      }
    }
  };
}

// Example usage
const code = `
async function fetchData() {
  await fetch('https://example.com');
}

const asyncArrowFunction = async () => {
  await fetch('https://example.com');
}
`;

const output = babel.transform(code, {
  plugins: [asyncToGenerator()]
});

console.log(output.code);
```

In this conceptual code:

- We define a Babel plugin that looks for async function declarations, expressions, and arrow functions.
- We transform them into generator functions (by setting the generator flag to `true`).
- The transformed code would use generators instead of async/await, but note that this simple implementation does not handle `await` to `yield` conversion or wrapping with `Promise`. This is just a basic implementation showing the transformation of function types.