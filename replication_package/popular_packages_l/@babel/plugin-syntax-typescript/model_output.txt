The Node.js package `@babel/plugin-syntax-typescript` is a Babel plugin that enables the Babel parser to understand TypeScript syntax. This plugin itself does not perform any type checking or transformations; it simply allows Babel to parse the TypeScript code without throwing syntax errors. Using this plugin, you can include TypeScript code in Babel's compilation process, integrating it with other Babel plugins and configurations. This is useful for developers who want to use TypeScript's syntax extensions while relying on Babel's toolchain for compiling JavaScript.

Below is an implementation of the key functionality of the `@babel/plugin-syntax-typescript`, written as a basic Node.js module:

```javascript
// Import necessary Babel types
const { declare } = require('@babel/helper-plugin-utils');

module.exports = declare(api => {
  // Ensure we're using a compatible Babel version
  api.assertVersion(7);

  return {
    name: 'syntax-typescript',

    // Include TypeScript syntax plugins
    manipulateOptions(opts, parserOpts) {
      parserOpts.plugins.push('typescript');
    },
  };
});

// Installation instructions, which is part of the package.json script or documentation

// Using npm to install the package
// npm install --save-dev @babel/plugin-syntax-typescript

// Using yarn to install the package
// yarn add @babel/plugin-syntax-typescript --dev

// Note: This code should be part of a larger Babel configuration setup, usually specified in the Babel configuration file (e.g., babel.config.js).
```

This code defines the functionality of the `@babel/plugin-syntax-typescript` plugin, incorporating the TypeScript syntax into Babel's parser options without introducing type-checking capabilities. The package ensures compatibility with Babel version 7 and registers the TypeScript plugin within Babel's parser configuration.