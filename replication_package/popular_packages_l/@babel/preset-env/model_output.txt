The functionality described in the README.md for the `@babel/preset-env` package is to serve as a Babel preset that allows developers to transpile their JavaScript code according to different environments. Babel is a JavaScript compiler that helps convert modern JavaScript into a version compatible with older environments, which is useful for browser compatibility and supporting legacy systems. The `@babel/preset-env` package simplifies this process by automatically determining the JavaScript code transformations and polyfills needed based on the target environment's specifications.

The README provides instructions for installing the `@babel/preset-env` package using either `npm` or `yarn`. There are no code specifics or configuration details provided in the README snippet, but typically, such installation would be followed by configuration within a Babel setup to define target environments.

Here is an example implementation in Node.js that showcases how to set up Babel with the `@babel/preset-env`:

```bash
# Installation command using npm
npm install --save-dev @babel/core @babel/cli @babel/preset-env
```

```json
// File: package.json
{
  "name": "babel-preset-env-example",
  "version": "1.0.0",
  "scripts": {
    "build": "babel src --out-dir lib"
  },
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/cli": "^7.0.0",
    "@babel/preset-env": "^7.0.0"
  }
}
```

```json
// File: babel.config.json
{
  "presets": ["@babel/preset-env"]
}
```

```javascript
// Sample JavaScript file: src/index.js
const greet = (name) => {
  console.log(`Hello, ${name}`);
};

greet('World');
```

Here is the complete setup and code:

```bash
# Step 1: Initialize npm
npm init -y

# Step 2: Install Babel with the preset env
npm install --save-dev @babel/core @babel/cli @babel/preset-env

# Step 3: Create the Babel configuration file "babel.config.json" with the following content:
```

```json
{
  "presets": ["@babel/preset-env"]
}
```

```bash
# Step 4: Create a directory named "src" and a file "index.js" with the following content:
```

```javascript
const greet = (name) => {
  console.log(`Hello, ${name}`);
};

greet('World');
```

```bash
# Step 5: Update the "package.json" with the following content:
```

```json
{
  "name": "babel-preset-env-example",
  "version": "1.0.0",
  "scripts": {
    "build": "babel src --out-dir lib"
  },
  "devDependencies": {
    "@babel/core": "^7.0.0",
    "@babel/cli": "^7.0.0",
    "@babel/preset-env": "^7.0.0"
  }
}
```

```bash
# Step 6: Run the script to transpile the code
npm run build

# This will convert the JavaScript code in the "src" folder to a compatible version in the "lib" folder using Babel.
```

This setup demonstrates the installation and usage of `@babel/preset-env` to transpile modern JavaScript code for legacy environment compatibility. It includes necessary configurations, sample scripts, and expected usage commands.