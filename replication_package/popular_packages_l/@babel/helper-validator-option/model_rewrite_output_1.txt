The provided Node.js code defines an `OptionValidator` class for validating option objects against a predefined schema. The class constructor accepts a schema object that specifies rules for each expected option, including whether it is required, its data type, and optionally a set of allowable values.

Here's a breakdown of how the code works:

1. **Constructor**: The `OptionValidator` class is initialized with a schema, which is a collection of keys with rules describing expected types, whether they are required, and allowed values.

2. **Validation Method**: The `validate` method takes an `options` object and compares it against the schema.
   - It collects validation errors in an array.
   - For each key in the schema, it checks:
     - If a required option is missing.
     - If a provided option's type doesn't match the expected type.
     - If an option's value isn't among the allowed values, if any are specified.
   - After checking all options, it returns an object with a boolean `isValid` and an array of `errors`.

3. **Example Usage**: The code provides an example schema and demonstrates how to use the `OptionValidator` class to validate a sample `userOptions` object. It then checks the validation result and logs an appropriate message based on whether the options are valid or not.

Below is a rewritten version of this code, containing the same functionality:

```javascript
// lib/index.js

class OptionValidator {
  constructor(schema) {
    this.schema = schema;
  }

  validate(options) {
    const errors = [];

    for (const [key, rule] of Object.entries(this.schema)) {
      const option = options[key];

      if (rule.required && (option === undefined || option === null)) {
        errors.push(`Option '${key}' is required.`);
        continue;
      }
      if (option === undefined) {
        continue;
      }
      if (rule.type && typeof option !== rule.type) {
        errors.push(`Option '${key}' must be of type ${rule.type}.`);
      }
      if (rule.allowedValues && !rule.allowedValues.includes(option)) {
        errors.push(`Option '${key}' must be one of: ${rule.allowedValues.join(', ')}.`);
      }
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }
}

const schema = {
  debug: { type: 'boolean', required: false },
  env: { type: 'string', required: true, allowedValues: ['development', 'production', 'test'] },
};

const validator = new OptionValidator(schema);

const userOptions = {
  debug: true,
  env: 'production'
};

const validationResult = validator.validate(userOptions);

if (!validationResult.isValid) {
  console.error("Validation failed with errors:", validationResult.errors);
} else {
  console.log("Validation succeeded");
}
```