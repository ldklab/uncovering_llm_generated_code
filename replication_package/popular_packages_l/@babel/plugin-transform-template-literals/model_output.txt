The functionality described in the README.md is for a Babel plugin named `@babel/plugin-transform-template-literals`. The primary purpose of this plugin is to transform ES2015 (ES6) template literals into a format that is compatible with ES5. This process is typically required for ensuring that modern JavaScript code runs on older JavaScript engines that do not support newer syntax features such as template literals.

Template literals allow for simplified string concatenation and embedding of expressions within strings, using backticks (``) and placeholders denoted by `${...}`. The plugin replaces these modern constructs with equivalent ES5 code, typically using string concatenation with the `+` operator, so that the code remains functional in environments that lack support for ES2015 features.

Now, I will provide the code for such a Node.js package implementation.

```markdown
// package.json
{
  "name": "@babel/plugin-transform-template-literals",
  "version": "1.0.0",
  "description": "A Babel plugin to transform ES2015 template literals to ES5.",
  "main": "index.js",
  "scripts": {
    "build": "babel src --out-dir lib",
    "test": "echo \"No tests specified\" && exit 0"
  },
  "devDependencies": {
    "@babel/core": "^7.0.0"
  },
  "dependencies": {},
  "author": "",
  "license": "MIT"
}

// index.js
module.exports = function ({ types: t }) {
  return {
    visitor: {
      TemplateLiteral(path) {
        const expressions = path.node.expressions;
        const quasis = path.node.quasis;

        let nodes = [];

        // Iterate over the quasis and expressions, interleaving them
        for (let i = 0; i < quasis.length; i++) {
          const elem = quasis[i];

          if (elem.value.cooked) {
            nodes.push(t.stringLiteral(elem.value.cooked));
          }

          if (i < expressions.length) {
            const expr = expressions[i];
            // Convert expression to a String or to be concatenated
            nodes.push(t.callExpression(t.identifier("String"), [expr]));
          }
        }

        // If there's only one node, no concatenation is needed
        if (nodes.length === 1) {
          path.replaceWith(nodes[0]);
          return;
        }

        // Use the + operator to concatenate all the parts
        let root = nodes[0];
        for (let i = 1; i < nodes.length; i++) {
          root = t.binaryExpression("+", root, nodes[i]);
        }

        path.replaceWith(root);
      }
    }
  };
}
```

This code defines a Babel plugin that traverses the abstract syntax tree (AST) of JavaScript code and transforms template literals into a series of string concatenations with the `+` operator. Only basic transformation logic is implemented here, and typical Babel plugin setup such as integrating with a build system would be necessary for actual usage.