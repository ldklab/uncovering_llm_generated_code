The functionality described by the `@babel/highlight` package is to provide syntax highlighting for JavaScript strings intended for output in terminal environments. This is useful for developers who want to improve the readability of their console output by adding colorized syntax highlighting to their JavaScript code snippets. Although the README.md does not dive into specific details of implementation, typically, such packages would parse JavaScript code and apply different colors to keywords, variables, strings, and other elements to improve visual distinction.

To implement such functionality, we would need to:

1. Parse the JavaScript code string to identify different language constructs such as keywords, strings, comments, variables, etc.
2. Apply terminal color codes to those constructs to achieve syntax highlighting.

Here is a simplified code that mimics what a basic version of such a package might look like, focusing on core functionality:

```javascript
const chalk = require('chalk');

function highlight(jsCode) {
  const keywords = /\b(function|return|if|else|var|let|const|for|while|break|continue)\b/g;
  const strings = /(["'`])(?:(?=(\\?))\2.)*?\1/g;
  const comments = /(\/\*[\s\S]*?\*\/|\/\/[^\n]*)/g;
  const numbers = /\b\d+(\.\d+)?\b/g;
  const booleans = /\b(true|false|null|undefined)\b/g;

  return jsCode
    .replace(comments, chalk.gray('$1'))           // color comments in gray
    .replace(strings, chalk.green('$&'))           // color strings in green
    .replace(keywords, chalk.cyan('$1'))           // color keywords in cyan
    .replace(numbers, chalk.magenta('$&'))         // color numbers in magenta
    .replace(booleans, chalk.yellow('$1'));        // color booleans in yellow
}

// Example usage:
const exampleCode = `
// This is a sample JavaScript code
function greet(name) {
  if (name) {
    return 'Hello, ' + name + '!';
  } else {
    return 'Hello, World!';
  }
}
console.log(greet('Babel'));
`;

console.log(highlight(exampleCode));
```

This code uses the `chalk` library to apply color codes to various parts of JavaScript code. You would need to install chalk by running `npm install chalk`. This implementation provides a basic demonstration and can be further extended for more comprehensive syntax highlighting features.