The functionality described in the README.md for the `@babel/plugin-transform-runtime` package is that it externalizes references to helper functions and built-in functionalities in JavaScript. This means it transforms code in a way that the necessary helpers and polyfills are imported from an external source instead of being included in every file. This approach helps in reducing code duplication and prevents contamination of the global scope with polyfilled features or helpers.

The setup involves installing the package as a development dependency via npm or yarn, indicating that it's used at build time during the transformation process rather than at runtime. After installation, it would be configured in the Babel setup to automatically rewrite code so that it imports helpers and polyfills from a shared module, optimizing the application code.

Now, here is the simple code for the Node.js package that follows the described functionality:

```markdown
// package.json
{
  "name": "babel-transform-runtime-demo",
  "version": "1.0.0",
  "description": "Demo for babel-plugin-transform-runtime functionality",
  "main": "index.js",
  "scripts": {
    "build": "babel src --out-dir lib"
  },
  "devDependencies": {
    "@babel/cli": "^7.0.0",
    "@babel/core": "^7.0.0",
    "@babel/plugin-transform-runtime": "^7.0.0",
    "@babel/preset-env": "^7.0.0"
  }
}

// .babelrc
{
  "presets": ["@babel/preset-env"],
  "plugins": ["@babel/plugin-transform-runtime"]
}

// index.js (for demonstration purpose, located in src directory)
async function fetchData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  return data;
}

fetchData().then(data => {
  console.log(data);
}).catch(error => {
  console.error('Error fetching data:', error);
});

// Instructions on using the package

// First, install dependencies by running
// npm install

// Then, build the project with Babel to see the transform runtime at work
// npm run build

// The transformed code will be in the 'lib' directory and will have externalized
// helper functions rather than inlined polyfills.
```

This code sets up a basic Babel configuration with the `@babel/plugin-transform-runtime` plugin, demonstrating its usage in a simple async function example. The `.babelrc` file configures Babel to use this plugin, the `package.json` contains scripts to facilitate building the project, and `index.js` serves as the demonstrative source code to be transformed.