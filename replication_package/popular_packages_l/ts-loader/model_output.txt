The TypeScript loader for webpack, known as `ts-loader`, is a module that helps integrate TypeScript compilation with webpack. It streamlines the process of compiling TypeScript files and bundling the output using webpack, providing an efficient workflow for developers working on TypeScript projects.

### Key Features and Functionality:
1. **Integration with Webpack**: `ts-loader` acts as a bridge between TypeScript and webpack, allowing TypeScript code to be compiled and included in webpack's module bundling process.

2. **Transpilation Only Option**: By setting `transpileOnly` to `true`, developers can significantly speed up builds by turning off type checking, though this means TypeScript will not check types across dependencies.

3. **Support for Plugins**: For complete type checking, it's recommended to use `ts-loader` with plugins such as `fork-ts-checker-webpack-plugin`, which checks types in a separate process to maintain performance.

4. **Source Map Support**: When properly configured, `ts-loader` can generate source maps for better debugging experiences with original TypeScript source code.

5. **Project References**: Supports TypeScript's project references, which allow splitting a TypeScript project into multiple smaller projects that can reference each other.

6. **Compatibility with Babel**: `ts-loader` can be used alongside Babel to leverage Babel's features like transforming modern JavaScript syntax.

7. **Customization Options**: Offers various options for customization, such as ignoring specific TypeScript diagnostics (error codes), customizing error output, and caching file system interactions for better performance.

8. **File Extensions and Vue Support**: Supports additional file extensions like `.ts`, `.tsx`, and integrating with file formats like `.vue`, facilitating support for projects utilizing frameworks like Vue.js.

9. **Module Resolution**: Allows using custom module resolution strategies, useful for setups like Yarn Plug'n'Play.

10. **Hot Module Replacement**: Though it doesn't directly support HMR, it can be configured to work with webpack's Hot Module Replacement with some additional setup.

Below is the implementation of a simplified version of `ts-loader` functionality in a Node.js package:

```javascript
// File: ts-loader.js

const path = require('path');
const ts = require('typescript');
const { getOptions, stringifyRequest } = require('loader-utils');

module.exports = function(source) {
  const options = getOptions(this) || {};
  const callback = this.async();
  
  const compilerOptions = Object.assign(
    { sourceMap: true }, // Default to generating source maps
    options.compilerOptions // Custom compiler options from user
  );

  // Config file support
  const configPath = options.configFile
    ? path.resolve(this.context, options.configFile)
    : ts.findConfigFile(this.context, ts.sys.fileExists, 'tsconfig.json');
  
  const config = configPath
    ? ts.readConfigFile(configPath, ts.sys.readFile).config
    : {};
  
  const parsedCommandLine = ts.parseJsonConfigFileContent(
    config,
    ts.sys,
    this.context
  );
  
  // Get compiler options from tsconfig.json
  Object.assign(compilerOptions, parsedCommandLine.options);

  // Transpile module
  const result = ts.transpileModule(source, {
    compilerOptions,
    reportDiagnostics: !options.transpileOnly,
    fileName: this.resourcePath
  });

  // Handle diagnostics if transpileOnly is false
  if (!options.transpileOnly && result.diagnostics.length) {
    for (const diagnostic of result.diagnostics) {
      const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\n');
      const { line, character } = diagnostic.file.getLineAndCharacterOfPosition(
        diagnostic.start
      );
      this.emitError(new Error(`TS [${diagnostic.code}]: ${message} at ${line + 1}:${character + 1}`));
    }
  }

  // Return compiled JS and source map
  callback(null, result.outputText, result.sourceMapText);
};
```

This code is a basic, flexible TypeScript loader for webpack, supporting custom compiler options, configuration from a `tsconfig.json` file, and error handling in a webpack-friendly format. It can be expanded to include more features, optimizations, and plugin support as detailed in the original `ts-loader` documentation.