The given Node.js code provides a simple simulation of a part of the Lodash library by implementing two utility functions: `map` and `filter`. These functions mimic common Lodash methods:

1. `map.js`: This function takes an array and an iteratee (function) as arguments. It applies the iteratee function to each element in the array and returns a new array with the results of each invocation.

2. `filter.js`: This function takes an array and a predicate (function) as arguments. It filters the array by applying the predicate function to each element and returns a new array with only those elements for which the predicate returns `true`.

Both functions check if the provided first argument is an array and throw an error if it's not.

An example usage in an `index.js` file imports these functions and applies them to an array of numbers. The `map` function doubles each element of the array, while the `filter` function selects even numbers.

Here is a reorganization of the Node.js code, including both utility function implementations and an example usage:

```js
// Lodash-like utility functions module

// map.js
function map(array, iteratee) {
  if (!Array.isArray(array)) throw new Error("First argument must be an array");
  const result = [];
  for (let i = 0; i < array.length; i++) {
    result[i] = iteratee(array[i], i, array);
  }
  return result;
}

// filter.js
function filter(array, predicate) {
  if (!Array.isArray(array)) throw new Error("First argument must be an array");
  const result = [];
  for (let i = 0; i < array.length; i++) {
    if (predicate(array[i], i, array)) {
      result.push(array[i]);
    }
  }
  return result;
}

// Example usage
const numbers = [1, 2, 3, 4, 5];
const doubled = map(numbers, num => num * 2);
const evenNumbers = filter(numbers, num => num % 2 === 0);

console.log('Doubled:', doubled); // [2, 4, 6, 8, 10]
console.log('Even Numbers:', evenNumbers); // [2, 4]
```