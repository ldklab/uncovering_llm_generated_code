The provided Node.js code performs hashing using the MurmurHash3 hashing algorithm. Here's a breakdown of its functionality:

1. **Initialization**: It starts by creating a new hash state using an initial string, `'initialString'`. This hash state is generated via `MurmurHash3('initialString')`, which represents a constructor or method from a module/package capable of handling MurmurHash3 hashing logic.

2. **Chaining Hash Operations**: Additional strings, `'secondString'` and `'thirdString'`, are added to the current hash state. This is done using a chainable method `.hash()`, which allows for a more fluid syntax by continuously updating the hash state with new data.

3. **Generating the Hash**: Finally, the computed hash value is retrieved using another method `.result()`, which presumably finalizes the hashing process and returns the resulting hash.

A potential rewrite of this script could look like the following:

```javascript
// Import the murmurhash3 module (hypothetical example)
const MurmurHash3 = require('murmurhash3js');

// Create a new hash instance with an initial state
let hashState = MurmurHash3.x86.hash32("initialString");

// Update the hash with additional strings
hashState = MurmurHash3.x86.hash32("secondString", hashState);
hashState = MurmurHash3.x86.hash32("thirdString", hashState);

// Get the final hash result
let hashOutput = hashState;

// Output the hash result
console.log(hashOutput);
```

This rewrite assumes the use of a module like `murmurhash3js`, which provides direct functions for hashing. The `hash32` function is hypothetical and acts as a reference for a typical hashing operation that could accept both a new string and a hash state for chaining purposes. Additionally, the final hash result is printed using `console.log`.