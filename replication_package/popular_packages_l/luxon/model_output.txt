The `Luxon` package is a JavaScript library designed to help developers work with dates and times in a more sophisticated and easier way compared to native JavaScript date and time handling. Here's a breakdown of the functionality highlighted in the README:

1. **DateTime, Duration, and Interval Types**: Luxon provides specialized types for handling dates (`DateTime`), time durations (`Duration`), and intervals (`Interval`). These abstractions simplify date-related calculations and manipulations.

2. **Immutable, Chainable API**: The library uses an immutable API, meaning that operations on date and time objects do not modify the original objects. Instead, they return new objects. The API is also chainable, allowing multiple operations to be performed in a sequence without breaking the flow.

3. **Parsing and Formatting**: Luxon offers tools to parse dates from strings and format dates into strings using common and custom formats. This is crucial for applications that need to work with date input and output in various formats.

4. **Native Time Zone and Internationalization Support**: By making use of JavaScript's native `Intl` object, Luxon supports various time zones and locales without needing additional locale or time zone files.

5. **Example Code**: The README provides a brief example demonstrating how Luxon can manipulate a date by getting the current date and time, changing its time zone, subtracting a week, finding the end of the day, and converting it to an ISO string.

Now, let's generate a simplified version of Luxon package implementation covering basic date-time handling functionalities:

```javascript
// luxon.js

class DateTime {
  constructor(date = new Date()) {
    this.date = date;
  }

  static now() {
    return new DateTime();
  }

  setZone(timeZone) {
    // Assuming the environment supports `Intl` with the timeZone option
    const tzDate = new Date(
      this.date.toLocaleString("en-US", { timeZone })
    );
    return new DateTime(tzDate);
  }

  minus(duration) {
    const newDate = new Date(this.date);
    if (duration.weeks) {
      newDate.setDate(newDate.getDate() - duration.weeks * 7);
    }
    return new DateTime(newDate);
  }

  endOf(unit) {
    const newDate = new Date(this.date);
    if (unit === "day") {
      newDate.setHours(23, 59, 59, 999);
    }
    // Further implementations can be added for 'month', 'year', etc.
    return new DateTime(newDate);
  }

  toISO() {
    return this.date.toISOString();
  }
}

// Example usage
const result = DateTime.now()
  .setZone("America/New_York")
  .minus({ weeks: 1 })
  .endOf("day")
  .toISO();

console.log(result); // Output: ISO 8601 formatted string
```

In this code:

- A `DateTime` class mimics the primary functionality of Luxon's `DateTime` object, providing methods for getting the current date-time, setting time zones, performing arithmetic operations, finding the end of certain intervals, and formatting as an ISO string.
- The example usage demonstrates these capabilities, similar to the example in the README. 

Note: In a real-world scenario, additional code would be necessary to handle more complex date time operations and edge cases.