The provided Node.js code uses Mongoose, which is a library for MongoDB object modeling, to define and work with MongoDB data. Here's a breakdown of its functionality:

1. **Mongoose Import and Connection**: The code imports the Mongoose library and connects to a MongoDB database hosted locally (`mongodb://127.0.0.1:27017/my_database`). Connection options for the new URL parser and unified topology are specified for the database connection.

2. **Schema Definition**: A Mongoose schema (`BlogPostSchema`) is defined for a blog post document. It includes the fields `author`, `title`, `body`, and `date`, with `author` being of ObjectId type, `title` and `body` as strings, and `date` defaulting to the current date and time.

3. **Middleware**: A pre-save middleware function is defined for the schema. This function runs before a document is saved to the database. It assigns a new ObjectId to the `author` field if it's not already set.

4. **Model Creation**: A Mongoose model (`BlogPost`) is created from the schema, allowing for interaction with the `BlogPost` collection in the database.

5. **Document Creation and Saving**: A new instance of the `BlogPost` model is created with specified `title` and `body`, then saved to the database. The `author` is automatically handled by the pre-save middleware.

6. **Data Retrieval**: The code finds and logs all blog posts present in the `BlogPost` collection.

Here is the rewritten code that maintains the original functionality:

```javascript
// Import Mongoose
const mongoose = require('mongoose');

// Connect to MongoDB
mongoose.connect('mongodb://127.0.0.1:27017/my_database', {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

// Define a blog post schema
const blogPostSchema = new mongoose.Schema({
  author: mongoose.Schema.Types.ObjectId,
  title: String,
  body: String,
  date: { type: Date, default: Date.now }
});

// Pre-save middleware to ensure an author ObjectId
blogPostSchema.pre('save', function(next) {
  if (!this.author) {
    this.author = mongoose.Types.ObjectId();
  }
  next();
});

// Create the BlogPost model
const BlogPost = mongoose.model('BlogPost', blogPostSchema);

// Instantiate a new blog post document
const newBlogPost = new BlogPost({
  title: 'Introduction to Mongoose',
  body: 'Mongoose provides a straightforward, schema-based solution to handle your application data.'
});

// Save the new blog post to the database
newBlogPost.save()
  .then(() => console.log('New post saved'))
  .catch(err => console.error('Error saving post:', err));

// Retrieve and log all blog posts from the database
BlogPost.find({})
  .then(posts => console.log('All posts:', posts))
  .catch(err => console.error('Error finding posts:', err));
```