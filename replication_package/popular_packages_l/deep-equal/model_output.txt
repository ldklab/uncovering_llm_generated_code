The `deep-equal` Node.js package provides a standalone module that replicates Node's `assert.deepEqual()` function. It allows you to compare two objects (including their nested objects) to determine if they are equal based on a recursive equality algorithm. This module works in both Node and browser environments.

### Key Features:
1. **Recursive Equality Check**: It compares two objects or values recursively to determine if they are equivalent.
2. **Option for Strict Equality**: You can pass an options object with a `strict` boolean property. If `true`, it uses strict equality (`===`) for comparison; otherwise, it defaults to coercive equality (`==`), which is the behavior of Node's `assert.deepEqual()`.

### Example Usage:
- To check if two objects have equivalent structures and values:
  ```javascript
  const equal = require('deep-equal');
  console.dir([
      equal({ a: [2, 3], b: [4] }, { a: [2, 3], b: [4] }), // true
      equal({ x: 5, y: [6] }, { x: 5, y: 6 }) // false
  ]);
  ```

### Methods:
- **deepEqual(a, b, opts)**: Main method to compare two objects `a` and `b`. The `opts` parameter can specify whether to use strict equality.

### Installation:
- Install via npm with: `npm install deep-equal`.

### Testing:
- Run tests using npm with: `npm test`.

Here is the possible implementation of the described functionality:

```javascript
const deepEqual = (a, b, opts = {}) => {
    if (a === b) {
        return true;
    }

    if (opts.strict && (typeof a !== typeof b)) {
        return false;
    }

    if (a == null || b == null || (typeof a !== 'object' && typeof b !== 'object')) {
        return a == b;  // coerces equality
    }

    if (Object.prototype.toString.call(a) !== Object.prototype.toString.call(b)) {
        return false;
    }

    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (!deepEqual(a[i], b[i], opts)) {
                return false;
            }
        }
        return true;
    }

    const keysA = Object.keys(a);
    const keysB = Object.keys(b);

    if (keysA.length !== keysB.length) {
        return false;
    }

    for (const key of keysA) {
        if (!keysB.includes(key) || !deepEqual(a[key], b[key], opts)) {
            return false;
        }
    }

    return true;
};

module.exports = deepEqual;
```

The above code provides the implementation for the `deepEqual` function that adheres to the behavior described in the README. It handles complex data structures, offers both coercive and strict equality comparisons, and is suitable for use in both Node and browser environments.