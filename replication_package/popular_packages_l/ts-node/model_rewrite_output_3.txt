The Node.js code provided demonstrates two different use cases of `ts-node`, which is a TypeScript execution engine for Node.js that allows executing TypeScript files directly without pre-compilation. 

1. **Programmatic Usage**: 
   - This part of the code uses `ts-node` programmatically to register the TypeScript compiler. By calling `require('ts-node').register();`, it sets up the environment to transpile TypeScript files to JavaScript in the background when they are `require`d. Subsequently, a TypeScript file is imported on-the-fly using `require('./some-typescript-file.ts');`, which will be transpiled and executed.

2. **Executable Script with Shebang**:
   - The second part of the code shows how to create an executable script with TypeScript using a shebang (`#!/usr/bin/env ts-node`). This directive allows the script to be executed directly from the command line as a standalone file. The command `console.log("Hello, TypeScript World!");` will be printed to the console when this script is run.

Here's a possible rewrite of the provided Node.js code:

```javascript
// Using ts-node programmatically
const tsNode = require('ts-node');
tsNode.register();
// Import a TypeScript file, which will be automatically transpiled
require('./some-typescript-file.ts');

// ts-node executable script example:
#!/usr/bin/env ts-node
console.log("Hello, TypeScript World!");
```