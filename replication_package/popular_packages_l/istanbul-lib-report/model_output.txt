The `istanbul-lib-report` Node.js package provides core utilities for generating code coverage reports based on coverage data, typically collected using the Istanbul library. This package helps create consistent and formatted output after coverage instrumentation and execution.

Here is a breakdown of the functionality described in the example from the README.md:

1. **Import Required Modules**: The package depends on `istanbul-lib-report` to build the reporting context and `istanbul-reports` to create specific types of reports such as JSON, HTML, etc.

2. **Coverage Map**: It starts with a `coverageMap` which contains the code coverage data. This data is usually gathered using the `istanbul-lib-coverage`.

3. **Watermarks Configuration**: Set up watermarks which determine the thresholds for code coverage categories like statements, functions, branches, and lines. These thresholds are ranges determining the color used in reports (e.g., red for low coverage).

4. **Create Context**: Create a context using `libReport.createContext` which includes:
   - The output directory for reports.
   - The summarizer strategy (`nested`, `flat`, `pkg`) which affects how coverage information is aggregated.
   - Watermarks configuration and the coverage map itself.

5. **Report Instance Creation**: Instantiate a report using `istanbul-reports.create`, specifying the type of report (`json`, `html`, etc.), along with additional configurations such as `skipEmpty` or `skipFull`, which control whether certain files or summaries are excluded based on their coverage completeness.

6. **Execute the Report**: Finally, execute the report with the `report.execute()` method, passing in the context to generate and write the report to disk.

Here is the implementation of a basic version of this functionality:

```js
// Module: istanbul-lib-report
const fs = require('fs');
const path = require('path');

class ReportContext {
  constructor(options) {
    this.dir = options.dir || 'reports';
    this.defaultSummarizer = options.defaultSummarizer || 'pkg';
    this.watermarks = options.watermarks || {};
    this.coverageMap = options.coverageMap || {};
  }
}

function createContext(options) {
  return new ReportContext(options);
}

module.exports = {
  createContext,
};

// Module: istanbul-reports
class Report {
  constructor(type, options) {
    this.type = type;
    this.options = options;
  }
  
  execute(context) {
    const outputData = this.generateReportData(context);
    const outputPath = path.resolve(context.dir, `coverage-report.${this.type}`);
    fs.writeFileSync(outputPath, JSON.stringify(outputData, null, 2));
    console.log(`Report written to ${outputPath}`);
  }
  
  generateReportData(context) {
    // Here, generate and return report data using the context.coverageMap
    // This is a placeholder; actual implementation would depend on the report type
    return {
      summary: 'This is a placeholder report for ' + this.type,
      coverageMap: context.coverageMap,
    };
  }
}

function create(type, options) {
  return new Report(type, options);
}

module.exports = {
  create,
};
```

This implementation outlines basic components such as creating a context with coverage data and watermarks, and generating a simple JSON report based on that data. The report is written to a predefined directory as a JSON file.