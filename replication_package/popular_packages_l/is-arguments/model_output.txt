The `is-arguments` Node.js package provides a utility function that determines whether a given object is an `arguments` object. The `arguments` object in JavaScript is an array-like object accessible within functions that contains the arguments passed to that function.

### Functionality

- **Exported Function:** The package exports a single function, `isArguments`, which takes one input and returns a boolean value. 
- **Checks:**
  - Returns `true` if the input is the native JavaScript `arguments` object.
  - Returns `false` for any other types including regular objects, arrays, or other data types.
- **Caveats:** If the `arguments` object is modified with the `Symbol.toStringTag` property, this function will mistakenly return `false`. The `Symbol.toStringTag` allows you to change the default description of an object when using `Object.prototype.toString`.

### Example Usage

- `isArguments({})` returns `false` because a plain object is not an `arguments` object.
- `isArguments([])` returns `false` because an array is not an `arguments` object.
- Inside a function or block scope, calling `isArguments(arguments)` returns `true`.

Given this explanation, here is the implementation of the `is-arguments` package:

```markdown
// is-arguments.js

'use strict';

module.exports = function isArguments(value) {
    // Check for typical arguments length and presence
    return Object.prototype.toString.call(value) === '[object Arguments]';
};

// test.js

'use strict';

var isArguments = require('./is-arguments');
var assert = require('assert');

// Test cases
assert.equal(isArguments({}), false, 'Expected false for empty object');
assert.equal(isArguments([]), false, 'Expected false for empty array');
(function () {
	assert.equal(isArguments(arguments), true, 'Expected true for arguments object');
}());

// Instructions for running tests
if (require.main === module) {
    console.log('All tests passed.');
}
```

To organize everything in a single markdown block, the package consists of a module file (`is-arguments.js`) that contains the function, and a test script (`test.js`) that verifies the functionality. Instructions for running the tests are included in the `test.js` script. This setup reflects a simple package arrangement in Node.js where the core logic is separated from the tests for clarity and maintainability.