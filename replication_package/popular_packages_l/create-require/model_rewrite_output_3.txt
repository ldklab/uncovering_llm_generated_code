The provided Node.js code defines a function called `createRequire`, which creates a custom "require" function for a specific file. This custom "require" function behaves similar to Node.js's default `require`, but is tailored to the module paths and context of the given filename or URL. Here's a breakdown of the functionality:

1. **Input Validation**: The function accepts either a string or a URL as input. If the input is a string, it's resolved to an absolute path. If it's a URL, it's converted to a file path. If the input is neither, an error is thrown.

2. **Module Initialization**: A new Node.js `Module` object is created using the resolved filename. The `Module` object represents a Node.js module and is used to manage the module's state, including the filename and the list of search paths for module loading.

3. **Custom Require Function**: A `requireWrapper` function is defined to wrap the module's `require` method, allowing it to load modules relative to the new module's paths.

4. **Extended Properties**: The `requireWrapper` is extended with properties similar to those on Node.js's native `require`, including:
   - A `resolve` method to resolve module paths.
   - References to the main script, extensions, and cache.

5. **Export**: The `createRequire` function is exported as a module, allowing its use in other files.

Here is a possible rewrite of the code:

```javascript
const path = require('path');
const Module = require('module');

function createRequire(filename) {
  // Convert filename to path if it's a URL, else resolve string to absolute path
  if (typeof filename === 'string') {
    filename = path.resolve(filename);
  } else if (filename instanceof URL) {
    filename = path.fileURLToPath(filename);
  } else {
    throw new TypeError('filename must be a string or a URL');
  }

  // Create a new Module for the given filename
  const mod = new Module(filename);
  mod.filename = filename;
  mod.paths = Module._nodeModulePaths(path.dirname(filename)); // Setup module paths

  // Custom require function that wraps the module's require method
  function requireWrapper(request) {
    return mod.require(request);
  }

  // Attach the resolve method to mimic default require behaviors
  requireWrapper.resolve = function(request) {
    return Module._resolveFilename(request, mod);
  };

  // Attach additional properties to the custom require function
  requireWrapper.main = require.main;
  requireWrapper.extensions = Module._extensions;
  requireWrapper.cache = Module._cache;

  // Return the customized require function
  return requireWrapper;
}

module.exports = createRequire;
```