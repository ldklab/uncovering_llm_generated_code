The `escalade` library is a small Node.js utility that helps you navigate upwards through a directory structure from a specified starting point. It is designed primarily for determining the presence of a certain file or folder within parent directories. The library comes in two modes: `async` and `sync`.

### Functionality

1. **Navigation**: The main function in `escalade` traverses from a given directory (or a directory of a given file) upwards until a specified condition is met or the root directory is reached.

2. **Callback Function**: At each directory level, `escalade` executes a callback function passing two arguments:
   - `dir`: The absolute path to the current directory being examined.
   - `names`: An array of strings representing all files and directories within that directory.

3. **Return Values**:
   - If the callback returns a truthy value, traversal stops, and the function resolves with an absolute path. If a relative path is returned, it is resolved against the `dir`.
   - If no directory meets the condition, `undefined` is returned.

4. **Modes**:
   - **Async Mode**: Utilizes promises and requires using `await` for operations.
   - **Sync Mode**: Provides synchronous traversal for environments where async/await is not suitable.

5. **Deno Support**: The library is also exportable to Deno environments with `allow-read` permissions needed.

Here is the Node.js package code implementing the described functionality:

```js
// async mode for Node.js
const { promisify } = require('util');
const fs = require('fs');
const path = require('path');

async function escalade(dir, callback) {
  // Normalize the initial directory path
  dir = path.resolve(dir);

  while (true) {
    // Read directory contents
    const names = await promisify(fs.readdir)(dir);

    // Use callback's return value
    const result = await callback(dir, names);

    if (result) {
      // If result is an absolute path return as is
      return path.isAbsolute(result) ? result : path.resolve(dir, result);
    }

    // Move up one directory
    const parent = path.dirname(dir);
    if (parent === dir) break; // Root reached

    dir = parent;
  }
}

// sync mode for Node.js
function escaladeSync(dir, callback) {
  dir = path.resolve(dir);

  while (true) {
    const names = fs.readdirSync(dir);
    const result = callback(dir, names);

    if (result) {
      return path.isAbsolute(result) ? result : path.resolve(dir, result);
    }

    const parent = path.dirname(dir);
    if (parent === dir) break;

    dir = parent;
  }
}

module.exports = escalade;
module.exports.sync = escaladeSync;
```

This Node.js package provides both asynchronous and synchronous functions to ascend directories and execute a callback at each level, resolving a path if the callback's condition is satisfied.