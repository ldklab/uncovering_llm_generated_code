```json
// package.json
{
  "name": "ts-jest-sample",
  "version": "1.0.0",
  "description": "A simple Jest transformer for TypeScript",
  "main": "index.js",
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^27.0.0",
    "typescript": "^4.0.0",
    "@types/jest": "^27.0.0"
  },
  "license": "MIT"
}
```

```javascript
// jest.config.js
module.exports = {
  transform: {
    '^.+\\.ts?$': 'ts-jest-transformer'
  },
  testEnvironment: 'node',
  moduleFileExtensions: ['ts', 'js'],
};
```

```javascript
// ts-jest-transformer.js
const ts = require('typescript');

module.exports = {
  process(src, path) {
    if (path.endsWith('.ts')) {
      const transpileOptions = {
        compilerOptions: {
          module: ts.ModuleKind.CommonJS,
          sourceMap: true
        }
      };
      const { outputText } = ts.transpileModule(src, transpileOptions);
      return outputText;
    }
    return src;
  }
};
```

```typescript
// __tests__/sum.test.ts
function sum(a: number, b: number): number {
  return a + b;
}

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});
```

```bash
# Command to run the tests:
npx jest
```

Explanation:
This Node.js project is set up to run tests using Jest for TypeScript files. The `package.json` file includes Jest and TypeScript as development dependencies. The `jest.config.js` specifies a custom transformer `ts-jest-transformer` for handling `.ts` files, which means that `.ts` files will be processed by `ts-jest-transformer.js` before being executed. This transformer uses TypeScript's API to transpile TypeScript code into JavaScript, which Jest can run. The test environment is set to Node.js. A sample test case using a TypeScript function is also provided, demonstrating how to write and run tests with this setup.