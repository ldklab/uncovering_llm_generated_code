The functionality described in the `ts-jest` package is to enable testing of TypeScript projects using Jest, with support for TypeScript's features, including type-checking. `ts-jest` acts as a Jest transformer that handles the TypeScript compilation process and ensures source map support, making debugging easier by allowing stack traces to match TypeScript code.

The necessary steps to get started with `ts-jest` in a project include:
- Installing Jest and TypeScript as development dependencies.
- Installing `ts-jest` and type definitions for Jest.
- Initializing a Jest configuration file with TypeScript integration by running a setup command provided by `ts-jest`.
- Running tests using Jest with the support of `ts-jest` for TypeScript.

Below is a simplified Node.js package code that demonstrates how a Jest transformer like `ts-jest` could be implemented. This includes setting up a basic Jest environment and configuring it to transform TypeScript files using a custom transformer.

```javascript
// package.json
{
  "name": "ts-jest-sample",
  "version": "1.0.0",
  "description": "A simple Jest transformer for TypeScript",
  "main": "index.js",
  "scripts": {
    "test": "jest"
  },
  "devDependencies": {
    "jest": "^27.0.0",
    "typescript": "^4.0.0",
    "@types/jest": "^27.0.0"
  },
  "license": "MIT"
}

// jest.config.js
module.exports = {
  transform: {
    '^.+\\.ts?$': 'ts-jest-transformer'
  },
  testEnvironment: 'node',
  moduleFileExtensions: ['ts', 'js'],
};

// ts-jest-transformer.js
const ts = require('typescript');

module.exports = {
  process(src, path) {
    if (path.endsWith('.ts')) {
      const transpileOptions = {
        compilerOptions: {
          module: ts.ModuleKind.CommonJS,
          sourceMap: true
        }
      };
      const { outputText, sourceMapText } = ts.transpileModule(src, transpileOptions);
      return outputText;
    }
    return src;
  }
};

// Sample TypeScript test case
// __tests__/sum.test.ts
function sum(a: number, b: number): number {
  return a + b;
}

test('adds 1 + 2 to equal 3', () => {
  expect(sum(1, 2)).toBe(3);
});

// Command to run the tests:
// npx jest
```

In this code:
- `jest.config.js` configures Jest to use a custom transformer, `ts-jest-transformer`, for `.ts` files.
- `ts-jest-transformer.js` is a simple transformer script that uses TypeScript's `transpileModule` API to transpile TypeScript files into JavaScript.
- A sample test case `sum.test.ts` is provided to illustrate how TypeScript code can be tested using Jest configured with the transformer.