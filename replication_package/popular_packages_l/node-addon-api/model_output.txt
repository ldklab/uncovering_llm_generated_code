The `node-addon-api` module provides a set of header-only C++ wrapper classes designed to simplify the use of Node-API (N-API), which is a C-based API for building native addons in Node.js. These classes provide a C++ object-oriented approach and include exception handling to make it easier to integrate C++ code with Node.js. The wrapper abstracts away many of the explicit details required when using the C API directly and aims to give a more seamless experience for C++ developers.

The key functionalities of the `node-addon-api` module include:

1. **C++ Wrappers**: Provides header-only C++ classes that act as wrappers for the C API, making it easier to interface with Node.js.

2. **Exception Handling**: These wrappers include exception handling semantics to provide better error management compared to what is available in the standard C API.

3. **Node-API Version Support**: It supports different Node-API versions, allowing developers to target specific versions of Node.js based on the Node-API version they wish to use. The module provides an indicator of the oldest Node.js version it supports based on LTS policies.

4. **Badges and Versioning**: The module provides badges to indicate the minimum Node-API version required for the module. This helps developers understand the compatibility and support matrix with different Node.js versions.

5. **Contributions and Licensing**: It mentions contributions from the community are encouraged and it operates under the MIT license.

Here is the code for a Node.js package implementing a simple example using `node-addon-api` to create a C++ addon:

```cpp
// hello_world.cc
#include <napi.h>

Napi::String Method(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();
  return Napi::String::New(env, "Hello, world!");
}

NAPI_MODULE_INIT() {
  return Napi::Function::New(env, Method, "hello");
}
```

```json
// binding.gyp
{
  "targets": [
    {
      "target_name": "addon",
      "sources": [ "hello_world.cc" ]
    }
  ]
}
```

```json
// package.json
{
  "name": "node-addon-api-example",
  "version": "1.0.0",
  "description": "Example of using node-addon-api",
  "main": "index.js",
  "scripts": {
    "install": "node-gyp rebuild"
  },
  "dependencies": {
    "node-addon-api": "^4.0.0"
  },
  "gypfile": true
}
```

```js
// index.js
const addon = require('./build/Release/addon');

console.log(addon.hello()); // prints "Hello, world!"
```

### Steps to Compile the Addon:
1. Make sure you have Node.js and Python installed on your system.
2. Install `node-gyp` globally by running `npm install -g node-gyp`.
3. Build the addon by running `npm install` in the terminal. This command uses the `node-gyp` tool to compile the addon.

### How It Works:
- The C++ file `hello_world.cc` defines a function `Method` that returns a string "Hello, world!". This is exposed to JavaScript with `NAPI_MODULE_INIT`, making `hello` available in `index.js`.
- The `binding.gyp` file is a configuration file used by `node-gyp` to compile the native code.
- The `index.js` file loads and uses the compiled addon, invoking the exported function to print the message. 

This simple setup demonstrates how native C++ addons can be integrated into Node.js projects using the node-addon-api module.