```javascript
// saxes.js

class SaxesParser {
  constructor(options = {}) {
    this.options = options;
    this.xmlns = options.xmlns || false; // Track XML namespaces if specified
    this.trackPosition = options.position !== undefined ? options.position : true; // Track position if specified
    this.parser = this._initializeParser(); // Initialize the XML parser
    this.onload = null;                    // Handler for load events
    this.onerror = (e) => { throw new Error(e); }; // Default error handler
    this.onopentag = null;                 // Handler for opening tags
    this.ontext = null;                    // Handler for text nodes
    this.onend = null;                     // Handler for end of document
  }

  _initializeParser() {
    // Initialize the parser instance honoring the configuration options 
    // like namespaces, position tracking, if it should be strict etc.
  }

  write(data) {
    // Process streaming XML data and parse it
    try {
      this._parseData(data); // Attempt to parse the input data
    } catch (error) {
      this.onerror(error); // Invoke error handler on parsing error
    }
  }

  close() {
    // Logic when parsing is completed and XML document processing finishes
    if (this.onend) this.onend(); // Invoke onend handler if defined
  }

  _parseData(data) {
    // Actual parsing logic that processes the XML data
    // and should invoke the relevant event handlers like `onopentag`, `ontext`, etc.
  }
}

module.exports = {
  SaxesParser // Export the SaxesParser class
};

// example.js
// Usage example of the SaxesParser for parsing XML data

const saxes = require('./saxes'); // Import saxes module

const parser = new saxes.SaxesParser(); // Instantiate a new parser

parser.onerror = function (e) {
  console.error('Parsing error:', e); // Log any parsing errors
};

parser.ontext = function (t) {
  console.log('Text node:', t); // Log text nodes encountered
};

parser.onopentag = function (node) {
  console.log('Opened tag:', node); // Log opened tag's node
};

parser.onend = function () {
  console.log('Parsing completed.'); // Log completion of parsing
};

parser.write('<xml>Hello, <who name="world">world</who>!</xml>').close(); // Supply XML data and finish parsing
```