The Node.js package described here is called `human-signals`. It provides a more accessible mapping of known process signals than the default `os.constants.signals` in Node.js, with added human-friendly descriptions and details about their default actions and support across different operating systems.

### Key Features:
1. **signalsByName**: An object keyed by signal names, holding detailed signal information.
2. **signalsByNumber**: An object keyed by signal numbers, holding detailed signal information.
3. **Signal Object**: Each signal object includes:
   - **name**: Standard signal name (e.g., 'SIGINT').
   - **number**: Signal code number (e.g., 2).
   - **description**: A human-friendly description (e.g., 'User interruption with CTRL-C').
   - **supported**: A boolean indicating if the signal is supported by the current OS.
   - **action**: Default action for the signal when not handled (e.g., 'terminate').
   - **forced**: A boolean indicating if the default action for the signal can be prevented.
   - **standard**: Indicates which standard defined the signal (e.g., 'ansi').

The package requires at least Node.js version 18.18.0 and is an ES module, meaning it utilizes the `import` syntax.

Usage examples are provided showing how to access signal information using either the `signalsByName` or `signalsByNumber` data structures, allowing developers to retrieve comprehensive information about process signals easily.

Here's how you could implement this functionality:

```javascript
// human-signals.js
export const signalsByName = {
  SIGINT: {
    name: 'SIGINT',
    number: 2,
    description: 'User interruption with CTRL-C',
    supported: true,
    action: 'terminate',
    forced: false,
    standard: 'ansi',
  },
  SIGFPE: {
    name: 'SIGFPE',
    number: 8,
    description: 'Floating point arithmetic error',
    supported: true,
    action: 'core',
    forced: false,
    standard: 'ansi',
  },
  // Add more signals as needed...
};

export const signalsByNumber = Object.fromEntries(
  Object.values(signalsByName).map(signal => [signal.number, signal])
);

export function getSignalByName(name) {
  return signalsByName[name];
}

export function getSignalByNumber(number) {
  return signalsByNumber[number];
}

// Usage example:
console.log(getSignalByName('SIGINT'));
console.log(getSignalByNumber(8));
```

In this implementation, `signalsByName` and `signalsByNumber` are objects that keep track of signal details by names and numbers, respectively. Additional functions, `getSignalByName` and `getSignalByNumber`, are provided to fetch signal objects from these data structures. This can be further expanded by adding more entries to the `signalsByName` map. The process converts this into an ES Module to align with modern JavaScript practices.