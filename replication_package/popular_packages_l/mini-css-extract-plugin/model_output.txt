The `mini-css-extract-plugin` package provides functionality to extract CSS content from JavaScript files and place it into separate CSS files within a webpack build process. This plugin is specifically tailored for handling CSS and supports features such as on-demand loading, source maps, and filename customization. It is built on top of webpack v5 features and requires webpack 5 to function.

Key points of its functionality include:

1. **Installation**: The plugin can be installed via npm, yarn, or pnpm, and is recommended to be used in combination with `css-loader`.

2. **Configuration**: Users need to define the plugin and associated loader in their webpack configuration. CSS is extracted from JavaScript imports and written to a physical file.

3. **Options**: Various options are provided for customization:
   - `filename` and `chunkFilename`: To define naming patterns for the output CSS files.
   - `ignoreOrder`: To suppress warnings about conflicts in CSS import order.
   - `insert`: To specify where in the document the extracted CSS `<link>` elements should be placed.
   - `attributes`: To attach custom attributes to the CSS `<link>` elements.
   - `linkType`: For specifying the type attribute of generated `<link>` elements.
   - Additional options such as `runtime`, `experimentalUseImportModule`, etc.

4. **Examples and Advanced Use**: Demonstrations on various configurations are provided, including how to use custom public paths, enable hot module reloading, extract CSS based on webpack entry names, and manage multiple themes or media queries.

The plugin is especially beneficial for production environments where extracting CSS into separate files can help with parallel loading and caching advantages, whereas for development, inline CSS injection via tools like `style-loader` can offer faster iterations and updates.

Here is the code for a Node.js package implementing the described functionality of `mini-css-extract-plugin`:

```markdown
// package.json
{
  "name": "mini-css-extract-plugin-implementation",
  "version": "1.0.0",
  "description": "A simple implementation of the mini-css-extract-plugin functionality for webpack.",
  "main": "webpack.config.js",
  "scripts": {
    "build": "webpack --mode production",
    "start": "webpack serve --mode development --open"
  },
  "devDependencies": {
    "css-loader": "^6.5.1",
    "mini-css-extract-plugin": "^2.4.5",
    "webpack": "^5.64.4",
    "webpack-cli": "^4.9.1",
    "webpack-dev-server": "^4.6.0"
  }
}

// webpack.config.js
const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
    clean: true
  },
  mode: 'development', // switch to 'production' for production build
  module: {
    rules: [
      {
        test: /\.css$/,
        use: [
          process.env.NODE_ENV !== 'production' ? 'style-loader' : MiniCssExtractPlugin.loader,
          'css-loader'
        ],
      },
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].css',
      chunkFilename: '[id].css',
      ignoreOrder: false,
    })
  ],
  devServer: {
    static: './dist',
    hot: true,
  },
};

// src/index.js
import './style.css';

// src/style.css
body {
  background-color: green;
}

// .babelrc (if using Babel for modern JS support)
// {
//   "presets": ["@babel/preset-env"]
// }

// index.html
<!doctype html>
<html>
<head>
  <link rel="stylesheet" type="text/css" href="main.css" />
</head>
<body>
  <script src="bundle.js"></script>
</body>
</html>
```

This code provides a minimal, functional setup to extract CSS files during a webpack build process, allowing both live development via webpack-dev-server and optimized CSS deployment for production builds. All advanced features and configuration options are accessible through the webpack configuration file.