The functionality described in the `eslint-plugin-jest` README is an ESLint plugin that helps enforce best practices and style conventions when using the Jest testing framework in JavaScript projects. Here's a breakdown of the key features and functionalities:

1. **Installation**: The plugin can be installed via `yarn` and requires `eslint` and `eslint-plugin-jest` as dev dependencies.

2. **Usage**: 
   - To enable the plugin, `jest` needs to be added to the `plugins` section in the ESLint configuration file (e.g., `.eslintrc.json`).
   - Specific rules can be configured under the `rules` section to customize linting behavior for Jest tests.
   - Environment variables provided by Jest can be configured using the `env` section to inform ESLint about the Jest environment.

3. **Configurations**:
   - **Recommended**: Enforces good testing practices.
   - **Style**: Includes stylistic rules for testing.
   - **All**: Enables all available rules.

4. **Customization**:
   - Globals and aliases can be specified, allowing customization of Jest's global functions, possibly for compatibility with alternative testing libraries.
   - The behavior of some rules can change based on the Jest version; the version can be specified explicitly if needed.

5. **Overrides**: Overrides can be used to apply specific rules only to test-related files, ensuring non-test files are not inadvertently subjected to Jest-specific linting rules.

6. **Shareable Configurations**: The plugin provides shareable configurations (like `recommended`, `style`, or `all`) that can be extended in ESLint configurations for easy setup.

7. **Rules**: A comprehensive list of rules is provided, enabling developers to enforce various Jest practices and style conventions, such as disallowing disabled tests, using correct assertions, and maintaining consistency in test titles and blocks.

8. **Related Projects**: The README mentions related projects like `eslint-plugin-jest-extended`, `eslint-plugin-jest-formatting`, and `eslint-plugin-istanbul` for additional Jest and code coverage rules.

Here's a basic implementation of what an `eslint-plugin-jest` might look like:

```javascript
// eslint-plugin-jest/index.js
module.exports = {
  configs: {
    recommended: {
      plugins: ['jest'],
      env: {
        'jest/globals': true
      },
      rules: {
        'jest/no-disabled-tests': 'warn',
        'jest/no-focused-tests': 'error',
        'jest/no-identical-title': 'error',
        'jest/prefer-to-have-length': 'warn',
        'jest/valid-expect': 'error'
      }
    },
    style: {
      plugins: ['jest'],
      rules: {
        'jest/no-alias-methods': 'warn',
        'jest/no-commented-out-tests': 'warn',
        'jest/prefer-to-be': 'warn',
        'jest/prefer-to-contain': 'warn',
        'jest/prefer-to-have-length': 'warn'
      }
    },
    all: {
      plugins: ['jest'],
      rules: {
        'jest/no-disabled-tests': 'warn',
        'jest/no-focused-tests': 'error',
        'jest/no-identical-title': 'error',
        'jest/prefer-to-have-length': 'warn',
        'jest/valid-expect': 'error',
        // add all other rules with default warnings/errors
      }
    }
  },
  rules: {
    'no-disabled-tests': require('./rules/no-disabled-tests'),
    'no-focused-tests': require('./rules/no-focused-tests'),
    'no-identical-title': require('./rules/no-identical-title'),
    'prefer-to-have-length': require('./rules/prefer-to-have-length'),
    'valid-expect': require('./rules/valid-expect')
  },
  environments: {
    globals: {
      globals: {
        jest: {
          describe: true,
          it: true,
          test: true
        }
      }
    }
  }
};

// eslint-plugin-jest/rules/no-disabled-tests.js
module.exports = {
  create: function(context) {
    return {
      CallExpression(node) {
        const { callee } = node;
        if (callee.name === 'xit' || callee.name === 'xdescribe') {
          context.report({
            node,
            message: 'Disabled tests are not allowed.'
          });
        }
      }
    };
  }
};

// Similarly, implement other rules like 'no-focused-tests', 'no-identical-title',
// 'prefer-to-have-length', 'valid-expect' etc., following the pattern in 'no-disabled-tests.js'.
```

This code example provides a structure for an ESLint plugin tailored to Jest testing, encompassing plugin configurations, some example rules, and Jest environment setups. Each rule file would implement its specific checking logic according to the descriptions given in the README.