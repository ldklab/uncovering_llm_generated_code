The `webpack-dev-server` is a tool used with Webpack, a popular module bundler for JavaScript applications. Its primary function is to enhance the development process by providing a local server that continuously serves the application, enabling live reloading of the application when changes are made to the source code. This makes the development process faster and more efficient.

Here's a breakdown of its features and usage based on the README:

1. **Installation**: The package can be installed as a development dependency using npm, yarn, or pnpm.

2. **Usage**: 
   - **CLI**: The package can be integrated into the project using the Webpack CLI with the command `npx webpack serve`. It supports various options for configuration, such as specifying paths to Webpack configuration files, setting environment variables, enabling HMR (Hot Module Replacement), managing static files, and more.
   - **NPM Scripts**: It can be added as a script in the `package.json` which allows execution via `npm run`.
   - **API**: The server can also be started using the API, though using the CLI is recommended.
   - **TypeScript**: Special instructions are provided for TypeScript users to avoid type errors associated with the `devServer` property in Webpack configuration.

3. **Default Behavior**: By default, it listens on `localhost` at port `8080` and supports live-reloading.

4. **Browser Support**: Although the client script is transpiled to ES5, official support is limited to the last two versions of major browsers due to resource constraints.

5. **Support and Contributions**: Guidance is provided on where to seek help and how to contribute to the project.

Below is the code for a simple implementation of `webpack-dev-server`:

```javascript
// Install the required packages
// Run the following command to install webpack, webpack-cli and webpack-dev-server
// npm install webpack webpack-cli webpack-dev-server --save-dev

// webpack.config.js
const path = require('path');

module.exports = {
  entry: './src/index.js', // The entry point for your application
  output: {
    filename: 'bundle.js', // The name of the output bundle
    path: path.resolve(__dirname, 'dist'), // The output directory
  },
  devServer: {
    static: './dist', // The directory where static files are served from
    compress: true, // Enable gzip compression for served files
    port: 8080, // Port number the server will listen to
    hot: true, // Enable Hot Module Replacement
    open: true, // Open the browser after the server starts
  },
  module: {
    rules: [
      {
        test: /\.js$/,
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader', // Use Babel loader to transpile JavaScript files
        },
      },
    ],
  },
};

// package.json
{
  "name": "webpack-dev-server-example",
  "version": "1.0.0",
  "scripts": {
    "serve": "webpack serve --config webpack.config.js" // Script to start the dev server
  },
  "devDependencies": {
    "webpack": "^5.0.0",
    "webpack-cli": "^4.0.0",
    "webpack-dev-server": "^4.0.0",
    "babel-loader": "^8.0.0",
    "@babel/core": "^7.0.0",
    "@babel/preset-env": "^7.0.0"
  }
}

// src/index.js
console.log('Hello, webpack-dev-server!');

// Now you can run npm run serve to start the server.
```

This example setup provides a basic Webpack configuration with a development server allowing live reloading, compression, and automatic browser opening. Adjust paths and settings in `webpack.config.js` according to project structure and requirements.