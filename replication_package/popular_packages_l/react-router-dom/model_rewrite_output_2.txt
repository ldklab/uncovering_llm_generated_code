The Node.js code implements a simple web server using Express that serves a single page application (SPA). The application mimics basic client-side routing, similar to React Router, using a custom implementation. Here's how it works:

1. **Server Setup (index.js)**: An Express server is set up to serve a static HTML page with a root `<div>` identified by the id `root`, and a script `bundle.js` which is expected to contain all necessary client-side logic. The server listens on `http://localhost:3000`.

2. **Custom Router Implementation (router-dom.js)**: Basic components of a front-end router (`BrowserRouter`, `Route`, `Link`, and `Switch`) are manually implemented. 

    - **BrowserRouter**: Acts as a container for the application's routes.
    - **Route**: Renders a component based on the current path (simulated using `window.location.pathname`).
    - **Link**: A simple anchor tag that changes the URL using `pushState` without reloading the page.
    - **Switch**: Iterates through its children and renders the first `Route` that matches the current path.

3. **Client-Side Logic (bundle.js)**: The client-side script creates a basic SPA with two pages: "Home" and "About". 

    - Two components, `Home` and `About`, return simple strings representing page contents.
    - `App` function sets up the router and links using the custom components from `router-dom.js`. It updates the `innerHtml` of the `root` element to render the application.

Below is a rewritten, organized version of the code:

```javascript
// index.js
const express = require('express');
const app = express();

// Serve the initial HTML page with a root element and script reference
app.get('/', (req, res) => {
  res.send(`
    <div id="root"></div>
    <script src="bundle.js"></script>
  `);
});

// Start the Express server on port 3000
app.listen(3000, () => {
  console.log('Server is running on http://localhost:3000');
});

// router-dom.js
module.exports = {
  BrowserRouter: function (props) {
    return `<div>${props.children}</div>`;
  },
  Route: function ({ path, component: Component }) {
    const pathname = window.location.pathname;
    if (pathname === path) {
      return `<div>${Component()}</div>`;
    }
    return null;
  },
  Link: function ({ to, children }) {
    return `<a href="${to}" onclick="event.preventDefault(); window.history.pushState({}, '', '${to}'); renderApp();">${children}</a>`;
  },
  Switch: function ({ children }) {
    for (let element of children) {
      if (element) return element;
    }
    return null;
  }
};

// bundle.js (simulated in server, normally separate)
const rootElement = document.getElementById('root');

// Components representing different pages
function Home() {
  return 'Home Page';
}

function About() {
  return 'About Page';
}

// Main App component using custom router logic
function App() {
  return `
    ${BrowserRouter({
      children: `
        ${Link({ to: '/', children: 'Home' })}
        ${Link({ to: '/about', children: 'About' })}
        ${Switch({
          children: [
            Route({ path: '/', component: Home }),
            Route({ path: '/about', component: About }),
          ]
        })}
    `})
  }`;
}

// Function to render the application into the root element
function renderApp() {
  rootElement.innerHTML = App();
}

// Initial render
renderApp();
```