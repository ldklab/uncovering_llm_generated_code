The Node.js code provided is a utility for parsing and working with Data URLs. Here's a breakdown of its functionality:

1. **parseDataURL Function**: This function takes a Data URL as a string input and attempts to parse it. It checks whether the string starts with 'data:', decodes the URL, extracts the MIME type and data, and determines if the data is base64 encoded. It then returns an object containing the MIME type and the data as a `Uint8Array`.

2. **fromURLRecord Function**: This function takes a URL record (parsed from a URL) and converts it into a Data URL string by prepending 'data:' to the scheme data from the URL record. It utilizes the `parseDataURL` function to parse this data URL string.

3. **decodeBody Function**: This function is intended to decode the body of a parsed Data URL using a specified character set. It gets the character set from the MIME type parameters, defaults to 'utf-8' if none is specified, and uses the `whatwg-encoding` module to decode the body using this character set.

4. **Module Exports and Example Usage**: The `parseDataURL` function is exported from the module, and example usage is provided, showing how to parse a Data URL, convert a URL record, and decode the body of a parsed Data URL.

Here is the rewritten version of the code:

```javascript
const { MIMEType } = require('whatwg-mimetype');
const { labelToName, decode: whatwgDecode } = require('whatwg-encoding');
const { parseURL } = require('whatwg-url');

function parseDataURL(dataURLString) {
  if (!dataURLString.startsWith('data:')) return null;

  try {
    const dataURL = decodeURIComponent(dataURLString.slice(5));
    const [mimeTypeString, data] = dataURL.split(',');

    const mimeType = new MIMEType(mimeTypeString);
    const isBase64 = mimeTypeString.includes(';base64');
    const body = isBase64 ? Buffer.from(data, 'base64') : new TextEncoder().encode(data);

    return { mimeType, body: new Uint8Array(body) };
  } catch {
    return null;
  }
}

function fromURLRecord(urlRecord) {
  return parseDataURL(`data:${urlRecord.schemeData}`);
}

function decodeBody(dataURL) {
  const charset = dataURL.mimeType.parameters.get('charset') || 'utf-8';
  const encodingName = labelToName(charset);
  return whatwgDecode(dataURL.body, encodingName);
}

module.exports = { parseDataURL, fromURLRecord, decodeBody };

// Example usage
const dataURLExample = parseDataURL('data:,Hello%2C%20World!');
if (dataURLExample) {
  console.log(dataURLExample.mimeType.toString());
  console.log(dataURLExample.body);
}

const urlRecord = parseURL('data:,Hello%2C%20World!');
const dataURLFromRecord = fromURLRecord(urlRecord);
if (dataURLFromRecord) {
  console.log(dataURLFromRecord.mimeType.toString());
}

const decodedBody = decodeBody(dataURLExample);
console.log(decodedBody);
```
