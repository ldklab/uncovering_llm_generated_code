The Node.js code defines a function called `minIndent` that calculates the minimum number of leading whitespace characters (indentation) on the non-empty lines of a given string. It first splits the string into lines, then iterates over each line, skipping empty ones. For each non-empty line, it calculates the number of leading spaces or tabs and updates the minimum indentation if the current line has less indentation than previously recorded. If all lines are empty, it returns 0. Finally, it exports the `minIndent` function as a module for use in other files.

Here is the rewritten code:

```javascript
// min-indent/index.js
'use strict';

/**
 * Calculate the minimum indentation of non-empty lines in a given string.
 * 
 * @param {string} text - The input string to evaluate.
 * @returns {number} - The count of the minimum leading whitespace characters.
 */
function calculateMinimumIndentation(text) {
    const lineArray = text.split('\n');
    let smallestIndent = Infinity;

    for (const line of lineArray) {
        if (line.trim() === '') {
            continue; // Skip empty lines
        }

        const currentIndentation = line.match(/^\s*/)[0].length;
        smallestIndent = Math.min(smallestIndent, currentIndentation);
    }

    return smallestIndent === Infinity ? 0 : smallestIndent;
}

module.exports = calculateMinimumIndentation;

/*
Example Usage:

const calculateMinimumIndentation = require('./index');

const multiLineString = '\tunicorn\n\t\tcake';
console.log(calculateMinimumIndentation(multiLineString)); // Output: 1

*/
```