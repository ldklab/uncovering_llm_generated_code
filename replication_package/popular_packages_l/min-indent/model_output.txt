The `min-indent` package provides functionality to find the smallest amount of leading whitespace present before non-empty lines in a given string. This can be useful for determining the minimum indentation of a block of text, which may then be used for purposes like stripping unnecessary indentation consistently across multiple lines.

### Functionality Explained:

- **Ignores Empty Lines:** The function disregards any completely empty lines when calculating indentation.
  
- **Returns Minimum Indentation:** It examines each line of the provided string, measuring the number of leading whitespace characters (spaces or tabs). It then returns the smallest count found among all lines that are not empty.

### Usage:

1. **Input:** A multi-line string.
2. **Output:** An integer indicating the minimum leading whitespace across all significant (non-empty) lines in the string.

Below is the implementation of the described functionality as a Node.js module:

```js
// min-indent/index.js
'use strict';

/**
 * Get the minimum indentation of non-empty lines.
 * 
 * @param {string} str - The string to evaluate.
 * @returns {number} - The minimum number of leading whitespace characters.
 */
function minIndent(str) {
    const lines = str.split('\n');
    let minIndent = Infinity;

    for (const line of lines) {
        if (line.trim() === '') {
            continue;
        }

        const leadingWhitespace = line.match(/^\s*/)[0].length;
        if (leadingWhitespace < minIndent) {
            minIndent = leadingWhitespace;
        }
    }

    return minIndent === Infinity ? 0 : minIndent;
}

module.exports = minIndent;

/*
Example Usage:

const minIndent = require('./index');

const str = '\tunicorn\n\t\tcake';
console.log(minIndent(str)); // Output: 1

*/
```

By adding this implementation directly into your project, you can evaluate minimum indentation for any block of text, facilitating operations like cleaning up code blocks or adjusting indentation uniformly.