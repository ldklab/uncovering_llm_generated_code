The functionality described in the `http-proxy-agent` Node.js package README.md is to provide a custom `http.Agent` implementation that directs HTTP requests through a specified HTTP or HTTPS proxy server. This is useful when you need to route your HTTP requests through a proxy, perhaps for reasons related to network restrictions, anonymity, or logging.

### Key Functionalities:

1. **Proxy Agent Integration**:
   - The package provides an `HttpProxyAgent` class which extends the default `http.Agent` behavior.
   - It directs HTTP requests to a specified proxy server before reaching the final destination.

2. **Usage with HTTP Module**:
   - The package can be seamlessly used with Node.js's built-in `http` module by specifying an instance of `HttpProxyAgent` as the `agent` option in HTTP requests.

3. **Custom Headers**:
   - The agent can be configured to send additional headers to the proxy server with each request.
   - These headers can be static (provided as an object) or dynamic (via a function returning an object).

The `HttpProxyAgent` takes care of establishing the connection to the proxy with the proper headers and forwards the request to the target destination through the proxy server.

Below is the implementation of the described functionality in a Node.js package:

```javascript
// http-proxy-agent/index.js
import http from 'http';
import { URL } from 'url';
import net from 'net';

export class HttpProxyAgent extends http.Agent {
  constructor(proxy, options = {}) {
    super(options);
    this.proxy = typeof(proxy) === 'string' ? new URL(proxy) : proxy;
    this.headers = options.headers || {};
  }

  addRequest(req, options) {
    const socket = net.connect({
      hostname: this.proxy.hostname,
      port: this.proxy.port || 80
    }, () => {
      const headers = Object.assign({}, this.headers);
      headers['Host'] = `${options.hostname}:${options.port}`;
      headers['Connection'] = 'close';

      if (typeof this.headers === 'function') {
        Object.assign(headers, this.headers());
      }

      const proxyHeaders = Object.entries(headers).map(([k, v]) => `${k}: ${v}`).join('\r\n');
      const connectReq = [
        `CONNECT ${options.hostname}:${options.port} HTTP/1.1`,
        proxyHeaders,
        '',
        ''
      ].join('\r\n');

      socket.write(connectReq);

      socket.once('data', (chunk) => {
        const response = chunk.toString();
        if (!response.includes('200 Connection Established')) {
          socket.end();
          req.emit('error', new Error('Failed to connect to proxy'));
          return;
        }

        req.onSocket(socket);
      });
    });
    
    socket.on('error', (err) => {
      req.emit('error', err);
    });
  }
}

// Example of usage from README.md
import { HttpProxyAgent } from './http-proxy-agent';
import http from 'http';

const agent = new HttpProxyAgent('http://168.63.76.32:3128');

http.get('http://nodejs.org/api/', { agent }, (res) => {
  console.log('"response" event!', res.headers);
  res.pipe(process.stdout);
});
```
