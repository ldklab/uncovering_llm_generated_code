The `jwt-decode` Node.js package is designed to decode JSON Web Tokens (JWT), which are Base64Url encoded. It extracts the payload or header of a JWT without validating the token. The package provides a `jwtDecode` function that takes a JWT string as input and decodes it into a readable JSON format. It has the ability to decode either the header or the payload of the JWT, based on an optional parameter.

### Functionality:
1. **Decoding Tokens**: The primary function `jwtDecode` decodes the token's payload by default. It can also decode the header if specified in the options.
   
2. **Error Handling**: Handles several types of errors when a token is malformed or invalid:
   - Token is not a string.
   - Token is missing one of the three required parts.
   - Token parts are not valid Base64 or Base64Url encoded.
   - Decoded token parts do not result in valid JSON.

3. **TypeScript Compatibility**: Supports TypeScript by providing specific types (`JwtPayload` and `JwtHeader`) that correspond to the decoded parts of the token.

4. **CommonJS and ES6 Modules**: Supports both module standards for inclusion in projects.

5. **Multiple Inclusion Methods**: Offers different ways to include the library in client-side or server-side projects.

### Code Implementation:
```js
// jwt-decode.js

function base64UrlDecode(str) {
  const base64 = str.replace(/-/g, '+').replace(/_/g, '/');
  const padding = base64.length % 4 === 0 ? '' : '='.repeat(4 - (base64.length % 4));
  const base64WithPadding = base64 + padding;
  return Buffer.from(base64WithPadding, 'base64').toString();
}

function jwtDecode(token, options = {}) {
  if (typeof token !== 'string') {
    throw new Error('Invalid token specified: must be a string');
  }

  const [headerSegment, payloadSegment, signatureSegment] = token.split('.');

  if (!headerSegment || !payloadSegment || !signatureSegment) {
    throw new Error(`Invalid token specified: missing part #`);
  }

  try {
    const segmentToDecode = options.header ? headerSegment : payloadSegment;
    const decoded = base64UrlDecode(segmentToDecode);
    return JSON.parse(decoded);  
  } catch (err) {
    if (err instanceof SyntaxError) {
      throw new Error(`Invalid token specified: invalid json for part #`);
    } else {
      throw new Error(`Invalid token specified: invalid base64 for part #`);
    }
  }
}

module.exports = { jwtDecode };

// Usage in CommonJS:
// const { jwtDecode } = require('./jwt-decode');

// Usage in ES6:
// import { jwtDecode } from './jwt-decode';

// Sample Usage
try {
  const token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJmb28iOiJiYXIiLCJleHAiOjEzOTMyODY4OTMsImlhdCI6MTM5MjY4ODkz.f_SyLNkF5H7gTxDbDeihdj5Z8SGvt-jvE4H14RJC2u0";
  const decoded = jwtDecode(token);
  console.log(decoded);

  const decodedHeader = jwtDecode(token, { header: true });
  console.log(decodedHeader);
} catch (error) {
  console.error(error.message);
}
```
This code defines the `jwtDecode` function, which processes the JWT and decodes either its payload or header based on the specified options. It includes error handling for various token format issues and demonstrates how to use the function in both CommonJS and ES6 module systems.