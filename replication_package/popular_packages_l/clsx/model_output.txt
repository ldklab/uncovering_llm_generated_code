The `clsx` utility provides a way to construct `className` strings conditionally. It's a small (239 bytes) library that can be used as a faster and smaller alternative to the `classnames` module. Here's how the `clsx` function operates:

1. **Variadic Strings**: Accepts multiple string arguments. Only truthy strings will be included in the output string.

2. **Objects**: If given an object, it will include the keys associated with truthy values in the output string.

3. **Arrays**: If given an array, it will include the truthy values found within the array.

4. **Nesting**: The function can handle nested arrays and objects and will resolve truthy values throughout.

5. **Discarding Falsey Values**: Any standalone falsey values (e.g., false, null, undefined, 0, NaN, or an empty string) are discarded and will not appear in the final result.

The package is available in different module formats (ES Module, CommonJS, UMD) and also comes in a lighter version (`clsx/lite`) that only handles string inputs.

Here is the code implementation for the described functionality:

```javascript
// clsx.js

function toVal(mix) {
  let str = '';
  if (typeof mix === 'string' || typeof mix === 'number') {
    str += mix;
  } else if (Array.isArray(mix)) {
    for (let i = 0; i < mix.length; i++) {
      if (mix[i]) {
        const x = toVal(mix[i]);
        if (x) str && (str += ' '), (str += x);
      }
    }
  } else if (typeof mix === 'object') {
    for (const k in mix) {
      if (mix[k]) {
        str && (str += ' '), (str += k);
      }
    }
  }
  return str;
}

function clsx(...args) {
  let i = 0, tmp, x, str = '';
  while (i < args.length) {
    if ((tmp = args[i++])) {
      if ((x = toVal(tmp))) {
        str && (str += ' '), (str += x);
      }
    }
  }
  return str;
}

export default clsx;

// Create a lighter version for `/lite`, which only handles string arguments
// clsx-lite.js

export function clsxLite(...args) {
  return args.filter(Boolean).join(' ');
}

// Usage demo
import clsx from './clsx';

console.log(clsx('foo', true && 'bar', 'baz')); // 'foo bar baz'
console.log(clsx({ foo: true, bar: false, baz: true })); // 'foo baz'
console.log(clsx(['foo', 0, false, 'bar'])); // 'foo bar'
```