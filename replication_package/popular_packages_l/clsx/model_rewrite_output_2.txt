The given Node.js code provides two functions, `clsx` and `clsxLite`, which are used for building a className string based on various input formats. The main `clsx` function accepts a mix of strings, numbers, arrays, or objects, and constructs a space-separated string from truthy values. The `clsxLite` is a simplified version that only handles string arguments directly.

**Functionality Explanation:**

1. **`toVal` Function:** 
   - Serves as a helper function within `clsx` for handling different input types and converting them to a string of class names.
   - If the input (`mix`) is a string or number, it directly adds it to the result.
   - If `mix` is an array, it iterates through and recursively calls `toVal` on each element, appending string results if they are truthy.
   - If `mix` is an object, it iterates over its keys and includes the keys in the output if their associated values are truthy.

2. **`clsx` Function:**
   - Takes any number of arguments and uses `toVal` to convert each argument into a string of class names, combining them into a single string by spaces.
   - Handles mixed types including strings, numbers, arrays, and objects.

3. **`clsxLite` Function:**
   - A simplified version for use cases where only strings are passed as arguments.
   - Filters out falsy values from the input arguments and joins truthy values into a single space-separated string.

**Rewritten Code:**

```javascript
// clsx.js

function toVal(mix) {
  let str = '';
  if (typeof mix === 'string' || typeof mix === 'number') {
    str += mix;
  } else if (Array.isArray(mix)) {
    for (let i = 0; i < mix.length; i++) {
      if (mix[i]) {
        const x = toVal(mix[i]);
        if (x) str && (str += ' '), (str += x);
      }
    }
  } else if (typeof mix === 'object') {
    for (const k in mix) {
      if (mix[k]) {
        str && (str += ' '), (str += k);
      }
    }
  }
  return str;
}

function clsx(...args) {
  let i = 0, tmp, x, str = '';
  while (i < args.length) {
    if ((tmp = args[i++])) {
      if ((x = toVal(tmp))) {
        str && (str += ' '), (str += x);
      }
    }
  }
  return str;
}

export default clsx;

// clsx-lite.js

export function clsxLite(...args) {
  return args.filter(Boolean).join(' ');
}

// Usage demo
import clsx from './clsx';

console.log(clsx('foo', true && 'bar', 'baz')); // 'foo bar baz'
console.log(clsx({ foo: true, bar: false, baz: true })); // 'foo baz'
console.log(clsx(['foo', 0, false, 'bar'])); // 'foo bar'
```