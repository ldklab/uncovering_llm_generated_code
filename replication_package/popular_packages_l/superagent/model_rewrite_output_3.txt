The original Node.js code demonstrates how to make HTTP POST requests using the `superagent` library in three different styles: callback, promises, and async/await. Here's what each section does:

1. **Callback Style**: A POST request is made to the `/api/pet` endpoint with a JSON body containing pet data (`{ name: 'Manny', species: 'cat' }`). Custom headers are set (`X-API-Key` and `accept`). The request is executed, and the response is handled in a callback function.

2. **Promises Style**: A POST request is made to the `/api/pet` endpoint. The response is logged to the console if successful, or an error is logged if the request fails.

3. **Async/Await Style**: An asynchronous IIFE (Immediately Invoked Function Expression) is used to execute a POST request to the `/api/pet` endpoint. The response is logged if successful, or the error is caught and logged.

Below is a rewritten version of the code:

```javascript
const superagent = require('superagent');

// Using Callback
superagent
  .post('/api/pet')
  .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body
  .set('X-API-Key', 'foobar')
  .set('accept', 'json')
  .end((err, res) => {
    if (err) {
      console.error('Error occurred:', err);
    } else {
      console.log('Response:', res.body);
    }
  });

// Using Promises
superagent
  .post('/api/pet')
  .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body
  .set('X-API-Key', 'foobar')
  .set('accept', 'json')
  .then(res => console.log('Response:', res.body))
  .catch(err => console.error('Error occurred:', err));

// Using async/await
(async () => {
  try {
    const res = await superagent
      .post('/api/pet')
      .send({ name: 'Manny', species: 'cat' }) // sends a JSON post body
      .set('X-API-Key', 'foobar')
      .set('accept', 'json');
    console.log('Response:', res.body);
  } catch (err) {
    console.error('Error occurred:', err);
  }
})();
```