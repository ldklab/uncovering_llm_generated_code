The `extend` package for Node.js is a utility that mimics the functionality of the jQuery `extend()` method, used to merge the properties of two or more objects together into the first object. This method modifies the target object by copying properties from source objects. The key features of this package are:

- **Shallow vs Deep Copy**: By default, `extend` performs a shallow copy where object references are copied. If a `true` value is passed as the first parameter, it performs a deep copy, recursively copying nested objects, so that changes to a nested object in either source do not affect the other.
  
- **Modification of Target**: The target object is modified in place and returned by the function.

- **Multiple Source Objects**: Multiple source objects can be specified, and their properties are copied over to the target in the order they are provided.

- **Prototype Inheritance**: Properties that are inherited through the prototype chain can be merged into the target object.

The package is installable via npm and is compatible with earlier versions of Node.js that do not natively support `Object.assign()`.

Here is a possible implementation of the described functionality:

```js
// File: extend.js

function isObject(obj) {
    return obj !== null && typeof obj === 'object';
}

function extend() {
    // Variables
    var options, name, src, copy, copyIsArray, clone;
    var target = arguments[0] || {};
    var i = 1;
    var length = arguments.length;
    var deep = false;

    // Handle a deep copy situation
    if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // Skip the boolean and the target
        i = 2;
    }

    // Handle case when target is a string or something (possible in deep copy)
    if (typeof target !== 'object' && typeof target !== 'function') {
        target = {};
    }

    for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
            // Extend the base object
            for (name in options) {
                src = target[name];
                copy = options[name];

                // Prevent never-ending loop
                if (target === copy) {
                    continue;
                }

                // Recurse if we're merging plain objects or arrays
                if (deep && copy && (isObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];

                    } else {
                        clone = src && isObject(src) ? src : {};
                    }

                    // Never move original objects, clone them
                    target[name] = extend(deep, clone, copy);

                // Don't bring in undefined values
                } else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }

    // Return the modified object
    return target;
}

module.exports = extend;
```

This code provides a robust implementation of the described functionality, handling deep and shallow copies and multiple source objects correctly. Remember to run `npm init` to create a `package.json` file and then `npm publish` to publish your package.