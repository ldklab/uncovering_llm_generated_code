The `tiny-invariant` package is a small utility library designed to verify conditions and throw errors if those conditions are not met. It functions similarly to the larger `invariant` library but removes the sprintf-style string formatting to decrease size and complexity.

### Functionality Explanation:

1. **Basic Use**: The primary function, `invariant`, checks a condition. If the condition is falsy, it throws an error with a provided message. If the condition is truthy, no error is thrown.

2. **Message Generation**: The message argument can be either a string or a function that returns a string. This allows the string generation to be deferred until it's known that the error will be thrown.

3. **Type Narrowing**: In TypeScript or Flow, using `invariant` can ensure the types are narrowed down after the condition check, which enhances type safety.

4. **Production Optimization**: For production builds, you can configure your build tool to strip out the error messages, reducing the final bundle size. This is achievable with plugins like `babel-plugin-dev-expression`.

5. **Environment-Specific Handling**: In development, descriptive error messages are helpful. In production, minimal messages or none are preferred for file-size efficiency. This behavior can be controlled using `process.env.NODE_ENV`.

Here's the implementation of the `tiny-invariant` package in Node.js:

```javascript
// index.js

function invariant(condition, message) {
  if (!condition) {
    // if message is a function, call it to get the actual message 
    const isFn = typeof message === 'function';
    const errorMessage = isFn ? message() : message || 'Invariant violation';
    
    // in development mode, throw an error with message
    if (process.env.NODE_ENV !== 'production') {
      throw new Error(`Invariant violation: ${errorMessage}`);
    } else { // in production mode, only display generic message
      throw new Error('Invariant violation');
    }
  }
}

module.exports = invariant;
```

This code provides the essential functionality described in the package README. It exports a single function that checks a given condition and manages error messaging based on the environment. Users can create and use the `invariant` utility to ensure code robustness in development and optimize output for production.