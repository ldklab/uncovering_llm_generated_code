The `readable-stream` package is a userland implementation of Node.js core streams, specifically designed to provide a stable and consistent streams API across different Node.js versions and environments, including browsers. It mimics the stream implementations from Node.js version 18.19.0, making it easier for users to rely on a consistent API regardless of the underlying Node.js version they or their users are running.

### Key Features and Usage:

1. **Versions and Compatibility**:
   - **v4.x.x** is based on Node 18, supporting Node versions 12, 14, 16, and 18, along with evergreen browsers.
   - **v3.x.x** supports Node versions 6, 8, and 10, along with evergreen browsers, IE 11, and the latest Safari.
   - **v2.x.x** supports Node.js versions from 0.8 onwards and evergreen browsers, as well as IE 10 & 11.

2. **Main Classes and Functions**: 
   - Provides main stream classes such as `Readable`, `Writable`, `Transform`, and `Duplex`.
   - Contains utility functions like `pipeline` and `finished`.

3. **Browser Support**:
   - Can be used in browsers with bundlers like `browserify`, `webpack`, or `parcel`. Polyfills are not necessary from version 4.2.0 onward.

4. **Streams Working Group**:
   - The package is maintained by the Streams Working Group, which handles the development of the Streams API within Node.js, reviews changes, and guides the implementation of stream providers.

5. **Seamless Transition**: 
   - To use `readable-stream`, you can simply swap `require('stream')` with `require('readable-stream')` in your code without any modifications if you're only using the main classes and functions.

Below is the implementation of the package:

```js
// readable-stream implementation

const { Readable: CoreReadable, Writable: CoreWritable, Transform: CoreTransform, Duplex: CoreDuplex, finished: coreFinished, pipeline: corePipeline } = require('stream');

// Custom implementation and export of ReadableStream classes

class Readable extends CoreReadable {
  // Additional implementation or overrides can be added here if needed
}

class Writable extends CoreWritable {
  // Additional implementation or overrides can be added here if needed
}

class Transform extends CoreTransform {
  // Additional implementation or overrides can be added here if needed
}

class Duplex extends CoreDuplex {
  // Additional implementation or overrides can be added here if needed
}

// Utility functions

function finished(stream, callback) {
  // Directly use Node's core finished function, can extend if needed
  return coreFinished(stream, callback);
}

function pipeline(...streams) {
  // Directly use Node's core pipeline function, can extend if needed
  return corePipeline(...streams);
}

// Exports

module.exports = {
  Readable,
  Writable,
  Transform,
  Duplex,
  finished,
  pipeline,
};

// Note: This is a simplistic mockup reflecting the userland integration of Node's core stream functionalities, aiming to provide
// the core API in a stable and consistent manner across Node.js versions and different environments.
```

This package structure maintains compatibility with historic Node.js versions and avoids semver-major changes, ensuring a seamless developer experience across various platforms and versions.