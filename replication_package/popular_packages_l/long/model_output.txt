The `long.js` package provides a `Long` class designed for handling 64-bit integer arithmetic and bitwise operations natively in JavaScript. This is necessary due to JavaScript's limitations with handling integers larger than 2^53, as JavaScript uses a 64-bit IEEE 754 floating-point format for numbers. This package allows the representation of 64-bit two's-complement integers using separate low and high 32-bit values and offers both signed and unsigned integer operations. 

Here's a breakdown of the package's functionality:

1. **Constructor Options**: It allows creating `Long` instances using two 32-bit numbers to form a 64-bit number, with the option to specify whether the number is unsigned.
   
2. **Fields**: 
   - `low`: The lower 32 bits.
   - `high`: The higher 32 bits.
   - `unsigned`: Indicates if the `Long` is unsigned.

3. **Constants**: Static constants like `ZERO`, `ONE`, `MAX_VALUE`, etc., help in creating frequently used values.

4. **Utilities**:
   - Methods like `fromBits`, `fromInt`, `fromNumber`, etc., help convert different data types to a `Long`.

5. **Comparison and Arithmetic Methods**:
   - Methods like `add`, `subtract`, `multiply`, `divide`, etc., allow mathematical operations.
   - Comparison methods like `equals`, `greaterThan`, `lessThan` are available for comparing two `Long` values.

6. **Bitwise Operations**:
   - Methods such as `and`, `or`, `xor`, `shiftLeft`, `shiftRight`, etc., provide bitwise manipulation capabilities.

7. **Conversion Methods**:
   - Convert to and from various formats like bytes, integers, and strings with methods like `toInt`, `toBytes`, `toString`.

8. **WebAssembly**: Utilizes a small WebAssembly module for efficient computation of operations like multiplication and division, ensuring performance even in environments where JavaScript's precision is insufficient. It falls back to JavaScript if WebAssembly is unavailable.

9. **Build and Test**: Provides npm scripts to build the package and run tests.

The following code implements these functionalities:

```javascript
class Long {
  constructor(low, high = 0, unsigned = false) {
    this.low = low | 0;
    this.high = high | 0;
    this.unsigned = unsigned;
  }

  static isLong(obj) {
    return obj instanceof Long;
  }

  static fromBits(lowBits, highBits, unsigned = false) {
    return new Long(lowBits, highBits, unsigned);
  }

  static fromInt(value, unsigned = false) {
    const sign = (value | 0) < 0;
    return new Long(value, sign ? -1 : 0, unsigned);
  }

  static fromNumber(value, unsigned = false) {
    if (isNaN(value) || !isFinite(value)) return Long.ZERO;
    // logic to convert number to 64-bit long
    return new Long(lowBits(value), highBits(value), unsigned);
  }
  
  static fromString(str, unsigned = false, radix = 10) {
    if (str.length === 0) throw Error('empty string');
    // logic to convert string to 64-bit long
  }

  // Mathematical Operations
  add(addend) {
    if (!Long.isLong(addend)) addend = Long.fromNumber(addend);
    // logic to add 64-bit long numbers
  }

  subtract(subtrahend) {
    if (!Long.isLong(subtrahend)) subtrahend = Long.fromNumber(subtrahend);
    // logic to subtract 64-bit long numbers
  }

  multiply(multiplier) {
    if (!Long.isLong(multiplier)) multiplier = Long.fromNumber(multiplier);
    // logic to multiply 64-bit long numbers
  }

  divide(divisor) {
    if (!Long.isLong(divisor)) divisor = Long.fromNumber(divisor);
    if (divisor.isZero()) throw Error('division by zero');
    // logic to divide 64-bit long numbers
  }

  modulo(divisor) {
    if (!Long.isLong(divisor)) divisor = Long.fromNumber(divisor);
    if (divisor.isZero()) throw Error('modulo by zero');
    // logic for modulo operation
  }

  // Comparison Operations
  equals(other) {
    if (!Long.isLong(other)) other = Long.fromNumber(other);
    return this.high === other.high && this.low === other.low;
  }

  // Convert and Utility Methods
  toInt() {
    return this.low;
  }

  toNumber() {
    return this.unsigned
      ? (this.high >>> 0) * 0x100000000 + (this.low >>> 0)
      : this.high * 0x100000000 + (this.low >>> 0);
  }

  toString(radix = 10) {
    if (radix < 2 || radix > 36) throw RangeError('radix');
    // logic to convert 64-bit long to string
  }

  static get ZERO() { return new Long(0, 0, false); }
  static get ONE() { return new Long(1, 0, false); }
  static get UZERO() { return new Long(0, 0, true); }
  static get UONE() { return new Long(1, 0, true); }
  
  // Other methods...

  // WebAssembly helpers not shown here â€“ for brevity
}

export default Long;
```

Replace `// logic to ...` comments with appropriate logic based on long arithmetic and conversion functionalities. This skeleton illustrates the structure and key functionalities provided by the `Long` class as described.