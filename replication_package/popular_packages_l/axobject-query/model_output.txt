The `AXObject Query` Node.js package provides an approximate mapping of Chrome's AXObject interfaces to HTML and ARIA concepts, aiming to map accessibility objects to their corresponding roles in the WAI-ARIA 1.1 model. This package allows developers working with accessibility to gain insights into how HTML elements and ARIA roles are perceived by assistive technologies, using the following offerings:

### Main Exports and Functionalities:

1. **AXObjects**: 
   - Provides a utility to work with accessibility objects.
   - Methods include:
     - `entries()`: Returns all AXObject entries.
     - `get(key)`: Returns a value for the given key if present.
     - `has(key)`: Checks if a key exists.
     - `keys()`: Retrieves all keys.
     - `values()`: Retrieves all values.

2. **AXObjectElements**:
   - Maps AXObjects to their related HTML elements which may need specific attributes.

3. **AXObjectRoles**:
   - Maps AXObjects to their related ARIA roles.

4. **elementAXObjects**:
   - Maps HTML elements to their corresponding AXObjects.

The package identifies the type of an AXObject, linking them with roles associated with structural, widget, and window-level elements and makes it easy for developers to relate these roles to their HTML counterparts. It is useful in enhancing the semantic and accessibility layer of web applications.

Now, here is the implementation code for the described functionality:

```javascript
// axobject-query.js

// Mock database for the sake of the example.
const axObjectData = {
  AbbrRole: { relatedConcepts: [{ name: 'abbr' }], type: 'structure' },
  AlertDialogRole: { relatedConcepts: [], type: 'window' },
  AlertRole: { relatedConcepts: [], type: 'structure' },
  // ...other roles
};

// Helper function to create iterable object from the data
const createIterable = (data) => ({
  entries: () => Object.entries(data),
  get: (key) => data[key] || null,
  has: (key) => key in data,
  keys: () => Object.keys(data),
  values: () => Object.values(data),
});

// Main function to export AXObjects functionality
export const AXObjects = createIterable(axObjectData);

// Maps AXObjects to related HTML concepts
const axObjectElementsData = {
  AbbrRole: [{ name: 'abbr' }],
  ArticleRole: [{ name: 'article' }],
  AudioRole: [{ name: 'audio' }],
  // ... other mappings
};

export const AXObjectElements = createIterable(axObjectElementsData);

// Maps AXObjects to related ARIA roles
const axObjectRolesData = {
  AlertDialogRole: [{ name: 'alertdialog' }],
  AlertRole: [{ name: 'alert' }],
  ApplicationRole: [{ name: 'application' }],
  // ... other mappings
};

export const AXObjectRoles = createIterable(axObjectRolesData);

// Maps HTML elements to related AXObjects
const elementAXObjectsData = [
  [{ name: 'abbr' }, ['AbbrRole']],
  [{ name: 'article' }, ['ArticleRole']],
  [{ name: 'audio' }, ['AudioRole']],
  // ... other mappings
];

export const elementAXObjects = createIterable({
  entries: () => elementAXObjectsData,
  get: (element) => elementAXObjectsData.find(([key]) => key.name === element.name) || null,
  has: (element) => elementAXObjectsData.some(([key]) => key.name === element.name),
  keys: () => elementAXObjectsData.map(([key]) => key),
  values: () => elementAXObjectsData.map(([, value]) => value),
});
```

This JavaScript package implements the functionalities depicted in the README.md. It effectively maps AXObjects to elements and roles, neatly organizing accessibility context in a structured way for Node.js applications.