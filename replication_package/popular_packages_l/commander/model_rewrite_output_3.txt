The given Node.js script utilizes the `commander` library to create a Command Line Interface (CLI) tool named `string-util`. This tool currently supports a single command `split`, which takes a string input and splits it into an array of substrings based on a specified separator. 

Here's a breakdown of the functionality:

1. The script defines a CLI program using the `Command` class from the `commander` library. The CLI is named `string-util`, and it has a version number and description.

2. It sets up a command called `split`, which:
   - Accepts a required string argument `<string>` to be split.
   - Provides an optional `--first` flag to only return the first split substring.
   - Provides an optional separator with the `-s` or `--separator <char>` option, defaulting to a comma (`,`).
   - In the `.action()` method, it splits the input string using the specified separator and limit based on the presence of the `--first` option.

3. The script parses the process arguments to interpret the command and options specified by the user.

The following is a rewritten version of the original Node.js code implementing these functionalities:

```js
// index.js
const { Command } = require('commander');

const cli = new Command();

cli
  .version('1.0.0')
  .name('string-util')
  .description('CLI to some JavaScript string utilities');

// Adding a 'split' command
cli
  .command('split')
  .description('Split a string into substrings and display as an array')
  .argument('<text>', 'text to be split')
  .option('--first', 'get only the first substring')
  .option('-s, --separator <character>', 'character used to separate substrings', ',')
  .action((text, options) => {
    const limit = options.first ? 1 : undefined;
    console.log(text.split(options.separator, limit));
  });

// Parse and execute commands
cli.parse(process.argv);

// Examples to run:
// $ node index.js split --separator=/ x/y/z
// $ node index.js split --first --separator=/ x/y/z
```