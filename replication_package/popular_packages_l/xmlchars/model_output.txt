The functionality described in the Node.js package README.md is designed to provide utilities for determining whether characters belong to character classes defined by XML specifications. This is particularly useful for validating XML and XML Namespace conformance as per various versions of the XML standards.

The package is organized into multiple modules, each corresponding to a specific XML or Namespace standard. These modules include:

- `xmlchars/xml/1.0/ed5`: XML 1.0, Edition 5.
- `xmlchars/xml/1.0/ed4`: XML 1.0, Edition 4.
- `xmlchars/xml/1.1/ed2`: XML 1.1, Edition 2.
- `xmlchars/xmlns/1.0/ed3`: XML Namespaces 1.0, Edition 3.

Each module provides four main types of utilities:

1. **Fragments**: Parts of regular expressions that represent XML production rules. These can be used to build custom regular expressions.
2. **Regular Expressions**: Complete regular expressions that match the XML productions as per the standards.
3. **Lists**: Arrays of characters that conform to the XML production rules.
4. **Functions**: Functions that check if a given Unicode code point matches a specific XML production.

Below is a code implementation for a Node.js package that provides these functionalities:

```javascript
// index.js

// Module for XML 1.0 Edition 5
module.exports['xml/1.0/ed5'] = (function() {
  const NAME_START_CHAR_RE = /^[A-Z_a-z]\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]$/;
  const NAME_CHAR_RE = /^[A-Z-._a-z0-9\u00B7\u0300-\u036F\u203F-\u2040]$/;

  return {
    fragments: {
      NAME_START_CHAR: NAME_START_CHAR_RE.source,
      NAME_CHAR: NAME_CHAR_RE.source
    },
    regex: {
      NAME: new RegExp(`^${NAME_START_CHAR_RE.source}(${NAME_CHAR_RE.source})*$`)
    },
    lists: {
      NAME_START_CHARS: ["A-Z", "_", "a-z", "\u00C0-\u00D6", "\u00D8-\u00F6", "\u00F8-\u02FF", "\u0370-\u037D", "\u037F-\u1FFF", "\u200C-\u200D", "\u2070-\u218F", "\u2C00-\u2FEF", "\u3001-\uD7FF", "\uF900-\uFDCF", "\uFDF0-\uFFFD"],
      NAME_CHARS: ["A-Z", "-", ".", "_", "a-z", "0-9", "\u00B7", "\u0300-\u036F", "\u203F-\u2040"]
    },
    functions: {
      isNameStartChar: function(char) {
        return NAME_START_CHAR_RE.test(char);
      },
      isNameChar: function(char) {
        return NAME_CHAR_RE.test(char);
      }
    }
  };
})();

// Modules can be similarly defined for other XML specifications such as 'xml/1.0/ed4', 'xml/1.1/ed2', and 'xmlns/1.0/ed3' with appropriate checks and regex based on their standards.

// Usage Example:
// const xml10ed5 = require('./index.js')['xml/1.0/ed5'];
// console.log(xml10ed5.functions.isNameStartChar('A'));  // true
// console.log(xml10ed5.regex.NAME.test('ValidName123')); // true
```