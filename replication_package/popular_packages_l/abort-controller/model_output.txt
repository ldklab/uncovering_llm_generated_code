The functionality described in the README.md of the `abort-controller` package involves creating a JavaScript implementation of the `AbortController` interface as defined in the WHATWG DOM standard. This package allows users to create an `AbortController` instance, obtain its associated `AbortSignal`, listen for an "abort" event on that signal, and trigger the abort event using the `abort()` method of the controller.

### Core Functionalities:

1. **AbortController**: This object is used to create and manage an `AbortSignal`. It contains:
   - `signal`: An `AbortSignal` object associated with the controller.
   - `abort()`: A method to trigger an "abort" event on the `signal`.

2. **AbortSignal**: 
   - It is an object that can be associated with a controller. 
   - Allows for registering event listeners to listen when the signal gets aborted, particularly with an "abort" event.

3. **Usage and Polyfilling**:
   - You can import the package to use the `AbortController` in your project.
   - Optionally, you can polyfill by importing the polyfill which will assign the `AbortController` to the global variable if the native implementation is not available.

4. **Event Handling**:
   - `AbortSignal` can have event listeners for the "abort" event, which is dispatched when the `abort` method is called on the controller.

Below is a simple implementation based on the README.md:

```javascript
// abort-controller.js

class AbortSignal {
  constructor() {
    this.aborted = false; // Initially not aborted
    this._listeners = []; // Store event listeners
  }

  addEventListener(event, listener) {
    if (event === 'abort') {
      this._listeners.push(listener);
    }
  }

  dispatchEvent(event) {
    if (event.type === 'abort') {
      this._listeners.forEach(listener => listener());
    }
  }
}

class AbortController {
  constructor() {
    this.signal = new AbortSignal();
  }

  abort() {
    if (!this.signal.aborted) {
      this.signal.aborted = true;
      this.signal.dispatchEvent({ type: 'abort' }); // Trigger abort event
    }
  }
}

module.exports = AbortController;

// Example use
const AbortController = require('./abort-controller');

const controller = new AbortController();
const signal = controller.signal;

signal.addEventListener("abort", () => {
  console.log("aborted!");
});

controller.abort(); // This will trigger the "aborted!" log
```

This implementation creates a simple `AbortController` and associated `AbortSignal` that can dispatch an "abort" event to any listeners registered with `addEventListener`. The `abort()` method updates the signal's state to aborted and notifies the listeners by dispatching the "abort" event.