The provided Node.js code defines a small project that deals with roles data, likely related to WAI-ARIA roles. Here's the breakdown of each part:

1. **package.json**: This file defines a Node.js project named "aria-query". It includes a script named "build" which executes a JavaScript file `breakUpAriaJSON.js` that processes roles data from a JSON file.

2. **roles.json**: This file contains JSON data defining properties of various roles, such as "alert". It specifies attributes like required properties, properties, superclass structure, etc.

3. **breakUpAriaJSON.js**: This script reads the roles data from `roles.json`, converts it to a JavaScript module format, and writes it to `roles.js` within a specific directory. This makes the roles data available for import as a module.

4. **index.js**: This script imports the generated `roles.js` data and defines a custom `MapLike` class to handle data operations similar to a Map. The `MapLike` class provides methods to get entries, check for keys, and retrieve keys, values, and specific data. An instance of `MapLike` is created using the roles data, and an example usage is provided to fetch the "alert" role.

Here's a rewrite of the provided code:

```json
// package.json
{
  "name": "aria-query",
  "version": "1.0.0",
  "description": "Programmatic access to the WAI-ARIA 1.2 Roles Model",
  "main": "index.js",
  "scripts": {
    "build": "node ./scripts/generateRolesJs.js"
  },
  "author": "A11yance",
  "license": "MIT",
  "dependencies": {}
}
```

```json
// src/etc/roles.json (Simplified)
{
  "alert": {
    "requiredProps": {},
    "props": {
      "aria-live": "assertive"
    },
    "abstract": false,
    "childrenPresentational": false,
    "baseConcepts": [],
    "relatedConcepts": [{"module": "XForms", "concept": {"name": "alert"}}],
    "superClass": [["roletype", "structure", "section"]]
  }
  // Additional roles can be added here as needed
}
```

```javascript
// scripts/generateRolesJs.js
const fs = require('fs');
const path = require('path');

const roles = require('./roles.json');

const outputPath = path.join(__dirname, '../src/etc/roles.js');
const rolesJsContent = `module.exports = ${JSON.stringify(roles, null, 2)};`;

fs.writeFileSync(outputPath, rolesJsContent);
console.log('Generated roles.js from roles.json');
```

```javascript
// index.js
const rolesData = require('./src/etc/roles');

class MapLike {
  constructor(data) {
    this.data = data;
  }

  entries() {
    return Object.entries(this.data);
  }

  get(key) {
    return this.data[key] || null;
  }

  has(key) {
    return Object.prototype.hasOwnProperty.call(this.data, key);
  }

  keys() {
    return Object.keys(this.data);
  }

  values() {
    return Object.values(this.data);
  }
}

const roles = new MapLike(rolesData);

// Example usage
console.log(roles.get('alert'));

module.exports = {
  roles
};

// The structure for elementsRoles.js and roleElements.js would follow similar logic.
```