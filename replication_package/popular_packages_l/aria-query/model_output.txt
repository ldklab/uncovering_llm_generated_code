The `aria-query` package provides programmatic access to the WAI-ARIA 1.2 roles model, allowing developers to interact with ARIA roles and their mappings. The package offers utilities to retrieve information about ARIA roles and their relationships to HTML elements. Here's a breakdown of its functionality:

1. **Roles Utility**: 
   - The package provides a `roles` map, where each ARIA role is mapped to its definition. This definition includes required properties, default properties, whether the role is abstract, children presentational, base and related concepts, and superclasses.
   - You can use methods like `get`, `entries`, `has`, `keys`, and `values` to interact with the roles map.

2. **Elements to Roles Utility**:
   - This utility maps HTML elements to their inherent ARIA roles. For example, different input types such as checkboxes or radio buttons are mapped to corresponding ARIA roles.
   - This map is key-value where the key is an HTML concept (element with attributes) and the value is a set of ARIA roles.

3. **Role to Elements Utility**:
   - The reverse of the "Elements to Roles" utility, it maps ARIA roles back to the HTML elements that can inherently reflect those roles.
   - It provides a similar mapping where the key is an ARIA role and the value is a set of HTML elements with potential attributes.

The package ensures that its data is in line with the latest WAI-ARIA standards, facilitating accessible web development.

Below is the implementation of a simplified version of this Node.js package:

```markdown
// package.json
{
  "name": "aria-query",
  "version": "1.0.0",
  "description": "Programmatic access to the WAI-ARIA 1.2 Roles Model",
  "main": "index.js",
  "scripts": {
    "build": "node ./scripts/breakUpAriaJSON.js"
  },
  "author": "A11yance",
  "license": "MIT",
  "dependencies": {}
}

// src/etc/roles.json (Simplified)
{
  "alert": {
    "requiredProps": {},
    "props": {
      "aria-live": "assertive"
    },
    "abstract": false,
    "childrenPresentational": false,
    "baseConcepts": [],
    "relatedConcepts": [{"module": "XForms", "concept": {"name": "alert"}}],
    "superClass": [["roletype", "structure", "section"]]
  }
  // Additional roles can be added here as needed
}

// scripts/breakUpAriaJSON.js
const fs = require('fs');
const path = require('path');

const roles = require('./roles.json');

fs.writeFileSync(
  path.join(__dirname, '../src/etc/roles.js'),
  `module.exports = ${JSON.stringify(roles, null, 2)};`
);
console.log('Generated roles.js from roles.json');

// index.js
const rolesData = require('./src/etc/roles');

class MapLike {
  constructor(data) {
    this.data = data;
  }

  entries() {
    return Object.entries(this.data);
  }

  get(key) {
    return this.data[key] || null;
  }

  has(key) {
    return this.data.hasOwnProperty(key);
  }

  keys() {
    return Object.keys(this.data);
  }

  values() {
    return Object.values(this.data);
  }
}

const roles = new MapLike(rolesData);

// Example usage
console.log(roles.get('alert'));

module.exports = {
  roles
};

// src/etc/elementsRoles.js and roleElements.js would contain similar data structures and logic.
```

This code provides a basic structure for a Node.js package that offers access to ARIA roles data, focusing on providing interfaces for accessing roles and demonstrating element-to-role mappings. Additional ARIA roles and elements can be added to this structure as needed.