The Node.js code defines a module for styling console text with various attributes like color and formatting, depending on terminal support for color (isColorSupported). It provides functionality to apply different styles (e.g., bold, underline, blue background) to text, using ANSI escape codes. The main functionality is handled by the `createColors` function which checks if colors are supported, lists different styles with their respective escape codes, and applies these styles to text. It exports utility functions to style text (blue, bold, underline, etc.) and logic related to color support.

Here is a possible rewrite of the given Node.js code:

```javascript
// Determine if color support is enabled, defaulting to terminal capability
const isColorSupported = !process.env.NO_COLOR && (process.env.FORCE_COLOR || process.stdout.isTTY);

// Function to create styles for console text with optional color usage
const createColors = ({ useColor = isColorSupported } = {}) => {
  const enable = useColor;
  
  const styles = {
    reset: [0, 0],
    bold: [1, 22],
    dim: [2, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    hidden: [8, 28],
    strikethrough: [9, 29],
    black: [30, 39],
    red: [31, 39],
    green: [32, 39],
    yellow: [33, 39],
    blue: [34, 39],
    magenta: [35, 39],
    cyan: [36, 39],
    white: [37, 39],
    gray: [90, 39],
    redBright: [91, 39],
    greenBright: [92, 39],
    yellowBright: [93, 39],
    blueBright: [94, 39],
    magentaBright: [95, 39],
    cyanBright: [96, 39],
    whiteBright: [97, 39],
    bgBlack: [40, 49],
    bgRed: [41, 49],
    bgGreen: [42, 49],
    bgYellow: [43, 49],
    bgBlue: [44, 49],
    bgMagenta: [45, 49],
    bgCyan: [46, 49],
    bgWhite: [47, 49],
    bgBlackBright: [100, 49],
    bgRedBright: [101, 49],
    bgGreenBright: [102, 49],
    bgYellowBright: [103, 49],
    bgBlueBright: [104, 49],
    bgMagentaBright: [105, 49],
    bgCyanBright: [106, 49],
    bgWhiteBright: [107, 49],
  };

  // Function to apply a style if colors are enabled
  const applyStyle = (start, end, str) => (enable ? `\x1b[${start}m${str}\x1b[${end}m` : str);

  // Create and return an object with functions to apply each style
  return Object.keys(styles).reduce((acc, style) => {
    const code = styles[style];
    acc[style] = str => applyStyle(code[0], code[1], str);
    return acc;
  }, {});
};

// Create default colors instance
const colors = createColors();

// Destructure some example functions to apply styles
const { blue, bold, underline } = colors;

// Example usage of styled logging
console.log(
  blue("I'm blue"),
  bold(blue("da ba dee")),
  underline(bold(blue("da ba daa")))
);

console.log(`
  There's a ${underline(blue("house"))},
  With a ${bold(blue("window"))},
  And a ${blue("corvette")}
  And everything is blue
`);

console.log(bold(`I'm ${blue(`da ba ${underline("dee")} da ba`)} daa`));

// Export the utility functions and color support info
module.exports = {
  ...colors,
  createColors,
  isColorSupported
};
```