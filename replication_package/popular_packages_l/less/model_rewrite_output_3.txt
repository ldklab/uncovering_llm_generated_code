The provided Node.js code defines a `LessCompiler` class that is used to compile LESS files into CSS files. The class uses the `less` and `fs` modules to read the LESS files and compile them into CSS. The compiled CSS is then written out to a file with the same name but with a `.css` extension. Here's a breakdown of the main steps:

1. **Reading the LESS File**: The code reads a LESS file from the filesystem using its path.
2. **Compiling LESS to CSS**: It uses the `less` module to compile the LESS content into CSS.
3. **Writing the CSS File**: After compiling, the CSS is written back to the filesystem with a `.css` extension using the `fs` module.
4. **Error Handling**: All operations include error handling to catch and log potential errors during file reading, LESS compilation, or CSS writing.

Below is the rewritten version of the Node.js code:

```javascript
const less = require('less');
const fs = require('fs');
const path = require('path');

class LessCompiler {
    compileFromFile(inputFilePath, options = {}) {
        const fullPath = path.resolve(inputFilePath);
        const outputFilePath = fullPath.replace(/\.less$/, '.css');

        fs.promises.readFile(fullPath, 'utf8')
            .then(data => this.less.render(data, options))
            .then(output => fs.promises.writeFile(outputFilePath, output.css, 'utf8'))
            .then(() => console.log(`Successfully compiled ${inputFilePath} to ${outputFilePath}`))
            .catch(err => console.error(`Error handling file: ${err.message}`, err));
    }
}

// Usage Example
(async () => {
    const lessCompiler = new LessCompiler();
    await lessCompiler.compileFromFile('path/to/style.less');
})();
```

**Changes Made**:
- Used `fs.promises` for modern promise-based file handling instead of callback-based.
- Streamlined error handling with a unified `.catch` block.
- Encapsulated the usage example in an async function to properly handle asynchronous execution.