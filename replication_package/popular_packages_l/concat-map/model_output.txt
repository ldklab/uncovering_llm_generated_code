The functionality described in the `concat-map` package is designed to apply a function to each element in an array, with the results being concatenated into a new array. It is similar to the `Array.prototype.map` method in JavaScript, but instead of replacing each item in the array with a single value, it concatenates the arrays returned by the provided function.

Here's a breakdown of how it works:

1. You have an array `xs` and you want to apply a function `fn` to each element `x` of this array.

2. For each element `x` in the array, `fn(x, i)` is called, where `i` is the index of `x`.

3. The result from `fn(x, i)` should be an array. This array is concatenated into the resulting array. If `fn(x, i)` returns anything other than an array, that value is directly pushed to the resulting array.

4. After processing all elements, the function returns a new array that is the concatenation of all arrays generated by the function `fn`.

Below is the implementation of the `concat-map` package based on this functionality:

```markdown
// concat-map.js

module.exports = function concatMap(xs, fn) {
    // Initialize an empty array to hold concatenated results
    var result = [];
    
    // Iterate over each element in the input array
    for (var i = 0; i < xs.length; i++) {
        // Get the transformed value for the current element
        var res = fn(xs[i], i);
        
        // Check if the result is an array
        if (Array.isArray(res)) {
            // Concatenate the result if it's an array
            result = result.concat(res);
        } else {
            // Push the result if it's not an array
            result.push(res);
        }
    }
    
    // Return the final concatenated array
    return result;
}
```

Below is an example demonstrating how to use this package:

```js
var concatMap = require('./concat-map');
var xs = [ 1, 2, 3, 4, 5, 6 ];
var ys = concatMap(xs, function (x) {
    return x % 2 ? [ x - 0.1, x, x + 0.1 ] : [];
});
console.dir(ys);
```

When executed, this example should output: 

```
[ 0.9, 1, 1.1, 2.9, 3, 3.1, 4.9, 5, 5.1 ]
```