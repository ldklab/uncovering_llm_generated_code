The `is-typed-array` Node.js package is a utility to determine if a given value is a JavaScript Typed Array. Typed Arrays in JavaScript are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers. This package aims to accurately identify instances of Typed Arrays across different realms or iframes, without relying on `instanceof` checks or mutable properties, and handles cases where the `Symbol.toStringTag` might be altered.

### Overview of the Functionality

1. **Type Checking**: The package checks whether a given value is one of the JavaScript Typed Arrays, which include:
   - `Int8Array`
   - `Uint8Array`
   - `Uint8ClampedArray`
   - `Int16Array`
   - `Uint16Array`
   - `Int32Array`
   - `Uint32Array`
   - `Float32Array`
   - `Float64Array`
   - `BigInt64Array`
   - `BigUint64Array`

2. **Cross-realm Compatibility**: The check is designed to work even if the Typed Arrays originate from different realms, like iframes.

3. **Avoiding `instanceof`**: Since `instanceof` might not work correctly in different realms, the package uses a more robust detection method.

4. **Unreliant on Symbol.toStringTag**: Even if the `Symbol.toStringTag` is modified, the detection remains accurate.

5. **Testing**: It provides a test suite to validate the functionality using a variety of inputs, including primitives, objects, regular expressions, functions, and valid Typed Array instances.

### Implementation Code

Here's a simple implementation of the `is-typed-array` package in Node.js:

```javascript
// isTypedArray.js

function isTypedArray(value) {
  return ArrayBuffer.isView(value) && !(value instanceof DataView);
}

module.exports = isTypedArray;

// test.js

const assert = require('assert');
const isTypedArray = require('./isTypedArray');

// Tests for non-typed-array values
assert.strictEqual(isTypedArray(undefined), false);
assert.strictEqual(isTypedArray(null), false);
assert.strictEqual(isTypedArray(false), false);
assert.strictEqual(isTypedArray(true), false);
assert.strictEqual(isTypedArray([]), false);
assert.strictEqual(isTypedArray({}), false);
assert.strictEqual(isTypedArray(/a/g), false);
assert.strictEqual(isTypedArray(new RegExp('a', 'g')), false);
assert.strictEqual(isTypedArray(new Date()), false);
assert.strictEqual(isTypedArray(42), false);
assert.strictEqual(isTypedArray(NaN), false);
assert.strictEqual(isTypedArray(Infinity), false);
assert.strictEqual(isTypedArray(new Number(42)), false);
assert.strictEqual(isTypedArray('foo'), false);
assert.strictEqual(isTypedArray(Object('foo')), false);
assert.strictEqual(isTypedArray(function () {}), false);
assert.strictEqual(isTypedArray(function* () {}), false);
assert.strictEqual(isTypedArray(x => x * x), false);
assert.strictEqual(isTypedArray([]), false);

// Tests for typed-array instances
assert.ok(isTypedArray(new Int8Array()));
assert.ok(isTypedArray(new Uint8Array()));
assert.ok(isTypedArray(new Uint8ClampedArray()));
assert.ok(isTypedArray(new Int16Array()));
assert.ok(isTypedArray(new Uint16Array()));
assert.ok(isTypedArray(new Int32Array()));
assert.ok(isTypedArray(new Uint32Array()));
assert.ok(isTypedArray(new Float32Array()));
assert.ok(isTypedArray(new Float64Array()));
assert.ok(isTypedArray(new BigInt64Array()));
assert.ok(isTypedArray(new BigUint64Array()));

console.log("All tests passed!");
```

To run the tests:
1. Save `isTypedArray.js` and `test.js` in the same directory.
2. Run `node test.js` to execute the tests. You should see "All tests passed!" if everything is working correctly.