The `markdown-it` package is a Markdown parser designed to be fast, flexible, and easy to extend. It follows the CommonMark specification while also supporting syntax extensions such as URL autolinking and typography options. Here's an overview of its functionality:

1. **Markdown Parsing:** Transforms Markdown text into HTML. Supports CommonMark and additional syntax extensions.
  
2. **Configuration and Initialization:**
   - Can initialize with different modes: 'commonmark', 'zero', or 'default'.
   - Configurable options for HTML tags, automatic URL linking, typography, and more.

3. **Plugins:**
   - Extensible through plugins. Users can add or replace syntax rules.
   - Comes with built-in support for tables and strikethrough when following the GFM (GitHub Flavored Markdown) spec.
   - Supports additional features like subscripts, superscripts, footnotes, etc., via community-contributed plugins.

4. **Syntax Highlighting:**
   - Can integrate with syntax highlighters like Highlight.js for code block highlighting.

5. **Linkify:**
   - Built-in feature to automatically convert plain URLs in text to clickable links, powered by `linkify-it`.
  
6. **API and Rules Management:**
   - The package provides an API for deeper customization, such as enabling/disabling parsing rules.
   - Users can directly manipulate the parsing rules, reorder them, or add new ones.

7. **Enterprise Support:**
   - Available for enterprise-level support and maintenance through Tidelift.

Below is the pseudocode implementation of similar functionality:

```javascript
// File: markdown-it.js

const MarkdownIt = () => {
  const state = {
    html: false,
    linkify: false,
    typographer: false,
    plugins: [],
    rules: {
      link: true,
      image: true,
      // Add other rules as needed
    },
    quotes: '“”‘’',
  };

  const defaultOptions = {
    html: false,
    xhtmlOut: false,
    breaks: false,
    langPrefix: 'language-',
    linkify: false,
    typographer: false,
    quotes: '“”‘’',
    highlight: (str, lang) => { return ''; }
  };

  const init = (options = {}) => {
    Object.assign(state, defaultOptions, options);
  };

  const render = (markdownText) => {
    // Basic Markdown to HTML conversion logic
    let html = markdownText;
    // Implement conversion logic here
    if (state.linkify) {
      // Convert URLs in markdownText to links
    }
    return html;
  };

  const renderInline = (markdownText) => {
    // Convert without paragraph wraps
    return render(markdownText);
  };

  const use = (plugin, ...opts) => {
    state.plugins.push({ plugin, opts });
    plugin(this, ...opts);
    return this;
  };

  const setRules = (rules = {}) => {
    Object.assign(state.rules, rules);
  };

  const enable = (rule) => {
    // Enable specific features/rules
    state.rules[rule] = true;
    return this;
  };

  const disable = (rule) => {
    // Disable specific features/rules
    state.rules[rule] = false;
    return this;
  };

  // Export public API
  return {
    init,
    render,
    renderInline,
    use,
    enable,
    disable,
    setRules
  };
};

// Usage Example:
const markdownIt = MarkdownIt();
markdownIt.init({ linkify: true });
const result = markdownIt.render('# Hello Markdown-it!');

console.log(result);

export default MarkdownIt;
```

In this pseudocode:
- A `MarkdownIt` factory function initializes a Markdown parser with customizable options.
- Plugins can be added, and rules for parsing can be enabled or disabled.
- Methods like `render` and `renderInline` are placeholders for where Markdown to HTML conversion logic should be implemented, influenced by configured options and enabled rules.