The `side-channel` Node.js package is a utility that allows developers to store and manage additional information associated with JavaScript values. It effectively acts as a "side channel" for metadata or extra data to be associated with objects, functions, or any other values in JavaScript. 

Here's how the functionality works:
- The package uses a `WeakMap` if the environment supports it. A `WeakMap` is a collection of key/value pairs where the keys are objects and the values can be arbitrary values. The key object is held "weakly" which means its lifecycle is not tied to the `WeakMap` - it can be garbage-collected if there are no other references to it.
- If `WeakMap` is not supported or available in the runtime, it falls back to using an "expando" property on the values themselves for storing information, although this approach is limited to objects that can have properties added to them and may not be perfectly clean.
- The functionality allows users to add entries (associating values) and retrieve them later, acting as a flexible way to attach metadata to any JavaScript values without altering them directly.

Hereâ€™s how you might implement such a package in Node.js:

```javascript
// side-channel.js
class SideChannel {
  constructor() {
    this.useWeakMap = typeof WeakMap !== 'undefined';
    this.store = this.useWeakMap ? new WeakMap() : Object.create(null);
  }

  // Method to associate a value with a key
  set(key, value) {
    if (this.useWeakMap) {
      if (this.isObjectType(key)) {
        this.store.set(key, value);
      } else {
        throw new TypeError('Invalid value used as weak map key');
      }
    } else {
      key.__side_channel__ = value;
    }
  }

  // Method to retrieve a value associated with a key
  get(key) {
    if (this.useWeakMap) {
      if (this.isObjectType(key)) {
        return this.store.get(key);
      } else {
        return undefined;
      }
    } else {
      return key.__side_channel__;
    }
  }

  // Method to check if a value is associated with a key
  has(key) {
    if (this.useWeakMap) {
      return this.isObjectType(key) && this.store.has(key);
    } else {
      return typeof key === 'object' && '__side_channel__' in key;
    }
  }

  // Utility to check if a value is an object or function and thus can be used as a key in a WeakMap
  isObjectType(value) {
    const type = typeof value;
    return value !== null && (type === 'object' || type === 'function');
  }
}

module.exports = SideChannel;
```

In this code:
- We define a `SideChannel` class which contains a constructor to initialize `WeakMap` or an object-based fallback.
- The `set` method associates a key with a value.
- The `get` method retrieves the value associated with a key.
- The `has` method checks whether a value is associated with a key.
- The `isObjectType` utility function checks if the key can be used with a `WeakMap`.