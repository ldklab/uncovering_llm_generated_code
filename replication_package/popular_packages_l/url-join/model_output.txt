The Node.js package `url-join` is designed to take multiple string arguments, combine them into a single URL, and normalize the resulting URL. This normalization process typically involves:

1. Joining parts of the URL with the appropriate slashes.
2. Removing any duplicate slashes that may appear after joining.
3. Ensuring that query strings are correctly appended without additional slashes interfering with the format.

The package can be installed via npm and can be used in both Node.js and browser environments, using options like a CDN for browser usage. The core functionality is exposed via a default import and simple invocation using the `urlJoin` function with URL parts as arguments.

Below is the implementation of this functionality in a Node.js package:

```javascript
// url-join.js

function urlJoin(...parts) {
  return parts
    // Flatten the array of parts into a single array
    .flatMap(part => part.split('/'))
    // Remove any empty parts that may result from splitting or joining
    .filter(part => part !== '')
    // Join with a single slash
    .join('/')
    // Add prepending slash if any part had one after joining
    .replace(/(https?:\/)(\/+)/g, '$1/')
    // Ensure a single question mark for the query string
    .replace(/([^:])(\?{2,})/g, '$1?');
}

export default urlJoin;

// Example usage
const fullUrl = urlJoin('http://www.google.com', 'a', '/b/cd', '?foo=123');
console.log(fullUrl);
// Expected output: 'http://www.google.com/a/b/cd?foo=123'
```

- The `urlJoin` function starts by taking all parts to be joined and transforming them into an array of individual segments by splitting on '/'.
- It removes any empty strings from the resulting array to avoid unintended double slashes when rejoining.
- It joins the valid segments back together with a single slash.
- Any unnecessary slashes from the protocol and leading slashes in later parts are adjusted.
- It normalizes the `?` character to properly handle query parameters.

This implementation ensures that the resultant URL is clean, consistent, and free from common pitfalls like double slashes or misordered query strings.