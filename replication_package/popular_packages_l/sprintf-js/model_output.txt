The `sprintf-js` package provides a versatile string formatting utility in JavaScript, similar to the C `sprintf` function. It offers two main functions: `sprintf` and `vsprintf`.

### Functionality:
- **`sprintf(format, arg1, arg2, ...)`**: 
  - This function returns a formatted string based on the format specifier string provided as the first argument and a variable number of additional arguments.
  - Allows swapping of argument positions using `$` in the format, e.g., `'%2$s %1$s'`.
  - Supports named arguments where you can specify keys from a provided object, such as `'%(name)s'`.
- **`vsprintf(format, arguments)`**:
  - Similar to `sprintf`, but takes an array of arguments instead of a variable number. Useful for dynamic argument lists.

### Format Specifiers:
- `%`: Literal `%`.
- `b`, `o`, `x`, `X`: Binary, octal, and hexadecimal representations.
- `d`, `i`, `u`: Decimal integer formats (signed and unsigned).
- `f`, `g`, `e`: Floating point formats.
- `c`: ASCII character.
- `s`: String.
- `t`, `T`: Boolean, type of the argument.
- `v` : Primitive value of the argument.
- `j`: JSON string of an object or array.
- Precision, width, alignment, and padding options are supported.

### Advanced Features:
- Argument swapping: Reorder placeholders and arguments as needed.
- Named arguments: Use object keys in placeholders.
- Computed values: Accept functions as arguments that return results dynamically.

### Usage:
- Write complex format strings with diverse data types and options.
- Benefit from clearer, configurable text output in logs, interfaces, and automated messages.

Here's the implementation:

```javascript
// sprintf-js package implementation

function sprintf(format, ...args) {
    return formatString(format, args);
}

function vsprintf(format, array) {
    return formatString(format, array);
}

function formatString(format, args) {
    let i = 0;
    const regex = /%(\d+\$)?([-+])?(')?(\d+)?(\.\d+)?([bcdeEufFgGosxXjtTv%])/g;
    return format.replace(regex, function(match, index, flags, pad, width, precision, type) {
        if (type === '%') return '%';

        let arg = args[i++];
        if (index) arg = args[parseInt(index) - 1];

        switch (type) {
            case 'b': return parseInt(arg).toString(2);
            case 'c': return String.fromCharCode(parseInt(arg));
            case 'd':
            case 'i': return parseInt(arg).toString(10);
            case 'e': return parseFloat(arg).toExponential(precision ? parseInt(precision.substr(1)) : undefined);
            case 'u': return Math.abs(parseInt(arg));
            case 'f': return parseFloat(arg).toFixed(precision ? parseInt(precision.substr(1)) : 6);
            case 'g':
            case 'G': return parseFloat(arg).toPrecision(precision ? parseInt(precision.substr(1)) : undefined);
            case 'o': return parseInt(arg).toString(8);
            case 's': return String(arg);
            case 'x': return parseInt(arg).toString(16);
            case 'X': return parseInt(arg).toString(16).toUpperCase();
            case 'j': return JSON.stringify(arg, null, width ? parseInt(width) : undefined);
            case 't': return String(!!arg);
            case 'T': return getType(arg);

            default:
                throw Error('Unknown format type');
        }
    });
}

function getType(arg) {
    if (arg === null) return 'null';
    if (Array.isArray(arg)) return 'array';
    if (arg instanceof Date) return 'date';
    return typeof arg;
}

module.exports = {
    sprintf,
    vsprintf
};
```
This code implements the `sprintf` and `vsprintf` functions with support for all the specified format specifiers and features. Users can include this package in their projects to format strings in a comprehensive and customizable manner similar to the C `sprintf` function.