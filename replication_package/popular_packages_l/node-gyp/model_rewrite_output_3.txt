The given Node.js code provides a command-line interface (CLI) for managing build tasks for Node.js native addons using `node-gyp`. Here is a breakdown of its functionalities:

1. **Dependencies**: It imports `execSync` from the `child_process` module to execute shell commands synchronously, `fs` for filesystem operations, and `path` to handle and manipulate filesystem paths.

2. **Node Version**: Captures the currently running Node.js version, although this variable isn't used in the rest of the script.

3. **Configure Function**: Checks if `binding.gyp` (a configuration file necessary for `node-gyp`) exists in the current directory. If not, it throws an error. If it exists, it runs `node-gyp configure` to generate platform-specific make files.

4. **Build Function**: Executes `node-gyp build` to compile the project's native addon files.

5. **Clean Function**: Runs `node-gyp clean` to remove the generated build files, essentially cleaning up the directory.

6. **Rebuild Function**: Combines the functionalities of `clean`, `configure`, and `build` to completely rebuild the addon files from scratch.

7. **Help Function**: Displays a list of available commands and their descriptions for user guidance.

8. **Command Handling**: Retrieves a command from the command line arguments, defaults to 'help' if no command is specified, and invokes the appropriate function handler for a given command or shows help for invalid commands.

The script is organized to handle multiple operations on a Node.js addon project by specifying a command when running the script. The available commands are `configure`, `build`, `clean`, `rebuild`, and `help`.

Here is the cleaned-up and reformatted version of the code:

```javascript
// index.js

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

function configure() {
  const bindingGyp = path.join(process.cwd(), 'binding.gyp');
  if (!fs.existsSync(bindingGyp)) {
    throw new Error("binding.gyp not found in current directory.");
  }
  console.log('Configuring project...');
  execSync('node-gyp configure', { stdio: 'inherit' });
}

function build() {
  console.log('Building project...');
  execSync('node-gyp build', { stdio: 'inherit' });
}

function clean() {
  console.log('Cleaning up build directory...');
  execSync('node-gyp clean', { stdio: 'inherit' });
}

function rebuild() {
  console.log('Rebuilding project...');
  clean();
  configure();
  build();
}

function help() {
  console.log(`
    node-gyp commands:
    - configure: Generate configuration files for the current platform.
    - build: Compile the native addon.
    - clean: Remove the build files.
    - rebuild: Perform clean, configure, and build operations.
  `);
}

function runCommand(command) {
  switch (command) {
    case 'configure':
      configure();
      break;
    case 'build':
      build();
      break;
    case 'clean':
      clean();
      break;
    case 'rebuild':
      rebuild();
      break;
    case 'help':
    default:
      help();
  }
}

const command = process.argv[2] || 'help';
runCommand(command);
```