The `psl` package is a JavaScript library designed to parse domain names by utilizing the Public Suffix List. This list determines under which domain names Internet users can directly register, with examples like ".com" and ".co.uk". The primary features of `psl` include:

1. **parse(domain)**: This function analyzes a given domain name based on the Public Suffix List. It returns an object with the properties:
   - `tld`: The top-level domain, also known as the public suffix.
   - `sld`: The second-level domain, which is the first private part of the domain name.
   - `domain`: The combination of the `sld` and `tld`.
   - `subdomain`: Any additional parts of the domain name preceding the `sld`.

2. **get(domain)**: This retrieves the domain name, consisting of `sld` + `tld`, or returns `null` if the domain is not valid.

3. **isValid(domain)**: This checks if a domain has a valid public suffix, returning a boolean result.

Additional support includes browser compatibility via a downloadable script and the ability to test using Mocha and Karma.

Below is the implementation of the `psl` package in a single code block:

```javascript
// psl.js
const publicSuffixList = require('publicsuffixlist'); // Imaginary module for example purposes

const psl = {
  parse(domain) {
    if (typeof domain !== 'string') return null;

    domain = domain.toLowerCase().trim();
    const parts = domain.split('.');

    if (parts.length < 2) return null; // TLD + at least one more part

    let tldIndex = -1;
    // Find the TLD by checking the PSL (Here simply checking from the end of the list)
    for (let i = parts.length - 1; i >= 0; i--) {
      const candidate = parts.slice(i).join('.');
      if (publicSuffixList.includes(candidate)) {
        tldIndex = i;
        break;
      }
    }

    if (tldIndex === -1) return null; // No valid TLD found

    const tld = parts.slice(tldIndex).join('.');
    const sld = parts[tldIndex - 1] || null;
    const domainName = sld ? `${sld}.${tld}` : null;
    const subdomain = parts.slice(0, tldIndex - 1).join('.') || null;

    return { tld, sld, domain: domainName, subdomain };
  },

  get(domain) {
    const parsed = this.parse(domain);
    return parsed ? parsed.domain : null;
  },

  isValid(domain) {
    return this.get(domain) !== null;
  }
};

// Export module
module.exports = psl;

// Example Usage
const parsedDomain = psl.parse('www.google.com');
console.log(parsedDomain);
// Output:
// {
//   tld: 'com',
//   sld: 'google',
//   domain: 'google.com',
//   subdomain: 'www'
// }

console.log(psl.get('example.COM')); // 'example.com'
console.log(psl.isValid('google.com')); // true

```

Note: The actual implementation would rely on the real Public Suffix List and its capabilities (e.g., fetching/updating the actual list from a maintained source). The above example assumes an imaginary `publicsuffixlist` module which contains an array of valid suffixes.