The `through2` package is a utility for creating transform streams in Node.js using a simpler and more readable syntax. It wraps around Node.js's core streams.Transform class and provides a more convenient API for working with streams by abstracting the usual subclassing required to create a transform stream.

### Functionality:

1. **Simplified Stream Creation**: 
   - `through2` makes it easier to create transform streams without explicitly subclassing streams.Transform.
   - You can pass a function to handle data transformation directly to `through2`.

2. **Stream Transformation**:
   - The main function exported by `through2` can take a `transformFunction` that processes each chunk of data. This function should have the signature `(chunk, encoding, callback)`.
   - You can push transformed data onto the stream with `this.push(data)` or by using `callback(null, data)`.
   - A `flushFunction` can also be provided to execute logic before the stream ends.

3. **Object Mode Support**: 
   - Through the method `through2.obj()`, it supports objectMode, where each chunk is treated as an object instead of a Buffer or a string.

4. **Constructor Method**:
   - `through2.ctor()` is provided to create a custom constructor for a Transform stream. This is useful for reusing the same transformation logic in different instances.

Below is the Node.js code for the `through2` package implementing the described functionality:

```javascript
const { Transform } = require('stream');

// Main through2 function
function through2(options, transformFunction, flushFunction) {
  if (typeof options === 'function') {
    flushFunction = transformFunction;
    transformFunction = options;
    options = {};
  }

  if (!transformFunction) transformFunction = function(chunk, enc, cb) { cb(null, chunk); };
  
  const transform = new Transform({
    ...options,
    transform(chunk, enc, callback) {
      transformFunction.call(this, chunk, enc, callback);
    },
    flush(callback) {
      if (flushFunction) {
        flushFunction.call(this, callback);
      } else {
        callback();
      }
    }
  });

  return transform;
}

// Convenience method for object mode streams
through2.obj = function(transformFunction, flushFunction) {
  return through2({ objectMode: true }, transformFunction, flushFunction);
};

// Constructor creation function
through2.ctor = function(options, transformFunction, flushFunction) {
  if (typeof options === 'function') {
    flushFunction = transformFunction;
    transformFunction = options;
    options = {};
  }

  if (!transformFunction) transformFunction = function(chunk, enc, cb) { cb(null, chunk); };
  
  class Through2 extends Transform {
    constructor(overrideOptions) {
      super(overrideOptions ? { ...options, ...overrideOptions } : options);
    }

    _transform(chunk, encoding, callback) {
      transformFunction.call(this, chunk, encoding, callback);
    }

    _flush(callback) {
      if (flushFunction) {
        flushFunction.call(this, callback);
      } else {
        callback();
      }
    }
  }

  return Through2;
};

module.exports = through2;
```

This code provides a robust and flexible way to manipulate streams in Node.js with less boilerplate than directly using the `stream.Transform` base class. It facilitates creating simple, object-mode, or custom reusable stream transforms effortlessly.