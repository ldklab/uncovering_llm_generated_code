The provided Node.js code is a module that provides two functionalities:

1. `getFunctionName(fn)`: A utility function that retrieves the name of a given function `fn`. It first checks if `fn` is indeed a function and throws a `TypeError` if not. It attempts to return the `name` property available on the function object. If the `name` property is not present (for older JavaScript engines or certain function types), it converts the function to a string and uses a regular expression to extract the name from the function definition.

2. `shim()`: A function that adds a `name` property to `Function.prototype` if it doesn't already exist, using the `getFunctionName` function to define how `name` is determined. This is a polyfill-like utility to ensure older JavaScript engines can use `Function.prototype.name`.

Here's a possible rewrite of this Node.js code:

```javascript
// function-prototype-name.js
(function() {
    'use strict';

    function getFunctionName(fn) {
        if (typeof fn !== 'function') {
            throw new TypeError('Expected a function');
        }
        return fn.name || /function\s*([^\s(]+)/.exec(fn.toString())?.[1] || '';
    }

    function shim() {
        if (!('name' in Function.prototype)) {
            Object.defineProperty(Function.prototype, 'name', {
                configurable: true,
                get: function() {
                    return getFunctionName(this);
                }
            });
        }
    }

    module.exports = getFunctionName;
    module.exports.shim = shim;
})();
```