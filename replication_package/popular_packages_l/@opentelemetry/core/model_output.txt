The README.md for the "OpenTelemetry Core" Node.js package describes its functionality primarily around context propagation used in distributed systems for tracing and metrics. The package contains default implementations of the OpenTelemetry API which help in propagating context across different services through HTTP headers.

The core functionalities discussed in the README are:

1. **W3CTraceContextPropagator**: This propagator adheres to the W3C trace context specifications using HTTP headers, enabling consistent tracing across distributed services.

2. **CompositePropagator**: This implementation allows multiple propagators to be combined into one. It acts as the default global propagator used by the system.

3. **Baggage Propagator**: This propagator helps to transfer additional user-defined metadata (referred to as 'baggage') along with the trace context information using HTTP headers.

In all cases, the propagators are used to set a global propogator using `api.propagation.setGlobalPropagator(...)`, meaning they define how context is propagated across boundaries in an application.

Below is the implementation of these functionalities:

```javascript
// opentelemetry-core.js

class W3CTraceContextPropagator {
  constructor() {
    // Implementation follows W3C Trace Context specifications for HTTP headers
  }

  inject(context, carrier) {
    // Code to inject trace context into carrier (HTTP headers)
  }

  extract(context, carrier) {
    // Code to extract trace context from carrier (HTTP headers)
  }
}

class W3CBaggagePropagator {
  constructor() {
    // Implementation for baggage using HTTP headers
  }

  inject(context, carrier) {
    // Code to inject baggage into carrier (HTTP headers)
  }

  extract(context, carrier) {
    // Code to extract baggage from carrier (HTTP headers)
  }
}

class CompositePropagator {
  constructor(propagators = []) {
    this.propagators = propagators;
  }

  inject(context, carrier) {
    this.propagators.forEach(propagator => propagator.inject(context, carrier));
  }

  extract(context, carrier) {
    this.propagators.forEach(propagator => propagator.extract(context, carrier));
  }
}

// Usage
const api = { // Simulated OpenTelemetry API object
  propagation: {
    setGlobalPropagator(propagatorInstance) {
      this.globalPropagator = propagatorInstance;
    }
  }
};

// Setting Global Propagator as W3CTraceContextPropagator
api.propagation.setGlobalPropagator(new W3CTraceContextPropagator());

// Setting Global Propagator as CompositePropagator with W3CTraceContext and Baggage
api.propagation.setGlobalPropagator(new CompositePropagator([
  new W3CTraceContextPropagator(),
  new W3CBaggagePropagator()
]));

// Setting Global Propagator as W3CBaggagePropagator
api.propagation.setGlobalPropagator(new W3CBaggagePropagator());
```
This code provides rudimentary implementations of the outlined propagators. Adhering to the W3C spec and effectively managing context propagation in a real application would involve more detailed and robust implementation.