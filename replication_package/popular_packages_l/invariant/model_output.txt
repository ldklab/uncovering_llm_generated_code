The `invariant` package provides a utility to enforce the truthiness of a condition during runtime. It is primarily used to give descriptive error messages during development and to throw generic errors in production. The idea is to aid developers with debugging by providing more detailed information when things go wrong, while optimizing for performance in a production environment by minimizing the error message payload.

### Core Functionality

1. **Invariant Function**: 
   - Accepts two arguments: a `condition`, which is a boolean, and a `message`, which is a string used as an error description.
   - If the `condition` is `falsy`, the function throws an error.
   - The error message varies based on the value of `process.env.NODE_ENV`.
     - **Development** (`process.env.NODE_ENV` is not `'production'`): The error is thrown with the provided `message`.
     - **Production** (`process.env.NODE_ENV` is `'production'`): The `message` is optional, promoting minification and reducing the size of error messages for performance optimization.

2. **Environment Awareness**:
   - The package uses environment-based conditionals to decide the level of detail in error messages.
   - In the browser context, the package is designed to work with tools like Browserify and Envify to inline environmental variables during build time.

3. **Performance Optimization**: 
   - Caches the result of `process.env.NODE_ENV` after its initial evaluation to avoid the overhead of repeatedly accessing environment variables, which can impact performance, especially in server-rendered environments.

Below is the code implementation for this package:

```js
// invariant.js
function invariant(condition, message) {
  if (!condition) {
    if (process.env.NODE_ENV !== 'production') {
      throw new Error(`Invariant Violation: ${message || 'A falsy condition has triggered an error.'}`);
    } else {
      throw new Error('Invariant Violation');
    }
  }
}

module.exports = invariant;

// Usage example
// const invariant = require('./invariant');

// In development:
// invariant(false, 'This condition failed.');  // Error with detailed message

// In production (simulate by setting process.env.NODE_ENV = 'production'):
// invariant(false);  // Generic error message
```

This implementation fulfills the described functionality by checking the `NODE_ENV` environment variable and customizing the error messages accordingly. The actual deployment would require setting up `process.env.NODE_ENV`, typically during device setup, using tooling or environment configuration, to switch between development and production modes.