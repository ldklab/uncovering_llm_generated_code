The provided Node.js code implements a polyfill for the `Array.prototype.findLastIndex` method. It ensures that if the native `findLastIndex` method is not available on the `Array` prototype, a custom implementation is provided. The custom `findLastIndex` method searches an array from the end to the beginning and returns the index of the last element in the array that satisfies the provided callback function. If no such element is found, it returns -1. The code exports multiple functions, including the polyfill getter, a method to add the polyfill to the `Array` prototype, and a direct way to use the `findLastIndex` functionality.

Here is the rewritten code:

```javascript
const defineProperty = Object.defineProperty;
const call = Function.prototype.call;

function getPolyfill() {
  return Array.prototype.findLastIndex || function(callback, thisArg) {
    if (this == null) throw new TypeError('Array.prototype.findLastIndex called on null or undefined');
    if (typeof callback !== 'function') throw new TypeError('callback must be a function');
    
    const object = Object(this);
    const length = object.length >>> 0;

    for (let i = length - 1; i >= 0; i--) {
      if (i in object && callback.call(thisArg, object[i], i, object)) {
        return i;
      }
    }
    return -1;
  };
}

function shimArrayPrototypeFindLastIndex() {
  const polyfill = getPolyfill();
  if (Array.prototype.findLastIndex !== polyfill) {
    defineProperty(Array.prototype, 'findLastIndex', {
      value: polyfill,
      configurable: true,
      enumerable: false,
      writable: true
    });
  }
  return polyfill;
}

function findLastIndex(array, callback, thisArg) {
  return call.call(getPolyfill(), array, callback, thisArg);
}

module.exports = {
  getPolyfill,
  shim: shimArrayPrototypeFindLastIndex,
  implementation: getPolyfill(),
  findLastIndex
};
```