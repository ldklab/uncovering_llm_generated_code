```json
// package.json
{
  "name": "postcss-custom-package",
  "version": "1.0.0",
  "description": "A simple PostCSS setup for transforming CSS with plugins.",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "postcss": "^8.3.6",
    "autoprefixer": "^10.3.1",
    "postcss-import": "^14.0.2",
    "postcss-mixins": "^7.0.3",
    "postcss-nested": "^5.0.6",
    "postcss-simple-vars": "^6.0.3"
  }
}
```

```javascript
// index.js
const fs = require('fs');
const postcss = require('postcss');
const autoprefixer = require('autoprefixer');
const postcssImport = require('postcss-import');
const postcssMixins = require('postcss-mixins');
const postcssNested = require('postcss-nested');
const postcssSimpleVars = require('postcss-simple-vars');

const cssInputFile = './input.css';
const cssOutputFile = './output.css';

const processCSS = async () => {
  try {
    const cssContent = fs.readFileSync(cssInputFile, 'utf-8');
    const processedCSS = await postcss([
      postcssImport,        // Handles @import in CSS
      postcssMixins,        // Allows usage of mixins
      postcssSimpleVars,    // Allows usage of variables
      postcssNested,        // Allows nesting of rules
      autoprefixer          // Adds necessary vendor prefixes
    ]).process(cssContent, { from: cssInputFile, to: cssOutputFile });

    fs.writeFileSync(cssOutputFile, processedCSS.css);
    if (processedCSS.map) {
      fs.writeFileSync(`${cssOutputFile}.map`, processedCSS.map.toString());
    }

    console.log('CSS processed successfully and saved to output.css');
  } catch (err) {
    console.error('Error processing CSS:', err);
  }
};

processCSS();
```

```css
/* input.css */
@import 'variables.css';

@mixin border-radius($radius) {
  border-radius: $radius;
}

.button {
  @include border-radius(5px);
  color: $primary-color;
  display: flex;
  &:hover {
    color: $secondary-color;
  }
}
```

```css
/* variables.css */
$primary-color: #3498db;
$secondary-color: #2ecc71;
```

Explanation:
This Node.js code facilitates transforming CSS using PostCSS and several plugins. The application reads from an `input.css` file and processes its content using plugins like `postcss-import` for importing files, `postcss-mixins` for mixins, `postcss-simple-vars` for variable handling, `postcss-nested` for nesting, and `autoprefixer` for adding vendor prefixes. The processed result is then written to `output.css`, with a source map file if it's generated.