The Node.js code consists of two main components: a cookie parsing and serialization utility, defined in `cookie.js`, and a HTTP server defined in `app.js` that demonstrates how to use this utility.

### cookie.js

1. **parse**: This function takes a `cookieHeader` string from an HTTP request and an `options` object. It parses the cookies from the header and returns an object where each key-value pair represents a cookie name and its decoded value.

2. **serialize**: This function constructs a "Set-Cookie" header string. It takes a `name`, `value`, and `options` such as `maxAge`, `domain`, `path`, `expires`, `httpOnly`, `secure`, `sameSite`, etc., and returns a formatted string that can be used to set a cookie in an HTTP response.

### app.js

1. **HTTP Server**: The server listens on port 3000. It parses incoming requests using query parameters and handles cookies using the cookie utility.

2. **Set Cookie**: If a client sends a `name` parameter in the query string, it serializes this name into a cookie and sends it back in the response.

3. **Read Cookie**: If a request contains a `name` cookie, it greets the user with their stored name; otherwise, it greets them as a new visitor.

```javascript
// cookie.js
module.exports = {
  parse,
  serialize
};

function parse(cookieHeader, options = {}) {
  const decode = options.decode || decodeURIComponent;
  const cookies = {};

  if (!cookieHeader) {
    return cookies;
  }

  cookieHeader.split(';').forEach(cookie => {
    const [name, ...rest] = cookie.split('=');
    const value = rest.join('=').trim();
    if (!cookies[name.trim()]) {
      try {
        cookies[name.trim()] = decode(value);
      } catch (e) {
        cookies[name.trim()] = value;
      }
    }
  });

  return cookies;
}

function serialize(name, value, options = {}) {
  const encode = options.encode || encodeURIComponent;
  const pairs = [`${name}=${encode(value)}`];

  if (options.maxAge) {
    pairs.push(`Max-Age=${Math.floor(options.maxAge)}`);
  }

  if (options.domain) {
    pairs.push(`Domain=${options.domain}`);
  }

  if (options.path) {
    pairs.push(`Path=${options.path}`);
  }

  if (options.expires) {
    pairs.push(`Expires=${options.expires.toUTCString()}`);
  }

  if (options.httpOnly) {
    pairs.push('HttpOnly');
  }

  if (options.secure) {
    pairs.push('Secure');
  }

  if (options.partitioned) {
    pairs.push('Partitioned');
  }

  if (options.priority) {
    const priorityOption = { low: 'Low', medium: 'Medium', high: 'High' };
    pairs.push(`Priority=${priorityOption[options.priority] || 'Medium'}`);
  }

  if (typeof options.sameSite === 'string') {
    pairs.push(`SameSite=${options.sameSite.charAt(0).toUpperCase() + options.sameSite.slice(1)}`);
  } else if (options.sameSite === true) {
    pairs.push('SameSite=Strict');
  }

  return pairs.join('; ');
}

// Example of usage in a simple HTTP server (app.js)
const http = require('http');
const url = require('url');
const escapeHtml = require('escape-html');
const cookie = require('./cookie');

const server = http.createServer((req, res) => {
  const query = url.parse(req.url, true).query;
  let cookies = cookie.parse(req.headers.cookie || '');
  
  if (query.name) {
    res.setHeader('Set-Cookie', cookie.serialize('name', String(query.name), {
      httpOnly: true,
      maxAge: 7 * 24 * 60 * 60 // 1 week
    }));
    res.writeHead(302, { Location: '/' });
    res.end();
    return;
  }

  res.setHeader('Content-Type', 'text/html; charset=UTF-8');
  if (cookies.name) {
    res.write(`<p>Welcome back, <b>${escapeHtml(cookies.name)}</b>!</p>`);
  } else {
    res.write('<p>Hello, new visitor!</p>');
  }

  res.write('<form method="GET">');
  res.write('<input placeholder="enter your name" name="name"><input type="submit" value="Set Name">');
  res.end('</form>');
});

server.listen(3000, () => {
  console.log('Server running at http://localhost:3000/');
});
```