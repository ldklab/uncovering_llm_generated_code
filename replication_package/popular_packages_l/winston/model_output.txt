The `winston` package is a versatile logging library for Node.js applications that provides a universal interface for logging different levels of messages to various transports or storage mechanisms. Here's a summary of its functionality as captured from the README content:

1. **Transports**: Winston allows logging to multiple transports such as files, console, and more (including custom transports). Each transport defines a storage medium for logs, and you can specify a transport's log level to filter messages by importance.

2. **Logger Configuration**: You can create a logger with `winston.createLogger()` by defining its log level, format, default metadata, and transports. You can add or configure transports dynamically even after the logger has been created.

3. **Log Levels**: Configurable log levels (`error`, `warn`, `info`, etc.) help categorize the severity of logs. Users can create custom logger instances with different levels of detail. By default, winston uses npm's priority style with the common logging severity levels.

4. **Formats**: The library provides flexible options for formatting log messages. Users can use predefined formats or develop custom formats to style their log output. The library supports JSON, simple text, and more, and these formats can be combined or customized.

5. **Exception Handling**: Winston can handle uncaught exceptions and promise rejections, logging them adequately to specified transports.

6. **Streaming and Querying**: Winston supports streaming through transports and querying log data, making it possible to seek and handle log data after it's been output.

7. **Custom Transports**: Users can create custom transports by extending `winston-transport` and implementing the `log` method, thus integrating with different logging platforms as needed.

8. **Profiling**: Basic profiling is available, allowing timing of certain code sections and logging their duration.

9. **Handling Errors and Exiting**: Winston offers configurations to customize exit behavior on errors, which is crucial for production robustness and debugging.

Here is the code for a Node.js package implementing the `winston` logging functionalities described:

```javascript
// index.js
const { createLogger, format, transports, config } = require('winston');

const logger = createLogger({
  levels: config.npm.levels,
  level: 'info',
  format: format.combine(
    format.label({ label: 'my-app' }),
    format.timestamp(),
    format.printf(({ level, message, label, timestamp }) => {
      return `${timestamp} [${label}] ${level}: ${message}`;
    })
  ),
  transports: [
    new transports.Console(),
    new transports.File({ filename: 'error.log', level: 'error' }),
    new transports.File({ filename: 'combined.log' })
  ],
  exceptionHandlers: [
    new transports.File({ filename: 'exceptions.log' })
  ],
  rejectionHandlers: [
    new transports.File({ filename: 'rejections.log' })
  ],
  exitOnError: false
});

// Add a custom transport for demonstration
class CustomTransport extends transports.Stream {
  constructor(opts) {
    super(opts);
    this.stream = process.stdout; // Just logging to stdout for this example
  }

  log(info, callback) {
    setImmediate(() => this.emit('logged', info));
    this.stream.write(`${info.timestamp} ${info.level}: ${info.message}\n`);
    callback();
  }
}

// Usage example
const customTransportLogger = createLogger({
  transports: [
    new CustomTransport(),
    new transports.File({ filename: 'custom.log' })
  ]
});

logger.info('This is an info message');
logger.error('This is an error message');
customTransportLogger.info('Custom transport logging');

// Export logger for use in other modules/files
module.exports = { logger, customTransportLogger };
```