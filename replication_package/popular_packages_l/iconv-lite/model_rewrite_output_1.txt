The Node.js code defines an `IconvLite` module that provides functionality for encoding and decoding text using various character encodings. The module offers the following features:

1. **Decode Functionality**: Converts a `Buffer` into a string based on a specified encoding, which is mapped through an `encodings` object for standardization.
2. **Encode Functionality**: Converts a string into a `Buffer` based on a specified encoding, similarly standardized through the `encodings` object.
3. **Encoding Existence Check**: A utility to check if a given encoding is supported, based on the keys of the `encodings` object.
4. **Decode Stream**: Creates a transform stream that decodes data chunks from a specified encoding to strings.
5. **Encode Stream**: Creates a transform stream that encodes string data chunks into a specified encoding.

Here is a possible rewrite of the original Node.js code:

```javascript
const { Transform } = require('stream');

const encodingsMap = {
    'win1251': 'cp1251',
    'utf8': 'utf-8',
    'ucs2': 'utf-16le',
    'ascii': 'ascii'
};

class IconvLite {
    static decode(buffer, encoding) {
        const standardizedEncoding = encodingsMap[encoding.toLowerCase()] || encoding;
        return buffer.toString(standardizedEncoding);
    }

    static encode(string, encoding) {
        const standardizedEncoding = encodingsMap[encoding.toLowerCase()] || encoding;
        return Buffer.from(string, standardizedEncoding);
    }

    static encodingExists(encoding) {
        return encodingsMap.hasOwnProperty(encoding.toLowerCase());
    }

    static decodeStream(encoding) {
        const standardizedEncoding = encodingsMap[encoding.toLowerCase()] || encoding;
        return new Transform({
            transform(chunk, _, callback) {
                this.push(chunk.toString(standardizedEncoding));
                callback();
            }
        });
    }

    static encodeStream(encoding) {
        const standardizedEncoding = encodingsMap[encoding.toLowerCase()] || encoding;
        return new Transform({
            transform(chunk, _, callback) {
                const strChunk = chunk.toString();
                this.push(Buffer.from(strChunk, standardizedEncoding));
                callback();
            }
        });
    }
}

module.exports = IconvLite;
```