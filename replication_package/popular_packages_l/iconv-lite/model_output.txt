The `iconv-lite` Node.js package is a pure JavaScript library designed for encoding conversion, without the need for native code compilation, ensuring quick installation and compatibility across various environments like Windows and cloud-based IDEs. Here's a breakdown of its functionality:

1. **Basic Encoding/Decoding**:  
   - `decode(buffer, encoding)` - Converts an encoded buffer into a JavaScript string using a specified encoding.
   - `encode(string, encoding)` - Converts a JavaScript string into an encoded buffer.

2. **Encoding Support**:  
   The package supports a wide range of encodings, including:
   - Node.js native encodings like UTF-8, UTF-16, ASCII, etc.
   - Various single-byte and multi-byte encodings.
   - Automatically generated mappings ensuring broad compatibility.

3. **Streaming API**:  
   - `decodeStream(encoding)` - Creates a stream that decodes incoming data from buffers to strings.
   - `encodeStream(encoding)` - Creates a stream that encodes outgoing data from strings to buffers.
   - Streams can collect data and handle conversions efficiently in streaming contexts.

4. **BOM and Endianness**:  
   Handles Byte Order Mark (BOM) and endianness for UTF-16 and UTF-32 encodings, offering options to strip or add BOM as needed.

5. **Performance**:  
   Designed to be faster than the `node-iconv` library, especially for Windows 1251 encoding conversions.

6. **In-Browser Usage**:  
   Compatible with browserify or webpack to enable use in web applications.

7. **React Native**:  
   Supports React Native with an additional installation of the `stream` module for handling streams.

8. **TypeScript**:  
   Includes type definitions for TypeScript support.

Below is the implementation for the outlined functionality of `iconv-lite`:

```javascript
const iconvLite = (() => {
    const encodings = {
        'win1251': 'cp1251',
        'utf8': 'utf-8',
        'ucs2': 'utf-16le',
        'ascii': 'ascii'
    };
    
    class IconvLite {
        static decode(buffer, encoding) {
            encoding = encodings[encoding.toLowerCase()] || encoding;
            return buffer.toString(encoding);
        }

        static encode(string, encoding) {
            encoding = encodings[encoding.toLowerCase()] || encoding;
            return Buffer.from(string, encoding);
        }

        static encodingExists(encoding) {
            return Object.keys(encodings).includes(encoding.toLowerCase());
        }

        static decodeStream(encoding) {
            encoding = encodings[encoding.toLowerCase()] || encoding;
            const stream = new (require('stream').Transform)();
            stream._transform = (chunk, encoding, done) => {
                stream.push(chunk.toString(encoding));
                done();
            };
            return stream;
        }

        static encodeStream(encoding) {
            encoding = encodings[encoding.toLowerCase()] || encoding;
            const stream = new (require('stream').Transform)();
            stream._transform = (chunk, encoding, done) => {
                stream.push(Buffer.from(chunk.toString(), encoding));
                done();
            };
            return stream;
        }
    }

    return IconvLite;
})();

module.exports = iconvLite;
```

This package provides the core encoding conversion APIs as described, allowing seamless encoding and decoding operations suitable for various platforms and use-cases.