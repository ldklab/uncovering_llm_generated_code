The `less-loader` package for Node.js is a Webpack loader that compiles Less to CSS. Here's a breakdown of its key functionality based on the README.md provided:

1. **Installation**: You need to install the `less` and `less-loader` packages as development dependencies using npm, yarn, or pnpm.

2. **Usage in Webpack Config**:
   - In your `webpack.config.js`, you configure the loader to process `.less` files, specifying that it should compile these to CSS by using a chain of `style-loader`, `css-loader`, and `less-loader`.

3. **Options**: 
   - **lessOptions**: This allows you to pass specific options to the `less` compiler, which can be configured as either an object or function. The function can modify options based on the `loaderContext`.
   - **additionalData**: This option is useful for prepending or appending Less code to the entry files, which can be done using a string or function that returns a string.
   - **sourceMap**: A boolean setting to enable or disable the generation of source maps for the resulting CSS.
   - **webpackImporter**: A boolean to enable/disable the use of the default webpack importer.
   - **implementation**: Determines which version of Less to use, allowing for backwards compatibility with different versions.
   - **lessLogAsWarnOrErr**: When set to true, converts Less warnings and errors into Webpack warnings and errors.

4. **Examples**: 
   - The README provides examples for different configurations, such as enabling source maps and integrating plugins with the `less-loader`.

5. **Import Resolution**:
   - **Webpack Resolver**: Leverages Webpack’s module resolution system, enabling imports from `node_modules` and other resolver configurations.
   - **Less Resolver**: Uses Less’s paths option for module resolution, allowing you to specify absolute paths.

6. **Plugins**: The less-loader can be configured to use Less plugins by adding them to the `plugins` array in `lessOptions`.

7. **Extracting Stylesheets**: In production builds, styles can be extracted into separate files using tools like `extract-loader` or `MiniCssExtractPlugin`, which is generally recommended to avoid dependency on JavaScript for rendering styles and to prevent FOUC (Flash of Unstyled Content).

Here is a basic code structure for the `less-loader` functionality in a `webpack.config.js` file:

```js
// Filename: webpack.config.js

const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
  entry: './src/index.js',
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'dist'),
  },
  module: {
    rules: [
      {
        test: /\.less$/i,
        use: [
          process.env.NODE_ENV !== 'production'
            ? 'style-loader'
            : MiniCssExtractPlugin.loader, // extracts CSS in production
          {
            loader: 'css-loader',
            options: {
              sourceMap: true, // enable sourcemap
            },
          },
          {
            loader: 'less-loader',
            options: {
              lessOptions: {
                strictMath: true, // example less option
                paths: [path.resolve(__dirname, 'node_modules')],
              },
              additionalData: (content, loaderContext) => {
                const { resourcePath } = loaderContext;
                if (resourcePath.endsWith('special.less')) {
                  return '@specialVar: 1;' + content;
                }
                return content;
              },
              sourceMap: true,
              webpackImporter: true,
              lessLogAsWarnOrErr: process.env.NODE_ENV === 'production',
            },
          },
        ],
      },
    ],
  },
  plugins: [
    new MiniCssExtractPlugin({
      filename: '[name].css',
    }),
  ],
  resolve: {
    byDependency: {
      less: {
        mainFiles: ['main'],
      },
    },
  },
  devtool: 'source-map', // any "source-map"-like devtool
};
```

This code sets up Webpack to compile `.less` files using the less-loader, with various options available for configuration such as source mapping, conditional style extraction for production, and plugin integration.