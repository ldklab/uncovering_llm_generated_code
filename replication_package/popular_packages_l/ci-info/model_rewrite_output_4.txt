The original Node.js code makes use of the `ci-info` module to determine if the current environment is a Continuous Integration (CI) environment and, if so, identifies the name of the CI server. It accomplishes this by checking specific environment variables that are typically set by CI services. If the code detects that it is running in a CI environment, it prints out the name of the CI service. Otherwise, it indicates that the program is not running on a CI server.

The functionality can be rewritten as follows:

```javascript
// Custom implementation of CI environment detection
const VENDORS = [
  { name: 'Travis CI', env: 'TRAVIS', isPR: 'TRAVIS_PULL_REQUEST' },
  { name: 'CircleCI', env: 'CIRCLECI', isPR: 'CIRCLE_PULL_REQUEST' },
  { name: 'GitHub Actions', env: 'GITHUB_ACTIONS', isPR: 'GITHUB_EVENT_NAME' },
  { name: 'Jenkins CI', env: 'JENKINS_URL', isPR: 'CHANGE_ID' },
  // Additional vendors could be added here
];

function detectCI() {
  for (const vendor of VENDORS) {
    if (process.env[vendor.env] !== undefined) {
      return vendor.name;
    }
  }
  return null;
}

const ciName = detectCI();

if (ciName) {
  console.log('The name of the CI server is:', ciName);
} else {
  console.log('This program is not running on a CI server');
}
```

This rewritten code encapsulates the CI detection logic in a `detectCI` function which iterates over predefined vendors and checks for specific environment variables. If it finds an active CI environment, it returns the name of the service; otherwise, it returns `null`. The main script uses this function to determine and print whether it is running on a CI server and which one it is, if applicable.