The supplied Node.js script uses the `ci-info` library to detect if the current environment is a Continuous Integration (CI) server, and if so, it logs the name of the CI service. The detection is accomplished by checking specific environment variables typically set by CI services, such as Travis CI, CircleCI, GitHub Actions, and Jenkins CI.

Here is how the original script works:

1. It imports the `ci-info` module that provides information about the CI environment.
2. It checks if the current environment is a CI by using `ci.isCI`. This evaluates to `true` if the code is running in a recognized CI environment.
3. If `isCI` is `true`, it logs the name of the CI server using `ci.name`.
4. If `isCI` is `false`, implying the script is not running on any recognized CI server, it logs a message indicating this.

Below is the rewritten Node.js code according to the above explanation:

```javascript
const ciInfo = require('ci-info');

function checkCIEnvironment() {
  if (ciInfo.isCI) {
    console.log(`The name of the CI server is: ${ciInfo.name}`);
  } else {
    console.log('This program is not running on a CI server');
  }
}

checkCIEnvironment();
```

In this rewritten code, the core functionality remains unchanged, but it is encapsulated within a function `checkCIEnvironment` for better organization, demonstrating a common refactoring practice to enhance code readability and maintainability. The function is immediately invoked to perform the CI environment check.