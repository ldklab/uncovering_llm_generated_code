The given Node.js code is utilizing the `@aws-crypto/sha256-browser` package to compute the SHA-256 hash of a string. Here's a step-by-step explanation of how it works:

1. **Importing Sha256**: The `Sha256` class is imported from the `@aws-crypto/sha256-browser` package. This class provides functionality to compute SHA-256 hashes in a browser-compatible way.

2. **Creating a Hash Instance**: An instance of `Sha256` is created. This object will be used to compute the hash.

3. **Updating the Hash**: The `update` method is called on the hash instance with the string `'some data'`. This method adds the data to the hash computation.

4. **Computing the Digest**: The `digest` method is awaited, which completes the hash computation and returns a promise that resolves to the hash digest of the input data.

Here's a possible rewrite of the code based on the explained functionality:

```javascript
import { Sha256 } from '@aws-crypto/sha256-browser';

// Create a new SHA-256 hash instance
const hash = new Sha256();

// Update the hash with the data to be hashed
hash.update('some data');

// Await the promise for the digest to get the hash result
const result = await hash.digest();
```