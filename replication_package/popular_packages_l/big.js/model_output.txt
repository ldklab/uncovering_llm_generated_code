The `big.js` library is a JavaScript library designed to handle arbitrary-precision decimal arithmetic with a simple API. It is optimized for performance and minimal footprint, being faster, smaller, and easier to use than JavaScript versions of Javaâ€™s `BigDecimal`. It provides functionality to handle decimal numbers with precision beyond the native floating-point capabilities of JavaScript. Key features include:

- **Immutable Objects**: Once a Big number has been created, it cannot be changed. This is typical for library-based number systems to prevent unexpected results in calculations.
  
- **Creation**: A Big number can be created from a JavaScript number, string, or another Big number. It can take in decimal numbers in normal or scientific notation.
  
- **Strict Mode**: Disallows creating Big numbers from primitive numbers for predictable precision, raising errors if attempted.

- **Arithmetic Methods**: Offers methods such as `.plus()`, `.minus()`, `.times()`, `.div()`, and more, which can be chained for complex expressions. Division (`div`), square root (`sqrt`), and power with a negative exponent (`pow`) might involve rounding.

- **Output Formatting**: Provides output transformation methods like `.toExponential()`, `.toFixed()`, and `.toPrecision()` similar to JavaScript's Number type.

- **Configuration**: Allows configuring decimal places and rounding modes globally using `Big.DP` and `Big.RM`.

- **Internal Representation**: Numbers are stored as a sign, a coefficient (as an array of digits), and an exponent to represent floating-point decimals accurately.

Below is a basic implementation of a library with similar functionality using JavaScript:

```javascript
class Big {
  constructor(value) {
    if (Big.strict && (typeof value === 'number')) {
      throw new TypeError('[big.js] Invalid number');
    }
    this._value = typeof value === 'string' ? value : value.toString();
  }

  static strict = false;
  static DP = 20;
  static RM = 0; // 0: round down, 1: round half-up

  static roundHalfUp(x, dp) {
    const pow = Math.pow(10, dp);
    return Math.round(x * pow) / pow;
  }

  toNumber() {
    const n = Number(this._value);
    if (Big.strict && !Big._isPrecise(this._value, n)) {
      throw new Error('[big.js] Imprecise conversion');
    }
    return n;
  }

  plus(y) {
    return new Big(this.toNumber() + new Big(y).toNumber());
  }

  minus(y) {
    return new Big(this.toNumber() - new Big(y).toNumber());
  }

  times(y) {
    return new Big(this.toNumber() * new Big(y).toNumber());
  }

  div(y) {
    const quotient = this.toNumber() / new Big(y).toNumber();
    return new Big(Big.roundHalfUp(quotient, Big.DP));
  }

  eq(y) {
    return this.toNumber() === new Big(y).toNumber();
  }

  gt(y) {
    return this.toNumber() > new Big(y).toNumber();
  }

  sqrt() {
    const sqrtValue = Math.sqrt(this.toNumber());
    return new Big(Big.roundHalfUp(sqrtValue, Big.DP));
  }

  pow(exp) {
    const powValue = Math.pow(this.toNumber(), exp);
    return new Big(Big.roundHalfUp(powValue, Big.DP));
  }

  toFixed(dp) {
    return this.toNumber().toFixed(dp);
  }

  toExponential(dp) {
    return this.toNumber().toExponential(dp);
  }

  toPrecision(dp) {
    return this.toNumber().toPrecision(dp);
  }
  
  get c() {
    return Array.from(this._value.replace('.', ''))
                .map(digit => parseInt(digit, 10));
  }

  get e() {
    return this._value.includes('.') ? this._value.indexOf('.') - 1 : this._value.length - 1;
  }

  get s() {
    return this._value.startsWith('-') ? -1 : 1;
  }

  static _isPrecise(initialValue, convertedValue) {
    const delta = 1e-15; // Precision tolerance
    return Math.abs(Number(initialValue) - convertedValue) < delta;
  }
}

module.exports = Big;
```

This code aims to capture the essence of `big.js` without implementing all features in full detail. It offers basic capabilities for constructing Big numbers, performing arithmetic operations, and configuring precision, with placeholder methods for rounding and error checking. More comprehensive tests, error handling, and corner cases would be needed for production-level code.