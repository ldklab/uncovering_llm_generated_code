The functionality of the given Node.js code is to provide a universal `queueMicrotask` function. This function schedules a microtask in environments where it's supported. A microtask is a short piece of JavaScript code associated with its resolving promise that executes after any currently executing script and before any other event handling or rendering. The code checks if the platform supports `queueMicrotask`. If the `queueMicrotask` function is available (for both browser and Node.js environments), it uses that to schedule the microtask. If `queueMicrotask` is not available, it falls back to using a resolved Promise, which simulates scheduling a microtask because then-callbacks of promises are also executed as microtasks.

Here's a rewritten version of the code:

```javascript
// queue-microtask.js

function queueMicrotask(fn) {
  const hasWindowQueueMicrotask = typeof window !== 'undefined' && typeof window.queueMicrotask === 'function';
  const hasGlobalQueueMicrotask = typeof global !== 'undefined' && typeof global.queueMicrotask === 'function';

  if (hasWindowQueueMicrotask) {
    // Use window.queueMicrotask if available
    window.queueMicrotask(fn);
  } else if (hasGlobalQueueMicrotask) {
    // Use global.queueMicrotask if available in Node.js
    global.queueMicrotask(fn);
  } else {
    // Fallback using Promise if queueMicrotask is not available
    Promise.resolve().then(fn);
  }
}

module.exports = queueMicrotask;
```