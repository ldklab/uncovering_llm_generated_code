The Node.js code defines a function named `queueMicrotask` that schedules the provided function (`fn`) to be executed in the microtask queue. This is typically used for running tasks that should occur after the current operation, but before the next event loop cycle. Here's what the code does, step by step:

1. Checks if the running environment is a browser with a `window` object and if the `queueMicrotask` function is available within this environment. If both conditions are met, it uses `window.queueMicrotask(fn)` to queue the task.

2. If the environment is Node.js, it checks for a `global` object and the availability of a `queueMicrotask` function on it. If present, it uses `global.queueMicrotask(fn)` to queue the task.

3. If neither of the above implementations are available, it falls back to using a resolved `Promise`, chaining `then(fn)` to add the function to the microtask queue.

Finally, the `queueMicrotask` function is exported as a module for use in other files.

Here is the rewritten version of this code:

```javascript
// queue-microtask.js

function queueMicrotask(fn) {
  const hasWindowQueueMicrotask = typeof window !== 'undefined' && typeof window.queueMicrotask === 'function';
  const hasGlobalQueueMicrotask = typeof global !== 'undefined' && typeof global.queueMicrotask === 'function';

  if (hasWindowQueueMicrotask) {
    window.queueMicrotask(fn);
  } else if (hasGlobalQueueMicrotask) {
    global.queueMicrotask(fn);
  } else {
    Promise.resolve().then(fn);
  }
}

module.exports = queueMicrotask;
```