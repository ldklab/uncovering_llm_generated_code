```javascript
// whatwg-url.js

// Import necessary modules
const { URL, URLSearchParams } = require('url');

// Class that provides enhanced URL manipulation functionalities
class WhatwgURL {
  constructor(input, baseURL) {
    // Create a new URL instance
    this.urlInstance = new URL(input, baseURL);
  }

  // Static methods for various URL manipulations

  // Parse a URL string with optional base URL and return a URL instance
  static parseURL(input, options = {}) {
    try {
      const baseURL = options.baseURL ? new URL(options.baseURL) : undefined;
      return new URL(input, baseURL);
    } catch {
      return null;
    }
  }

  // Similarly implement basic URL parsing with optional base
  static basicURLParse(input, options = {}) {
    try {
      const baseURL = options.baseURL ? new URL(options.baseURL) : undefined;
      return new URL(input, baseURL);
    } catch {
      return null;
    }
  }

  // Serialize URL to a string, optionally excluding fragments
  static serializeURL(urlInstance, excludeFragment = false) {
    return urlInstance.toString({ fragment: !excludeFragment });
  }

  // Get the host part of a URL
  static serializeHost(urlInstance) {
    return new URL(urlInstance).host;
  }

  // Get the path component of a URL
  static serializePath(urlInstance) {
    return new URL(urlInstance).pathname;
  }

  // Convert an integer to a string
  static serializeInteger(number) {
    return number.toString();
  }

  // Obtain the origin (scheme + host + port) of a URL
  static serializeURLOrigin(urlInstance) {
    return new URL(urlInstance).origin;
  }

  // Set the username part of a URL and return the updated URL
  static setTheUsername(urlInstance, usernameString) {
    const url = new URL(urlInstance);
    url.username = usernameString;
    return url;
  }

  // Set the password part of a URL and return the updated URL
  static setThePassword(urlInstance, passwordString) {
    const url = new URL(urlInstance);
    url.password = passwordString;
    return url;
  }

  // Check if a URL has an opaque path, like single dot segments
  static hasAnOpaquePath(urlInstance) {
    const url = new URL(urlInstance);
    return url.pathname === '..' || url.pathname === '.';
  }

  // Determine if a URL cannot support username/password/port fields
  static cannotHaveAUsernamePasswordPort(urlInstance) {
    const url = new URL(urlInstance);
    return !url.username && !url.password && !url.port;
  }

  // Decode percent-encoded bytes to UTF-8 string
  static percentDecodeBytes(uint8Array) {
    const decoder = new TextDecoder('utf-8');
    return decoder.decode(uint8Array);
  }

  // Decode a percent-encoded string to normal string
  static percentDecodeString(string) {
    return decodeURIComponent(string);
  }
}

// Export the class and modules for external use
module.exports = {
  WhatwgURL,
  URL: WhatwgURL,
  URLSearchParams,
};

// Example usage of the WhatwgURL class
const myURL = new WhatwgURL('https://example.com');
console.log(WhatwgURL.serializeURL(myURL.urlInstance, true));
```